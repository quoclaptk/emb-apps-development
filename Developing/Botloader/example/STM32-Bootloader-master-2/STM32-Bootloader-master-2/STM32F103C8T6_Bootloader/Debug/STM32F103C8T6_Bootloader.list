
STM32F103C8T6_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc4  08004cc4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc4  08004cc4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc4  08004cc4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000180  08004e48  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001370  08004e48  00021370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a7f  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033fe  00000000  00000000  00035c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000773f  00000000  00000000  00039022  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b80  00000000  00000000  00040768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000dd0  00000000  00000000  000412e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00019dd1  00000000  00000000  000420b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000dc3d  00000000  00000000  0005be89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00085086  00000000  00000000  00069ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000eeb4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b48  00000000  00000000  000eebc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b50 	.word	0x08004b50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08004b50 	.word	0x08004b50

0800014c <readWord>:
uint32_t readWord(uint32_t address)
{
	uint32_t read_data;
	read_data = *(uint32_t*)(address);
	return read_data;
}
 800014c:	6800      	ldr	r0, [r0, #0]
 800014e:	4770      	bx	lr

08000150 <flashWord>:
{
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	b082      	sub	sp, #8
	if(flashStatus == Unlocked)
 8000154:	f240 33c0 	movw	r3, #960	; 0x3c0
 8000158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d14a      	bne.n	80001f8 <flashWord+0xa8>
 8000162:	4606      	mov	r6, r0
	  uint8_t flash_attempt = 0;
 8000164:	2500      	movs	r5, #0
 8000166:	e01c      	b.n	80001a2 <flashWord+0x52>
			  address = APP2_START + Flashed_offset;
 8000168:	f240 33c4 	movw	r3, #964	; 0x3c4
 800016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000170:	681c      	ldr	r4, [r3, #0]
 8000172:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000176:	f504 4428 	add.w	r4, r4, #43008	; 0xa800
		  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, dataToFlash);
 800017a:	4632      	mov	r2, r6
 800017c:	2300      	movs	r3, #0
 800017e:	4621      	mov	r1, r4
 8000180:	2002      	movs	r0, #2
 8000182:	f000 fdfe 	bl	8000d82 <HAL_FLASH_Program>
 8000186:	f88d 0007 	strb.w	r0, [sp, #7]
		  flash_attempt++;
 800018a:	3501      	adds	r5, #1
 800018c:	b2ed      	uxtb	r5, r5
	  }while(status != HAL_OK && flash_attempt < 10 && dataToFlash == readWord(address));
 800018e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000192:	b1bb      	cbz	r3, 80001c4 <flashWord+0x74>
 8000194:	2d09      	cmp	r5, #9
 8000196:	d815      	bhi.n	80001c4 <flashWord+0x74>
 8000198:	4620      	mov	r0, r4
 800019a:	f7ff ffd7 	bl	800014c <readWord>
 800019e:	42b0      	cmp	r0, r6
 80001a0:	d110      	bne.n	80001c4 <flashWord+0x74>
		  if(App == App1)
 80001a2:	f240 33c1 	movw	r3, #961	; 0x3c1
 80001a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d1db      	bne.n	8000168 <flashWord+0x18>
			  address = APP1_START + Flashed_offset;
 80001b0:	f240 33c4 	movw	r3, #964	; 0x3c4
 80001b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001b8:	681c      	ldr	r4, [r3, #0]
 80001ba:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 80001be:	f504 44a0 	add.w	r4, r4, #20480	; 0x5000
 80001c2:	e7da      	b.n	800017a <flashWord+0x2a>
	  if(status != HAL_OK)
 80001c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80001c8:	b13b      	cbz	r3, 80001da <flashWord+0x8a>
		  CDC_Transmit_FS((uint8_t*)&"Flashing Error!\n", strlen("Flashing Error!\n"));
 80001ca:	2110      	movs	r1, #16
 80001cc:	f644 307c 	movw	r0, #19324	; 0x4b7c
 80001d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001d4:	f004 fa7b 	bl	80046ce <CDC_Transmit_FS>
 80001d8:	e015      	b.n	8000206 <flashWord+0xb6>
		  Flashed_offset += 4;
 80001da:	f240 33c4 	movw	r3, #964	; 0x3c4
 80001de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	3204      	adds	r2, #4
 80001e6:	601a      	str	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)&"Flash: OK\n", strlen("Flash: OK\n"));
 80001e8:	210a      	movs	r1, #10
 80001ea:	f644 3090 	movw	r0, #19344	; 0x4b90
 80001ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001f2:	f004 fa6c 	bl	80046ce <CDC_Transmit_FS>
 80001f6:	e006      	b.n	8000206 <flashWord+0xb6>
	  CDC_Transmit_FS((uint8_t*)&"Error: Memory not unlocked nor erased!\n",
 80001f8:	2127      	movs	r1, #39	; 0x27
 80001fa:	f644 309c 	movw	r0, #19356	; 0x4b9c
 80001fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000202:	f004 fa64 	bl	80046ce <CDC_Transmit_FS>
}
 8000206:	b002      	add	sp, #8
 8000208:	bd70      	pop	{r4, r5, r6, pc}

0800020a <lockFlash>:

	flashStatus = Unlocked;
}

void lockFlash()
{
 800020a:	b508      	push	{r3, lr}
	/* Lock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Lock()!=HAL_OK)
 800020c:	e003      	b.n	8000216 <lockFlash+0xc>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 800020e:	f000 fd24 	bl	8000c5a <HAL_FLASH_Unlock>
 8000212:	2800      	cmp	r0, #0
 8000214:	d1fb      	bne.n	800020e <lockFlash+0x4>
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000216:	f000 fd40 	bl	8000c9a <HAL_FLASH_Lock>
 800021a:	2800      	cmp	r0, #0
 800021c:	d1f7      	bne.n	800020e <lockFlash+0x4>
 800021e:	e003      	b.n	8000228 <lockFlash+0x1e>

	/* Lock Access to option bytes sector */
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 8000220:	f000 fd45 	bl	8000cae <HAL_FLASH_OB_Unlock>
 8000224:	2800      	cmp	r0, #0
 8000226:	d1fb      	bne.n	8000220 <lockFlash+0x16>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 8000228:	f000 fd5b 	bl	8000ce2 <HAL_FLASH_OB_Lock>
 800022c:	2800      	cmp	r0, #0
 800022e:	d1f7      	bne.n	8000220 <lockFlash+0x16>

	flashStatus = Locked;
 8000230:	f240 33c0 	movw	r3, #960	; 0x3c0
 8000234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000238:	2203      	movs	r2, #3
 800023a:	701a      	strb	r2, [r3, #0]
}
 800023c:	bd08      	pop	{r3, pc}

0800023e <deinitEverything>:
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
}

void deinitEverything()
{
 800023e:	b508      	push	{r3, lr}
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8000240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000244:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000248:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800024c:	f000 ff8c 	bl	8001168 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin);
 8000250:	2108      	movs	r1, #8
 8000252:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000256:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800025a:	f000 ff85 	bl	8001168 <HAL_GPIO_DeInit>
	USBD_DeInit(&hUsbDeviceFS);
 800025e:	f240 30f0 	movw	r0, #1008	; 0x3f0
 8000262:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000266:	f003 fcb7 	bl	8003bd8 <USBD_DeInit>
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800026a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800026e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000272:	699a      	ldr	r2, [r3, #24]
 8000274:	f022 0210 	bic.w	r2, r2, #16
 8000278:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 800027a:	699a      	ldr	r2, [r3, #24]
 800027c:	f022 0220 	bic.w	r2, r2, #32
 8000280:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000282:	699a      	ldr	r2, [r3, #24]
 8000284:	f022 0208 	bic.w	r2, r2, #8
 8000288:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 800028a:	699a      	ldr	r2, [r3, #24]
 800028c:	f022 0204 	bic.w	r2, r2, #4
 8000290:	619a      	str	r2, [r3, #24]
	HAL_RCC_DeInit();
 8000292:	f001 ff17 	bl	80020c4 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000296:	f000 fb8d 	bl	80009b4 <HAL_DeInit>
	SysTick->CTRL = 0;
 800029a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800029e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80002a6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80002a8:	609a      	str	r2, [r3, #8]
}
 80002aa:	bd08      	pop	{r3, pc}

080002ac <jumpToApp>:
{
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4604      	mov	r4, r0
	deinitEverything();
 80002b0:	f7ff ffc5 	bl	800023e <deinitEverything>
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 80002b4:	6823      	ldr	r3, [r4, #0]
 80002b6:	6862      	ldr	r2, [r4, #4]
 80002b8:	f383 8808 	msr	MSP, r3
 80002bc:	4710      	bx	r2
}
 80002be:	bd10      	pop	{r4, pc}

080002c0 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 80002c0:	b470      	push	{r4, r5, r6}
	 uint8_t comVAR=0, i;
	 for(i=0;i<length;i++)
 80002c2:	2300      	movs	r3, #0
	 uint8_t comVAR=0, i;
 80002c4:	461c      	mov	r4, r3
	 for(i=0;i<length;i++)
 80002c6:	e003      	b.n	80002d0 <string_compare+0x10>
	   	{
	   		  if(array1[i]==array2[i])
	   	  		  comVAR++;
 80002c8:	3401      	adds	r4, #1
 80002ca:	b2e4      	uxtb	r4, r4
	 for(i=0;i<length;i++)
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	b29d      	uxth	r5, r3
 80002d2:	4295      	cmp	r5, r2
 80002d4:	d205      	bcs.n	80002e2 <string_compare+0x22>
	   		  if(array1[i]==array2[i])
 80002d6:	5cc6      	ldrb	r6, [r0, r3]
 80002d8:	5ccd      	ldrb	r5, [r1, r3]
 80002da:	42ae      	cmp	r6, r5
 80002dc:	d0f4      	beq.n	80002c8 <string_compare+0x8>
	   	  	  else comVAR=0;
 80002de:	2400      	movs	r4, #0
 80002e0:	e7f4      	b.n	80002cc <string_compare+0xc>
	   	}
	 if (comVAR==length)
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	4294      	cmp	r4, r2
 80002e6:	d002      	beq.n	80002ee <string_compare+0x2e>
		 	return 1;
	 else 	return 0;
 80002e8:	2000      	movs	r0, #0
}
 80002ea:	bc70      	pop	{r4, r5, r6}
 80002ec:	4770      	bx	lr
		 	return 1;
 80002ee:	2001      	movs	r0, #1
 80002f0:	e7fb      	b.n	80002ea <string_compare+0x2a>

080002f2 <errorBlink>:

void errorBlink()
{
 80002f2:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80002fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000302:	f000 ffbb 	bl	800127c <HAL_GPIO_WritePin>
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000306:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800030a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000314:	4620      	mov	r0, r4
 8000316:	f000 ffb1 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800031a:	20c8      	movs	r0, #200	; 0xc8
 800031c:	f000 fba8 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	4620      	mov	r0, r4
 8000328:	f000 ffa8 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f000 fb9f 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000338:	4620      	mov	r0, r4
 800033a:	f000 ff9f 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800033e:	20c8      	movs	r0, #200	; 0xc8
 8000340:	f000 fb96 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	4620      	mov	r0, r4
 800034c:	f000 ff96 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000350:	20c8      	movs	r0, #200	; 0xc8
 8000352:	f000 fb8d 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035c:	4620      	mov	r0, r4
 800035e:	f000 ff8d 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000362:	20c8      	movs	r0, #200	; 0xc8
 8000364:	f000 fb84 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	4620      	mov	r0, r4
 8000370:	f000 ff84 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000378:	f000 fb7a 	bl	8000a70 <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000382:	4620      	mov	r0, r4
 8000384:	f000 ff7a 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8000388:	f44f 7048 	mov.w	r0, #800	; 0x320
 800038c:	f000 fb70 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000396:	4620      	mov	r0, r4
 8000398:	f000 ff70 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800039c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a0:	f000 fb66 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	4620      	mov	r0, r4
 80003ac:	f000 ff66 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(800);
 80003b0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80003b4:	f000 fb5c 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4620      	mov	r0, r4
 80003c0:	f000 ff5c 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80003c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c8:	f000 fb52 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4620      	mov	r0, r4
 80003d4:	f000 ff52 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(800);
 80003d8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80003dc:	f000 fb48 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4620      	mov	r0, r4
 80003e8:	f000 ff48 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80003ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f0:	f000 fb3e 	bl	8000a70 <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	4620      	mov	r0, r4
 80003fc:	f000 ff3e 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000400:	20c8      	movs	r0, #200	; 0xc8
 8000402:	f000 fb35 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	4620      	mov	r0, r4
 800040e:	f000 ff35 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000412:	20c8      	movs	r0, #200	; 0xc8
 8000414:	f000 fb2c 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4620      	mov	r0, r4
 8000420:	f000 ff2c 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000424:	20c8      	movs	r0, #200	; 0xc8
 8000426:	f000 fb23 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4620      	mov	r0, r4
 8000432:	f000 ff23 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000436:	20c8      	movs	r0, #200	; 0xc8
 8000438:	f000 fb1a 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	4620      	mov	r0, r4
 8000444:	f000 ff1a 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000448:	20c8      	movs	r0, #200	; 0xc8
 800044a:	f000 fb11 	bl	8000a70 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4620      	mov	r0, r4
 8000456:	f000 ff11 	bl	800127c <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800045a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800045e:	f000 fb07 	bl	8000a70 <HAL_Delay>
 8000462:	e750      	b.n	8000306 <errorBlink+0x14>

08000464 <bootloaderInit>:
{
 8000464:	b538      	push	{r3, r4, r5, lr}
	Flashed_offset = 0;
 8000466:	f240 33c4 	movw	r3, #964	; 0x3c4
 800046a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
	flashStatus = Unerased;
 8000472:	f240 33c0 	movw	r3, #960	; 0x3c0
 8000476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == GPIO_PIN_SET)
 800047c:	2104      	movs	r1, #4
 800047e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000482:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000486:	f000 fef2 	bl	800126e <HAL_GPIO_ReadPin>
 800048a:	2801      	cmp	r0, #1
 800048c:	d13c      	bne.n	8000508 <bootloaderInit+0xa4>
		for(uint8_t i=0; i<10; i++)
 800048e:	2400      	movs	r4, #0
 8000490:	e017      	b.n	80004c2 <bootloaderInit+0x5e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000492:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000496:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a0:	4628      	mov	r0, r5
 80004a2:	f000 feeb 	bl	800127c <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80004a6:	200a      	movs	r0, #10
 80004a8:	f000 fae2 	bl	8000a70 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	4628      	mov	r0, r5
 80004b4:	f000 fee2 	bl	800127c <HAL_GPIO_WritePin>
			HAL_Delay(90);
 80004b8:	205a      	movs	r0, #90	; 0x5a
 80004ba:	f000 fad9 	bl	8000a70 <HAL_Delay>
		for(uint8_t i=0; i<10; i++)
 80004be:	3401      	adds	r4, #1
 80004c0:	b2e4      	uxtb	r4, r4
 80004c2:	2c09      	cmp	r4, #9
 80004c4:	d9e5      	bls.n	8000492 <bootloaderInit+0x2e>
		HAL_GPIO_WritePin(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2108      	movs	r1, #8
 80004ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80004ce:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80004d2:	f000 fed3 	bl	800127c <HAL_GPIO_WritePin>
		bootloaderMode = FlashMode;
 80004d6:	2401      	movs	r4, #1
	if(HAL_GPIO_ReadPin(App_GPIO_Port, App_Pin) == GPIO_PIN_RESET)
 80004d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004dc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80004e0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80004e4:	f000 fec3 	bl	800126e <HAL_GPIO_ReadPin>
 80004e8:	b9c0      	cbnz	r0, 800051c <bootloaderInit+0xb8>
		App = App1;
 80004ea:	f240 33c1 	movw	r3, #961	; 0x3c1
 80004ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	if(bootloaderMode == JumpMode)
 80004f6:	bba4      	cbnz	r4, 8000562 <bootloaderInit+0xfe>
		if(App == App1)
 80004f8:	f240 33c1 	movw	r3, #961	; 0x3c1
 80004fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b31b      	cbz	r3, 800054c <bootloaderInit+0xe8>
			uint8_t emptyCellCount = 0;
 8000504:	4625      	mov	r5, r4
 8000506:	e031      	b.n	800056c <bootloaderInit+0x108>
		HAL_GPIO_WritePin(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000510:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000514:	f000 feb2 	bl	800127c <HAL_GPIO_WritePin>
		bootloaderMode = JumpMode;
 8000518:	2400      	movs	r4, #0
 800051a:	e7dd      	b.n	80004d8 <bootloaderInit+0x74>
		App = App2;
 800051c:	f240 33c1 	movw	r3, #961	; 0x3c1
 8000520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e7e5      	b.n	80004f6 <bootloaderInit+0x92>
			for(uint8_t i=0; i<10; i++)
 800052a:	3401      	adds	r4, #1
 800052c:	b2e4      	uxtb	r4, r4
 800052e:	2c09      	cmp	r4, #9
 8000530:	d80f      	bhi.n	8000552 <bootloaderInit+0xee>
				if(readWord(APP1_START + (i*4)) == -1)
 8000532:	f104 7000 	add.w	r0, r4, #33554432	; 0x2000000
 8000536:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
 800053a:	0080      	lsls	r0, r0, #2
 800053c:	f7ff fe06 	bl	800014c <readWord>
 8000540:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000544:	d1f1      	bne.n	800052a <bootloaderInit+0xc6>
					emptyCellCount++;
 8000546:	3501      	adds	r5, #1
 8000548:	b2ed      	uxtb	r5, r5
 800054a:	e7ee      	b.n	800052a <bootloaderInit+0xc6>
			for(uint8_t i=0; i<10; i++)
 800054c:	2400      	movs	r4, #0
			uint8_t emptyCellCount = 0;
 800054e:	4625      	mov	r5, r4
 8000550:	e7ed      	b.n	800052e <bootloaderInit+0xca>
			if(emptyCellCount != 10)
 8000552:	2d0a      	cmp	r5, #10
 8000554:	d006      	beq.n	8000564 <bootloaderInit+0x100>
				jumpToApp(APP1_START);
 8000556:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800055a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800055e:	f7ff fea5 	bl	80002ac <jumpToApp>
}
 8000562:	bd38      	pop	{r3, r4, r5, pc}
				errorBlink();
 8000564:	f7ff fec5 	bl	80002f2 <errorBlink>
			for(uint8_t i=0; i<10; i++)
 8000568:	3401      	adds	r4, #1
 800056a:	b2e4      	uxtb	r4, r4
 800056c:	2c09      	cmp	r4, #9
 800056e:	d80c      	bhi.n	800058a <bootloaderInit+0x126>
				if(readWord(APP2_START + (i*4)) == -1)
 8000570:	f104 7000 	add.w	r0, r4, #33554432	; 0x2000000
 8000574:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 8000578:	0080      	lsls	r0, r0, #2
 800057a:	f7ff fde7 	bl	800014c <readWord>
 800057e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000582:	d1f1      	bne.n	8000568 <bootloaderInit+0x104>
					emptyCellCount++;
 8000584:	3501      	adds	r5, #1
 8000586:	b2ed      	uxtb	r5, r5
 8000588:	e7ee      	b.n	8000568 <bootloaderInit+0x104>
			if(emptyCellCount != 10)
 800058a:	2d0a      	cmp	r5, #10
 800058c:	d006      	beq.n	800059c <bootloaderInit+0x138>
				jumpToApp(APP2_START);
 800058e:	f44f 4028 	mov.w	r0, #43008	; 0xa800
 8000592:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000596:	f7ff fe89 	bl	80002ac <jumpToApp>
 800059a:	e7e2      	b.n	8000562 <bootloaderInit+0xfe>
				errorBlink();
 800059c:	f7ff fea9 	bl	80002f2 <errorBlink>

080005a0 <eraseMemory>:
{
 80005a0:	b500      	push	{lr}
 80005a2:	b087      	sub	sp, #28
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80005a4:	e003      	b.n	80005ae <eraseMemory+0xe>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 80005a6:	f000 fb78 	bl	8000c9a <HAL_FLASH_Lock>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d1fb      	bne.n	80005a6 <eraseMemory+0x6>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80005ae:	f000 fb54 	bl	8000c5a <HAL_FLASH_Unlock>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d1f7      	bne.n	80005a6 <eraseMemory+0x6>
 80005b6:	e003      	b.n	80005c0 <eraseMemory+0x20>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 80005b8:	f000 fb93 	bl	8000ce2 <HAL_FLASH_OB_Lock>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1fb      	bne.n	80005b8 <eraseMemory+0x18>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 80005c0:	f000 fb75 	bl	8000cae <HAL_FLASH_OB_Unlock>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d1f7      	bne.n	80005b8 <eraseMemory+0x18>
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005c8:	2300      	movs	r3, #0
 80005ca:	9302      	str	r3, [sp, #8]
	if(App == App1)
 80005cc:	f240 33c1 	movw	r3, #961	; 0x3c1
 80005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b96b      	cbnz	r3, 80005f4 <eraseMemory+0x54>
		EraseInitStruct.PageAddress = APP1_START;
 80005d8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80005dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005e0:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 80005e2:	2316      	movs	r3, #22
 80005e4:	9305      	str	r3, [sp, #20]
	status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80005e6:	a901      	add	r1, sp, #4
 80005e8:	a802      	add	r0, sp, #8
 80005ea:	f000 fc47 	bl	8000e7c <HAL_FLASHEx_Erase>
 80005ee:	f88d 0003 	strb.w	r0, [sp, #3]
	while(HAL_FLASH_Lock()!=HAL_OK)
 80005f2:	e009      	b.n	8000608 <eraseMemory+0x68>
		EraseInitStruct.PageAddress = APP2_START;
 80005f4:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80005f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005fc:	9304      	str	r3, [sp, #16]
 80005fe:	e7f0      	b.n	80005e2 <eraseMemory+0x42>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000600:	f000 fb2b 	bl	8000c5a <HAL_FLASH_Unlock>
 8000604:	2800      	cmp	r0, #0
 8000606:	d1fb      	bne.n	8000600 <eraseMemory+0x60>
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000608:	f000 fb47 	bl	8000c9a <HAL_FLASH_Lock>
 800060c:	2800      	cmp	r0, #0
 800060e:	d1f7      	bne.n	8000600 <eraseMemory+0x60>
 8000610:	e003      	b.n	800061a <eraseMemory+0x7a>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 8000612:	f000 fb4c 	bl	8000cae <HAL_FLASH_OB_Unlock>
 8000616:	2800      	cmp	r0, #0
 8000618:	d1fb      	bne.n	8000612 <eraseMemory+0x72>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 800061a:	f000 fb62 	bl	8000ce2 <HAL_FLASH_OB_Lock>
 800061e:	2800      	cmp	r0, #0
 8000620:	d1f7      	bne.n	8000612 <eraseMemory+0x72>
	if(status_erase != HAL_OK)
 8000622:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000626:	b973      	cbnz	r3, 8000646 <eraseMemory+0xa6>
	flashStatus = Erased;
 8000628:	f240 33c0 	movw	r3, #960	; 0x3c0
 800062c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
	Flashed_offset = 0;
 8000634:	f240 33c4 	movw	r3, #964	; 0x3c4
 8000638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	b007      	add	sp, #28
 8000642:	f85d fb04 	ldr.w	pc, [sp], #4
		errorBlink();
 8000646:	f7ff fe54 	bl	80002f2 <errorBlink>

0800064a <unlockFlashAndEraseMemory>:
{
 800064a:	b500      	push	{lr}
 800064c:	b087      	sub	sp, #28
	while(HAL_FLASH_Unlock()!=HAL_OK)
 800064e:	e003      	b.n	8000658 <unlockFlashAndEraseMemory+0xe>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 8000650:	f000 fb23 	bl	8000c9a <HAL_FLASH_Lock>
 8000654:	2800      	cmp	r0, #0
 8000656:	d1fb      	bne.n	8000650 <unlockFlashAndEraseMemory+0x6>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 8000658:	f000 faff 	bl	8000c5a <HAL_FLASH_Unlock>
 800065c:	2800      	cmp	r0, #0
 800065e:	d1f7      	bne.n	8000650 <unlockFlashAndEraseMemory+0x6>
 8000660:	e003      	b.n	800066a <unlockFlashAndEraseMemory+0x20>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 8000662:	f000 fb3e 	bl	8000ce2 <HAL_FLASH_OB_Lock>
 8000666:	2800      	cmp	r0, #0
 8000668:	d1fb      	bne.n	8000662 <unlockFlashAndEraseMemory+0x18>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 800066a:	f000 fb20 	bl	8000cae <HAL_FLASH_OB_Unlock>
 800066e:	2800      	cmp	r0, #0
 8000670:	d1f7      	bne.n	8000662 <unlockFlashAndEraseMemory+0x18>
	if(flashStatus != Erased)
 8000672:	f240 33c0 	movw	r3, #960	; 0x3c0
 8000676:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d017      	beq.n	80006b0 <unlockFlashAndEraseMemory+0x66>
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000680:	2300      	movs	r3, #0
 8000682:	9302      	str	r3, [sp, #8]
		if(App == App1)
 8000684:	f240 33c1 	movw	r3, #961	; 0x3c1
 8000688:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b9c3      	cbnz	r3, 80006c2 <unlockFlashAndEraseMemory+0x78>
			EraseInitStruct.PageAddress = APP1_START;
 8000690:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000694:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000698:	9304      	str	r3, [sp, #16]
		EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 800069a:	2316      	movs	r3, #22
 800069c:	9305      	str	r3, [sp, #20]
		status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800069e:	a901      	add	r1, sp, #4
 80006a0:	a802      	add	r0, sp, #8
 80006a2:	f000 fbeb 	bl	8000e7c <HAL_FLASHEx_Erase>
 80006a6:	f88d 0003 	strb.w	r0, [sp, #3]
		if(status_erase != HAL_OK)
 80006aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80006ae:	b973      	cbnz	r3, 80006ce <unlockFlashAndEraseMemory+0x84>
	flashStatus = Unlocked;
 80006b0:	f240 33c0 	movw	r3, #960	; 0x3c0
 80006b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
}
 80006bc:	b007      	add	sp, #28
 80006be:	f85d fb04 	ldr.w	pc, [sp], #4
			EraseInitStruct.PageAddress = APP2_START;
 80006c2:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80006c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80006ca:	9304      	str	r3, [sp, #16]
 80006cc:	e7e5      	b.n	800069a <unlockFlashAndEraseMemory+0x50>
			errorBlink();
 80006ce:	f7ff fe10 	bl	80002f2 <errorBlink>

080006d2 <messageHandler>:
	}
}

void messageHandler(uint8_t* Buf)
{
 80006d2:	b510      	push	{r4, lr}
 80006d4:	4604      	mov	r4, r0
	if(string_compare((char*)Buf, ERASE_FLASH_MEMORY, strlen(ERASE_FLASH_MEMORY))
 80006d6:	220b      	movs	r2, #11
 80006d8:	f644 31c4 	movw	r1, #19396	; 0x4bc4
 80006dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80006e0:	f7ff fdee 	bl	80002c0 <string_compare>
 80006e4:	b130      	cbz	r0, 80006f4 <messageHandler+0x22>
			&& flashStatus != Unlocked)
 80006e6:	f240 33c0 	movw	r3, #960	; 0x3c0
 80006ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d130      	bne.n	8000756 <messageHandler+0x84>
	{
		eraseMemory();
		CDC_Transmit_FS((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
	}else if(string_compare((char*)Buf, FLASHING_START, strlen(FLASHING_START)))
 80006f4:	220d      	movs	r2, #13
 80006f6:	f644 31e0 	movw	r1, #19424	; 0x4be0
 80006fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80006fe:	4620      	mov	r0, r4
 8000700:	f7ff fdde 	bl	80002c0 <string_compare>
 8000704:	bb88      	cbnz	r0, 800076a <messageHandler+0x98>
	{
		unlockFlashAndEraseMemory();
		CDC_Transmit_FS((uint8_t*)&"Flash: Unlocked!\n", strlen("Flash: Unlocked!\n"));
	}else if(string_compare((char*)Buf, FLASHING_FINISH, strlen(FLASHING_FINISH))
 8000706:	220e      	movs	r2, #14
 8000708:	f644 4104 	movw	r1, #19460	; 0x4c04
 800070c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff fdd5 	bl	80002c0 <string_compare>
 8000716:	b130      	cbz	r0, 8000726 <messageHandler+0x54>
			  && flashStatus == Unlocked)
 8000718:	f240 33c0 	movw	r3, #960	; 0x3c0
 800071c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d02b      	beq.n	800077e <messageHandler+0xac>
	{
		lockFlash();
		CDC_Transmit_FS((uint8_t*)&"Flash: Success!\n", strlen("Flash: Success!\n"));
	}else if(string_compare((char*)Buf, FLASHING_ABORT, strlen(FLASHING_ABORT))
 8000726:	220d      	movs	r2, #13
 8000728:	f644 4128 	movw	r1, #19496	; 0x4c28
 800072c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000730:	4620      	mov	r0, r4
 8000732:	f7ff fdc5 	bl	80002c0 <string_compare>
 8000736:	b130      	cbz	r0, 8000746 <messageHandler+0x74>
			  && flashStatus == Unlocked)
 8000738:	f240 33c0 	movw	r3, #960	; 0x3c0
 800073c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d025      	beq.n	8000792 <messageHandler+0xc0>
		lockFlash();
		eraseMemory();
		CDC_Transmit_FS((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
	}else
	{
		CDC_Transmit_FS((uint8_t*)&"Error: Incorrect step or unknown command!\n",
 8000746:	212a      	movs	r1, #42	; 0x2a
 8000748:	f644 404c 	movw	r0, #19532	; 0x4c4c
 800074c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000750:	f003 ffbd 	bl	80046ce <CDC_Transmit_FS>
			  strlen("Error: Incorrect step or unknown command!\n"));
	}
}
 8000754:	e012      	b.n	800077c <messageHandler+0xaa>
		eraseMemory();
 8000756:	f7ff ff23 	bl	80005a0 <eraseMemory>
		CDC_Transmit_FS((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
 800075a:	210f      	movs	r1, #15
 800075c:	f644 30d0 	movw	r0, #19408	; 0x4bd0
 8000760:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000764:	f003 ffb3 	bl	80046ce <CDC_Transmit_FS>
 8000768:	e008      	b.n	800077c <messageHandler+0xaa>
		unlockFlashAndEraseMemory();
 800076a:	f7ff ff6e 	bl	800064a <unlockFlashAndEraseMemory>
		CDC_Transmit_FS((uint8_t*)&"Flash: Unlocked!\n", strlen("Flash: Unlocked!\n"));
 800076e:	2111      	movs	r1, #17
 8000770:	f644 30f0 	movw	r0, #19440	; 0x4bf0
 8000774:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000778:	f003 ffa9 	bl	80046ce <CDC_Transmit_FS>
}
 800077c:	bd10      	pop	{r4, pc}
		lockFlash();
 800077e:	f7ff fd44 	bl	800020a <lockFlash>
		CDC_Transmit_FS((uint8_t*)&"Flash: Success!\n", strlen("Flash: Success!\n"));
 8000782:	2110      	movs	r1, #16
 8000784:	f644 4014 	movw	r0, #19476	; 0x4c14
 8000788:	f6c0 0000 	movt	r0, #2048	; 0x800
 800078c:	f003 ff9f 	bl	80046ce <CDC_Transmit_FS>
 8000790:	e7f4      	b.n	800077c <messageHandler+0xaa>
		lockFlash();
 8000792:	f7ff fd3a 	bl	800020a <lockFlash>
		eraseMemory();
 8000796:	f7ff ff03 	bl	80005a0 <eraseMemory>
		CDC_Transmit_FS((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
 800079a:	2110      	movs	r1, #16
 800079c:	f644 4038 	movw	r0, #19512	; 0x4c38
 80007a0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80007a4:	f003 ff93 	bl	80046ce <CDC_Transmit_FS>
 80007a8:	e7e8      	b.n	800077c <messageHandler+0xaa>

080007aa <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	2400      	movs	r4, #0
 80007b2:	9404      	str	r4, [sp, #16]
 80007b4:	9405      	str	r4, [sp, #20]
 80007b6:	9406      	str	r4, [sp, #24]
 80007b8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	f042 0210 	orr.w	r2, r2, #16
 80007c8:	619a      	str	r2, [r3, #24]
 80007ca:	699a      	ldr	r2, [r3, #24]
 80007cc:	f002 0210 	and.w	r2, r2, #16
 80007d0:	9200      	str	r2, [sp, #0]
 80007d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	699a      	ldr	r2, [r3, #24]
 80007d6:	f042 0220 	orr.w	r2, r2, #32
 80007da:	619a      	str	r2, [r3, #24]
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	f002 0220 	and.w	r2, r2, #32
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	f042 0208 	orr.w	r2, r2, #8
 80007ec:	619a      	str	r2, [r3, #24]
 80007ee:	699a      	ldr	r2, [r3, #24]
 80007f0:	f002 0208 	and.w	r2, r2, #8
 80007f4:	9202      	str	r2, [sp, #8]
 80007f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	f042 0204 	orr.w	r2, r2, #4
 80007fe:	619a      	str	r2, [r3, #24]
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	9303      	str	r3, [sp, #12]
 8000808:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800080a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800080e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000818:	4630      	mov	r0, r6
 800081a:	f000 fd2f 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin, GPIO_PIN_RESET);
 800081e:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8000822:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8000826:	4622      	mov	r2, r4
 8000828:	2108      	movs	r1, #8
 800082a:	4628      	mov	r0, r5
 800082c:	f000 fd26 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	f04f 0801 	mov.w	r8, #1
 800083a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2703      	movs	r7, #3
 8000842:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000844:	a904      	add	r1, sp, #16
 8000846:	4630      	mov	r0, r6
 8000848:	f000 fb76 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin App_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|App_Pin;
 800084c:	f640 0304 	movw	r3, #2052	; 0x804
 8000850:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	a904      	add	r1, sp, #16
 8000858:	4628      	mov	r0, r5
 800085a:	f000 fb6d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = USB_ENABLE_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(USB_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800086a:	a904      	add	r1, sp, #16
 800086c:	4628      	mov	r0, r5
 800086e:	f000 fb63 	bl	8000f38 <HAL_GPIO_Init>

}
 8000872:	b008      	add	sp, #32
 8000874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000878 <SystemClock_Config>:
{
 8000878:	b530      	push	{r4, r5, lr}
 800087a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087c:	2400      	movs	r4, #0
 800087e:	940c      	str	r4, [sp, #48]	; 0x30
 8000880:	940d      	str	r4, [sp, #52]	; 0x34
 8000882:	940f      	str	r4, [sp, #60]	; 0x3c
 8000884:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000886:	9405      	str	r4, [sp, #20]
 8000888:	9406      	str	r4, [sp, #24]
 800088a:	9407      	str	r4, [sp, #28]
 800088c:	9408      	str	r4, [sp, #32]
 800088e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	9401      	str	r4, [sp, #4]
 8000892:	9402      	str	r4, [sp, #8]
 8000894:	9403      	str	r4, [sp, #12]
 8000896:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2201      	movs	r2, #1
 800089a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2502      	movs	r5, #2
 80008a6:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	a80a      	add	r0, sp, #40	; 0x28
 80008b2:	f001 fc9c 	bl	80021ee <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c6:	4629      	mov	r1, r5
 80008c8:	a805      	add	r0, sp, #20
 80008ca:	f001 ff4a 	bl	8002762 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008ce:	2310      	movs	r3, #16
 80008d0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008d2:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	a801      	add	r0, sp, #4
 80008d6:	f002 f825 	bl	8002924 <HAL_RCCEx_PeriphCLKConfig>
}
 80008da:	b015      	add	sp, #84	; 0x54
 80008dc:	bd30      	pop	{r4, r5, pc}

080008de <main>:
{
 80008de:	b508      	push	{r3, lr}
  HAL_Init();
 80008e0:	f000 f8a0 	bl	8000a24 <HAL_Init>
  SystemClock_Config();
 80008e4:	f7ff ffc8 	bl	8000878 <SystemClock_Config>
  MX_GPIO_Init();
 80008e8:	f7ff ff5f 	bl	80007aa <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008ec:	f003 fe62 	bl	80045b4 <MX_USB_DEVICE_Init>
  bootloaderInit();
 80008f0:	f7ff fdb8 	bl	8000464 <bootloaderInit>
 80008f4:	e7fe      	b.n	80008f4 <main+0x16>

080008f6 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008f6:	4770      	bx	lr

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	f042 0201 	orr.w	r2, r2, #1
 8000908:	619a      	str	r2, [r3, #24]
 800090a:	699a      	ldr	r2, [r3, #24]
 800090c:	f002 0201 	and.w	r2, r2, #1
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000926:	2200      	movs	r2, #0
 8000928:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800092c:	6853      	ldr	r3, [r2, #4]
 800092e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000936:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	b002      	add	sp, #8
 800093a:	4770      	bx	lr

0800093c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800093c:	4770      	bx	lr

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	e7fe      	b.n	800093e <HardFault_Handler>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler>

08000946 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f87c 	bl	8000a4a <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bd08      	pop	{r3, pc}

08000954 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000956:	f241 0084 	movw	r0, #4228	; 0x1084
 800095a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800095e:	f001 f965 	bl	8001c2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000962:	bd08      	pop	{r3, pc}

08000964 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	4770      	bx	lr
	...

08000968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000968:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800096a:	e003      	b.n	8000974 <LoopCopyDataInit>

0800096c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800096e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000970:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000972:	3104      	adds	r1, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000978:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800097c:	d3f6      	bcc.n	800096c <CopyDataInit>
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000980:	e002      	b.n	8000988 <LoopFillZerobss>

08000982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000984:	f842 3b04 	str.w	r3, [r2], #4

08000988 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800098a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800098c:	d3f9      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098e:	f7ff ffe9 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f004 f8b9 	bl	8004b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff ffa2 	bl	80008de <main>
  bx lr
 800099a:	4770      	bx	lr
  ldr r3, =_sidata
 800099c:	08004ccc 	.word	0x08004ccc
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009a4:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80009a8:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 80009ac:	20001370 	.word	0x20001370

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>

080009b2 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80009b2:	4770      	bx	lr

080009b4 <HAL_DeInit>:
{
 80009b4:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009be:	f04f 32ff 	mov.w	r2, #4294967295
 80009c2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80009c4:	2400      	movs	r4, #0
 80009c6:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 80009c8:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80009ca:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 80009cc:	f7ff fff1 	bl	80009b2 <HAL_MspDeInit>
}
 80009d0:	4620      	mov	r0, r4
 80009d2:	bd10      	pop	{r4, pc}

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	f240 0304 	movw	r3, #4
 80009dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009e0:	7818      	ldrb	r0, [r3, #0]
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80009ea:	f240 0200 	movw	r2, #0
 80009ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80009f2:	6810      	ldr	r0, [r2, #0]
 80009f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80009f8:	f000 f8b8 	bl	8000b6c <HAL_SYSTICK_Config>
 80009fc:	b980      	cbnz	r0, 8000a20 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	2c0f      	cmp	r4, #15
 8000a00:	d901      	bls.n	8000a06 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a02:	2001      	movs	r0, #1
 8000a04:	e00d      	b.n	8000a22 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a06:	2200      	movs	r2, #0
 8000a08:	4621      	mov	r1, r4
 8000a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0e:	f000 f856 	bl	8000abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a12:	f240 0308 	movw	r3, #8
 8000a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a1a:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e000      	b.n	8000a22 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8000a20:	2001      	movs	r0, #1
}
 8000a22:	bd10      	pop	{r4, pc}

08000a24 <HAL_Init>:
{
 8000a24:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	f042 0210 	orr.w	r2, r2, #16
 8000a34:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f82e 	bl	8000a98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ffc9 	bl	80009d4 <HAL_InitTick>
  HAL_MspInit();
 8000a42:	f7ff ff59 	bl	80008f8 <HAL_MspInit>
}
 8000a46:	2000      	movs	r0, #0
 8000a48:	bd08      	pop	{r3, pc}

08000a4a <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a4a:	f240 33c8 	movw	r3, #968	; 0x3c8
 8000a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	f240 0104 	movw	r1, #4
 8000a58:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000a5c:	780a      	ldrb	r2, [r1, #0]
 8000a5e:	4402      	add	r2, r0
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	4770      	bx	lr

08000a64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a64:	f240 33c8 	movw	r3, #968	; 0x3c8
 8000a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a6c:	6818      	ldr	r0, [r3, #0]
}
 8000a6e:	4770      	bx	lr

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fff6 	bl	8000a64 <HAL_GetTick>
 8000a78:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a7e:	d005      	beq.n	8000a8c <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a80:	f240 0304 	movw	r3, #4
 8000a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8c:	f7ff ffea 	bl	8000a64 <HAL_GetTick>
 8000a90:	1b40      	subs	r0, r0, r5
 8000a92:	42a0      	cmp	r0, r4
 8000a94:	d3fa      	bcc.n	8000a8c <HAL_Delay+0x1c>
  {
  }
}
 8000a96:	bd38      	pop	{r3, r4, r5, pc}

08000a98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a9c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000aa0:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aaa:	0200      	lsls	r0, r0, #8
 8000aac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000ab2:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000ab6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000aba:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000abc:	4770      	bx	lr

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000abe:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000ac4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ace:	f1c3 0407 	rsb	r4, r3, #7
 8000ad2:	2c04      	cmp	r4, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad8:	1d1d      	adds	r5, r3, #4
 8000ada:	2d06      	cmp	r5, #6
 8000adc:	d918      	bls.n	8000b10 <HAL_NVIC_SetPriority+0x52>
 8000ade:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8000ae4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ae8:	ea21 0104 	bic.w	r1, r1, r4
 8000aec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aee:	fa05 f303 	lsl.w	r3, r5, r3
 8000af2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000af8:	2800      	cmp	r0, #0
 8000afa:	db0b      	blt.n	8000b14 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	0109      	lsls	r1, r1, #4
 8000afe:	b2c9      	uxtb	r1, r1
 8000b00:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b04:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b08:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b0c:	bc30      	pop	{r4, r5}
 8000b0e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b10:	2300      	movs	r3, #0
 8000b12:	e7e5      	b.n	8000ae0 <HAL_NVIC_SetPriority+0x22>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	f000 000f 	and.w	r0, r0, #15
 8000b18:	0109      	lsls	r1, r1, #4
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8000b20:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b24:	4403      	add	r3, r0
 8000b26:	7619      	strb	r1, [r3, #24]
 8000b28:	e7f0      	b.n	8000b0c <HAL_NVIC_SetPriority+0x4e>

08000b2a <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	db0a      	blt.n	8000b44 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	f000 031f 	and.w	r3, r0, #31
 8000b32:	0940      	lsrs	r0, r0, #5
 8000b34:	2201      	movs	r2, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b3c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b40:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b44:	4770      	bx	lr

08000b46 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b46:	2800      	cmp	r0, #0
 8000b48:	db0f      	blt.n	8000b6a <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	f000 031f 	and.w	r3, r0, #31
 8000b4e:	0940      	lsrs	r0, r0, #5
 8000b50:	2201      	movs	r2, #1
 8000b52:	409a      	lsls	r2, r3
 8000b54:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b58:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b5c:	3020      	adds	r0, #32
 8000b5e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b66:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000b6a:	4770      	bx	lr

08000b6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b72:	d210      	bcs.n	8000b96 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b74:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000b78:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b7c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000b82:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000b86:	21f0      	movs	r1, #240	; 0xf0
 8000b88:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b98:	4770      	bx	lr

08000b9a <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b9a:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	f042 0201 	orr.w	r2, r2, #1
 8000bb4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000bb6:	8001      	strh	r1, [r0, #0]
}
 8000bb8:	4770      	bx	lr

08000bba <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	f013 0f10 	tst.w	r3, #16
 8000bc8:	d03c      	beq.n	8000c44 <FLASH_SetErrorCode+0x8a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000bca:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd2:	69da      	ldr	r2, [r3, #28]
 8000bd4:	f042 0202 	orr.w	r2, r2, #2
 8000bd8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000bda:	2210      	movs	r2, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f013 0f04 	tst.w	r3, #4
 8000bea:	d009      	beq.n	8000c00 <FLASH_SetErrorCode+0x46>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000bec:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf4:	69d9      	ldr	r1, [r3, #28]
 8000bf6:	f041 0101 	orr.w	r1, r1, #1
 8000bfa:	61d9      	str	r1, [r3, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000bfc:	f042 0204 	orr.w	r2, r2, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f013 0f01 	tst.w	r3, #1
 8000c0e:	d00f      	beq.n	8000c30 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000c10:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c18:	69d9      	ldr	r1, [r3, #28]
 8000c1a:	f041 0104 	orr.w	r1, r1, #4
 8000c1e:	61d9      	str	r1, [r3, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c28:	69d9      	ldr	r1, [r3, #28]
 8000c2a:	f021 0101 	bic.w	r1, r1, #1
 8000c2e:	61d9      	str	r1, [r3, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000c30:	f240 1301 	movw	r3, #257	; 0x101
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d007      	beq.n	8000c48 <FLASH_SetErrorCode+0x8e>
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c40:	60da      	str	r2, [r3, #12]
}  
 8000c42:	4770      	bx	lr
  uint32_t flags = 0U;
 8000c44:	2200      	movs	r2, #0
 8000c46:	e7c9      	b.n	8000bdc <FLASH_SetErrorCode+0x22>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c50:	69da      	ldr	r2, [r3, #28]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	61da      	str	r2, [r3, #28]
 8000c58:	4770      	bx	lr

08000c5a <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c68:	d015      	beq.n	8000c96 <HAL_FLASH_Unlock+0x3c>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c72:	f240 1223 	movw	r2, #291	; 0x123
 8000c76:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8000c7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c7c:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8000c80:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8000c84:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c8c:	d001      	beq.n	8000c92 <HAL_FLASH_Unlock+0x38>
      status = HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
}
 8000c90:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000c92:	2000      	movs	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	2000      	movs	r0, #0
 8000c98:	4770      	bx	lr

08000c9a <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ca8:	611a      	str	r2, [r3, #16]
}
 8000caa:	2000      	movs	r0, #0
 8000cac:	4770      	bx	lr

08000cae <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000cbc:	d10f      	bne.n	8000cde <HAL_FLASH_OB_Unlock+0x30>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cc6:	f240 1223 	movw	r2, #291	; 0x123
 8000cca:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8000cce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000cd0:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8000cd4:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8000cd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 8000cda:	2000      	movs	r0, #0
 8000cdc:	4770      	bx	lr
    return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
}
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cf0:	611a      	str	r2, [r3, #16]
}
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	4770      	bx	lr

08000cf6 <FLASH_WaitForLastOperation>:
{
 8000cf6:	b538      	push	{r3, r4, r5, lr}
 8000cf8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cfa:	f7ff feb3 	bl	8000a64 <HAL_GetTick>
 8000cfe:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	f013 0f01 	tst.w	r3, #1
 8000d0e:	d00a      	beq.n	8000d26 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 8000d10:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d14:	d0f4      	beq.n	8000d00 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d16:	b384      	cbz	r4, 8000d7a <FLASH_WaitForLastOperation+0x84>
 8000d18:	f7ff fea4 	bl	8000a64 <HAL_GetTick>
 8000d1c:	1b40      	subs	r0, r0, r5
 8000d1e:	42a0      	cmp	r0, r4
 8000d20:	d9ee      	bls.n	8000d00 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000d22:	2003      	movs	r0, #3
 8000d24:	e028      	b.n	8000d78 <FLASH_WaitForLastOperation+0x82>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f013 0f20 	tst.w	r3, #32
 8000d34:	d005      	beq.n	8000d42 <FLASH_WaitForLastOperation+0x4c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d3e:	2220      	movs	r2, #32
 8000d40:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f013 0f10 	tst.w	r3, #16
 8000d50:	d10f      	bne.n	8000d72 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d5a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d5c:	f013 0f01 	tst.w	r3, #1
 8000d60:	d107      	bne.n	8000d72 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d6a:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d6c:	f013 0f04 	tst.w	r3, #4
 8000d70:	d005      	beq.n	8000d7e <FLASH_WaitForLastOperation+0x88>
    FLASH_SetErrorCode();
 8000d72:	f7ff ff22 	bl	8000bba <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
}
 8000d78:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	e7fc      	b.n	8000d78 <FLASH_WaitForLastOperation+0x82>
  return HAL_OK;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e7fa      	b.n	8000d78 <FLASH_WaitForLastOperation+0x82>

08000d82 <HAL_FLASH_Program>:
{
 8000d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000d86:	f240 34d0 	movw	r4, #976	; 0x3d0
 8000d8a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000d8e:	7e24      	ldrb	r4, [r4, #24]
 8000d90:	2c01      	cmp	r4, #1
 8000d92:	d04a      	beq.n	8000e2a <HAL_FLASH_Program+0xa8>
 8000d94:	461e      	mov	r6, r3
 8000d96:	4690      	mov	r8, r2
 8000d98:	460f      	mov	r7, r1
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000da4:	2201      	movs	r2, #1
 8000da6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000da8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dac:	f7ff ffa3 	bl	8000cf6 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000db0:	4603      	mov	r3, r0
 8000db2:	bb88      	cbnz	r0, 8000e18 <HAL_FLASH_Program+0x96>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000db4:	2c01      	cmp	r4, #1
 8000db6:	d02c      	beq.n	8000e12 <HAL_FLASH_Program+0x90>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000db8:	2c02      	cmp	r4, #2
 8000dba:	d027      	beq.n	8000e0c <HAL_FLASH_Program+0x8a>
      nbiterations = 4U;
 8000dbc:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	d228      	bcs.n	8000e18 <HAL_FLASH_Program+0x96>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000dc6:	0121      	lsls	r1, r4, #4
 8000dc8:	f1c1 0220 	rsb	r2, r1, #32
 8000dcc:	f1a1 0320 	sub.w	r3, r1, #32
 8000dd0:	fa28 f101 	lsr.w	r1, r8, r1
 8000dd4:	fa06 f202 	lsl.w	r2, r6, r2
 8000dd8:	4311      	orrs	r1, r2
 8000dda:	fa26 f303 	lsr.w	r3, r6, r3
 8000dde:	4319      	orrs	r1, r3
 8000de0:	b289      	uxth	r1, r1
 8000de2:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000de6:	f7ff fed8 	bl	8000b9a <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dee:	f7ff ff82 	bl	8000cf6 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000df2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000df6:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8000dfa:	692b      	ldr	r3, [r5, #16]
 8000dfc:	f023 0301 	bic.w	r3, r3, #1
 8000e00:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 8000e02:	4603      	mov	r3, r0
 8000e04:	b940      	cbnz	r0, 8000e18 <HAL_FLASH_Program+0x96>
    for (index = 0U; index < nbiterations; index++)
 8000e06:	3401      	adds	r4, #1
 8000e08:	b2e4      	uxtb	r4, r4
 8000e0a:	e7da      	b.n	8000dc2 <HAL_FLASH_Program+0x40>
      nbiterations = 2U;
 8000e0c:	f04f 0902 	mov.w	r9, #2
 8000e10:	e7d6      	b.n	8000dc0 <HAL_FLASH_Program+0x3e>
      nbiterations = 1U;
 8000e12:	f04f 0901 	mov.w	r9, #1
 8000e16:	e7d3      	b.n	8000dc0 <HAL_FLASH_Program+0x3e>
  __HAL_UNLOCK(&pFlash);
 8000e18:	f240 32d0 	movw	r2, #976	; 0x3d0
 8000e1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e20:	2100      	movs	r1, #0
 8000e22:	7611      	strb	r1, [r2, #24]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e7fa      	b.n	8000e24 <HAL_FLASH_Program+0xa2>

08000e2e <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e2e:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	f042 0204 	orr.w	r2, r2, #4
 8000e48:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e50:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000e52:	4770      	bx	lr

08000e54 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e54:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	f042 0202 	orr.w	r2, r2, #2
 8000e6e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e70:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e78:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000e7c:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e84:	7e1b      	ldrb	r3, [r3, #24]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d053      	beq.n	8000f32 <HAL_FLASHEx_Erase+0xb6>
{
 8000e8a:	b570      	push	{r4, r5, r6, lr}
 8000e8c:	460e      	mov	r6, r1
 8000e8e:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000e90:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e98:	2201      	movs	r2, #1
 8000e9a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e9c:	6803      	ldr	r3, [r0, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d024      	beq.n	8000eec <HAL_FLASHEx_Erase+0x70>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea6:	f7ff ff26 	bl	8000cf6 <FLASH_WaitForLastOperation>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d138      	bne.n	8000f20 <HAL_FLASHEx_Erase+0xa4>
        *PageError = 0xFFFFFFFFU;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000eb4:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eb6:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000eb8:	68e1      	ldr	r1, [r4, #12]
 8000eba:	68a3      	ldr	r3, [r4, #8]
 8000ebc:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8000ec0:	42ab      	cmp	r3, r5
 8000ec2:	d92e      	bls.n	8000f22 <HAL_FLASHEx_Erase+0xa6>
          FLASH_PageErase(address);
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f7ff ffc5 	bl	8000e54 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ece:	f7ff ff12 	bl	8000cf6 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	f022 0202 	bic.w	r2, r2, #2
 8000ee0:	611a      	str	r2, [r3, #16]
          if (status != HAL_OK)
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	b9d0      	cbnz	r0, 8000f1c <HAL_FLASHEx_Erase+0xa0>
            address += FLASH_PAGE_SIZE)
 8000ee6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000eea:	e7e5      	b.n	8000eb8 <HAL_FLASHEx_Erase+0x3c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	f7ff ff01 	bl	8000cf6 <FLASH_WaitForLastOperation>
 8000ef4:	b108      	cbz	r0, 8000efa <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	e013      	b.n	8000f22 <HAL_FLASHEx_Erase+0xa6>
        FLASH_MassErase(FLASH_BANK_1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff ff97 	bl	8000e2e <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f04:	f7ff fef7 	bl	8000cf6 <FLASH_WaitForLastOperation>
 8000f08:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	f021 0104 	bic.w	r1, r1, #4
 8000f18:	6119      	str	r1, [r3, #16]
 8000f1a:	e002      	b.n	8000f22 <HAL_FLASHEx_Erase+0xa6>
            *PageError = address;
 8000f1c:	6035      	str	r5, [r6, #0]
            break;
 8000f1e:	e000      	b.n	8000f22 <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f20:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8000f22:	f240 33d0 	movw	r3, #976	; 0x3d0
 8000f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	7619      	strb	r1, [r3, #24]
}
 8000f2e:	4610      	mov	r0, r2
 8000f30:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000f32:	2202      	movs	r2, #2
}
 8000f34:	4610      	mov	r0, r2
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b4f0      	push	{r4, r5, r6, r7}
 8000f3a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f3c:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8000f3e:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f40:	e0cd      	b.n	80010de <HAL_GPIO_Init+0x1a6>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d077      	beq.n	8001036 <HAL_GPIO_Init+0xfe>
 8000f46:	2d01      	cmp	r5, #1
 8000f48:	d100      	bne.n	8000f4c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f4a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f4c:	2bff      	cmp	r3, #255	; 0xff
 8000f4e:	f200 8086 	bhi.w	800105e <HAL_GPIO_Init+0x126>
 8000f52:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f54:	2bff      	cmp	r3, #255	; 0xff
 8000f56:	f200 8085 	bhi.w	8001064 <HAL_GPIO_Init+0x12c>
 8000f5a:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f5c:	f8dc 4000 	ldr.w	r4, [ip]
 8000f60:	270f      	movs	r7, #15
 8000f62:	40af      	lsls	r7, r5
 8000f64:	ea24 0407 	bic.w	r4, r4, r7
 8000f68:	fa06 f505 	lsl.w	r5, r6, r5
 8000f6c:	432c      	orrs	r4, r5
 8000f6e:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f72:	684c      	ldr	r4, [r1, #4]
 8000f74:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000f78:	f000 80b0 	beq.w	80010dc <HAL_GPIO_Init+0x1a4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000f80:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000f84:	69a5      	ldr	r5, [r4, #24]
 8000f86:	f045 0501 	orr.w	r5, r5, #1
 8000f8a:	61a5      	str	r5, [r4, #24]
 8000f8c:	69a4      	ldr	r4, [r4, #24]
 8000f8e:	f004 0401 	and.w	r4, r4, #1
 8000f92:	9401      	str	r4, [sp, #4]
 8000f94:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000f96:	0895      	lsrs	r5, r2, #2
 8000f98:	2400      	movs	r4, #0
 8000f9a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000f9e:	1caf      	adds	r7, r5, #2
 8000fa0:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa4:	f002 0703 	and.w	r7, r2, #3
 8000fa8:	00bf      	lsls	r7, r7, #2
 8000faa:	f04f 0c0f 	mov.w	ip, #15
 8000fae:	fa0c fc07 	lsl.w	ip, ip, r7
 8000fb2:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb6:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000fba:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000fbe:	42a0      	cmp	r0, r4
 8000fc0:	d056      	beq.n	8001070 <HAL_GPIO_Init+0x138>
 8000fc2:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8000fc6:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000fca:	42a0      	cmp	r0, r4
 8000fcc:	f000 80a1 	beq.w	8001112 <HAL_GPIO_Init+0x1da>
 8000fd0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000fd4:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000fd8:	42a0      	cmp	r0, r4
 8000fda:	f000 809c 	beq.w	8001116 <HAL_GPIO_Init+0x1de>
 8000fde:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 8000fe2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000fe6:	42a0      	cmp	r0, r4
 8000fe8:	d040      	beq.n	800106c <HAL_GPIO_Init+0x134>
 8000fea:	2404      	movs	r4, #4
 8000fec:	e041      	b.n	8001072 <HAL_GPIO_Init+0x13a>
      switch (GPIO_Init->Mode)
 8000fee:	2700      	movs	r7, #0
 8000ff0:	f2c1 0721 	movt	r7, #4129	; 0x1021
 8000ff4:	42bd      	cmp	r5, r7
 8000ff6:	d01e      	beq.n	8001036 <HAL_GPIO_Init+0xfe>
 8000ff8:	2700      	movs	r7, #0
 8000ffa:	f2c1 0721 	movt	r7, #4129	; 0x1021
 8000ffe:	42bd      	cmp	r5, r7
 8001000:	d90f      	bls.n	8001022 <HAL_GPIO_Init+0xea>
 8001002:	2700      	movs	r7, #0
 8001004:	f2c1 0731 	movt	r7, #4145	; 0x1031
 8001008:	42bd      	cmp	r5, r7
 800100a:	d014      	beq.n	8001036 <HAL_GPIO_Init+0xfe>
 800100c:	2700      	movs	r7, #0
 800100e:	f2c1 0732 	movt	r7, #4146	; 0x1032
 8001012:	42bd      	cmp	r5, r7
 8001014:	d00f      	beq.n	8001036 <HAL_GPIO_Init+0xfe>
 8001016:	2700      	movs	r7, #0
 8001018:	f2c1 0722 	movt	r7, #4130	; 0x1022
 800101c:	42bd      	cmp	r5, r7
 800101e:	d195      	bne.n	8000f4c <HAL_GPIO_Init+0x14>
 8001020:	e009      	b.n	8001036 <HAL_GPIO_Init+0xfe>
 8001022:	2700      	movs	r7, #0
 8001024:	f2c1 0711 	movt	r7, #4113	; 0x1011
 8001028:	42bd      	cmp	r5, r7
 800102a:	d004      	beq.n	8001036 <HAL_GPIO_Init+0xfe>
 800102c:	2700      	movs	r7, #0
 800102e:	f2c1 0712 	movt	r7, #4114	; 0x1012
 8001032:	42bd      	cmp	r5, r7
 8001034:	d18a      	bne.n	8000f4c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	688d      	ldr	r5, [r1, #8]
 8001038:	b17d      	cbz	r5, 800105a <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800103a:	2d01      	cmp	r5, #1
 800103c:	d008      	beq.n	8001050 <HAL_GPIO_Init+0x118>
            GPIOx->BRR = ioposition;
 800103e:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001040:	2608      	movs	r6, #8
 8001042:	e783      	b.n	8000f4c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001044:	68ce      	ldr	r6, [r1, #12]
 8001046:	3608      	adds	r6, #8
          break;
 8001048:	e780      	b.n	8000f4c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800104a:	68ce      	ldr	r6, [r1, #12]
 800104c:	360c      	adds	r6, #12
          break;
 800104e:	e77d      	b.n	8000f4c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001050:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001052:	2608      	movs	r6, #8
 8001054:	e77a      	b.n	8000f4c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001056:	2600      	movs	r6, #0
 8001058:	e778      	b.n	8000f4c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800105a:	2604      	movs	r6, #4
 800105c:	e776      	b.n	8000f4c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800105e:	f100 0c04 	add.w	ip, r0, #4
 8001062:	e777      	b.n	8000f54 <HAL_GPIO_Init+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001064:	f1a2 0508 	sub.w	r5, r2, #8
 8001068:	00ad      	lsls	r5, r5, #2
 800106a:	e777      	b.n	8000f5c <HAL_GPIO_Init+0x24>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800106c:	2403      	movs	r4, #3
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x13a>
 8001070:	2400      	movs	r4, #0
 8001072:	40bc      	lsls	r4, r7
 8001074:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001078:	2700      	movs	r7, #0
 800107a:	f2c4 0701 	movt	r7, #16385	; 0x4001
 800107e:	3502      	adds	r5, #2
 8001080:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	684c      	ldr	r4, [r1, #4]
 8001086:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800108a:	d046      	beq.n	800111a <HAL_GPIO_Init+0x1e2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800108c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001090:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001094:	6825      	ldr	r5, [r4, #0]
 8001096:	431d      	orrs	r5, r3
 8001098:	6025      	str	r5, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109a:	684c      	ldr	r4, [r1, #4]
 800109c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80010a0:	d044      	beq.n	800112c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010a6:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80010aa:	6865      	ldr	r5, [r4, #4]
 80010ac:	431d      	orrs	r5, r3
 80010ae:	6065      	str	r5, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b0:	684c      	ldr	r4, [r1, #4]
 80010b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80010b6:	d042      	beq.n	800113e <HAL_GPIO_Init+0x206>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010bc:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80010c0:	68a5      	ldr	r5, [r4, #8]
 80010c2:	431d      	orrs	r5, r3
 80010c4:	60a5      	str	r5, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c6:	684c      	ldr	r4, [r1, #4]
 80010c8:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80010cc:	d040      	beq.n	8001150 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010d2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80010d6:	68e5      	ldr	r5, [r4, #12]
 80010d8:	432b      	orrs	r3, r5
 80010da:	60e3      	str	r3, [r4, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80010dc:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	680b      	ldr	r3, [r1, #0]
 80010e0:	fa33 f402 	lsrs.w	r4, r3, r2
 80010e4:	d03d      	beq.n	8001162 <HAL_GPIO_Init+0x22a>
    ioposition = (0x01uL << position);
 80010e6:	2401      	movs	r4, #1
 80010e8:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 80010ec:	429c      	cmp	r4, r3
 80010ee:	d1f5      	bne.n	80010dc <HAL_GPIO_Init+0x1a4>
      switch (GPIO_Init->Mode)
 80010f0:	684d      	ldr	r5, [r1, #4]
 80010f2:	2d12      	cmp	r5, #18
 80010f4:	d0a9      	beq.n	800104a <HAL_GPIO_Init+0x112>
 80010f6:	f63f af7a 	bhi.w	8000fee <HAL_GPIO_Init+0xb6>
 80010fa:	2d02      	cmp	r5, #2
 80010fc:	d0a2      	beq.n	8001044 <HAL_GPIO_Init+0x10c>
 80010fe:	f67f af20 	bls.w	8000f42 <HAL_GPIO_Init+0xa>
 8001102:	2d03      	cmp	r5, #3
 8001104:	d0a7      	beq.n	8001056 <HAL_GPIO_Init+0x11e>
 8001106:	2d11      	cmp	r5, #17
 8001108:	f47f af20 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800110c:	68ce      	ldr	r6, [r1, #12]
 800110e:	3604      	adds	r6, #4
          break;
 8001110:	e71c      	b.n	8000f4c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001112:	2401      	movs	r4, #1
 8001114:	e7ad      	b.n	8001072 <HAL_GPIO_Init+0x13a>
 8001116:	2402      	movs	r4, #2
 8001118:	e7ab      	b.n	8001072 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800111a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800111e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001122:	6825      	ldr	r5, [r4, #0]
 8001124:	ea25 0503 	bic.w	r5, r5, r3
 8001128:	6025      	str	r5, [r4, #0]
 800112a:	e7b6      	b.n	800109a <HAL_GPIO_Init+0x162>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001130:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001134:	6865      	ldr	r5, [r4, #4]
 8001136:	ea25 0503 	bic.w	r5, r5, r3
 800113a:	6065      	str	r5, [r4, #4]
 800113c:	e7b8      	b.n	80010b0 <HAL_GPIO_Init+0x178>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001142:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001146:	68a5      	ldr	r5, [r4, #8]
 8001148:	ea25 0503 	bic.w	r5, r5, r3
 800114c:	60a5      	str	r5, [r4, #8]
 800114e:	e7ba      	b.n	80010c6 <HAL_GPIO_Init+0x18e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001150:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001154:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001158:	68e5      	ldr	r5, [r4, #12]
 800115a:	ea25 0303 	bic.w	r3, r5, r3
 800115e:	60e3      	str	r3, [r4, #12]
 8001160:	e7bc      	b.n	80010dc <HAL_GPIO_Init+0x1a4>
  }
}
 8001162:	b002      	add	sp, #8
 8001164:	bcf0      	pop	{r4, r5, r6, r7}
 8001166:	4770      	bx	lr

08001168 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001168:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800116a:	e076      	b.n	800125a <HAL_GPIO_DeInit+0xf2>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800116c:	2603      	movs	r6, #3
 800116e:	e000      	b.n	8001172 <HAL_GPIO_DeInit+0xa>
 8001170:	2600      	movs	r6, #0
 8001172:	fa06 f404 	lsl.w	r4, r6, r4
 8001176:	42ac      	cmp	r4, r5
 8001178:	d049      	beq.n	800120e <HAL_GPIO_DeInit+0xa6>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d863      	bhi.n	8001246 <HAL_GPIO_DeInit+0xde>
 800117e:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001180:	2bff      	cmp	r3, #255	; 0xff
 8001182:	d863      	bhi.n	800124c <HAL_GPIO_DeInit+0xe4>
 8001184:	0097      	lsls	r7, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001186:	f8dc 4000 	ldr.w	r4, [ip]
 800118a:	260f      	movs	r6, #15
 800118c:	40be      	lsls	r6, r7
 800118e:	ea24 0406 	bic.w	r4, r4, r6
 8001192:	2504      	movs	r5, #4
 8001194:	40bd      	lsls	r5, r7
 8001196:	432c      	orrs	r4, r5
 8001198:	f8cc 4000 	str.w	r4, [ip]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800119c:	68c4      	ldr	r4, [r0, #12]
 800119e:	ea24 0303 	bic.w	r3, r4, r3
 80011a2:	60c3      	str	r3, [r0, #12]
    }

    position++;
 80011a4:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 80011a6:	fa31 f302 	lsrs.w	r3, r1, r2
 80011aa:	d053      	beq.n	8001254 <HAL_GPIO_DeInit+0xec>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011ac:	2301      	movs	r3, #1
 80011ae:	4093      	lsls	r3, r2
    if (iocurrent)
 80011b0:	400b      	ands	r3, r1
 80011b2:	d0f7      	beq.n	80011a4 <HAL_GPIO_DeInit+0x3c>
      tmp = AFIO->EXTICR[position >> 2u];
 80011b4:	0897      	lsrs	r7, r2, #2
 80011b6:	2400      	movs	r4, #0
 80011b8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80011bc:	1cbd      	adds	r5, r7, #2
 80011be:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80011c2:	f002 0403 	and.w	r4, r2, #3
 80011c6:	00a4      	lsls	r4, r4, #2
 80011c8:	260f      	movs	r6, #15
 80011ca:	fa06 fc04 	lsl.w	ip, r6, r4
 80011ce:	ea0c 0505 	and.w	r5, ip, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80011d2:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80011d6:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80011da:	42b0      	cmp	r0, r6
 80011dc:	d0c8      	beq.n	8001170 <HAL_GPIO_DeInit+0x8>
 80011de:	f44f 6640 	mov.w	r6, #3072	; 0xc00
 80011e2:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80011e6:	42b0      	cmp	r0, r6
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_DeInit+0x9e>
 80011ea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80011ee:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80011f2:	42b0      	cmp	r0, r6
 80011f4:	d009      	beq.n	800120a <HAL_GPIO_DeInit+0xa2>
 80011f6:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 80011fa:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80011fe:	42b0      	cmp	r0, r6
 8001200:	d0b4      	beq.n	800116c <HAL_GPIO_DeInit+0x4>
 8001202:	2604      	movs	r6, #4
 8001204:	e7b5      	b.n	8001172 <HAL_GPIO_DeInit+0xa>
 8001206:	2601      	movs	r6, #1
 8001208:	e7b3      	b.n	8001172 <HAL_GPIO_DeInit+0xa>
 800120a:	2602      	movs	r6, #2
 800120c:	e7b1      	b.n	8001172 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800120e:	2500      	movs	r5, #0
 8001210:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8001214:	1cbc      	adds	r4, r7, #2
 8001216:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 800121a:	ea26 060c 	bic.w	r6, r6, ip
 800121e:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001222:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001226:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800122a:	6826      	ldr	r6, [r4, #0]
 800122c:	43dd      	mvns	r5, r3
 800122e:	402e      	ands	r6, r5
 8001230:	6026      	str	r6, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001232:	6866      	ldr	r6, [r4, #4]
 8001234:	402e      	ands	r6, r5
 8001236:	6066      	str	r6, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001238:	68a6      	ldr	r6, [r4, #8]
 800123a:	402e      	ands	r6, r5
 800123c:	60a6      	str	r6, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800123e:	68e6      	ldr	r6, [r4, #12]
 8001240:	4035      	ands	r5, r6
 8001242:	60e5      	str	r5, [r4, #12]
 8001244:	e799      	b.n	800117a <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001246:	f100 0c04 	add.w	ip, r0, #4
 800124a:	e799      	b.n	8001180 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800124c:	f1a2 0508 	sub.w	r5, r2, #8
 8001250:	00af      	lsls	r7, r5, #2
 8001252:	e798      	b.n	8001186 <HAL_GPIO_DeInit+0x1e>
  }
}
 8001254:	bcf0      	pop	{r4, r5, r6, r7}
 8001256:	4770      	bx	lr
    position++;
 8001258:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 800125a:	fa31 f302 	lsrs.w	r3, r1, r2
 800125e:	d005      	beq.n	800126c <HAL_GPIO_DeInit+0x104>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001260:	2301      	movs	r3, #1
 8001262:	4093      	lsls	r3, r2
    if (iocurrent)
 8001264:	400b      	ands	r3, r1
 8001266:	d0f7      	beq.n	8001258 <HAL_GPIO_DeInit+0xf0>
{
 8001268:	b4f0      	push	{r4, r5, r6, r7}
 800126a:	e7a3      	b.n	80011b4 <HAL_GPIO_DeInit+0x4c>
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800126e:	6883      	ldr	r3, [r0, #8]
 8001270:	4219      	tst	r1, r3
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001274:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001276:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8001278:	2001      	movs	r0, #1
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	b912      	cbnz	r2, 8001284 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	0409      	lsls	r1, r1, #16
 8001280:	6101      	str	r1, [r0, #16]
  }
}
 8001282:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001284:	6101      	str	r1, [r0, #16]
 8001286:	4770      	bx	lr

08001288 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001288:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800128a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800128e:	d042      	beq.n	8001316 <HAL_PCD_EP_DB_Receive+0x8e>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001290:	6804      	ldr	r4, [r0, #0]
 8001292:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001296:	780d      	ldrb	r5, [r1, #0]
 8001298:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800129c:	3302      	adds	r3, #2
 800129e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80012a2:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 80012a6:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80012aa:	698b      	ldr	r3, [r1, #24]
 80012ac:	42a3      	cmp	r3, r4
 80012ae:	d328      	bcc.n	8001302 <HAL_PCD_EP_DB_Receive+0x7a>
    {
      ep->xfer_len -= count;
 80012b0:	1b1b      	subs	r3, r3, r4
 80012b2:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80012b4:	698b      	ldr	r3, [r1, #24]
 80012b6:	b97b      	cbnz	r3, 80012d8 <HAL_PCD_EP_DB_Receive+0x50>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80012b8:	6806      	ldr	r6, [r0, #0]
 80012ba:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80012d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80012dc:	d00e      	beq.n	80012fc <HAL_PCD_EP_DB_Receive+0x74>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80012de:	6802      	ldr	r2, [r0, #0]
 80012e0:	780d      	ldrb	r5, [r1, #0]
 80012e2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012f8:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80012fc:	b924      	cbnz	r4, 8001308 <HAL_PCD_EP_DB_Receive+0x80>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80012fe:	4620      	mov	r0, r4
 8001300:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	618b      	str	r3, [r1, #24]
 8001306:	e7d5      	b.n	80012b4 <HAL_PCD_EP_DB_Receive+0x2c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001308:	4623      	mov	r3, r4
 800130a:	890a      	ldrh	r2, [r1, #8]
 800130c:	6949      	ldr	r1, [r1, #20]
 800130e:	6800      	ldr	r0, [r0, #0]
 8001310:	f002 fa99 	bl	8003846 <USB_ReadPMA>
 8001314:	e7f3      	b.n	80012fe <HAL_PCD_EP_DB_Receive+0x76>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001316:	6804      	ldr	r4, [r0, #0]
 8001318:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800131c:	780d      	ldrb	r5, [r1, #0]
 800131e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001322:	3306      	adds	r3, #6
 8001324:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001328:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 800132c:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8001330:	698b      	ldr	r3, [r1, #24]
 8001332:	42a3      	cmp	r3, r4
 8001334:	d32e      	bcc.n	8001394 <HAL_PCD_EP_DB_Receive+0x10c>
      ep->xfer_len -= count;
 8001336:	1b1b      	subs	r3, r3, r4
 8001338:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 800133a:	698b      	ldr	r3, [r1, #24]
 800133c:	b97b      	cbnz	r3, 800135e <HAL_PCD_EP_DB_Receive+0xd6>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800133e:	6806      	ldr	r6, [r0, #0]
 8001340:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8001344:	b29b      	uxth	r3, r3
 8001346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135a:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800135e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001362:	d10e      	bne.n	8001382 <HAL_PCD_EP_DB_Receive+0xfa>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001364:	6802      	ldr	r2, [r0, #0]
 8001366:	780d      	ldrb	r5, [r1, #0]
 8001368:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800136c:	b29b      	uxth	r3, r3
 800136e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800137e:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 8001382:	2c00      	cmp	r4, #0
 8001384:	d0bb      	beq.n	80012fe <HAL_PCD_EP_DB_Receive+0x76>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001386:	4623      	mov	r3, r4
 8001388:	894a      	ldrh	r2, [r1, #10]
 800138a:	6949      	ldr	r1, [r1, #20]
 800138c:	6800      	ldr	r0, [r0, #0]
 800138e:	f002 fa5a 	bl	8003846 <USB_ReadPMA>
 8001392:	e7b4      	b.n	80012fe <HAL_PCD_EP_DB_Receive+0x76>
      ep->xfer_len = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	618b      	str	r3, [r1, #24]
 8001398:	e7cf      	b.n	800133a <HAL_PCD_EP_DB_Receive+0xb2>

0800139a <HAL_PCD_Init>:
{
 800139a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139c:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800139e:	2800      	cmp	r0, #0
 80013a0:	d07f      	beq.n	80014a2 <HAL_PCD_Init+0x108>
 80013a2:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a4:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80013a8:	b1d3      	cbz	r3, 80013e0 <HAL_PCD_Init+0x46>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	f001 fb72 	bl	8002a9a <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b6:	4625      	mov	r5, r4
 80013b8:	f855 7b10 	ldr.w	r7, [r5], #16
 80013bc:	466e      	mov	r6, sp
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	6033      	str	r3, [r6, #0]
 80013c6:	1d23      	adds	r3, r4, #4
 80013c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ca:	4638      	mov	r0, r7
 80013cc:	f001 fb55 	bl	8002a7a <USB_CoreInit>
 80013d0:	b158      	cbz	r0, 80013ea <HAL_PCD_Init+0x50>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80013d8:	2501      	movs	r5, #1
}
 80013da:	4628      	mov	r0, r5
 80013dc:	b007      	add	sp, #28
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80013e0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80013e4:	f003 fa50 	bl	8004888 <HAL_PCD_MspInit>
 80013e8:	e7df      	b.n	80013aa <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ea:	2100      	movs	r1, #0
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	f001 fb5e 	bl	8002aae <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	e01a      	b.n	800142c <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 80013f6:	1c58      	adds	r0, r3, #1
 80013f8:	0081      	lsls	r1, r0, #2
 80013fa:	180d      	adds	r5, r1, r0
 80013fc:	00ea      	lsls	r2, r5, #3
 80013fe:	4422      	add	r2, r4
 8001400:	2501      	movs	r5, #1
 8001402:	7055      	strb	r5, [r2, #1]
    hpcd->IN_ep[i].num = i;
 8001404:	180d      	adds	r5, r1, r0
 8001406:	00ea      	lsls	r2, r5, #3
 8001408:	54a3      	strb	r3, [r4, r2]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800140a:	009d      	lsls	r5, r3, #2
 800140c:	18ee      	adds	r6, r5, r3
 800140e:	00f2      	lsls	r2, r6, #3
 8001410:	4422      	add	r2, r4
 8001412:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001414:	4401      	add	r1, r0
 8001416:	00ce      	lsls	r6, r1, #3
 8001418:	4426      	add	r6, r4
 800141a:	2100      	movs	r1, #0
 800141c:	70f1      	strb	r1, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800141e:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001420:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001422:	442b      	add	r3, r5
 8001424:	00da      	lsls	r2, r3, #3
 8001426:	4422      	add	r2, r4
 8001428:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142a:	b2c3      	uxtb	r3, r0
 800142c:	6865      	ldr	r5, [r4, #4]
 800142e:	42ab      	cmp	r3, r5
 8001430:	d3e1      	bcc.n	80013f6 <HAL_PCD_Init+0x5c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	e015      	b.n	8001462 <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8001436:	0098      	lsls	r0, r3, #2
 8001438:	18c1      	adds	r1, r0, r3
 800143a:	00ca      	lsls	r2, r1, #3
 800143c:	4422      	add	r2, r4
 800143e:	2100      	movs	r1, #0
 8001440:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001444:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001448:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800144c:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001450:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001454:	18c2      	adds	r2, r0, r3
 8001456:	00d0      	lsls	r0, r2, #3
 8001458:	4420      	add	r0, r4
 800145a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145e:	3301      	adds	r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	429d      	cmp	r5, r3
 8001464:	d8e7      	bhi.n	8001436 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001466:	4625      	mov	r5, r4
 8001468:	f855 7b10 	ldr.w	r7, [r5], #16
 800146c:	466e      	mov	r6, sp
 800146e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001470:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	6033      	str	r3, [r6, #0]
 8001476:	1d23      	adds	r3, r4, #4
 8001478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147a:	4638      	mov	r0, r7
 800147c:	f001 fb19 	bl	8002ab2 <USB_DevInit>
 8001480:	4605      	mov	r5, r0
 8001482:	b120      	cbz	r0, 800148e <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001484:	2302      	movs	r3, #2
 8001486:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800148a:	2501      	movs	r5, #1
 800148c:	e7a5      	b.n	80013da <HAL_PCD_Init+0x40>
  hpcd->USB_Address = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001494:	2301      	movs	r3, #1
 8001496:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	f001 fe27 	bl	80030ee <USB_DevDisconnect>
  return HAL_OK;
 80014a0:	e79b      	b.n	80013da <HAL_PCD_Init+0x40>
    return HAL_ERROR;
 80014a2:	2501      	movs	r5, #1
 80014a4:	e799      	b.n	80013da <HAL_PCD_Init+0x40>

080014a6 <HAL_PCD_DeInit>:
{
 80014a6:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 80014a8:	b188      	cbz	r0, 80014ce <HAL_PCD_DeInit+0x28>
 80014aa:	4604      	mov	r4, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f880 32a9 	strb.w	r3, [r0, #681]	; 0x2a9
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80014b2:	6800      	ldr	r0, [r0, #0]
 80014b4:	f001 fe08 	bl	80030c8 <USB_StopDevice>
 80014b8:	4605      	mov	r5, r0
 80014ba:	b108      	cbz	r0, 80014c0 <HAL_PCD_DeInit+0x1a>
    return HAL_ERROR;
 80014bc:	2501      	movs	r5, #1
 80014be:	e007      	b.n	80014d0 <HAL_PCD_DeInit+0x2a>
  HAL_PCD_MspDeInit(hpcd);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f003 fa03 	bl	80048cc <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
 80014cc:	e000      	b.n	80014d0 <HAL_PCD_DeInit+0x2a>
    return HAL_ERROR;
 80014ce:	2501      	movs	r5, #1
}
 80014d0:	4628      	mov	r0, r5
 80014d2:	bd38      	pop	{r3, r4, r5, pc}

080014d4 <HAL_PCD_Start>:
{
 80014d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80014d6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d011      	beq.n	8001502 <HAL_PCD_Start+0x2e>
 80014de:	4604      	mov	r4, r0
 80014e0:	2501      	movs	r5, #1
 80014e2:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014e6:	6800      	ldr	r0, [r0, #0]
 80014e8:	f001 face 	bl	8002a88 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014ec:	4629      	mov	r1, r5
 80014ee:	4620      	mov	r0, r4
 80014f0:	f003 fb08 	bl	8004b04 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	f001 fdf8 	bl	80030ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001500:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001502:	2002      	movs	r0, #2
 8001504:	e7fc      	b.n	8001500 <HAL_PCD_Start+0x2c>

08001506 <HAL_PCD_Stop>:
  __HAL_LOCK(hpcd);
 8001506:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800150a:	2b01      	cmp	r3, #1
 800150c:	d012      	beq.n	8001534 <HAL_PCD_Stop+0x2e>
{
 800150e:	b510      	push	{r4, lr}
 8001510:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001512:	2301      	movs	r3, #1
 8001514:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8001518:	6800      	ldr	r0, [r0, #0]
 800151a:	f001 fabe 	bl	8002a9a <USB_DisableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 800151e:	2100      	movs	r1, #0
 8001520:	4620      	mov	r0, r4
 8001522:	f003 faef 	bl	8004b04 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001526:	6820      	ldr	r0, [r4, #0]
 8001528:	f001 fde1 	bl	80030ee <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800152c:	2000      	movs	r0, #0
 800152e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001532:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001534:	2002      	movs	r0, #2
}
 8001536:	4770      	bx	lr

08001538 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	4605      	mov	r5, r0
 800153c:	460c      	mov	r4, r1
 800153e:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001540:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001544:	f000 80b4 	beq.w	80016b0 <HAL_PCD_EP_DB_Transmit+0x178>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001548:	6802      	ldr	r2, [r0, #0]
 800154a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800154e:	7809      	ldrb	r1, [r1, #0]
 8001550:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001554:	3302      	adds	r3, #2
 8001556:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800155a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800155e:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8001562:	69a3      	ldr	r3, [r4, #24]
 8001564:	4293      	cmp	r3, r2
 8001566:	d92b      	bls.n	80015c0 <HAL_PCD_EP_DB_Transmit+0x88>
    {
      ep->xfer_len -= TxByteNbre;
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800156c:	69a3      	ldr	r3, [r4, #24]
 800156e:	b353      	cbz	r3, 80015c6 <HAL_PCD_EP_DB_Transmit+0x8e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001570:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8001574:	d00d      	beq.n	8001592 <HAL_PCD_EP_DB_Transmit+0x5a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001576:	6828      	ldr	r0, [r5, #0]
 8001578:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800157c:	b29b      	uxth	r3, r3
 800157e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800158a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001592:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001596:	2b01      	cmp	r3, #1
 8001598:	d02b      	beq.n	80015f2 <HAL_PCD_EP_DB_Transmit+0xba>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800159a:	682a      	ldr	r2, [r5, #0]
 800159c:	7821      	ldrb	r1, [r4, #0]
 800159e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ac:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80015bc:	2000      	movs	r0, #0
 80015be:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61a3      	str	r3, [r4, #24]
 80015c4:	e7d2      	b.n	800156c <HAL_PCD_EP_DB_Transmit+0x34>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015c6:	4628      	mov	r0, r5
 80015c8:	f003 f9a9 	bl	800491e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80015cc:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80015d0:	d0e3      	beq.n	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80015d2:	682a      	ldr	r2, [r5, #0]
 80015d4:	7821      	ldrb	r1, [r4, #0]
 80015d6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80015f0:	e7d3      	b.n	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        ep->xfer_buff += TxByteNbre;
 80015f2:	6963      	ldr	r3, [r4, #20]
 80015f4:	4413      	add	r3, r2
 80015f6:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 80015f8:	69e3      	ldr	r3, [r4, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80015fe:	6a21      	ldr	r1, [r4, #32]
 8001600:	6923      	ldr	r3, [r4, #16]
 8001602:	4299      	cmp	r1, r3
 8001604:	d31b      	bcc.n	800163e <HAL_PCD_EP_DB_Transmit+0x106>
          ep->xfer_len_db -= len;
 8001606:	1ac9      	subs	r1, r1, r3
 8001608:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800160a:	7862      	ldrb	r2, [r4, #1]
 800160c:	2a00      	cmp	r2, #0
 800160e:	d13b      	bne.n	8001688 <HAL_PCD_EP_DB_Transmit+0x150>
 8001610:	682a      	ldr	r2, [r5, #0]
 8001612:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001616:	440a      	add	r2, r1
 8001618:	7821      	ldrb	r1, [r4, #0]
 800161a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800161e:	b9d3      	cbnz	r3, 8001656 <HAL_PCD_EP_DB_Transmit+0x11e>
 8001620:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8001624:	b289      	uxth	r1, r1
 8001626:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800162a:	b289      	uxth	r1, r1
 800162c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001630:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8001634:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001638:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800163c:	e026      	b.n	800168c <HAL_PCD_EP_DB_Transmit+0x154>
        else if (ep->xfer_len_db == 0U)
 800163e:	b921      	cbnz	r1, 800164a <HAL_PCD_EP_DB_Transmit+0x112>
          ep->xfer_fill_db = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8001646:	4613      	mov	r3, r2
 8001648:	e7df      	b.n	800160a <HAL_PCD_EP_DB_Transmit+0xd2>
          ep->xfer_fill_db = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8001650:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8001652:	460b      	mov	r3, r1
 8001654:	e7d9      	b.n	800160a <HAL_PCD_EP_DB_Transmit+0xd2>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001656:	2b3e      	cmp	r3, #62	; 0x3e
 8001658:	d809      	bhi.n	800166e <HAL_PCD_EP_DB_Transmit+0x136>
 800165a:	0859      	lsrs	r1, r3, #1
 800165c:	f013 0f01 	tst.w	r3, #1
 8001660:	d000      	beq.n	8001664 <HAL_PCD_EP_DB_Transmit+0x12c>
 8001662:	3101      	adds	r1, #1
 8001664:	0289      	lsls	r1, r1, #10
 8001666:	b289      	uxth	r1, r1
 8001668:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800166c:	e00e      	b.n	800168c <HAL_PCD_EP_DB_Transmit+0x154>
 800166e:	0959      	lsrs	r1, r3, #5
 8001670:	f013 0f1f 	tst.w	r3, #31
 8001674:	d100      	bne.n	8001678 <HAL_PCD_EP_DB_Transmit+0x140>
 8001676:	3901      	subs	r1, #1
 8001678:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800167c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001680:	b289      	uxth	r1, r1
 8001682:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001686:	e001      	b.n	800168c <HAL_PCD_EP_DB_Transmit+0x154>
 8001688:	2a01      	cmp	r2, #1
 800168a:	d006      	beq.n	800169a <HAL_PCD_EP_DB_Transmit+0x162>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800168c:	b29b      	uxth	r3, r3
 800168e:	8922      	ldrh	r2, [r4, #8]
 8001690:	6961      	ldr	r1, [r4, #20]
 8001692:	6828      	ldr	r0, [r5, #0]
 8001694:	f001 fd32 	bl	80030fc <USB_WritePMA>
 8001698:	e77f      	b.n	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800169a:	682a      	ldr	r2, [r5, #0]
 800169c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80016a0:	440a      	add	r2, r1
 80016a2:	7821      	ldrb	r1, [r4, #0]
 80016a4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80016a8:	b299      	uxth	r1, r3
 80016aa:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80016ae:	e7ed      	b.n	800168c <HAL_PCD_EP_DB_Transmit+0x154>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016b0:	6802      	ldr	r2, [r0, #0]
 80016b2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80016b6:	7809      	ldrb	r1, [r1, #0]
 80016b8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80016bc:	3306      	adds	r3, #6
 80016be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80016c2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 80016c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 80016ca:	69a3      	ldr	r3, [r4, #24]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d340      	bcc.n	8001752 <HAL_PCD_EP_DB_Transmit+0x21a>
      ep->xfer_len -= TxByteNbre;
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 80016d4:	69a3      	ldr	r3, [r4, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03e      	beq.n	8001758 <HAL_PCD_EP_DB_Transmit+0x220>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80016da:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80016de:	d10d      	bne.n	80016fc <HAL_PCD_EP_DB_Transmit+0x1c4>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80016e0:	6828      	ldr	r0, [r5, #0]
 80016e2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80016fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001700:	2b01      	cmp	r3, #1
 8001702:	f47f af4a 	bne.w	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        ep->xfer_buff += TxByteNbre;
 8001706:	6963      	ldr	r3, [r4, #20]
 8001708:	4413      	add	r3, r2
 800170a:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 800170c:	69e3      	ldr	r3, [r4, #28]
 800170e:	4413      	add	r3, r2
 8001710:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8001712:	6a21      	ldr	r1, [r4, #32]
 8001714:	6923      	ldr	r3, [r4, #16]
 8001716:	4299      	cmp	r1, r3
 8001718:	d335      	bcc.n	8001786 <HAL_PCD_EP_DB_Transmit+0x24e>
          ep->xfer_len_db -= len;
 800171a:	1ac9      	subs	r1, r1, r3
 800171c:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800171e:	682a      	ldr	r2, [r5, #0]
 8001720:	7861      	ldrb	r1, [r4, #1]
 8001722:	2900      	cmp	r1, #0
 8001724:	d154      	bne.n	80017d0 <HAL_PCD_EP_DB_Transmit+0x298>
 8001726:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800172a:	440a      	add	r2, r1
 800172c:	7821      	ldrb	r1, [r4, #0]
 800172e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001732:	bba3      	cbnz	r3, 800179e <HAL_PCD_EP_DB_Transmit+0x266>
 8001734:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8001738:	b289      	uxth	r1, r1
 800173a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800173e:	b289      	uxth	r1, r1
 8001740:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8001744:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8001748:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800174c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8001750:	e040      	b.n	80017d4 <HAL_PCD_EP_DB_Transmit+0x29c>
      ep->xfer_len = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	61a3      	str	r3, [r4, #24]
 8001756:	e7bd      	b.n	80016d4 <HAL_PCD_EP_DB_Transmit+0x19c>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001758:	4628      	mov	r0, r5
 800175a:	f003 f8e0 	bl	800491e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800175e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8001762:	f47f af1a 	bne.w	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001766:	682a      	ldr	r2, [r5, #0]
 8001768:	7821      	ldrb	r1, [r4, #0]
 800176a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800176e:	b29b      	uxth	r3, r3
 8001770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001784:	e709      	b.n	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        else if (ep->xfer_len_db == 0U)
 8001786:	b921      	cbnz	r1, 8001792 <HAL_PCD_EP_DB_Transmit+0x25a>
          ep->xfer_fill_db = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 800178e:	4613      	mov	r3, r2
 8001790:	e7c5      	b.n	800171e <HAL_PCD_EP_DB_Transmit+0x1e6>
          ep->xfer_len_db = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8001796:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 800179a:	460b      	mov	r3, r1
 800179c:	e7bf      	b.n	800171e <HAL_PCD_EP_DB_Transmit+0x1e6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800179e:	2b3e      	cmp	r3, #62	; 0x3e
 80017a0:	d809      	bhi.n	80017b6 <HAL_PCD_EP_DB_Transmit+0x27e>
 80017a2:	0859      	lsrs	r1, r3, #1
 80017a4:	f013 0f01 	tst.w	r3, #1
 80017a8:	d000      	beq.n	80017ac <HAL_PCD_EP_DB_Transmit+0x274>
 80017aa:	3101      	adds	r1, #1
 80017ac:	0289      	lsls	r1, r1, #10
 80017ae:	b289      	uxth	r1, r1
 80017b0:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80017b4:	e00e      	b.n	80017d4 <HAL_PCD_EP_DB_Transmit+0x29c>
 80017b6:	0959      	lsrs	r1, r3, #5
 80017b8:	f013 0f1f 	tst.w	r3, #31
 80017bc:	d100      	bne.n	80017c0 <HAL_PCD_EP_DB_Transmit+0x288>
 80017be:	3901      	subs	r1, #1
 80017c0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80017c4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80017c8:	b289      	uxth	r1, r1
 80017ca:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80017ce:	e001      	b.n	80017d4 <HAL_PCD_EP_DB_Transmit+0x29c>
 80017d0:	2901      	cmp	r1, #1
 80017d2:	d006      	beq.n	80017e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8962      	ldrh	r2, [r4, #10]
 80017d8:	6961      	ldr	r1, [r4, #20]
 80017da:	6828      	ldr	r0, [r5, #0]
 80017dc:	f001 fc8e 	bl	80030fc <USB_WritePMA>
 80017e0:	e6db      	b.n	800159a <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80017e2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80017e6:	440a      	add	r2, r1
 80017e8:	7821      	ldrb	r1, [r4, #0]
 80017ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80017ee:	b299      	uxth	r1, r3
 80017f0:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80017f4:	e7ee      	b.n	80017d4 <HAL_PCD_EP_DB_Transmit+0x29c>

080017f6 <PCD_EP_ISR_Handler>:
{
 80017f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017fa:	4604      	mov	r4, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001802:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001806:	f000 81fa 	beq.w	8001bfe <PCD_EP_ISR_Handler+0x408>
    wIstr = hpcd->Instance->ISTR;
 800180a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800180e:	b29b      	uxth	r3, r3
    if (epindex == 0U)
 8001810:	f013 050f 	ands.w	r5, r3, #15
 8001814:	f040 80cd 	bne.w	80019b2 <PCD_EP_ISR_Handler+0x1bc>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001818:	f013 0f10 	tst.w	r3, #16
 800181c:	d058      	beq.n	80018d0 <PCD_EP_ISR_Handler+0xda>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800181e:	8803      	ldrh	r3, [r0, #0]
 8001820:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001822:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001826:	f040 8089 	bne.w	800193c <PCD_EP_ISR_Handler+0x146>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800182a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800182e:	d0e5      	beq.n	80017fc <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001830:	8803      	ldrh	r3, [r0, #0]
 8001832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001836:	051b      	lsls	r3, r3, #20
 8001838:	0d1b      	lsrs	r3, r3, #20
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001840:	6820      	ldr	r0, [r4, #0]
 8001842:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001846:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800184a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800184e:	3306      	adds	r3, #6
 8001850:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001854:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800185c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001860:	b18b      	cbz	r3, 8001886 <PCD_EP_ISR_Handler+0x90>
 8001862:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001866:	b171      	cbz	r1, 8001886 <PCD_EP_ISR_Handler+0x90>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001868:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800186c:	f001 ffeb 	bl	8003846 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001870:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8001874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001878:	4413      	add	r3, r2
 800187a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800187e:	2100      	movs	r1, #0
 8001880:	4620      	mov	r0, r4
 8001882:	f003 f840 	bl	8004906 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800188c:	4413      	add	r3, r2
 800188e:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8001892:	2a00      	cmp	r2, #0
 8001894:	d174      	bne.n	8001980 <PCD_EP_ISR_Handler+0x18a>
 8001896:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800189a:	b292      	uxth	r2, r2
 800189c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80018a0:	b292      	uxth	r2, r2
 80018a2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80018a6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018b2:	6822      	ldr	r2, [r4, #0]
 80018b4:	8813      	ldrh	r3, [r2, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	8013      	strh	r3, [r2, #0]
 80018ce:	e795      	b.n	80017fc <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018d0:	8803      	ldrh	r3, [r0, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018e8:	6822      	ldr	r2, [r4, #0]
 80018ea:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80018ee:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80018f2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80018f6:	3302      	adds	r3, #2
 80018f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80018fc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001904:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001906:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001908:	4413      	add	r3, r2
 800190a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800190c:	2100      	movs	r1, #0
 800190e:	4620      	mov	r0, r4
 8001910:	f003 f805 	bl	800491e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001914:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001918:	2b00      	cmp	r3, #0
 800191a:	f43f af6f 	beq.w	80017fc <PCD_EP_ISR_Handler+0x6>
 800191e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f af6b 	bne.w	80017fc <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001926:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800192a:	6822      	ldr	r2, [r4, #0]
 800192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001930:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800193a:	e75f      	b.n	80017fc <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800193c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001940:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001948:	3306      	adds	r3, #6
 800194a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800194e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001956:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800195a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800195e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001962:	f001 ff70 	bl	8003846 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001966:	6822      	ldr	r2, [r4, #0]
 8001968:	8813      	ldrh	r3, [r2, #0]
 800196a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196e:	051b      	lsls	r3, r3, #20
 8001970:	0d1b      	lsrs	r3, r3, #20
 8001972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001976:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001978:	4620      	mov	r0, r4
 800197a:	f002 ffbc 	bl	80048f6 <HAL_PCD_SetupStageCallback>
 800197e:	e73d      	b.n	80017fc <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001980:	2a3e      	cmp	r2, #62	; 0x3e
 8001982:	d809      	bhi.n	8001998 <PCD_EP_ISR_Handler+0x1a2>
 8001984:	0851      	lsrs	r1, r2, #1
 8001986:	f012 0f01 	tst.w	r2, #1
 800198a:	d000      	beq.n	800198e <PCD_EP_ISR_Handler+0x198>
 800198c:	3101      	adds	r1, #1
 800198e:	0289      	lsls	r1, r1, #10
 8001990:	b289      	uxth	r1, r1
 8001992:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8001996:	e78c      	b.n	80018b2 <PCD_EP_ISR_Handler+0xbc>
 8001998:	0951      	lsrs	r1, r2, #5
 800199a:	f012 0f1f 	tst.w	r2, #31
 800199e:	d100      	bne.n	80019a2 <PCD_EP_ISR_Handler+0x1ac>
 80019a0:	3901      	subs	r1, #1
 80019a2:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80019a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80019aa:	b292      	uxth	r2, r2
 80019ac:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80019b0:	e77f      	b.n	80018b2 <PCD_EP_ISR_Handler+0xbc>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019b2:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 80019b6:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019b8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80019bc:	d149      	bne.n	8001a52 <PCD_EP_ISR_Handler+0x25c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019be:	f016 0f80 	tst.w	r6, #128	; 0x80
 80019c2:	f43f af1b 	beq.w	80017fc <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 80019c6:	1c68      	adds	r0, r5, #1
 80019c8:	0082      	lsls	r2, r0, #2
 80019ca:	1813      	adds	r3, r2, r0
 80019cc:	00d9      	lsls	r1, r3, #3
 80019ce:	4421      	add	r1, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019d0:	6827      	ldr	r7, [r4, #0]
 80019d2:	f837 3025 	ldrh.w	r3, [r7, r5, lsl #2]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f827 3025 	strh.w	r3, [r7, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 80019ee:	78cb      	ldrb	r3, [r1, #3]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	f000 80e7 	beq.w	8001bc4 <PCD_EP_ISR_Handler+0x3ce>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019f6:	6820      	ldr	r0, [r4, #0]
 80019f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019fc:	1c6a      	adds	r2, r5, #1
 80019fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a02:	00d6      	lsls	r6, r2, #3
 8001a04:	5da2      	ldrb	r2, [r4, r6]
 8001a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a10:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8001a18:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8001a1c:	00f2      	lsls	r2, r6, #3
 8001a1e:	4616      	mov	r6, r2
 8001a20:	4422      	add	r2, r4
 8001a22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f240 80d6 	bls.w	8001bd6 <PCD_EP_ISR_Handler+0x3e0>
            ep->xfer_len -= TxByteNbre;
 8001a2a:	4426      	add	r6, r4
 8001a2c:	1ad2      	subs	r2, r2, r3
 8001a2e:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001a30:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8001a34:	00f2      	lsls	r2, r6, #3
 8001a36:	4422      	add	r2, r4
 8001a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	f040 80d2 	bne.w	8001be4 <PCD_EP_ISR_Handler+0x3ee>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a40:	3501      	adds	r5, #1
 8001a42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001a46:	00eb      	lsls	r3, r5, #3
 8001a48:	5ce1      	ldrb	r1, [r4, r3]
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f002 ff67 	bl	800491e <HAL_PCD_DataInStageCallback>
 8001a50:	e6d4      	b.n	80017fc <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a52:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5a:	051b      	lsls	r3, r3, #20
 8001a5c:	0d1b      	lsrs	r3, r3, #20
 8001a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a62:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8001a66:	00ab      	lsls	r3, r5, #2
 8001a68:	195a      	adds	r2, r3, r5
 8001a6a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001a6e:	4642      	mov	r2, r8
 8001a70:	f508 78b4 	add.w	r8, r8, #360	; 0x168
 8001a74:	44a0      	add	r8, r4
        if (ep->doublebuffer == 0U)
 8001a76:	4422      	add	r2, r4
 8001a78:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d13f      	bne.n	8001b00 <PCD_EP_ISR_Handler+0x30a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a80:	6820      	ldr	r0, [r4, #0]
 8001a82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a86:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001a8a:	00ca      	lsls	r2, r1, #3
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4422      	add	r2, r4
 8001a90:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a98:	3306      	adds	r3, #6
 8001a9a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a9e:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8001aa2:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8001aa6:	bb17      	cbnz	r7, 8001aee <PCD_EP_ISR_Handler+0x2f8>
        ep->xfer_count += count;
 8001aa8:	00aa      	lsls	r2, r5, #2
 8001aaa:	442a      	add	r2, r5
 8001aac:	00d3      	lsls	r3, r2, #3
 8001aae:	4423      	add	r3, r4
 8001ab0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001ab4:	443a      	add	r2, r7
 8001ab6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001aba:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001abe:	443a      	add	r2, r7
 8001ac0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ac4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001ac8:	b13b      	cbz	r3, 8001ada <PCD_EP_ISR_Handler+0x2e4>
 8001aca:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001ace:	00d3      	lsls	r3, r2, #3
 8001ad0:	4423      	add	r3, r4
 8001ad2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001ad6:	429f      	cmp	r7, r3
 8001ad8:	d26f      	bcs.n	8001bba <PCD_EP_ISR_Handler+0x3c4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ada:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001ade:	00d3      	lsls	r3, r2, #3
 8001ae0:	4423      	add	r3, r4
 8001ae2:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f002 ff0d 	bl	8004906 <HAL_PCD_DataOutStageCallback>
 8001aec:	e767      	b.n	80019be <PCD_EP_ISR_Handler+0x1c8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001aee:	4421      	add	r1, r4
 8001af0:	463b      	mov	r3, r7
 8001af2:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001af6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001afa:	f001 fea4 	bl	8003846 <USB_ReadPMA>
 8001afe:	e7d3      	b.n	8001aa8 <PCD_EP_ISR_Handler+0x2b2>
          if (ep->type == EP_TYPE_BULK)
 8001b00:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001b04:	00d3      	lsls	r3, r2, #3
 8001b06:	4423      	add	r3, r4
 8001b08:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d034      	beq.n	8001b7a <PCD_EP_ISR_Handler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b10:	6821      	ldr	r1, [r4, #0]
 8001b12:	00ab      	lsls	r3, r5, #2
 8001b14:	442b      	add	r3, r5
 8001b16:	00da      	lsls	r2, r3, #3
 8001b18:	4422      	add	r2, r4
 8001b1a:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001b1e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b34:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b38:	6820      	ldr	r0, [r4, #0]
 8001b3a:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001b3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b42:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001b46:	d01f      	beq.n	8001b88 <PCD_EP_ISR_Handler+0x392>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b48:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b50:	3302      	adds	r3, #2
 8001b52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001b56:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8001b5a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d0a2      	beq.n	8001aa8 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b62:	00ab      	lsls	r3, r5, #2
 8001b64:	442b      	add	r3, r5
 8001b66:	00d9      	lsls	r1, r3, #3
 8001b68:	4421      	add	r1, r4
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001b70:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001b74:	f001 fe67 	bl	8003846 <USB_ReadPMA>
 8001b78:	e796      	b.n	8001aa8 <PCD_EP_ISR_Handler+0x2b2>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b7a:	4632      	mov	r2, r6
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff fb82 	bl	8001288 <HAL_PCD_EP_DB_Receive>
 8001b84:	4607      	mov	r7, r0
 8001b86:	e78f      	b.n	8001aa8 <PCD_EP_ISR_Handler+0x2b2>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b88:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b90:	3306      	adds	r3, #6
 8001b92:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001b96:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8001b9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	d082      	beq.n	8001aa8 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ba2:	00ab      	lsls	r3, r5, #2
 8001ba4:	442b      	add	r3, r5
 8001ba6:	00d9      	lsls	r1, r3, #3
 8001ba8:	4421      	add	r1, r4
 8001baa:	463b      	mov	r3, r7
 8001bac:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001bb0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001bb4:	f001 fe47 	bl	8003846 <USB_ReadPMA>
 8001bb8:	e776      	b.n	8001aa8 <PCD_EP_ISR_Handler+0x2b2>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001bba:	4641      	mov	r1, r8
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	f001 fab2 	bl	8003126 <USB_EPStartXfer>
 8001bc2:	e6fc      	b.n	80019be <PCD_EP_ISR_Handler+0x1c8>
        if ((ep->type != EP_TYPE_BULK) ||
 8001bc4:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001bc8:	f43f af15 	beq.w	80019f6 <PCD_EP_ISR_Handler+0x200>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001bcc:	4632      	mov	r2, r6
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fcb2 	bl	8001538 <HAL_PCD_EP_DB_Transmit>
 8001bd4:	e612      	b.n	80017fc <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8001bd6:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8001bda:	00f2      	lsls	r2, r6, #3
 8001bdc:	4422      	add	r2, r4
 8001bde:	2600      	movs	r6, #0
 8001be0:	6416      	str	r6, [r2, #64]	; 0x40
 8001be2:	e725      	b.n	8001a30 <PCD_EP_ISR_Handler+0x23a>
            ep->xfer_buff += TxByteNbre;
 8001be4:	00ae      	lsls	r6, r5, #2
 8001be6:	1977      	adds	r7, r6, r5
 8001be8:	00fa      	lsls	r2, r7, #3
 8001bea:	4422      	add	r2, r4
 8001bec:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 8001bee:	441f      	add	r7, r3
 8001bf0:	63d7      	str	r7, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001bf2:	6c55      	ldr	r5, [r2, #68]	; 0x44
 8001bf4:	442b      	add	r3, r5
 8001bf6:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf8:	f001 fa95 	bl	8003126 <USB_EPStartXfer>
 8001bfc:	e5fe      	b.n	80017fc <PCD_EP_ISR_Handler+0x6>
}
 8001bfe:	2000      	movs	r0, #0
 8001c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c04 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001c04:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d00d      	beq.n	8001c28 <HAL_PCD_SetAddress+0x24>
{
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c10:	2301      	movs	r3, #1
 8001c12:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c16:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c1a:	6800      	ldr	r0, [r0, #0]
 8001c1c:	f001 fa5f 	bl	80030de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001c26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c28:	2002      	movs	r0, #2
}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_PCD_IRQHandler>:
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c32:	6800      	ldr	r0, [r0, #0]
 8001c34:	f001 fa5d 	bl	80030f2 <USB_ReadInterrupts>
 8001c38:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001c3c:	d147      	bne.n	8001cce <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	f001 fa57 	bl	80030f2 <USB_ReadInterrupts>
 8001c44:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8001c48:	d145      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0xaa>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c4a:	6820      	ldr	r0, [r4, #0]
 8001c4c:	f001 fa51 	bl	80030f2 <USB_ReadInterrupts>
 8001c50:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001c54:	d008      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c68:	6820      	ldr	r0, [r4, #0]
 8001c6a:	f001 fa42 	bl	80030f2 <USB_ReadInterrupts>
 8001c6e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001c72:	d008      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c74:	6822      	ldr	r2, [r4, #0]
 8001c76:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	f001 fa33 	bl	80030f2 <USB_ReadInterrupts>
 8001c8c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001c90:	d132      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0xcc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	f001 fa2d 	bl	80030f2 <USB_ReadInterrupts>
 8001c98:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001c9c:	d177      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x162>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f001 fa27 	bl	80030f2 <USB_ReadInterrupts>
 8001ca4:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001ca8:	f040 809a 	bne.w	8001de0 <HAL_PCD_IRQHandler+0x1b4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cac:	6820      	ldr	r0, [r4, #0]
 8001cae:	f001 fa20 	bl	80030f2 <USB_ReadInterrupts>
 8001cb2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001cb6:	d008      	beq.n	8001cca <HAL_PCD_IRQHandler+0x9e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff fd91 	bl	80017f6 <PCD_EP_ISR_Handler>
 8001cd4:	e7b3      	b.n	8001c3e <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f002 fe29 	bl	8004940 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff87 	bl	8001c04 <HAL_PCD_SetAddress>
 8001cf6:	e7a8      	b.n	8001c4a <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cf8:	6822      	ldr	r2, [r4, #0]
 8001cfa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f023 0308 	bic.w	r3, r3, #8
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f002 fe31 	bl	8004984 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001d34:	e7ad      	b.n	8001c92 <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d36:	6822      	ldr	r2, [r4, #0]
 8001d38:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d3c:	aa04      	add	r2, sp, #16
 8001d3e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001d42:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b07      	cmp	r3, #7
 8001d4c:	d9f3      	bls.n	8001d36 <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d5c:	6822      	ldr	r2, [r4, #0]
 8001d5e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001d74:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001d78:	d0f9      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x142>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d7a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e00b      	b.n	8001da6 <HAL_PCD_IRQHandler+0x17a>
    for (i = 0U; i < 8U; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e7db      	b.n	8001d4a <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	a904      	add	r1, sp, #16
 8001d96:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001d9a:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8001d9e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d9f3      	bls.n	8001d92 <HAL_PCD_IRQHandler+0x166>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001db8:	6822      	ldr	r2, [r4, #0]
 8001dba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f002 fdc2 	bl	8004962 <HAL_PCD_SuspendCallback>
 8001dde:	e75e      	b.n	8001c9e <HAL_PCD_IRQHandler+0x72>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001df2:	4620      	mov	r0, r4
 8001df4:	f002 fd9e 	bl	8004934 <HAL_PCD_SOFCallback>
 8001df8:	e758      	b.n	8001cac <HAL_PCD_IRQHandler+0x80>

08001dfa <HAL_PCD_EP_Open>:
{
 8001dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001dfc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e00:	d126      	bne.n	8001e50 <HAL_PCD_EP_Open+0x56>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	f001 0507 	and.w	r5, r1, #7
 8001e06:	00ae      	lsls	r6, r5, #2
 8001e08:	1977      	adds	r7, r6, r5
 8001e0a:	00fc      	lsls	r4, r7, #3
 8001e0c:	4627      	mov	r7, r4
 8001e0e:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8001e12:	4404      	add	r4, r0
    ep->is_in = 0U;
 8001e14:	4407      	add	r7, r0
 8001e16:	2500      	movs	r5, #0
 8001e18:	f887 5169 	strb.w	r5, [r7, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1c:	f001 0107 	and.w	r1, r1, #7
 8001e20:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001e22:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8001e24:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8001e26:	7862      	ldrb	r2, [r4, #1]
 8001e28:	b102      	cbz	r2, 8001e2c <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8001e2a:	81e1      	strh	r1, [r4, #14]
  if (ep_type == EP_TYPE_BULK)
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d019      	beq.n	8001e64 <HAL_PCD_EP_Open+0x6a>
  __HAL_LOCK(hpcd);
 8001e30:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d018      	beq.n	8001e6a <HAL_PCD_EP_Open+0x70>
 8001e38:	4605      	mov	r5, r0
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e40:	4621      	mov	r1, r4
 8001e42:	6800      	ldr	r0, [r0, #0]
 8001e44:	f000 fe48 	bl	8002ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8001e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e50:	f001 0507 	and.w	r5, r1, #7
 8001e54:	1c6e      	adds	r6, r5, #1
 8001e56:	00b5      	lsls	r5, r6, #2
 8001e58:	19af      	adds	r7, r5, r6
 8001e5a:	00fc      	lsls	r4, r7, #3
 8001e5c:	4404      	add	r4, r0
    ep->is_in = 1U;
 8001e5e:	2501      	movs	r5, #1
 8001e60:	7065      	strb	r5, [r4, #1]
 8001e62:	e7db      	b.n	8001e1c <HAL_PCD_EP_Open+0x22>
    ep->data_pid_start = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	7123      	strb	r3, [r4, #4]
 8001e68:	e7e2      	b.n	8001e30 <HAL_PCD_EP_Open+0x36>
  __HAL_LOCK(hpcd);
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	e7ef      	b.n	8001e4e <HAL_PCD_EP_Open+0x54>

08001e6e <HAL_PCD_EP_Close>:
{
 8001e6e:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001e70:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e74:	d120      	bne.n	8001eb8 <HAL_PCD_EP_Close+0x4a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	f001 0407 	and.w	r4, r1, #7
 8001e7a:	00a2      	lsls	r2, r4, #2
 8001e7c:	1915      	adds	r5, r2, r4
 8001e7e:	00eb      	lsls	r3, r5, #3
 8001e80:	461d      	mov	r5, r3
 8001e82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e86:	4403      	add	r3, r0
    ep->is_in = 0U;
 8001e88:	462c      	mov	r4, r5
 8001e8a:	4404      	add	r4, r0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f884 2169 	strb.w	r2, [r4, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e92:	f001 0107 	and.w	r1, r1, #7
 8001e96:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001e98:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8001e9c:	2a01      	cmp	r2, #1
 8001e9e:	d015      	beq.n	8001ecc <HAL_PCD_EP_Close+0x5e>
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6800      	ldr	r0, [r0, #0]
 8001eac:	f000 ffac 	bl	8002e08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	f001 0207 	and.w	r2, r1, #7
 8001ebc:	1c54      	adds	r4, r2, #1
 8001ebe:	00a2      	lsls	r2, r4, #2
 8001ec0:	1915      	adds	r5, r2, r4
 8001ec2:	00eb      	lsls	r3, r5, #3
 8001ec4:	4403      	add	r3, r0
    ep->is_in = 1U;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	705a      	strb	r2, [r3, #1]
 8001eca:	e7e2      	b.n	8001e92 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8001ecc:	2002      	movs	r0, #2
 8001ece:	e7f2      	b.n	8001eb6 <HAL_PCD_EP_Close+0x48>

08001ed0 <HAL_PCD_EP_Receive>:
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	f001 0507 	and.w	r5, r1, #7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	00ae      	lsls	r6, r5, #2
 8001ed8:	1971      	adds	r1, r6, r5
 8001eda:	00cc      	lsls	r4, r1, #3
 8001edc:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8001ee0:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 8001ee2:	1977      	adds	r7, r6, r5
 8001ee4:	00fc      	lsls	r4, r7, #3
 8001ee6:	4404      	add	r4, r0
 8001ee8:	f8c4 217c 	str.w	r2, [r4, #380]	; 0x17c
  ep->xfer_len = len;
 8001eec:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8001ef6:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efa:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001efe:	b125      	cbz	r5, 8001f0a <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f00:	6800      	ldr	r0, [r0, #0]
 8001f02:	f001 f910 	bl	8003126 <USB_EPStartXfer>
}
 8001f06:	2000      	movs	r0, #0
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f0a:	6800      	ldr	r0, [r0, #0]
 8001f0c:	f001 f90b 	bl	8003126 <USB_EPStartXfer>
 8001f10:	e7f9      	b.n	8001f06 <HAL_PCD_EP_Receive+0x36>

08001f12 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f12:	f001 0107 	and.w	r1, r1, #7
 8001f16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f1a:	00cb      	lsls	r3, r1, #3
 8001f1c:	4418      	add	r0, r3
}
 8001f1e:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8001f22:	4770      	bx	lr

08001f24 <HAL_PCD_EP_Transmit>:
{
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	f001 0607 	and.w	r6, r1, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	1c77      	adds	r7, r6, #1
 8001f2c:	00bd      	lsls	r5, r7, #2
 8001f2e:	19ec      	adds	r4, r5, r7
 8001f30:	00e1      	lsls	r1, r4, #3
 8001f32:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001f34:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8001f38:	44b4      	add	ip, r6
 8001f3a:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8001f3e:	4404      	add	r4, r0
 8001f40:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8001f42:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001f44:	2201      	movs	r2, #1
 8001f46:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_len_db = len;
 8001f4a:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6463      	str	r3, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001f50:	19ec      	adds	r4, r5, r7
 8001f52:	00e3      	lsls	r3, r4, #3
 8001f54:	461c      	mov	r4, r3
 8001f56:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f58:	5506      	strb	r6, [r0, r4]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5a:	b126      	cbz	r6, 8001f66 <HAL_PCD_EP_Transmit+0x42>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	f001 f8e2 	bl	8003126 <USB_EPStartXfer>
}
 8001f62:	2000      	movs	r0, #0
 8001f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	f001 f8dd 	bl	8003126 <USB_EPStartXfer>
 8001f6c:	e7f9      	b.n	8001f62 <HAL_PCD_EP_Transmit+0x3e>

08001f6e <HAL_PCD_EP_SetStall>:
{
 8001f6e:	b538      	push	{r3, r4, r5, lr}
 8001f70:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f74:	6843      	ldr	r3, [r0, #4]
 8001f76:	429d      	cmp	r5, r3
 8001f78:	d830      	bhi.n	8001fdc <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 8001f7a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f7e:	d11f      	bne.n	8001fc0 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8001f80:	008a      	lsls	r2, r1, #2
 8001f82:	1854      	adds	r4, r2, r1
 8001f84:	00e3      	lsls	r3, r4, #3
 8001f86:	461c      	mov	r4, r3
 8001f88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f8c:	4403      	add	r3, r0
    ep->is_in = 0U;
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4402      	add	r2, r0
 8001f92:	2100      	movs	r1, #0
 8001f94:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9c:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001f9e:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d01c      	beq.n	8001fe0 <HAL_PCD_EP_SetStall+0x72>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6800      	ldr	r0, [r0, #0]
 8001fb2:	f001 f813 	bl	8002fdc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb6:	b15d      	cbz	r5, 8001fd0 <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 8001fbe:	e00e      	b.n	8001fde <HAL_PCD_EP_SetStall+0x70>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	1c6c      	adds	r4, r5, #1
 8001fc2:	00a2      	lsls	r2, r4, #2
 8001fc4:	1911      	adds	r1, r2, r4
 8001fc6:	00cb      	lsls	r3, r1, #3
 8001fc8:	4403      	add	r3, r0
    ep->is_in = 1U;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	705a      	strb	r2, [r3, #1]
 8001fce:	e7e3      	b.n	8001f98 <HAL_PCD_EP_SetStall+0x2a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001fd0:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001fd4:	6820      	ldr	r0, [r4, #0]
 8001fd6:	f001 f88f 	bl	80030f8 <USB_EP0_OutStart>
 8001fda:	e7ed      	b.n	8001fb8 <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
}
 8001fde:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	e7fc      	b.n	8001fde <HAL_PCD_EP_SetStall+0x70>

08001fe4 <HAL_PCD_EP_ClrStall>:
{
 8001fe4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fe6:	f001 020f 	and.w	r2, r1, #15
 8001fea:	6843      	ldr	r3, [r0, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d82f      	bhi.n	8002050 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001ff0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ff4:	d122      	bne.n	800203c <HAL_PCD_EP_ClrStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	f001 0407 	and.w	r4, r1, #7
 8001ffa:	00a3      	lsls	r3, r4, #2
 8001ffc:	191d      	adds	r5, r3, r4
 8001ffe:	00ea      	lsls	r2, r5, #3
 8002000:	4615      	mov	r5, r2
 8002002:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002006:	4402      	add	r2, r0
    ep->is_in = 0U;
 8002008:	462c      	mov	r4, r5
 800200a:	4404      	add	r4, r0
 800200c:	2300      	movs	r3, #0
 800200e:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->is_stall = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002016:	f001 0307 	and.w	r3, r1, #7
 800201a:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 800201c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002020:	2b01      	cmp	r3, #1
 8002022:	d017      	beq.n	8002054 <HAL_PCD_EP_ClrStall+0x70>
 8002024:	4604      	mov	r4, r0
 8002026:	2301      	movs	r3, #1
 8002028:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800202c:	4611      	mov	r1, r2
 800202e:	6800      	ldr	r0, [r0, #0]
 8002030:	f000 fff9 	bl	8003026 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002034:	2000      	movs	r0, #0
 8002036:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 800203a:	e00a      	b.n	8002052 <HAL_PCD_EP_ClrStall+0x6e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	f001 0307 	and.w	r3, r1, #7
 8002040:	1c5c      	adds	r4, r3, #1
 8002042:	00a3      	lsls	r3, r4, #2
 8002044:	191d      	adds	r5, r3, r4
 8002046:	00ea      	lsls	r2, r5, #3
 8002048:	4402      	add	r2, r0
    ep->is_in = 1U;
 800204a:	2301      	movs	r3, #1
 800204c:	7053      	strb	r3, [r2, #1]
 800204e:	e7e0      	b.n	8002012 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8002050:	2001      	movs	r0, #1
}
 8002052:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002054:	2002      	movs	r0, #2
 8002056:	e7fc      	b.n	8002052 <HAL_PCD_EP_ClrStall+0x6e>

08002058 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002058:	b410      	push	{r4}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800205a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800205e:	d00f      	beq.n	8002080 <HAL_PCDEx_PMAConfig+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	f001 0107 	and.w	r1, r1, #7
 8002064:	3101      	adds	r1, #1
 8002066:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800206a:	00cc      	lsls	r4, r1, #3
 800206c:	4420      	add	r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800206e:	b172      	cbz	r2, 800208e <HAL_PCDEx_PMAConfig+0x36>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002070:	2201      	movs	r2, #1
 8002072:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002074:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	8143      	strh	r3, [r0, #10]
  }

  return HAL_OK;
}
 800207a:	2000      	movs	r0, #0
 800207c:	bc10      	pop	{r4}
 800207e:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002080:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002084:	00cc      	lsls	r4, r1, #3
 8002086:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 800208a:	4420      	add	r0, r4
 800208c:	e7ef      	b.n	800206e <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 0U;
 800208e:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002090:	80c3      	strh	r3, [r0, #6]
 8002092:	e7f2      	b.n	800207a <HAL_PCDEx_PMAConfig+0x22>

08002094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002094:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002096:	f240 0300 	movw	r3, #0
 800209a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 80020a4:	f2c1 0262 	movt	r2, #4194	; 0x1062
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	0a5b      	lsrs	r3, r3, #9
 80020ae:	fb00 f003 	mul.w	r0, r0, r3
 80020b2:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 80020b4:	bf00      	nop
  }
  while (Delay --);
 80020b6:	9b01      	ldr	r3, [sp, #4]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <RCC_Delay+0x20>
}
 80020c0:	b002      	add	sp, #8
 80020c2:	4770      	bx	lr

080020c4 <HAL_RCC_DeInit>:
{
 80020c4:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 80020c6:	f7fe fccd 	bl	8000a64 <HAL_GetTick>
 80020ca:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f013 0f02 	tst.w	r3, #2
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_DeInit+0x38>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ec:	f7fe fcba 	bl	8000a64 <HAL_GetTick>
 80020f0:	1b00      	subs	r0, r0, r4
 80020f2:	2802      	cmp	r0, #2
 80020f4:	d9f2      	bls.n	80020dc <HAL_RCC_DeInit+0x18>
      return HAL_TIMEOUT;
 80020f6:	2403      	movs	r4, #3
}
 80020f8:	4620      	mov	r0, r4
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80020fc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002100:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800210a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002110:	f7fe fca8 	bl	8000a64 <HAL_GetTick>
 8002114:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8002116:	2300      	movs	r3, #0
 8002118:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800211a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f013 0f0c 	tst.w	r3, #12
 8002128:	d008      	beq.n	800213c <HAL_RCC_DeInit+0x78>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7fe fc9b 	bl	8000a64 <HAL_GetTick>
 800212e:	1b00      	subs	r0, r0, r4
 8002130:	f241 3388 	movw	r3, #5000	; 0x1388
 8002134:	4298      	cmp	r0, r3
 8002136:	d9f0      	bls.n	800211a <HAL_RCC_DeInit+0x56>
      return HAL_TIMEOUT;
 8002138:	2403      	movs	r4, #3
 800213a:	e7dd      	b.n	80020f8 <HAL_RCC_DeInit+0x34>
  SystemCoreClock = HSI_VALUE;
 800213c:	f240 0300 	movw	r3, #0
 8002140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002144:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8002148:	f2c0 027a 	movt	r2, #122	; 0x7a
 800214c:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800214e:	f240 0308 	movw	r3, #8
 8002152:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f7fe fc3c 	bl	80009d4 <HAL_InitTick>
 800215c:	4604      	mov	r4, r0
 800215e:	b108      	cbz	r0, 8002164 <HAL_RCC_DeInit+0xa0>
    return HAL_ERROR;
 8002160:	2401      	movs	r4, #1
 8002162:	e7c9      	b.n	80020f8 <HAL_RCC_DeInit+0x34>
  tickstart = HAL_GetTick();
 8002164:	f7fe fc7e 	bl	8000a64 <HAL_GetTick>
 8002168:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002178:	601a      	str	r2, [r3, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800217a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002188:	d006      	beq.n	8002198 <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7fe fc6b 	bl	8000a64 <HAL_GetTick>
 800218e:	1b40      	subs	r0, r0, r5
 8002190:	2802      	cmp	r0, #2
 8002192:	d9f2      	bls.n	800217a <HAL_RCC_DeInit+0xb6>
      return HAL_TIMEOUT;
 8002194:	2403      	movs	r4, #3
 8002196:	e7af      	b.n	80020f8 <HAL_RCC_DeInit+0x34>
  CLEAR_REG(RCC->CFGR);
 8002198:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800219c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80021a0:	2300      	movs	r3, #0
 80021a2:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 80021a4:	f7fe fc5e 	bl	8000a64 <HAL_GetTick>
 80021a8:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80021aa:	6833      	ldr	r3, [r6, #0]
 80021ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80021b0:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80021b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021c0:	d006      	beq.n	80021d0 <HAL_RCC_DeInit+0x10c>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c2:	f7fe fc4f 	bl	8000a64 <HAL_GetTick>
 80021c6:	1b40      	subs	r0, r0, r5
 80021c8:	2864      	cmp	r0, #100	; 0x64
 80021ca:	d9f2      	bls.n	80021b2 <HAL_RCC_DeInit+0xee>
      return HAL_TIMEOUT;
 80021cc:	2403      	movs	r4, #3
 80021ce:	e793      	b.n	80020f8 <HAL_RCC_DeInit+0x34>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021de:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80021ec:	e784      	b.n	80020f8 <HAL_RCC_DeInit+0x34>

080021ee <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80021ee:	2800      	cmp	r0, #0
 80021f0:	f000 826b 	beq.w	80026ca <HAL_RCC_OscConfig+0x4dc>
{
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	6803      	ldr	r3, [r0, #0]
 80021fc:	f013 0f01 	tst.w	r3, #1
 8002200:	d038      	beq.n	8002274 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d023      	beq.n	800225c <HAL_RCC_OscConfig+0x6e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b08      	cmp	r3, #8
 8002224:	d012      	beq.n	800224c <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d054      	beq.n	80022d8 <HAL_RCC_OscConfig+0xea>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d16e      	bne.n	8002310 <HAL_RCC_OscConfig+0x122>
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e04d      	b.n	80022e8 <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800224c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800225a:	d0e4      	beq.n	8002226 <HAL_RCC_OscConfig+0x38>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002260:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800226a:	d003      	beq.n	8002274 <HAL_RCC_OscConfig+0x86>
 800226c:	6863      	ldr	r3, [r4, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 822d 	beq.w	80026ce <HAL_RCC_OscConfig+0x4e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	f013 0f02 	tst.w	r3, #2
 800227a:	f000 8098 	beq.w	80023ae <HAL_RCC_OscConfig+0x1c0>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f013 0f0c 	tst.w	r3, #12
 800228c:	d077      	beq.n	800237e <HAL_RCC_OscConfig+0x190>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d066      	beq.n	800236e <HAL_RCC_OscConfig+0x180>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80ae 	beq.w	8002404 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022b2:	f7fe fbd7 	bl	8000a64 <HAL_GetTick>
 80022b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f013 0f02 	tst.w	r3, #2
 80022c6:	f040 8091 	bne.w	80023ec <HAL_RCC_OscConfig+0x1fe>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe fbcb 	bl	8000a64 <HAL_GetTick>
 80022ce:	1b40      	subs	r0, r0, r5
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d9f1      	bls.n	80022b8 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80022d4:	2003      	movs	r0, #3
 80022d6:	e1fd      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022e6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	6863      	ldr	r3, [r4, #4]
 80022ea:	b373      	cbz	r3, 800234a <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 80022ec:	f7fe fbba 	bl	8000a64 <HAL_GetTick>
 80022f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002300:	d1b8      	bne.n	8002274 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002302:	f7fe fbaf 	bl	8000a64 <HAL_GetTick>
 8002306:	1b40      	subs	r0, r0, r5
 8002308:	2864      	cmp	r0, #100	; 0x64
 800230a:	d9f2      	bls.n	80022f2 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 800230c:	2003      	movs	r0, #3
 800230e:	e1e1      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x142>
 8002316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e7db      	b.n	80022e8 <HAL_RCC_OscConfig+0xfa>
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e7ce      	b.n	80022e8 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 800234a:	f7fe fb8b 	bl	8000a64 <HAL_GetTick>
 800234e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800235e:	d089      	beq.n	8002274 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe fb80 	bl	8000a64 <HAL_GetTick>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	2864      	cmp	r0, #100	; 0x64
 8002368:	d9f2      	bls.n	8002350 <HAL_RCC_OscConfig+0x162>
            return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e1b2      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800237c:	d190      	bne.n	80022a0 <HAL_RCC_OscConfig+0xb2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f013 0f02 	tst.w	r3, #2
 800238c:	d004      	beq.n	8002398 <HAL_RCC_OscConfig+0x1aa>
 800238e:	6923      	ldr	r3, [r4, #16]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x1aa>
        return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e19d      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023a6:	6961      	ldr	r1, [r4, #20]
 80023a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023ac:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	f013 0f08 	tst.w	r3, #8
 80023b4:	d040      	beq.n	8002438 <HAL_RCC_OscConfig+0x24a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b6:	69a3      	ldr	r3, [r4, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d072      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_LSI_ENABLE();
 80023bc:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80023c0:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023c8:	f7fe fb4c 	bl	8000a64 <HAL_GetTick>
 80023cc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f013 0f02 	tst.w	r3, #2
 80023dc:	d129      	bne.n	8002432 <HAL_RCC_OscConfig+0x244>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe fb41 	bl	8000a64 <HAL_GetTick>
 80023e2:	1b40      	subs	r0, r0, r5
 80023e4:	2802      	cmp	r0, #2
 80023e6:	d9f2      	bls.n	80023ce <HAL_RCC_OscConfig+0x1e0>
          return HAL_TIMEOUT;
 80023e8:	2003      	movs	r0, #3
 80023ea:	e173      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023fa:	6961      	ldr	r1, [r4, #20]
 80023fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e7d4      	b.n	80023ae <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800240e:	f7fe fb29 	bl	8000a64 <HAL_GetTick>
 8002412:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f013 0f02 	tst.w	r3, #2
 8002422:	d0c4      	beq.n	80023ae <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe fb1e 	bl	8000a64 <HAL_GetTick>
 8002428:	1b40      	subs	r0, r0, r5
 800242a:	2802      	cmp	r0, #2
 800242c:	d9f2      	bls.n	8002414 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 800242e:	2003      	movs	r0, #3
 8002430:	e150      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
      RCC_Delay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff fe2e 	bl	8002094 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	f013 0f04 	tst.w	r3, #4
 800243e:	f000 80b3 	beq.w	80025a8 <HAL_RCC_OscConfig+0x3ba>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002446:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002450:	d13f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002460:	61da      	str	r2, [r3, #28]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800246c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002472:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f413 7f80 	tst.w	r3, #256	; 0x100
 800247c:	d02b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247e:	68e3      	ldr	r3, [r4, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d042      	beq.n	800250a <HAL_RCC_OscConfig+0x31c>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d15e      	bne.n	8002546 <HAL_RCC_OscConfig+0x358>
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002490:	6a1a      	ldr	r2, [r3, #32]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	621a      	str	r2, [r3, #32]
 80024a0:	e03b      	b.n	800251a <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_LSI_DISABLE();
 80024a2:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80024a6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024ae:	f7fe fad9 	bl	8000a64 <HAL_GetTick>
 80024b2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f013 0f02 	tst.w	r3, #2
 80024c2:	d0b9      	beq.n	8002438 <HAL_RCC_OscConfig+0x24a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe face 	bl	8000a64 <HAL_GetTick>
 80024c8:	1b40      	subs	r0, r0, r5
 80024ca:	2802      	cmp	r0, #2
 80024cc:	d9f2      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 80024ce:	2003      	movs	r0, #3
 80024d0:	e100      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2500      	movs	r5, #0
 80024d4:	e7cb      	b.n	800246e <HAL_RCC_OscConfig+0x280>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024e6:	f7fe fabd 	bl	8000a64 <HAL_GetTick>
 80024ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024fa:	d1c0      	bne.n	800247e <HAL_RCC_OscConfig+0x290>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7fe fab2 	bl	8000a64 <HAL_GetTick>
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	2864      	cmp	r0, #100	; 0x64
 8002504:	d9f2      	bls.n	80024ec <HAL_RCC_OscConfig+0x2fe>
          return HAL_TIMEOUT;
 8002506:	2003      	movs	r0, #3
 8002508:	e0e4      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251a:	68e3      	ldr	r3, [r4, #12]
 800251c:	b37b      	cbz	r3, 800257e <HAL_RCC_OscConfig+0x390>
      tickstart = HAL_GetTick();
 800251e:	f7fe faa1 	bl	8000a64 <HAL_GetTick>
 8002522:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f013 0f02 	tst.w	r3, #2
 8002532:	d138      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fa96 	bl	8000a64 <HAL_GetTick>
 8002538:	1b80      	subs	r0, r0, r6
 800253a:	f241 3388 	movw	r3, #5000	; 0x1388
 800253e:	4298      	cmp	r0, r3
 8002540:	d9f0      	bls.n	8002524 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 8002542:	2003      	movs	r0, #3
 8002544:	e0c6      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002546:	2b05      	cmp	r3, #5
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x376>
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	621a      	str	r2, [r3, #32]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	f022 0204 	bic.w	r2, r2, #4
 8002560:	621a      	str	r2, [r3, #32]
 8002562:	e7da      	b.n	800251a <HAL_RCC_OscConfig+0x32c>
 8002564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	f042 0204 	orr.w	r2, r2, #4
 8002572:	621a      	str	r2, [r3, #32]
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	621a      	str	r2, [r3, #32]
 800257c:	e7cd      	b.n	800251a <HAL_RCC_OscConfig+0x32c>
      tickstart = HAL_GetTick();
 800257e:	f7fe fa71 	bl	8000a64 <HAL_GetTick>
 8002582:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f013 0f02 	tst.w	r3, #2
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fa66 	bl	8000a64 <HAL_GetTick>
 8002598:	1b80      	subs	r0, r0, r6
 800259a:	f241 3388 	movw	r3, #5000	; 0x1388
 800259e:	4298      	cmp	r0, r3
 80025a0:	d9f0      	bls.n	8002584 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 80025a2:	2003      	movs	r0, #3
 80025a4:	e096      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
    if (pwrclkchanged == SET)
 80025a6:	bb2d      	cbnz	r5, 80025f4 <HAL_RCC_OscConfig+0x406>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a8:	69e3      	ldr	r3, [r4, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8091 	beq.w	80026d2 <HAL_RCC_OscConfig+0x4e4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025b8:	6852      	ldr	r2, [r2, #4]
 80025ba:	f002 020c 	and.w	r2, r2, #12
 80025be:	2a08      	cmp	r2, #8
 80025c0:	d06e      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4b2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d01f      	beq.n	8002606 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_DISABLE();
 80025c6:	2360      	movs	r3, #96	; 0x60
 80025c8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025d0:	f7fe fa48 	bl	8000a64 <HAL_GetTick>
 80025d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025e4:	d05a      	beq.n	800269c <HAL_RCC_OscConfig+0x4ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fa3d 	bl	8000a64 <HAL_GetTick>
 80025ea:	1b00      	subs	r0, r0, r4
 80025ec:	2802      	cmp	r0, #2
 80025ee:	d9f2      	bls.n	80025d6 <HAL_RCC_OscConfig+0x3e8>
            return HAL_TIMEOUT;
 80025f0:	2003      	movs	r0, #3
 80025f2:	e06f      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002602:	61da      	str	r2, [r3, #28]
 8002604:	e7d0      	b.n	80025a8 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_PLL_DISABLE();
 8002606:	2360      	movs	r3, #96	; 0x60
 8002608:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002610:	f7fe fa28 	bl	8000a64 <HAL_GetTick>
 8002614:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002624:	d006      	beq.n	8002634 <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fa1d 	bl	8000a64 <HAL_GetTick>
 800262a:	1b40      	subs	r0, r0, r5
 800262c:	2802      	cmp	r0, #2
 800262e:	d9f2      	bls.n	8002616 <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 8002630:	2003      	movs	r0, #3
 8002632:	e04f      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002634:	6a23      	ldr	r3, [r4, #32]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263a:	d022      	beq.n	8002682 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002640:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002644:	6853      	ldr	r3, [r2, #4]
 8002646:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800264a:	6a21      	ldr	r1, [r4, #32]
 800264c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800264e:	4301      	orrs	r1, r0
 8002650:	430b      	orrs	r3, r1
 8002652:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002654:	2360      	movs	r3, #96	; 0x60
 8002656:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800265e:	f7fe fa01 	bl	8000a64 <HAL_GetTick>
 8002662:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002672:	d111      	bne.n	8002698 <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe f9f6 	bl	8000a64 <HAL_GetTick>
 8002678:	1b00      	subs	r0, r0, r4
 800267a:	2802      	cmp	r0, #2
 800267c:	d9f2      	bls.n	8002664 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 800267e:	2003      	movs	r0, #3
 8002680:	e028      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002686:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800268a:	6853      	ldr	r3, [r2, #4]
 800268c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002690:	68a1      	ldr	r1, [r4, #8]
 8002692:	430b      	orrs	r3, r1
 8002694:	6053      	str	r3, [r2, #4]
 8002696:	e7d1      	b.n	800263c <HAL_RCC_OscConfig+0x44e>
  return HAL_OK;
 8002698:	2000      	movs	r0, #0
 800269a:	e01b      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
 800269c:	2000      	movs	r0, #0
 800269e:	e019      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d019      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4ea>
        pll_config = RCC->CFGR;
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026ac:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80026b2:	6a22      	ldr	r2, [r4, #32]
 80026b4:	4291      	cmp	r1, r2
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x4ce>
          return HAL_ERROR;
 80026b8:	2001      	movs	r0, #1
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00a      	beq.n	80026dc <HAL_RCC_OscConfig+0x4ee>
          return HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
 80026c8:	e004      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
    return HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
}
 80026cc:	4770      	bx	lr
        return HAL_ERROR;
 80026ce:	2001      	movs	r0, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 80026d2:	2000      	movs	r0, #0
}
 80026d4:	b002      	add	sp, #8
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fb      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 80026dc:	2000      	movs	r0, #0
 80026de:	e7f9      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e6>

080026e0 <HAL_RCC_GetSysClockFreq>:
{
 80026e0:	b410      	push	{r4}
 80026e2:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e4:	f644 3468 	movw	r4, #19304	; 0x4b68
 80026e8:	f6c0 0400 	movt	r4, #2048	; 0x800
 80026ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f0:	f10d 0c18 	add.w	ip, sp, #24
 80026f4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f8:	8a23      	ldrh	r3, [r4, #16]
 80026fa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80026fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002702:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002706:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002708:	f002 030c 	and.w	r3, r2, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d123      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x78>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002710:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002714:	4463      	add	r3, ip
 8002716:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800271a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800271e:	d108      	bne.n	8002732 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002720:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002724:	f2c0 003d 	movt	r0, #61	; 0x3d
 8002728:	fb00 f001 	mul.w	r0, r0, r1
}
 800272c:	b007      	add	sp, #28
 800272e:	bc10      	pop	{r4}
 8002730:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002736:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002740:	4462      	add	r2, ip
 8002742:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002746:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800274a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800274e:	fb03 f001 	mul.w	r0, r3, r1
 8002752:	fbb0 f0f2 	udiv	r0, r0, r2
 8002756:	e7e9      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x4c>
      sysclockfreq = HSE_VALUE;
 8002758:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 800275c:	f2c0 007a 	movt	r0, #122	; 0x7a
  return sysclockfreq;
 8002760:	e7e4      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x4c>

08002762 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002762:	2800      	cmp	r0, #0
 8002764:	f000 80da 	beq.w	800291c <HAL_RCC_ClockConfig+0x1ba>
{
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002770:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	428b      	cmp	r3, r1
 800277c:	d20f      	bcs.n	800279e <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002782:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f022 0207 	bic.w	r2, r2, #7
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	428b      	cmp	r3, r1
 8002798:	d001      	beq.n	800279e <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
}
 800279c:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	f013 0f02 	tst.w	r3, #2
 80027a4:	d020      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x86>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a6:	f013 0f04 	tst.w	r3, #4
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80027ba:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	f013 0f08 	tst.w	r3, #8
 80027c2:	d007      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80027d2:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027dc:	6853      	ldr	r3, [r2, #4]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e2:	68a0      	ldr	r0, [r4, #8]
 80027e4:	4303      	orrs	r3, r0
 80027e6:	6053      	str	r3, [r2, #4]
 80027e8:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	f013 0f01 	tst.w	r3, #1
 80027f0:	d041      	beq.n	8002876 <HAL_RCC_ClockConfig+0x114>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d02a      	beq.n	800284e <HAL_RCC_ClockConfig+0xec>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d032      	beq.n	8002862 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002800:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	f012 0f02 	tst.w	r2, #2
 800280a:	f000 8089 	beq.w	8002920 <HAL_RCC_ClockConfig+0x1be>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002812:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002816:	6851      	ldr	r1, [r2, #4]
 8002818:	f021 0103 	bic.w	r1, r1, #3
 800281c:	430b      	orrs	r3, r1
 800281e:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 8002820:	f7fe f920 	bl	8000a64 <HAL_GetTick>
 8002824:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	6862      	ldr	r2, [r4, #4]
 8002836:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800283a:	d01c      	beq.n	8002876 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe f912 	bl	8000a64 <HAL_GetTick>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	f241 3388 	movw	r3, #5000	; 0x1388
 8002846:	4298      	cmp	r0, r3
 8002848:	d9ed      	bls.n	8002826 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 800284a:	2003      	movs	r0, #3
 800284c:	e7a6      	b.n	800279c <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002852:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800285c:	d1d7      	bne.n	800280e <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 800285e:	2001      	movs	r0, #1
 8002860:	e79c      	b.n	800279c <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002866:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002870:	d1cd      	bne.n	800280e <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8002872:	2001      	movs	r0, #1
 8002874:	e792      	b.n	800279c <HAL_RCC_ClockConfig+0x3a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	42ab      	cmp	r3, r5
 8002886:	d90f      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800288c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f022 0207 	bic.w	r2, r2, #7
 8002896:	432a      	orrs	r2, r5
 8002898:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	42ab      	cmp	r3, r5
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
 80028a6:	e779      	b.n	800279c <HAL_RCC_ClockConfig+0x3a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	f013 0f04 	tst.w	r3, #4
 80028ae:	d009      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028b8:	6853      	ldr	r3, [r2, #4]
 80028ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028be:	68e1      	ldr	r1, [r4, #12]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	f013 0f08 	tst.w	r3, #8
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x180>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028d4:	6853      	ldr	r3, [r2, #4]
 80028d6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80028da:	6921      	ldr	r1, [r4, #16]
 80028dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028e0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e2:	f7ff fefd 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028f4:	f644 4278 	movw	r2, #19576	; 0x4c78
 80028f8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	40d8      	lsrs	r0, r3
 8002900:	f240 0300 	movw	r3, #0
 8002904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002908:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800290a:	f240 0308 	movw	r3, #8
 800290e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f7fe f85e 	bl	80009d4 <HAL_InitTick>
  return HAL_OK;
 8002918:	2000      	movs	r0, #0
 800291a:	e73f      	b.n	800279c <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 800291c:	2001      	movs	r0, #1
}
 800291e:	4770      	bx	lr
        return HAL_ERROR;
 8002920:	2001      	movs	r0, #1
 8002922:	e73b      	b.n	800279c <HAL_RCC_ClockConfig+0x3a>

08002924 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800292a:	6803      	ldr	r3, [r0, #0]
 800292c:	f013 0f01 	tst.w	r3, #1
 8002930:	d049      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002936:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002940:	d160      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002950:	61da      	str	r2, [r3, #28]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800295c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002962:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f413 7f80 	tst.w	r3, #256	; 0x100
 800296c:	d04c      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800296e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002976:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002978:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800297c:	d017      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800297e:	6862      	ldr	r2, [r4, #4]
 8002980:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002984:	429a      	cmp	r2, r3
 8002986:	d012      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002990:	6a19      	ldr	r1, [r3, #32]
 8002992:	f421 7040 	bic.w	r0, r1, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002996:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800299a:	f2c4 2242 	movt	r2, #16962	; 0x4242
 800299e:	2601      	movs	r6, #1
 80029a0:	6016      	str	r6, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a2:	2600      	movs	r6, #0
 80029a4:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a6:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029a8:	f011 0f01 	tst.w	r1, #1
 80029ac:	d146      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029b6:	6a13      	ldr	r3, [r2, #32]
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	6861      	ldr	r1, [r4, #4]
 80029be:	430b      	orrs	r3, r1
 80029c0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c2:	2d00      	cmp	r5, #0
 80029c4:	d14e      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f013 0f02 	tst.w	r3, #2
 80029cc:	d009      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029d6:	6853      	ldr	r3, [r2, #4]
 80029d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029dc:	68a1      	ldr	r1, [r4, #8]
 80029de:	430b      	orrs	r3, r1
 80029e0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f013 0f10 	tst.w	r3, #16
 80029e8:	d045      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029f2:	6853      	ldr	r3, [r2, #4]
 80029f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029f8:	68e1      	ldr	r1, [r4, #12]
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029fe:	2000      	movs	r0, #0
}
 8002a00:	b002      	add	sp, #8
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002a04:	2500      	movs	r5, #0
 8002a06:	e7aa      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a08:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002a0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a18:	f7fe f824 	bl	8000a64 <HAL_GetTick>
 8002a1c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002a22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a2c:	d19f      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe f819 	bl	8000a64 <HAL_GetTick>
 8002a32:	1b80      	subs	r0, r0, r6
 8002a34:	2864      	cmp	r0, #100	; 0x64
 8002a36:	d9f2      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 8002a38:	2003      	movs	r0, #3
 8002a3a:	e7e1      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8002a3c:	f7fe f812 	bl	8000a64 <HAL_GetTick>
 8002a40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f013 0f02 	tst.w	r3, #2
 8002a50:	d1ad      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe f807 	bl	8000a64 <HAL_GetTick>
 8002a56:	1b80      	subs	r0, r0, r6
 8002a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	d9f0      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
 8002a60:	2003      	movs	r0, #3
 8002a62:	e7cd      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a72:	61da      	str	r2, [r3, #28]
 8002a74:	e7a7      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  return HAL_OK;
 8002a76:	2000      	movs	r0, #0
 8002a78:	e7c2      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xdc>

08002a7a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	a801      	add	r0, sp, #4
 8002a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002a82:	2000      	movs	r0, #0
 8002a84:	b004      	add	sp, #16
 8002a86:	4770      	bx	lr

08002a88 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a8e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8002a92:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	4770      	bx	lr

08002a9a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a9a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002a9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002aa2:	045b      	lsls	r3, r3, #17
 8002aa4:	0c5b      	lsrs	r3, r3, #17
 8002aa6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002aaa:	2000      	movs	r0, #0
 8002aac:	4770      	bx	lr

08002aae <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4770      	bx	lr

08002ab2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	b410      	push	{r4}
 8002ab6:	ac02      	add	r4, sp, #8
 8002ab8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ac8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002acc:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bc10      	pop	{r4}
 8002ad4:	b004      	add	sp, #16
 8002ad6:	4770      	bx	lr

08002ad8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ad8:	b430      	push	{r4, r5}
 8002ada:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002adc:	780c      	ldrb	r4, [r1, #0]
 8002ade:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002ae8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002aec:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002aee:	78c8      	ldrb	r0, [r1, #3]
 8002af0:	2803      	cmp	r0, #3
 8002af2:	d85a      	bhi.n	8002baa <USB_ActivateEndpoint+0xd2>
 8002af4:	e8df f000 	tbb	[pc, r0]
 8002af8:	5102554d 	.word	0x5102554d
  HAL_StatusTypeDef ret = HAL_OK;
 8002afc:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002afe:	f248 0580 	movw	r5, #32896	; 0x8080
 8002b02:	432a      	orrs	r2, r5
 8002b04:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b08:	780c      	ldrb	r4, [r1, #0]
 8002b0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002b0e:	b292      	uxth	r2, r2
 8002b10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002b14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b18:	4322      	orrs	r2, r4
 8002b1a:	432a      	orrs	r2, r5
 8002b1c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8002b20:	7b0a      	ldrb	r2, [r1, #12]
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	f040 80b1 	bne.w	8002c8a <USB_ActivateEndpoint+0x1b2>
  {
    if (ep->is_in != 0U)
 8002b28:	784a      	ldrb	r2, [r1, #1]
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d04e      	beq.n	8002bcc <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b2e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002b32:	441a      	add	r2, r3
 8002b34:	780c      	ldrb	r4, [r1, #0]
 8002b36:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002b3a:	88cc      	ldrh	r4, [r1, #6]
 8002b3c:	0864      	lsrs	r4, r4, #1
 8002b3e:	0064      	lsls	r4, r4, #1
 8002b40:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b44:	780c      	ldrb	r4, [r1, #0]
 8002b46:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002b4a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b4e:	d00c      	beq.n	8002b6a <USB_ActivateEndpoint+0x92>
 8002b50:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002b54:	b292      	uxth	r2, r2
 8002b56:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002b5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b62:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002b66:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002b6a:	78ca      	ldrb	r2, [r1, #3]
 8002b6c:	2a01      	cmp	r2, #1
 8002b6e:	d01e      	beq.n	8002bae <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b70:	7809      	ldrb	r1, [r1, #0]
 8002b72:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002b76:	b292      	uxth	r2, r2
 8002b78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b80:	f082 0220 	eor.w	r2, r2, #32
 8002b84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b8c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002b90:	e060      	b.n	8002c54 <USB_ActivateEndpoint+0x17c>
      wEpRegVal |= USB_EP_CONTROL;
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002b96:	2000      	movs	r0, #0
      break;
 8002b98:	e7b1      	b.n	8002afe <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b9a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002b9e:	2000      	movs	r0, #0
      break;
 8002ba0:	e7ad      	b.n	8002afe <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8002ba6:	2000      	movs	r0, #0
      break;
 8002ba8:	e7a9      	b.n	8002afe <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
 8002bac:	e7a7      	b.n	8002afe <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bae:	7809      	ldrb	r1, [r1, #0]
 8002bb0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bc6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002bca:	e043      	b.n	8002c54 <USB_ActivateEndpoint+0x17c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bcc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002bd0:	441a      	add	r2, r3
 8002bd2:	780c      	ldrb	r4, [r1, #0]
 8002bd4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002bd8:	88cc      	ldrh	r4, [r1, #6]
 8002bda:	0864      	lsrs	r4, r4, #1
 8002bdc:	0064      	lsls	r4, r4, #1
 8002bde:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002be2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002be6:	441a      	add	r2, r3
 8002be8:	780c      	ldrb	r4, [r1, #0]
 8002bea:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002bee:	690c      	ldr	r4, [r1, #16]
 8002bf0:	bb94      	cbnz	r4, 8002c58 <USB_ActivateEndpoint+0x180>
 8002bf2:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8002bf6:	b2a4      	uxth	r4, r4
 8002bf8:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8002bfc:	b2a4      	uxth	r4, r4
 8002bfe:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8002c02:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8002c06:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002c0a:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c0e:	780c      	ldrb	r4, [r1, #0]
 8002c10:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002c14:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002c18:	d00c      	beq.n	8002c34 <USB_ActivateEndpoint+0x15c>
 8002c1a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002c24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c28:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c30:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c34:	7809      	ldrb	r1, [r1, #0]
 8002c36:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c44:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c50:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002c54:	bc30      	pop	{r4, r5}
 8002c56:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c58:	2c3e      	cmp	r4, #62	; 0x3e
 8002c5a:	d809      	bhi.n	8002c70 <USB_ActivateEndpoint+0x198>
 8002c5c:	0865      	lsrs	r5, r4, #1
 8002c5e:	f014 0f01 	tst.w	r4, #1
 8002c62:	d000      	beq.n	8002c66 <USB_ActivateEndpoint+0x18e>
 8002c64:	3501      	adds	r5, #1
 8002c66:	02ad      	lsls	r5, r5, #10
 8002c68:	b2ad      	uxth	r5, r5
 8002c6a:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 8002c6e:	e7ce      	b.n	8002c0e <USB_ActivateEndpoint+0x136>
 8002c70:	0965      	lsrs	r5, r4, #5
 8002c72:	f014 0f1f 	tst.w	r4, #31
 8002c76:	d100      	bne.n	8002c7a <USB_ActivateEndpoint+0x1a2>
 8002c78:	3d01      	subs	r5, #1
 8002c7a:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8002c7e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002c82:	b2a4      	uxth	r4, r4
 8002c84:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8002c88:	e7c1      	b.n	8002c0e <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002c8a:	780c      	ldrb	r4, [r1, #0]
 8002c8c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002c90:	b292      	uxth	r2, r2
 8002c92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c9a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002c9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002ca6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002caa:	441a      	add	r2, r3
 8002cac:	780c      	ldrb	r4, [r1, #0]
 8002cae:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002cb2:	890c      	ldrh	r4, [r1, #8]
 8002cb4:	0864      	lsrs	r4, r4, #1
 8002cb6:	0064      	lsls	r4, r4, #1
 8002cb8:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8002cbc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002cc0:	441a      	add	r2, r3
 8002cc2:	780c      	ldrb	r4, [r1, #0]
 8002cc4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002cc8:	894c      	ldrh	r4, [r1, #10]
 8002cca:	0864      	lsrs	r4, r4, #1
 8002ccc:	0064      	lsls	r4, r4, #1
 8002cce:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8002cd2:	784a      	ldrb	r2, [r1, #1]
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d140      	bne.n	8002d5a <USB_ActivateEndpoint+0x282>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cd8:	780c      	ldrb	r4, [r1, #0]
 8002cda:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002cde:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002ce2:	d00c      	beq.n	8002cfe <USB_ActivateEndpoint+0x226>
 8002ce4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cf2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cfa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cfe:	780c      	ldrb	r4, [r1, #0]
 8002d00:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d08:	d00c      	beq.n	8002d24 <USB_ActivateEndpoint+0x24c>
 8002d0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002d14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002d20:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d24:	780d      	ldrb	r5, [r1, #0]
 8002d26:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002d2a:	b292      	uxth	r2, r2
 8002d2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d34:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002d38:	f248 0480 	movw	r4, #32896	; 0x8080
 8002d3c:	4322      	orrs	r2, r4
 8002d3e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d42:	7809      	ldrb	r1, [r1, #0]
 8002d44:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d52:	4322      	orrs	r2, r4
 8002d54:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002d58:	e77c      	b.n	8002c54 <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d5a:	780c      	ldrb	r4, [r1, #0]
 8002d5c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d60:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002d64:	d00c      	beq.n	8002d80 <USB_ActivateEndpoint+0x2a8>
 8002d66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002d70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d74:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d80:	780c      	ldrb	r4, [r1, #0]
 8002d82:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d8a:	d00c      	beq.n	8002da6 <USB_ActivateEndpoint+0x2ce>
 8002d8c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d90:	b292      	uxth	r2, r2
 8002d92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002da2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002da6:	78ca      	ldrb	r2, [r1, #3]
 8002da8:	2a01      	cmp	r2, #1
 8002daa:	d01e      	beq.n	8002dea <USB_ActivateEndpoint+0x312>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002dac:	780c      	ldrb	r4, [r1, #0]
 8002dae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002db2:	b292      	uxth	r2, r2
 8002db4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbc:	f082 0220 	eor.w	r2, r2, #32
 8002dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002dcc:	7809      	ldrb	r1, [r1, #0]
 8002dce:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002de8:	e734      	b.n	8002c54 <USB_ActivateEndpoint+0x17c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dea:	780c      	ldrb	r4, [r1, #0]
 8002dec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e02:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8002e06:	e7e1      	b.n	8002dcc <USB_ActivateEndpoint+0x2f4>

08002e08 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002e08:	7b0b      	ldrb	r3, [r1, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d146      	bne.n	8002e9c <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8002e0e:	784b      	ldrb	r3, [r1, #1]
 8002e10:	b313      	cbz	r3, 8002e58 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e12:	780a      	ldrb	r2, [r1, #0]
 8002e14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e1c:	d00c      	beq.n	8002e38 <USB_DeactivateEndpoint+0x30>
 8002e1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e38:	780a      	ldrb	r2, [r1, #0]
 8002e3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002e54:	2000      	movs	r0, #0
 8002e56:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e58:	780a      	ldrb	r2, [r1, #0]
 8002e5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e5e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002e62:	d00c      	beq.n	8002e7e <USB_DeactivateEndpoint+0x76>
 8002e64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e7e:	780a      	ldrb	r2, [r1, #0]
 8002e80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002e9a:	e7db      	b.n	8002e54 <USB_DeactivateEndpoint+0x4c>
{
 8002e9c:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8002e9e:	784b      	ldrb	r3, [r1, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d14e      	bne.n	8002f42 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ea4:	780a      	ldrb	r2, [r1, #0]
 8002ea6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eaa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002eae:	d00c      	beq.n	8002eca <USB_DeactivateEndpoint+0xc2>
 8002eb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002eca:	780a      	ldrb	r2, [r1, #0]
 8002ecc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ed0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ed4:	d00c      	beq.n	8002ef0 <USB_DeactivateEndpoint+0xe8>
 8002ed6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002ef0:	780a      	ldrb	r2, [r1, #0]
 8002ef2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f0c:	780b      	ldrb	r3, [r1, #0]
 8002f0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f1c:	f248 0480 	movw	r4, #32896	; 0x8080
 8002f20:	4322      	orrs	r2, r4
 8002f22:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f26:	780a      	ldrb	r2, [r1, #0]
 8002f28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f36:	4323      	orrs	r3, r4
 8002f38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	bc10      	pop	{r4}
 8002f40:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f42:	780a      	ldrb	r2, [r1, #0]
 8002f44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f48:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002f4c:	d00c      	beq.n	8002f68 <USB_DeactivateEndpoint+0x160>
 8002f4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f68:	780a      	ldrb	r2, [r1, #0]
 8002f6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f72:	d00c      	beq.n	8002f8e <USB_DeactivateEndpoint+0x186>
 8002f74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002f8e:	780a      	ldrb	r2, [r1, #0]
 8002f90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002faa:	780b      	ldrb	r3, [r1, #0]
 8002fac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fba:	f248 0480 	movw	r4, #32896	; 0x8080
 8002fbe:	4322      	orrs	r2, r4
 8002fc0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fc4:	780a      	ldrb	r2, [r1, #0]
 8002fc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	4323      	orrs	r3, r4
 8002fd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002fda:	e7af      	b.n	8002f3c <USB_DeactivateEndpoint+0x134>

08002fdc <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002fdc:	784b      	ldrb	r3, [r1, #1]
 8002fde:	b98b      	cbnz	r3, 8003004 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002fe0:	780a      	ldrb	r2, [r1, #0]
 8002fe2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003000:	2000      	movs	r0, #0
 8003002:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003004:	780a      	ldrb	r2, [r1, #0]
 8003006:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003014:	f083 0310 	eor.w	r3, r3, #16
 8003018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003020:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003024:	e7ec      	b.n	8003000 <USB_EPSetStall+0x24>

08003026 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003026:	7b0b      	ldrb	r3, [r1, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d14b      	bne.n	80030c4 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800302c:	784b      	ldrb	r3, [r1, #1]
 800302e:	b333      	cbz	r3, 800307e <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003030:	780a      	ldrb	r2, [r1, #0]
 8003032:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003036:	f013 0f40 	tst.w	r3, #64	; 0x40
 800303a:	d00c      	beq.n	8003056 <USB_EPClearStall+0x30>
 800303c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003052:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003056:	78cb      	ldrb	r3, [r1, #3]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d033      	beq.n	80030c4 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800305c:	780a      	ldrb	r2, [r1, #0]
 800305e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306c:	f083 0320 	eor.w	r3, r3, #32
 8003070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800307c:	e022      	b.n	80030c4 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800307e:	780a      	ldrb	r2, [r1, #0]
 8003080:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003084:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003088:	d00c      	beq.n	80030a4 <USB_EPClearStall+0x7e>
 800308a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030a4:	780a      	ldrb	r2, [r1, #0]
 80030a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80030b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80030c4:	2000      	movs	r0, #0
 80030c6:	4770      	bx	lr

080030c8 <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 80030c8:	4603      	mov	r3, r0
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030ca:	2201      	movs	r2, #1
 80030cc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 80030d0:	2000      	movs	r0, #0
 80030d2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 80030d6:	2203      	movs	r2, #3
 80030d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80030dc:	4770      	bx	lr

080030de <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80030de:	b911      	cbnz	r1, 80030e6 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80030e6:	2000      	movs	r0, #0
 80030e8:	4770      	bx	lr

080030ea <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80030ea:	2000      	movs	r0, #0
 80030ec:	4770      	bx	lr

080030ee <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80030ee:	2000      	movs	r0, #0
 80030f0:	4770      	bx	lr

080030f2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80030f2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80030f6:	4770      	bx	lr

080030f8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80030f8:	2000      	movs	r0, #0
 80030fa:	4770      	bx	lr

080030fc <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80030fc:	3301      	adds	r3, #1
 80030fe:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003100:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003104:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003108:	b163      	cbz	r3, 8003124 <USB_WritePMA+0x28>
{
 800310a:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 800310c:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800310e:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8003110:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8003114:	f822 4b04 	strh.w	r4, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003118:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800311a:	3b01      	subs	r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f5      	bne.n	800310c <USB_WritePMA+0x10>
  }
}
 8003120:	bc10      	pop	{r4}
 8003122:	4770      	bx	lr
 8003124:	4770      	bx	lr

08003126 <USB_EPStartXfer>:
{
 8003126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003128:	784a      	ldrb	r2, [r1, #1]
 800312a:	2a01      	cmp	r2, #1
 800312c:	d033      	beq.n	8003196 <USB_EPStartXfer+0x70>
    if (ep->doublebuffer == 0U)
 800312e:	7b0b      	ldrb	r3, [r1, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 827c 	bne.w	800362e <USB_EPStartXfer+0x508>
      if (ep->xfer_len > ep->maxpacket)
 8003136:	698b      	ldr	r3, [r1, #24]
 8003138:	690a      	ldr	r2, [r1, #16]
 800313a:	4293      	cmp	r3, r2
 800313c:	f240 825a 	bls.w	80035f4 <USB_EPStartXfer+0x4ce>
        ep->xfer_len -= len;
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003144:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003148:	4403      	add	r3, r0
 800314a:	780c      	ldrb	r4, [r1, #0]
 800314c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003150:	2a00      	cmp	r2, #0
 8003152:	f040 8253 	bne.w	80035fc <USB_EPStartXfer+0x4d6>
 8003156:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800315a:	b292      	uxth	r2, r2
 800315c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003160:	b292      	uxth	r2, r2
 8003162:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003166:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800316a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003172:	780a      	ldrb	r2, [r1, #0]
 8003174:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003178:	b29b      	uxth	r3, r3
 800317a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  return HAL_OK;
 8003192:	2000      	movs	r0, #0
}
 8003194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8003196:	698e      	ldr	r6, [r1, #24]
 8003198:	690f      	ldr	r7, [r1, #16]
 800319a:	42be      	cmp	r6, r7
 800319c:	d900      	bls.n	80031a0 <USB_EPStartXfer+0x7a>
      len = ep->maxpacket;
 800319e:	463e      	mov	r6, r7
 80031a0:	460c      	mov	r4, r1
 80031a2:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 80031a4:	7b0b      	ldrb	r3, [r1, #12]
 80031a6:	b31b      	cbz	r3, 80031f0 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 80031a8:	78cb      	ldrb	r3, [r1, #3]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d040      	beq.n	8003230 <USB_EPStartXfer+0x10a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80031ae:	780b      	ldrb	r3, [r1, #0]
 80031b0:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 80031b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80031b8:	f000 81d1 	beq.w	800355e <USB_EPStartXfer+0x438>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80031bc:	2a00      	cmp	r2, #0
 80031be:	f040 81ae 	bne.w	800351e <USB_EPStartXfer+0x3f8>
 80031c2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80031c6:	4402      	add	r2, r0
 80031c8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	f040 818d 	bne.w	80034ec <USB_EPStartXfer+0x3c6>
 80031d2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80031d6:	b292      	uxth	r2, r2
 80031d8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80031dc:	b292      	uxth	r2, r2
 80031de:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80031e2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80031e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ea:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80031ee:	e19e      	b.n	800352e <USB_EPStartXfer+0x408>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80031f0:	b2b6      	uxth	r6, r6
 80031f2:	4633      	mov	r3, r6
 80031f4:	88ca      	ldrh	r2, [r1, #6]
 80031f6:	6949      	ldr	r1, [r1, #20]
 80031f8:	f7ff ff80 	bl	80030fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80031fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003200:	442b      	add	r3, r5
 8003202:	7822      	ldrb	r2, [r4, #0]
 8003204:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003208:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800320c:	7822      	ldrb	r2, [r4, #0]
 800320e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800322c:	2000      	movs	r0, #0
 800322e:	e7b1      	b.n	8003194 <USB_EPStartXfer+0x6e>
        if (ep->xfer_len_db > ep->maxpacket)
 8003230:	6a0b      	ldr	r3, [r1, #32]
 8003232:	429f      	cmp	r7, r3
 8003234:	f080 813e 	bcs.w	80034b4 <USB_EPStartXfer+0x38e>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003238:	780a      	ldrb	r2, [r1, #0]
 800323a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003248:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003254:	6a0b      	ldr	r3, [r1, #32]
 8003256:	1b9b      	subs	r3, r3, r6
 8003258:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800325a:	780b      	ldrb	r3, [r1, #0]
 800325c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003260:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003264:	f000 8093 	beq.w	800338e <USB_EPStartXfer+0x268>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003268:	784a      	ldrb	r2, [r1, #1]
 800326a:	bb6a      	cbnz	r2, 80032c8 <USB_EPStartXfer+0x1a2>
 800326c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003270:	4402      	add	r2, r0
 8003272:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003276:	b976      	cbnz	r6, 8003296 <USB_EPStartXfer+0x170>
 8003278:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800327c:	b292      	uxth	r2, r2
 800327e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003282:	b292      	uxth	r2, r2
 8003284:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003288:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800328c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003290:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003294:	e01a      	b.n	80032cc <USB_EPStartXfer+0x1a6>
 8003296:	2e3e      	cmp	r6, #62	; 0x3e
 8003298:	d809      	bhi.n	80032ae <USB_EPStartXfer+0x188>
 800329a:	0872      	lsrs	r2, r6, #1
 800329c:	f016 0f01 	tst.w	r6, #1
 80032a0:	d000      	beq.n	80032a4 <USB_EPStartXfer+0x17e>
 80032a2:	3201      	adds	r2, #1
 80032a4:	0292      	lsls	r2, r2, #10
 80032a6:	b292      	uxth	r2, r2
 80032a8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80032ac:	e00e      	b.n	80032cc <USB_EPStartXfer+0x1a6>
 80032ae:	0972      	lsrs	r2, r6, #5
 80032b0:	f016 0f1f 	tst.w	r6, #31
 80032b4:	d100      	bne.n	80032b8 <USB_EPStartXfer+0x192>
 80032b6:	3a01      	subs	r2, #1
 80032b8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80032bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80032c0:	b292      	uxth	r2, r2
 80032c2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80032c6:	e001      	b.n	80032cc <USB_EPStartXfer+0x1a6>
 80032c8:	2a01      	cmp	r2, #1
 80032ca:	d027      	beq.n	800331c <USB_EPStartXfer+0x1f6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80032cc:	b2b3      	uxth	r3, r6
 80032ce:	8962      	ldrh	r2, [r4, #10]
 80032d0:	6961      	ldr	r1, [r4, #20]
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7ff ff12 	bl	80030fc <USB_WritePMA>
            ep->xfer_buff += len;
 80032d8:	6963      	ldr	r3, [r4, #20]
 80032da:	4433      	add	r3, r6
 80032dc:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80032de:	6a23      	ldr	r3, [r4, #32]
 80032e0:	6922      	ldr	r2, [r4, #16]
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d923      	bls.n	800332e <USB_EPStartXfer+0x208>
              ep->xfer_len_db -= len;
 80032e6:	1b9b      	subs	r3, r3, r6
 80032e8:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032ea:	7863      	ldrb	r3, [r4, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d13b      	bne.n	8003368 <USB_EPStartXfer+0x242>
 80032f0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80032f4:	442b      	add	r3, r5
 80032f6:	7822      	ldrb	r2, [r4, #0]
 80032f8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80032fc:	b9de      	cbnz	r6, 8003336 <USB_EPStartXfer+0x210>
 80032fe:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003302:	b292      	uxth	r2, r2
 8003304:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003308:	b292      	uxth	r2, r2
 800330a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800330e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003316:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800331a:	e027      	b.n	800336c <USB_EPStartXfer+0x246>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800331c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003320:	4402      	add	r2, r0
 8003322:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003326:	b2b2      	uxth	r2, r6
 8003328:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800332c:	e7ce      	b.n	80032cc <USB_EPStartXfer+0x1a6>
              ep->xfer_len_db = 0U;
 800332e:	2200      	movs	r2, #0
 8003330:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003332:	461e      	mov	r6, r3
 8003334:	e7d9      	b.n	80032ea <USB_EPStartXfer+0x1c4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003336:	2e3e      	cmp	r6, #62	; 0x3e
 8003338:	d809      	bhi.n	800334e <USB_EPStartXfer+0x228>
 800333a:	0872      	lsrs	r2, r6, #1
 800333c:	f016 0f01 	tst.w	r6, #1
 8003340:	d000      	beq.n	8003344 <USB_EPStartXfer+0x21e>
 8003342:	3201      	adds	r2, #1
 8003344:	0292      	lsls	r2, r2, #10
 8003346:	b292      	uxth	r2, r2
 8003348:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800334c:	e00e      	b.n	800336c <USB_EPStartXfer+0x246>
 800334e:	0972      	lsrs	r2, r6, #5
 8003350:	f016 0f1f 	tst.w	r6, #31
 8003354:	d100      	bne.n	8003358 <USB_EPStartXfer+0x232>
 8003356:	3a01      	subs	r2, #1
 8003358:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800335c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003360:	b292      	uxth	r2, r2
 8003362:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003366:	e001      	b.n	800336c <USB_EPStartXfer+0x246>
 8003368:	2b01      	cmp	r3, #1
 800336a:	d006      	beq.n	800337a <USB_EPStartXfer+0x254>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800336c:	b2b3      	uxth	r3, r6
 800336e:	8922      	ldrh	r2, [r4, #8]
 8003370:	6961      	ldr	r1, [r4, #20]
 8003372:	4628      	mov	r0, r5
 8003374:	f7ff fec2 	bl	80030fc <USB_WritePMA>
 8003378:	e748      	b.n	800320c <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800337a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800337e:	442b      	add	r3, r5
 8003380:	7822      	ldrb	r2, [r4, #0]
 8003382:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003386:	b2b2      	uxth	r2, r6
 8003388:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800338c:	e7ee      	b.n	800336c <USB_EPStartXfer+0x246>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800338e:	784a      	ldrb	r2, [r1, #1]
 8003390:	bb6a      	cbnz	r2, 80033ee <USB_EPStartXfer+0x2c8>
 8003392:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003396:	4402      	add	r2, r0
 8003398:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800339c:	b976      	cbnz	r6, 80033bc <USB_EPStartXfer+0x296>
 800339e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80033a2:	b292      	uxth	r2, r2
 80033a4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80033a8:	b292      	uxth	r2, r2
 80033aa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80033ae:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80033ba:	e01a      	b.n	80033f2 <USB_EPStartXfer+0x2cc>
 80033bc:	2e3e      	cmp	r6, #62	; 0x3e
 80033be:	d809      	bhi.n	80033d4 <USB_EPStartXfer+0x2ae>
 80033c0:	0872      	lsrs	r2, r6, #1
 80033c2:	f016 0f01 	tst.w	r6, #1
 80033c6:	d000      	beq.n	80033ca <USB_EPStartXfer+0x2a4>
 80033c8:	3201      	adds	r2, #1
 80033ca:	0292      	lsls	r2, r2, #10
 80033cc:	b292      	uxth	r2, r2
 80033ce:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80033d2:	e00e      	b.n	80033f2 <USB_EPStartXfer+0x2cc>
 80033d4:	0972      	lsrs	r2, r6, #5
 80033d6:	f016 0f1f 	tst.w	r6, #31
 80033da:	d100      	bne.n	80033de <USB_EPStartXfer+0x2b8>
 80033dc:	3a01      	subs	r2, #1
 80033de:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80033e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80033e6:	b292      	uxth	r2, r2
 80033e8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80033ec:	e001      	b.n	80033f2 <USB_EPStartXfer+0x2cc>
 80033ee:	2a01      	cmp	r2, #1
 80033f0:	d027      	beq.n	8003442 <USB_EPStartXfer+0x31c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033f2:	b2b3      	uxth	r3, r6
 80033f4:	8922      	ldrh	r2, [r4, #8]
 80033f6:	6961      	ldr	r1, [r4, #20]
 80033f8:	4628      	mov	r0, r5
 80033fa:	f7ff fe7f 	bl	80030fc <USB_WritePMA>
            ep->xfer_buff += len;
 80033fe:	6963      	ldr	r3, [r4, #20]
 8003400:	4433      	add	r3, r6
 8003402:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003404:	6a23      	ldr	r3, [r4, #32]
 8003406:	6922      	ldr	r2, [r4, #16]
 8003408:	4293      	cmp	r3, r2
 800340a:	d923      	bls.n	8003454 <USB_EPStartXfer+0x32e>
              ep->xfer_len_db -= len;
 800340c:	1b9b      	subs	r3, r3, r6
 800340e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003410:	7863      	ldrb	r3, [r4, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d13b      	bne.n	800348e <USB_EPStartXfer+0x368>
 8003416:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800341a:	442b      	add	r3, r5
 800341c:	7822      	ldrb	r2, [r4, #0]
 800341e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003422:	b9de      	cbnz	r6, 800345c <USB_EPStartXfer+0x336>
 8003424:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003428:	b292      	uxth	r2, r2
 800342a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800342e:	b292      	uxth	r2, r2
 8003430:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003434:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003440:	e027      	b.n	8003492 <USB_EPStartXfer+0x36c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003442:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003446:	4402      	add	r2, r0
 8003448:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800344c:	b2b2      	uxth	r2, r6
 800344e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003452:	e7ce      	b.n	80033f2 <USB_EPStartXfer+0x2cc>
              ep->xfer_len_db = 0U;
 8003454:	2200      	movs	r2, #0
 8003456:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003458:	461e      	mov	r6, r3
 800345a:	e7d9      	b.n	8003410 <USB_EPStartXfer+0x2ea>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800345c:	2e3e      	cmp	r6, #62	; 0x3e
 800345e:	d809      	bhi.n	8003474 <USB_EPStartXfer+0x34e>
 8003460:	0872      	lsrs	r2, r6, #1
 8003462:	f016 0f01 	tst.w	r6, #1
 8003466:	d000      	beq.n	800346a <USB_EPStartXfer+0x344>
 8003468:	3201      	adds	r2, #1
 800346a:	0292      	lsls	r2, r2, #10
 800346c:	b292      	uxth	r2, r2
 800346e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003472:	e00e      	b.n	8003492 <USB_EPStartXfer+0x36c>
 8003474:	0972      	lsrs	r2, r6, #5
 8003476:	f016 0f1f 	tst.w	r6, #31
 800347a:	d100      	bne.n	800347e <USB_EPStartXfer+0x358>
 800347c:	3a01      	subs	r2, #1
 800347e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003482:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003486:	b292      	uxth	r2, r2
 8003488:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800348c:	e001      	b.n	8003492 <USB_EPStartXfer+0x36c>
 800348e:	2b01      	cmp	r3, #1
 8003490:	d006      	beq.n	80034a0 <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003492:	b2b3      	uxth	r3, r6
 8003494:	8962      	ldrh	r2, [r4, #10]
 8003496:	6961      	ldr	r1, [r4, #20]
 8003498:	4628      	mov	r0, r5
 800349a:	f7ff fe2f 	bl	80030fc <USB_WritePMA>
 800349e:	e6b5      	b.n	800320c <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034a0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80034a4:	442b      	add	r3, r5
 80034a6:	7822      	ldrb	r2, [r4, #0]
 80034a8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80034ac:	b2b2      	uxth	r2, r6
 80034ae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80034b2:	e7ee      	b.n	8003492 <USB_EPStartXfer+0x36c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80034b4:	7809      	ldrb	r1, [r1, #0]
 80034b6:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80034ba:	b292      	uxth	r2, r2
 80034bc:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80034c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034cc:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80034d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80034d4:	4402      	add	r2, r0
 80034d6:	7821      	ldrb	r1, [r4, #0]
 80034d8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034e2:	8922      	ldrh	r2, [r4, #8]
 80034e4:	6961      	ldr	r1, [r4, #20]
 80034e6:	f7ff fe09 	bl	80030fc <USB_WritePMA>
 80034ea:	e68f      	b.n	800320c <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034ec:	2e3e      	cmp	r6, #62	; 0x3e
 80034ee:	d809      	bhi.n	8003504 <USB_EPStartXfer+0x3de>
 80034f0:	0872      	lsrs	r2, r6, #1
 80034f2:	f016 0f01 	tst.w	r6, #1
 80034f6:	d000      	beq.n	80034fa <USB_EPStartXfer+0x3d4>
 80034f8:	3201      	adds	r2, #1
 80034fa:	0292      	lsls	r2, r2, #10
 80034fc:	b292      	uxth	r2, r2
 80034fe:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003502:	e014      	b.n	800352e <USB_EPStartXfer+0x408>
 8003504:	0972      	lsrs	r2, r6, #5
 8003506:	f016 0f1f 	tst.w	r6, #31
 800350a:	d100      	bne.n	800350e <USB_EPStartXfer+0x3e8>
 800350c:	3a01      	subs	r2, #1
 800350e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003512:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003516:	b292      	uxth	r2, r2
 8003518:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800351c:	e007      	b.n	800352e <USB_EPStartXfer+0x408>
 800351e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003522:	4402      	add	r2, r0
 8003524:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003528:	b2b2      	uxth	r2, r6
 800352a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          pmabuffer = ep->pmaaddr1;
 800352e:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003530:	b2b3      	uxth	r3, r6
 8003532:	6961      	ldr	r1, [r4, #20]
 8003534:	4628      	mov	r0, r5
 8003536:	f7ff fde1 	bl	80030fc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800353a:	7863      	ldrb	r3, [r4, #1]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d147      	bne.n	80035d0 <USB_EPStartXfer+0x4aa>
 8003540:	7822      	ldrb	r2, [r4, #0]
 8003542:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003558:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800355c:	e656      	b.n	800320c <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800355e:	bb6a      	cbnz	r2, 80035bc <USB_EPStartXfer+0x496>
 8003560:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003564:	4402      	add	r2, r0
 8003566:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800356a:	b976      	cbnz	r6, 800358a <USB_EPStartXfer+0x464>
 800356c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003570:	b292      	uxth	r2, r2
 8003572:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003576:	b292      	uxth	r2, r2
 8003578:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800357c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003584:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003588:	e020      	b.n	80035cc <USB_EPStartXfer+0x4a6>
 800358a:	2e3e      	cmp	r6, #62	; 0x3e
 800358c:	d809      	bhi.n	80035a2 <USB_EPStartXfer+0x47c>
 800358e:	0872      	lsrs	r2, r6, #1
 8003590:	f016 0f01 	tst.w	r6, #1
 8003594:	d000      	beq.n	8003598 <USB_EPStartXfer+0x472>
 8003596:	3201      	adds	r2, #1
 8003598:	0292      	lsls	r2, r2, #10
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80035a0:	e014      	b.n	80035cc <USB_EPStartXfer+0x4a6>
 80035a2:	0972      	lsrs	r2, r6, #5
 80035a4:	f016 0f1f 	tst.w	r6, #31
 80035a8:	d100      	bne.n	80035ac <USB_EPStartXfer+0x486>
 80035aa:	3a01      	subs	r2, #1
 80035ac:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80035b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80035b4:	b292      	uxth	r2, r2
 80035b6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80035ba:	e007      	b.n	80035cc <USB_EPStartXfer+0x4a6>
 80035bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80035c0:	4402      	add	r2, r0
 80035c2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80035c6:	b2b2      	uxth	r2, r6
 80035c8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          pmabuffer = ep->pmaaddr0;
 80035cc:	8922      	ldrh	r2, [r4, #8]
 80035ce:	e7af      	b.n	8003530 <USB_EPStartXfer+0x40a>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f47f ae1b 	bne.w	800320c <USB_EPStartXfer+0xe6>
 80035d6:	7822      	ldrb	r2, [r4, #0]
 80035d8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ee:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80035f2:	e60b      	b.n	800320c <USB_EPStartXfer+0xe6>
        ep->xfer_len = 0U;
 80035f4:	2200      	movs	r2, #0
 80035f6:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80035f8:	461a      	mov	r2, r3
 80035fa:	e5a3      	b.n	8003144 <USB_EPStartXfer+0x1e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035fc:	2a3e      	cmp	r2, #62	; 0x3e
 80035fe:	d809      	bhi.n	8003614 <USB_EPStartXfer+0x4ee>
 8003600:	0854      	lsrs	r4, r2, #1
 8003602:	f012 0f01 	tst.w	r2, #1
 8003606:	d000      	beq.n	800360a <USB_EPStartXfer+0x4e4>
 8003608:	3401      	adds	r4, #1
 800360a:	02a4      	lsls	r4, r4, #10
 800360c:	b2a4      	uxth	r4, r4
 800360e:	f8a3 440c 	strh.w	r4, [r3, #1036]	; 0x40c
 8003612:	e5ae      	b.n	8003172 <USB_EPStartXfer+0x4c>
 8003614:	0954      	lsrs	r4, r2, #5
 8003616:	f012 0f1f 	tst.w	r2, #31
 800361a:	d100      	bne.n	800361e <USB_EPStartXfer+0x4f8>
 800361c:	3c01      	subs	r4, #1
 800361e:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003622:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003626:	b2a4      	uxth	r4, r4
 8003628:	f8a3 440c 	strh.w	r4, [r3, #1036]	; 0x40c
 800362c:	e5a1      	b.n	8003172 <USB_EPStartXfer+0x4c>
      if (ep->type == EP_TYPE_BULK)
 800362e:	78cb      	ldrb	r3, [r1, #3]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d004      	beq.n	800363e <USB_EPStartXfer+0x518>
      else if (ep->type == EP_TYPE_ISOC)
 8003634:	2b01      	cmp	r3, #1
 8003636:	f000 808e 	beq.w	8003756 <USB_EPStartXfer+0x630>
        return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e5aa      	b.n	8003194 <USB_EPStartXfer+0x6e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800363e:	b9aa      	cbnz	r2, 800366c <USB_EPStartXfer+0x546>
 8003640:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003644:	4403      	add	r3, r0
 8003646:	780a      	ldrb	r2, [r1, #0]
 8003648:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800364c:	690a      	ldr	r2, [r1, #16]
 800364e:	bb3a      	cbnz	r2, 80036a0 <USB_EPStartXfer+0x57a>
 8003650:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003654:	b292      	uxth	r2, r2
 8003656:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800365a:	b292      	uxth	r2, r2
 800365c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003660:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003668:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800366c:	784b      	ldrb	r3, [r1, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d148      	bne.n	8003704 <USB_EPStartXfer+0x5de>
 8003672:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003676:	4403      	add	r3, r0
 8003678:	780a      	ldrb	r2, [r1, #0]
 800367a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800367e:	690a      	ldr	r2, [r1, #16]
 8003680:	bb3a      	cbnz	r2, 80036d2 <USB_EPStartXfer+0x5ac>
 8003682:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003686:	b292      	uxth	r2, r2
 8003688:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800368c:	b292      	uxth	r2, r2
 800368e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003692:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800369e:	e033      	b.n	8003708 <USB_EPStartXfer+0x5e2>
 80036a0:	2a3e      	cmp	r2, #62	; 0x3e
 80036a2:	d809      	bhi.n	80036b8 <USB_EPStartXfer+0x592>
 80036a4:	0854      	lsrs	r4, r2, #1
 80036a6:	f012 0f01 	tst.w	r2, #1
 80036aa:	d000      	beq.n	80036ae <USB_EPStartXfer+0x588>
 80036ac:	3401      	adds	r4, #1
 80036ae:	02a2      	lsls	r2, r4, #10
 80036b0:	b292      	uxth	r2, r2
 80036b2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80036b6:	e7d9      	b.n	800366c <USB_EPStartXfer+0x546>
 80036b8:	0954      	lsrs	r4, r2, #5
 80036ba:	f012 0f1f 	tst.w	r2, #31
 80036be:	d100      	bne.n	80036c2 <USB_EPStartXfer+0x59c>
 80036c0:	3c01      	subs	r4, #1
 80036c2:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 80036c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036ca:	b292      	uxth	r2, r2
 80036cc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80036d0:	e7cc      	b.n	800366c <USB_EPStartXfer+0x546>
 80036d2:	2a3e      	cmp	r2, #62	; 0x3e
 80036d4:	d809      	bhi.n	80036ea <USB_EPStartXfer+0x5c4>
 80036d6:	0854      	lsrs	r4, r2, #1
 80036d8:	f012 0f01 	tst.w	r2, #1
 80036dc:	d000      	beq.n	80036e0 <USB_EPStartXfer+0x5ba>
 80036de:	3401      	adds	r4, #1
 80036e0:	02a2      	lsls	r2, r4, #10
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80036e8:	e00e      	b.n	8003708 <USB_EPStartXfer+0x5e2>
 80036ea:	0954      	lsrs	r4, r2, #5
 80036ec:	f012 0f1f 	tst.w	r2, #31
 80036f0:	d100      	bne.n	80036f4 <USB_EPStartXfer+0x5ce>
 80036f2:	3c01      	subs	r4, #1
 80036f4:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 80036f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036fc:	b292      	uxth	r2, r2
 80036fe:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003702:	e001      	b.n	8003708 <USB_EPStartXfer+0x5e2>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d01c      	beq.n	8003742 <USB_EPStartXfer+0x61c>
        if (ep->xfer_count != 0U)
 8003708:	69cb      	ldr	r3, [r1, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f43f ad31 	beq.w	8003172 <USB_EPStartXfer+0x4c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003710:	780a      	ldrb	r2, [r1, #0]
 8003712:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003716:	f244 0440 	movw	r4, #16448	; 0x4040
 800371a:	4023      	ands	r3, r4
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800371c:	42a3      	cmp	r3, r4
 800371e:	d002      	beq.n	8003726 <USB_EPStartXfer+0x600>
 8003720:	2b00      	cmp	r3, #0
 8003722:	f47f ad26 	bne.w	8003172 <USB_EPStartXfer+0x4c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003726:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800373c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003740:	e517      	b.n	8003172 <USB_EPStartXfer+0x4c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003742:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003746:	4403      	add	r3, r0
 8003748:	780a      	ldrb	r2, [r1, #0]
 800374a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800374e:	8a0a      	ldrh	r2, [r1, #16]
 8003750:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003754:	e7d8      	b.n	8003708 <USB_EPStartXfer+0x5e2>
        if (ep->xfer_len > ep->maxpacket)
 8003756:	698c      	ldr	r4, [r1, #24]
 8003758:	690b      	ldr	r3, [r1, #16]
 800375a:	429c      	cmp	r4, r3
 800375c:	d930      	bls.n	80037c0 <USB_EPStartXfer+0x69a>
          ep->xfer_len -= len;
 800375e:	1ae4      	subs	r4, r4, r3
 8003760:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003762:	b9a2      	cbnz	r2, 800378e <USB_EPStartXfer+0x668>
 8003764:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003768:	4402      	add	r2, r0
 800376a:	780c      	ldrb	r4, [r1, #0]
 800376c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003770:	bb53      	cbnz	r3, 80037c8 <USB_EPStartXfer+0x6a2>
 8003772:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 8003776:	b2a4      	uxth	r4, r4
 8003778:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800377c:	b2a4      	uxth	r4, r4
 800377e:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003782:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 8003786:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800378a:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 800378e:	784a      	ldrb	r2, [r1, #1]
 8003790:	2a00      	cmp	r2, #0
 8003792:	d14b      	bne.n	800382c <USB_EPStartXfer+0x706>
 8003794:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003798:	4402      	add	r2, r0
 800379a:	780c      	ldrb	r4, [r1, #0]
 800379c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80037a0:	bb5b      	cbnz	r3, 80037fa <USB_EPStartXfer+0x6d4>
 80037a2:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80037b2:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80037b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ba:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80037be:	e4d8      	b.n	8003172 <USB_EPStartXfer+0x4c>
          ep->xfer_len = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	618b      	str	r3, [r1, #24]
          len = ep->xfer_len;
 80037c4:	4623      	mov	r3, r4
 80037c6:	e7cc      	b.n	8003762 <USB_EPStartXfer+0x63c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80037c8:	2b3e      	cmp	r3, #62	; 0x3e
 80037ca:	d809      	bhi.n	80037e0 <USB_EPStartXfer+0x6ba>
 80037cc:	085c      	lsrs	r4, r3, #1
 80037ce:	f013 0f01 	tst.w	r3, #1
 80037d2:	d000      	beq.n	80037d6 <USB_EPStartXfer+0x6b0>
 80037d4:	3401      	adds	r4, #1
 80037d6:	02a4      	lsls	r4, r4, #10
 80037d8:	b2a4      	uxth	r4, r4
 80037da:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80037de:	e7d6      	b.n	800378e <USB_EPStartXfer+0x668>
 80037e0:	095c      	lsrs	r4, r3, #5
 80037e2:	f013 0f1f 	tst.w	r3, #31
 80037e6:	d100      	bne.n	80037ea <USB_EPStartXfer+0x6c4>
 80037e8:	3c01      	subs	r4, #1
 80037ea:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80037ee:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80037f2:	b2a4      	uxth	r4, r4
 80037f4:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80037f8:	e7c9      	b.n	800378e <USB_EPStartXfer+0x668>
 80037fa:	2b3e      	cmp	r3, #62	; 0x3e
 80037fc:	d809      	bhi.n	8003812 <USB_EPStartXfer+0x6ec>
 80037fe:	085c      	lsrs	r4, r3, #1
 8003800:	f013 0f01 	tst.w	r3, #1
 8003804:	d000      	beq.n	8003808 <USB_EPStartXfer+0x6e2>
 8003806:	3401      	adds	r4, #1
 8003808:	02a3      	lsls	r3, r4, #10
 800380a:	b29b      	uxth	r3, r3
 800380c:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003810:	e4af      	b.n	8003172 <USB_EPStartXfer+0x4c>
 8003812:	095c      	lsrs	r4, r3, #5
 8003814:	f013 0f1f 	tst.w	r3, #31
 8003818:	d100      	bne.n	800381c <USB_EPStartXfer+0x6f6>
 800381a:	3c01      	subs	r4, #1
 800381c:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8003820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003824:	b29b      	uxth	r3, r3
 8003826:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800382a:	e4a2      	b.n	8003172 <USB_EPStartXfer+0x4c>
 800382c:	2a01      	cmp	r2, #1
 800382e:	f47f aca0 	bne.w	8003172 <USB_EPStartXfer+0x4c>
 8003832:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003836:	4402      	add	r2, r0
 8003838:	780c      	ldrb	r4, [r1, #0]
 800383a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800383e:	b29b      	uxth	r3, r3
 8003840:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8003844:	e495      	b.n	8003172 <USB_EPStartXfer+0x4c>

08003846 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003846:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003848:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800384a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800384e:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003852:	e007      	b.n	8003864 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003854:	f832 4b04 	ldrh.w	r4, [r2], #4
 8003858:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800385a:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800385c:	0a24      	lsrs	r4, r4, #8
 800385e:	704c      	strb	r4, [r1, #1]
    pBuf++;
 8003860:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003862:	3d01      	subs	r5, #1
 8003864:	2d00      	cmp	r5, #0
 8003866:	d1f5      	bne.n	8003854 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003868:	f013 0f01 	tst.w	r3, #1
 800386c:	d001      	beq.n	8003872 <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 800386e:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003870:	700b      	strb	r3, [r1, #0]
  }
}
 8003872:	bc30      	pop	{r4, r5}
 8003874:	4770      	bx	lr

08003876 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003876:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003878:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800387c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003880:	b15b      	cbz	r3, 800389a <USBD_CDC_EP0_RxReady+0x24>
 8003882:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003886:	28ff      	cmp	r0, #255	; 0xff
 8003888:	d007      	beq.n	800389a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003890:	4621      	mov	r1, r4
 8003892:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003894:	23ff      	movs	r3, #255	; 0xff
 8003896:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800389a:	2000      	movs	r0, #0
 800389c:	bd10      	pop	{r4, pc}

0800389e <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800389e:	2343      	movs	r3, #67	; 0x43
 80038a0:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80038a2:	f240 0044 	movw	r0, #68	; 0x44
 80038a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80038aa:	4770      	bx	lr

080038ac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80038ac:	2343      	movs	r3, #67	; 0x43
 80038ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80038b0:	f240 0088 	movw	r0, #136	; 0x88
 80038b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80038b8:	4770      	bx	lr

080038ba <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80038ba:	2343      	movs	r3, #67	; 0x43
 80038bc:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80038be:	f240 00d8 	movw	r0, #216	; 0xd8
 80038c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80038c6:	4770      	bx	lr

080038c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80038c8:	230a      	movs	r3, #10
 80038ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80038cc:	f240 00cc 	movw	r0, #204	; 0xcc
 80038d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80038d4:	4770      	bx	lr

080038d6 <USBD_CDC_DataOut>:
{
 80038d6:	b538      	push	{r3, r4, r5, lr}
 80038d8:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80038da:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80038de:	f001 f905 	bl	8004aec <USBD_LL_GetRxDataSize>
 80038e2:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80038e6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80038ea:	b14b      	cbz	r3, 8003900 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80038ec:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80038f6:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80038fa:	4798      	blx	r3
    return USBD_OK;
 80038fc:	2000      	movs	r0, #0
}
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003900:	2002      	movs	r0, #2
 8003902:	e7fc      	b.n	80038fe <USBD_CDC_DataOut+0x28>

08003904 <USBD_CDC_DataIn>:
{
 8003904:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003906:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800390a:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 800390e:	b1fa      	cbz	r2, 8003950 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003910:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8003914:	00a3      	lsls	r3, r4, #2
 8003916:	4403      	add	r3, r0
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	b14b      	cbz	r3, 8003930 <USBD_CDC_DataIn+0x2c>
 800391c:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8003920:	00f4      	lsls	r4, r6, #3
 8003922:	4425      	add	r5, r4
 8003924:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8003926:	fbb3 f4f5 	udiv	r4, r3, r5
 800392a:	fb05 3314 	mls	r3, r5, r4, r3
 800392e:	b11b      	cbz	r3, 8003938 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003930:	2000      	movs	r0, #0
 8003932:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003936:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003938:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800393c:	0093      	lsls	r3, r2, #2
 800393e:	4403      	add	r3, r0
 8003940:	2400      	movs	r4, #0
 8003942:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003944:	4623      	mov	r3, r4
 8003946:	4622      	mov	r2, r4
 8003948:	f001 f8c0 	bl	8004acc <USBD_LL_Transmit>
    return USBD_OK;
 800394c:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800394e:	e7f2      	b.n	8003936 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003950:	2002      	movs	r0, #2
 8003952:	e7f0      	b.n	8003936 <USBD_CDC_DataIn+0x32>

08003954 <USBD_CDC_Setup>:
{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	4605      	mov	r5, r0
 800395a:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800395c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003966:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800396a:	780b      	ldrb	r3, [r1, #0]
 800396c:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8003970:	d027      	beq.n	80039c2 <USBD_CDC_Setup+0x6e>
 8003972:	2a20      	cmp	r2, #32
 8003974:	d156      	bne.n	8003a24 <USBD_CDC_Setup+0xd0>
      if (req->wLength)
 8003976:	88ca      	ldrh	r2, [r1, #6]
 8003978:	b93a      	cbnz	r2, 800398a <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800397a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2200      	movs	r2, #0
 8003982:	7848      	ldrb	r0, [r1, #1]
 8003984:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8003986:	2000      	movs	r0, #0
 8003988:	e04f      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
        if (req->bmRequest & 0x80U)
 800398a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800398e:	d00c      	beq.n	80039aa <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003990:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4631      	mov	r1, r6
 8003998:	7860      	ldrb	r0, [r4, #1]
 800399a:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800399c:	88e2      	ldrh	r2, [r4, #6]
 800399e:	4631      	mov	r1, r6
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 fdc5 	bl	8004530 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80039a6:	2000      	movs	r0, #0
 80039a8:	e03f      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
          hcdc->CmdOpCode = req->bRequest;
 80039aa:	784b      	ldrb	r3, [r1, #1]
 80039ac:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80039b0:	798b      	ldrb	r3, [r1, #6]
 80039b2:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80039b6:	88ca      	ldrh	r2, [r1, #6]
 80039b8:	4631      	mov	r1, r6
 80039ba:	f000 fdce 	bl	800455a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80039be:	2000      	movs	r0, #0
 80039c0:	e033      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
      switch (req->bRequest)
 80039c2:	784b      	ldrb	r3, [r1, #1]
 80039c4:	2b0a      	cmp	r3, #10
 80039c6:	d014      	beq.n	80039f2 <USBD_CDC_Setup+0x9e>
 80039c8:	2b0b      	cmp	r3, #11
 80039ca:	d021      	beq.n	8003a10 <USBD_CDC_Setup+0xbc>
 80039cc:	b11b      	cbz	r3, 80039d6 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80039ce:	f000 fa89 	bl	8003ee4 <USBD_CtlError>
          ret = USBD_FAIL;
 80039d2:	2002      	movs	r0, #2
          break;
 80039d4:	e029      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d105      	bne.n	80039ea <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80039de:	2202      	movs	r2, #2
 80039e0:	a901      	add	r1, sp, #4
 80039e2:	f000 fda5 	bl	8004530 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80039e6:	2000      	movs	r0, #0
 80039e8:	e01f      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 80039ea:	f000 fa7b 	bl	8003ee4 <USBD_CtlError>
            ret = USBD_FAIL;
 80039ee:	2002      	movs	r0, #2
 80039f0:	e01b      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d106      	bne.n	8003a08 <USBD_CDC_Setup+0xb4>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80039fa:	2201      	movs	r2, #1
 80039fc:	f10d 0107 	add.w	r1, sp, #7
 8003a00:	f000 fd96 	bl	8004530 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003a04:	2000      	movs	r0, #0
 8003a06:	e010      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8003a08:	f000 fa6c 	bl	8003ee4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	e00c      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003a10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d101      	bne.n	8003a1c <USBD_CDC_Setup+0xc8>
  uint8_t ret = USBD_OK;
 8003a18:	2000      	movs	r0, #0
 8003a1a:	e006      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8003a1c:	f000 fa62 	bl	8003ee4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003a20:	2002      	movs	r0, #2
 8003a22:	e002      	b.n	8003a2a <USBD_CDC_Setup+0xd6>
      USBD_CtlError(pdev, req);
 8003a24:	f000 fa5e 	bl	8003ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 8003a28:	2002      	movs	r0, #2
}
 8003a2a:	b002      	add	sp, #8
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}

08003a2e <USBD_CDC_DeInit>:
{
 8003a2e:	b538      	push	{r3, r4, r5, lr}
 8003a30:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003a32:	2181      	movs	r1, #129	; 0x81
 8003a34:	f001 f813 	bl	8004a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003a38:	2500      	movs	r5, #0
 8003a3a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f001 f80d 	bl	8004a5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003a44:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003a48:	2182      	movs	r1, #130	; 0x82
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f001 f807 	bl	8004a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003a50:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003a52:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003a56:	b14b      	cbz	r3, 8003a6c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003a58:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003a60:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003a64:	f001 f84d 	bl	8004b02 <USBD_static_free>
    pdev->pClassData = NULL;
 8003a68:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}

08003a70 <USBD_CDC_Init>:
{
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a74:	7c03      	ldrb	r3, [r0, #16]
 8003a76:	bba3      	cbnz	r3, 8003ae2 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	2181      	movs	r1, #129	; 0x81
 8003a80:	f000 ffe2 	bl	8004a48 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a84:	2501      	movs	r5, #1
 8003a86:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4620      	mov	r0, r4
 8003a92:	f000 ffd9 	bl	8004a48 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003a96:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	2182      	movs	r1, #130	; 0x82
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 ffd1 	bl	8004a48 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003aaa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003aae:	f001 f823 	bl	8004af8 <USBD_static_malloc>
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003ab8:	b368      	cbz	r0, 8003b16 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003aba:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003ac8:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003acc:	7c23      	ldrb	r3, [r4, #16]
 8003ace:	b1c3      	cbz	r3, 8003b02 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 ffff 	bl	8004adc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003ade:	2000      	movs	r0, #0
}
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	2181      	movs	r1, #129	; 0x81
 8003ae8:	f000 ffae 	bl	8004a48 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003aec:	2501      	movs	r5, #1
 8003aee:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	2202      	movs	r2, #2
 8003af4:	4629      	mov	r1, r5
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 ffa6 	bl	8004a48 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003afc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8003b00:	e7cb      	b.n	8003a9a <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b06:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 ffe5 	bl	8004adc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003b12:	2000      	movs	r0, #0
 8003b14:	e7e4      	b.n	8003ae0 <USBD_CDC_Init+0x70>
    ret = 1U;
 8003b16:	2001      	movs	r0, #1
 8003b18:	e7e2      	b.n	8003ae0 <USBD_CDC_Init+0x70>

08003b1a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003b1a:	b119      	cbz	r1, 8003b24 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003b1c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003b20:	2000      	movs	r0, #0
 8003b22:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003b24:	2002      	movs	r0, #2
  }

  return ret;
}
 8003b26:	4770      	bx	lr

08003b28 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8003b2c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003b30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8003b34:	2000      	movs	r0, #0
 8003b36:	4770      	bx	lr

08003b38 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b38:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8003b3c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003b40:	2000      	movs	r0, #0
 8003b42:	4770      	bx	lr

08003b44 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b44:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8003b48:	b1a2      	cbz	r2, 8003b74 <USBD_CDC_TransmitPacket+0x30>
{
 8003b4a:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8003b4c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003b50:	b10b      	cbz	r3, 8003b56 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003b52:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003b54:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003b5c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003b60:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003b62:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003b66:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003b6a:	2181      	movs	r1, #129	; 0x81
 8003b6c:	f000 ffae 	bl	8004acc <USBD_LL_Transmit>
      return USBD_OK;
 8003b70:	2000      	movs	r0, #0
 8003b72:	e7ef      	b.n	8003b54 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8003b74:	2002      	movs	r0, #2
}
 8003b76:	4770      	bx	lr

08003b78 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b78:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003b7c:	b19a      	cbz	r2, 8003ba6 <USBD_CDC_ReceivePacket+0x2e>
{
 8003b7e:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b80:	7c03      	ldrb	r3, [r0, #16]
 8003b82:	b13b      	cbz	r3, 8003b94 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003b84:	2340      	movs	r3, #64	; 0x40
 8003b86:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f000 ffa6 	bl	8004adc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003b90:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003b92:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8003b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b98:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	f000 ff9d 	bl	8004adc <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e7f5      	b.n	8003b92 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003ba6:	2002      	movs	r0, #2
}
 8003ba8:	4770      	bx	lr

08003baa <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003baa:	b198      	cbz	r0, 8003bd4 <USBD_Init+0x2a>
{
 8003bac:	b508      	push	{r3, lr}
 8003bae:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003bb0:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8003bb4:	b110      	cbz	r0, 8003bbc <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003bbc:	b109      	cbz	r1, 8003bc2 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003bbe:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
 8003bc2:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8003bca:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003bcc:	f000 fee0 	bl	8004990 <USBD_LL_Init>

  return USBD_OK;
 8003bd0:	2000      	movs	r0, #0
}
 8003bd2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003bd4:	2002      	movs	r0, #2
}
 8003bd6:	4770      	bx	lr

08003bd8 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	4604      	mov	r4, r0
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003be2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	7901      	ldrb	r1, [r0, #4]
 8003bea:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 ff23 	bl	8004a38 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 ff10 	bl	8004a18 <USBD_LL_DeInit>

  return USBD_OK;
}
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	bd10      	pop	{r4, pc}

08003bfc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003bfc:	b119      	cbz	r1, 8003c06 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003bfe:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003c02:	2000      	movs	r0, #0
 8003c04:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003c06:	2002      	movs	r0, #2
  }

  return status;
}
 8003c08:	4770      	bx	lr

08003c0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003c0a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003c0c:	f000 ff0c 	bl	8004a28 <USBD_LL_Start>

  return USBD_OK;
}
 8003c10:	2000      	movs	r0, #0
 8003c12:	bd08      	pop	{r3, pc}

08003c14 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c14:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003c16:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c1a:	b133      	cbz	r3, 8003c2a <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4798      	blx	r3
 8003c20:	b908      	cbnz	r0, 8003c26 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8003c22:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8003c24:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003c26:	2002      	movs	r0, #2
 8003c28:	e7fc      	b.n	8003c24 <USBD_SetClassConfig+0x10>
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	e7fa      	b.n	8003c24 <USBD_SetClassConfig+0x10>

08003c2e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c2e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003c30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4798      	blx	r3

  return USBD_OK;
}
 8003c38:	2000      	movs	r0, #0
 8003c3a:	bd08      	pop	{r3, pc}

08003c3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003c40:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 f939 	bl	8003ebc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003c50:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003c54:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003c58:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003c5c:	f001 031f 	and.w	r3, r1, #31
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d00e      	beq.n	8003c82 <USBD_LL_SetupStage+0x46>
 8003c64:	b13b      	cbz	r3, 8003c76 <USBD_LL_SetupStage+0x3a>
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d010      	beq.n	8003c8c <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003c6a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f000 fefd 	bl	8004a6e <USBD_LL_StallEP>
      break;
 8003c74:	e003      	b.n	8003c7e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003c76:	4629      	mov	r1, r5
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 fad2 	bl	8004222 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003c7e:	2000      	movs	r0, #0
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003c82:	4629      	mov	r1, r5
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 fb00 	bl	800428a <USBD_StdItfReq>
      break;
 8003c8a:	e7f8      	b.n	8003c7e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 fb2b 	bl	80042ea <USBD_StdEPReq>
      break;
 8003c94:	e7f3      	b.n	8003c7e <USBD_LL_SetupStage+0x42>

08003c96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003c96:	b538      	push	{r3, r4, r5, lr}
 8003c98:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c9a:	bba1      	cbnz	r1, 8003d06 <USBD_LL_DataOutStage+0x70>
 8003c9c:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003c9e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d003      	beq.n	8003cae <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d024      	beq.n	8003cf4 <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003caa:	2000      	movs	r0, #0
 8003cac:	e037      	b.n	8003d1e <USBD_LL_DataOutStage+0x88>
      if (pep->rem_length > pep->maxpacket)
 8003cae:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8003cb2:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d90d      	bls.n	8003cd6 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -= pep->maxpacket;
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d906      	bls.n	8003cd2 <USBD_LL_DataOutStage+0x3c>
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fc55 	bl	8004578 <USBD_CtlContinueRx>
  return USBD_OK;
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e025      	b.n	8003d1e <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx(pdev, pdata,
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	e7f7      	b.n	8003cc6 <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003cd6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	b12b      	cbz	r3, 8003cea <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003cde:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003ce2:	2a03      	cmp	r2, #3
 8003ce4:	d101      	bne.n	8003cea <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 fc4c 	bl	8004588 <USBD_CtlSendStatus>
  return USBD_OK;
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e014      	b.n	8003d1e <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 feb6 	bl	8004a6e <USBD_LL_StallEP>
  return USBD_OK;
 8003d02:	4628      	mov	r0, r5
 8003d04:	e00b      	b.n	8003d1e <USBD_LL_DataOutStage+0x88>
 8003d06:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8003d08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	b13b      	cbz	r3, 8003d20 <USBD_LL_DataOutStage+0x8a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d10:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003d14:	2903      	cmp	r1, #3
 8003d16:	d105      	bne.n	8003d24 <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4798      	blx	r3
  return USBD_OK;
 8003d1c:	2000      	movs	r0, #0
}
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003d20:	2002      	movs	r0, #2
 8003d22:	e7fc      	b.n	8003d1e <USBD_LL_DataOutStage+0x88>
 8003d24:	2002      	movs	r0, #2
 8003d26:	e7fa      	b.n	8003d1e <USBD_LL_DataOutStage+0x88>

08003d28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	d153      	bne.n	8003dd8 <USBD_LL_DataInStage+0xb0>
 8003d30:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003d32:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d00c      	beq.n	8003d54 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d000      	beq.n	8003d40 <USBD_LL_DataInStage+0x18>
 8003d3e:	b91b      	cbnz	r3, 8003d48 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 fe93 	bl	8004a6e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003d48:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d03f      	beq.n	8003dd0 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003d50:	2000      	movs	r0, #0
 8003d52:	e04d      	b.n	8003df0 <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 8003d54:	6a23      	ldr	r3, [r4, #32]
 8003d56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d81d      	bhi.n	8003d98 <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003d5c:	69e1      	ldr	r1, [r4, #28]
 8003d5e:	fbb1 f3f2 	udiv	r3, r1, r2
 8003d62:	fb02 1313 	mls	r3, r2, r3, r1
 8003d66:	b92b      	cbnz	r3, 8003d74 <USBD_LL_DataInStage+0x4c>
 8003d68:	428a      	cmp	r2, r1
 8003d6a:	d803      	bhi.n	8003d74 <USBD_LL_DataInStage+0x4c>
            (pep->total_length < pdev->ep0_data_len))
 8003d6c:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003d70:	4299      	cmp	r1, r3
 8003d72:	d31f      	bcc.n	8003db4 <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d74:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	b12b      	cbz	r3, 8003d88 <USBD_LL_DataInStage+0x60>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d7c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d80:	2a03      	cmp	r2, #3
 8003d82:	d101      	bne.n	8003d88 <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 8003d84:	4620      	mov	r0, r4
 8003d86:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f000 fe6f 	bl	8004a6e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 fc04 	bl	800459e <USBD_CtlReceiveStatus>
 8003d96:	e7d7      	b.n	8003d48 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8003d98:	1a9a      	subs	r2, r3, r2
 8003d9a:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 fbd2 	bl	800454a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003da6:	2300      	movs	r3, #0
 8003da8:	461a      	mov	r2, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	4620      	mov	r0, r4
 8003dae:	f000 fe95 	bl	8004adc <USBD_LL_PrepareReceive>
 8003db2:	e7c9      	b.n	8003d48 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003db4:	2200      	movs	r2, #0
 8003db6:	4611      	mov	r1, r2
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 fbc6 	bl	800454a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 fe87 	bl	8004adc <USBD_LL_PrepareReceive>
 8003dce:	e7bb      	b.n	8003d48 <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8003dd6:	e00b      	b.n	8003df0 <USBD_LL_DataInStage+0xc8>
 8003dd8:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 8003dda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	b13b      	cbz	r3, 8003df2 <USBD_LL_DataInStage+0xca>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003de2:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003de6:	2903      	cmp	r1, #3
 8003de8:	d105      	bne.n	8003df6 <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 8003dea:	4611      	mov	r1, r2
 8003dec:	4798      	blx	r3
  return USBD_OK;
 8003dee:	2000      	movs	r0, #0
}
 8003df0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003df2:	2002      	movs	r0, #2
 8003df4:	e7fc      	b.n	8003df0 <USBD_LL_DataInStage+0xc8>
 8003df6:	2002      	movs	r0, #2
 8003df8:	e7fa      	b.n	8003df0 <USBD_LL_DataInStage+0xc8>

08003dfa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003dfa:	b570      	push	{r4, r5, r6, lr}
 8003dfc:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dfe:	2340      	movs	r3, #64	; 0x40
 8003e00:	2200      	movs	r2, #0
 8003e02:	4611      	mov	r1, r2
 8003e04:	f000 fe20 	bl	8004a48 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003e08:	2501      	movs	r5, #1
 8003e0a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e0e:	2640      	movs	r6, #64	; 0x40
 8003e10:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e14:	4633      	mov	r3, r6
 8003e16:	2200      	movs	r2, #0
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f000 fe14 	bl	8004a48 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003e20:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e22:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e24:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003e2e:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003e30:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8003e34:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003e38:	b12b      	cbz	r3, 8003e46 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003e3a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4620      	mov	r0, r4
 8003e44:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003e46:	2000      	movs	r0, #0
 8003e48:	bd70      	pop	{r4, r5, r6, pc}

08003e4a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003e4a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	4770      	bx	lr

08003e50 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003e50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e54:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003e5e:	2000      	movs	r0, #0
 8003e60:	4770      	bx	lr

08003e62 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003e62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d001      	beq.n	8003e6e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003e6e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003e72:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8003e76:	e7f8      	b.n	8003e6a <USBD_LL_Resume+0x8>

08003e78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003e78:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e7a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d001      	beq.n	8003e86 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003e82:	2000      	movs	r0, #0
 8003e84:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003e86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f8      	beq.n	8003e82 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8003e90:	4798      	blx	r3
 8003e92:	e7f6      	b.n	8003e82 <USBD_LL_SOF+0xa>

08003e94 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 8003e94:	2300      	movs	r3, #0

  while (*buf != '\0')
 8003e96:	e002      	b.n	8003e9e <USBD_GetLen+0xa>
  {
    len++;
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
    buf++;
 8003e9c:	3001      	adds	r0, #1
  while (*buf != '\0')
 8003e9e:	7802      	ldrb	r2, [r0, #0]
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	d1f9      	bne.n	8003e98 <USBD_GetLen+0x4>
  }

  return len;
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	4770      	bx	lr

08003ea8 <USBD_SetFeature>:
{
 8003ea8:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003eaa:	884b      	ldrh	r3, [r1, #2]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d000      	beq.n	8003eb2 <USBD_SetFeature+0xa>
}
 8003eb0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003eb2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8003eb6:	f000 fb67 	bl	8004588 <USBD_CtlSendStatus>
}
 8003eba:	e7f9      	b.n	8003eb0 <USBD_SetFeature+0x8>

08003ebc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003ebc:	780b      	ldrb	r3, [r1, #0]
 8003ebe:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003ec0:	784b      	ldrb	r3, [r1, #1]
 8003ec2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003ec4:	788b      	ldrb	r3, [r1, #2]
 8003ec6:	78ca      	ldrb	r2, [r1, #3]
 8003ec8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ecc:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003ece:	790b      	ldrb	r3, [r1, #4]
 8003ed0:	794a      	ldrb	r2, [r1, #5]
 8003ed2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ed6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003ed8:	798b      	ldrb	r3, [r1, #6]
 8003eda:	79ca      	ldrb	r2, [r1, #7]
 8003edc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ee0:	80c3      	strh	r3, [r0, #6]
}
 8003ee2:	4770      	bx	lr

08003ee4 <USBD_CtlError>:
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	f000 fdc0 	bl	8004a6e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fdbc 	bl	8004a6e <USBD_LL_StallEP>
}
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <USBD_GetDescriptor>:
{
 8003ef8:	b530      	push	{r4, r5, lr}
 8003efa:	b083      	sub	sp, #12
 8003efc:	4605      	mov	r5, r0
 8003efe:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003f06:	884a      	ldrh	r2, [r1, #2]
 8003f08:	0a13      	lsrs	r3, r2, #8
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	f200 80a4 	bhi.w	800405a <USBD_GetDescriptor+0x162>
 8003f12:	e8df f003 	tbb	[pc, r3]
 8003f16:	1804      	.short	0x1804
 8003f18:	86a2a22c 	.word	0x86a2a22c
 8003f1c:	93          	.byte	0x93
 8003f1d:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003f1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f10d 0106 	add.w	r1, sp, #6
 8003f28:	7c00      	ldrb	r0, [r0, #16]
 8003f2a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003f2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003f30:	b11a      	cbz	r2, 8003f3a <USBD_GetDescriptor+0x42>
 8003f32:	88e3      	ldrh	r3, [r4, #6]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f040 8094 	bne.w	8004062 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8003f3a:	88e3      	ldrh	r3, [r4, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 809a 	beq.w	8004076 <USBD_GetDescriptor+0x17e>
}
 8003f42:	b003      	add	sp, #12
 8003f44:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f46:	7c03      	ldrb	r3, [r0, #16]
 8003f48:	b943      	cbnz	r3, 8003f5c <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003f4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	f10d 0006 	add.w	r0, sp, #6
 8003f54:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003f56:	2302      	movs	r3, #2
 8003f58:	7043      	strb	r3, [r0, #1]
 8003f5a:	e7e7      	b.n	8003f2c <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003f5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f10d 0006 	add.w	r0, sp, #6
 8003f66:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	7043      	strb	r3, [r0, #1]
 8003f6c:	e7de      	b.n	8003f2c <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	2a05      	cmp	r2, #5
 8003f72:	d852      	bhi.n	800401a <USBD_GetDescriptor+0x122>
 8003f74:	e8df f002 	tbb	[pc, r2]
 8003f78:	2a1d1003 	.word	0x2a1d1003
 8003f7c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003f7e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	b123      	cbz	r3, 8003f90 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003f86:	f10d 0106 	add.w	r1, sp, #6
 8003f8a:	7c00      	ldrb	r0, [r0, #16]
 8003f8c:	4798      	blx	r3
 8003f8e:	e7cd      	b.n	8003f2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003f90:	4621      	mov	r1, r4
 8003f92:	f7ff ffa7 	bl	8003ee4 <USBD_CtlError>
 8003f96:	e7d4      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003f98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	b123      	cbz	r3, 8003faa <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003fa0:	f10d 0106 	add.w	r1, sp, #6
 8003fa4:	7c00      	ldrb	r0, [r0, #16]
 8003fa6:	4798      	blx	r3
 8003fa8:	e7c0      	b.n	8003f2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003faa:	4621      	mov	r1, r4
 8003fac:	f7ff ff9a 	bl	8003ee4 <USBD_CtlError>
 8003fb0:	e7c7      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003fb2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	b123      	cbz	r3, 8003fc4 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003fba:	f10d 0106 	add.w	r1, sp, #6
 8003fbe:	7c00      	ldrb	r0, [r0, #16]
 8003fc0:	4798      	blx	r3
 8003fc2:	e7b3      	b.n	8003f2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f7ff ff8d 	bl	8003ee4 <USBD_CtlError>
 8003fca:	e7ba      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003fcc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	b123      	cbz	r3, 8003fde <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003fd4:	f10d 0106 	add.w	r1, sp, #6
 8003fd8:	7c00      	ldrb	r0, [r0, #16]
 8003fda:	4798      	blx	r3
 8003fdc:	e7a6      	b.n	8003f2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003fde:	4621      	mov	r1, r4
 8003fe0:	f7ff ff80 	bl	8003ee4 <USBD_CtlError>
 8003fe4:	e7ad      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003fe6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	b123      	cbz	r3, 8003ff8 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003fee:	f10d 0106 	add.w	r1, sp, #6
 8003ff2:	7c00      	ldrb	r0, [r0, #16]
 8003ff4:	4798      	blx	r3
 8003ff6:	e799      	b.n	8003f2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	f7ff ff73 	bl	8003ee4 <USBD_CtlError>
 8003ffe:	e7a0      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004000:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	b123      	cbz	r3, 8004012 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004008:	f10d 0106 	add.w	r1, sp, #6
 800400c:	7c00      	ldrb	r0, [r0, #16]
 800400e:	4798      	blx	r3
 8004010:	e78c      	b.n	8003f2c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004012:	4621      	mov	r1, r4
 8004014:	f7ff ff66 	bl	8003ee4 <USBD_CtlError>
 8004018:	e793      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 800401a:	4621      	mov	r1, r4
 800401c:	f7ff ff62 	bl	8003ee4 <USBD_CtlError>
 8004020:	e78f      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004022:	7c03      	ldrb	r3, [r0, #16]
 8004024:	b933      	cbnz	r3, 8004034 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	f10d 0006 	add.w	r0, sp, #6
 8004030:	4798      	blx	r3
 8004032:	e77b      	b.n	8003f2c <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004034:	4621      	mov	r1, r4
 8004036:	f7ff ff55 	bl	8003ee4 <USBD_CtlError>
 800403a:	e782      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800403c:	7c03      	ldrb	r3, [r0, #16]
 800403e:	b943      	cbnz	r3, 8004052 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004040:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f10d 0006 	add.w	r0, sp, #6
 800404a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800404c:	2307      	movs	r3, #7
 800404e:	7043      	strb	r3, [r0, #1]
 8004050:	e76c      	b.n	8003f2c <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004052:	4621      	mov	r1, r4
 8004054:	f7ff ff46 	bl	8003ee4 <USBD_CtlError>
 8004058:	e773      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800405a:	4621      	mov	r1, r4
 800405c:	f7ff ff42 	bl	8003ee4 <USBD_CtlError>
 8004060:	e76f      	b.n	8003f42 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8004062:	429a      	cmp	r2, r3
 8004064:	bf28      	it	cs
 8004066:	461a      	movcs	r2, r3
 8004068:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800406c:	4601      	mov	r1, r0
 800406e:	4628      	mov	r0, r5
 8004070:	f000 fa5e 	bl	8004530 <USBD_CtlSendData>
 8004074:	e761      	b.n	8003f3a <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8004076:	4628      	mov	r0, r5
 8004078:	f000 fa86 	bl	8004588 <USBD_CtlSendStatus>
 800407c:	e761      	b.n	8003f42 <USBD_GetDescriptor+0x4a>

0800407e <USBD_SetAddress>:
{
 800407e:	b538      	push	{r3, r4, r5, lr}
 8004080:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004082:	888b      	ldrh	r3, [r1, #4]
 8004084:	b9f3      	cbnz	r3, 80040c4 <USBD_SetAddress+0x46>
 8004086:	88cb      	ldrh	r3, [r1, #6]
 8004088:	b9e3      	cbnz	r3, 80040c4 <USBD_SetAddress+0x46>
 800408a:	884b      	ldrh	r3, [r1, #2]
 800408c:	2b7f      	cmp	r3, #127	; 0x7f
 800408e:	d819      	bhi.n	80040c4 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004090:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004094:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004098:	2b03      	cmp	r3, #3
 800409a:	d00c      	beq.n	80040b6 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800409c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80040a0:	4629      	mov	r1, r5
 80040a2:	f000 fd0b 	bl	8004abc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 fa6e 	bl	8004588 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80040ac:	b135      	cbz	r5, 80040bc <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80040ae:	2302      	movs	r3, #2
 80040b0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80040b4:	e009      	b.n	80040ca <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80040b6:	f7ff ff15 	bl	8003ee4 <USBD_CtlError>
 80040ba:	e006      	b.n	80040ca <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80040bc:	2301      	movs	r3, #1
 80040be:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80040c2:	e002      	b.n	80040ca <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7ff ff0d 	bl	8003ee4 <USBD_CtlError>
}
 80040ca:	bd38      	pop	{r3, r4, r5, pc}

080040cc <USBD_SetConfig>:
{
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4604      	mov	r4, r0
 80040d0:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80040d2:	7889      	ldrb	r1, [r1, #2]
 80040d4:	f240 139c 	movw	r3, #412	; 0x19c
 80040d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040dc:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80040de:	2901      	cmp	r1, #1
 80040e0:	d811      	bhi.n	8004106 <USBD_SetConfig+0x3a>
    switch (pdev->dev_state)
 80040e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d011      	beq.n	800410e <USBD_SetConfig+0x42>
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d024      	beq.n	8004138 <USBD_SetConfig+0x6c>
        USBD_CtlError(pdev, req);
 80040ee:	4629      	mov	r1, r5
 80040f0:	f7ff fef8 	bl	8003ee4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80040f4:	f240 139c 	movw	r3, #412	; 0x19c
 80040f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80040fc:	7819      	ldrb	r1, [r3, #0]
 80040fe:	4620      	mov	r0, r4
 8004100:	f7ff fd95 	bl	8003c2e <USBD_ClrClassConfig>
        break;
 8004104:	e002      	b.n	800410c <USBD_SetConfig+0x40>
    USBD_CtlError(pdev, req);
 8004106:	4629      	mov	r1, r5
 8004108:	f7ff feec 	bl	8003ee4 <USBD_CtlError>
}
 800410c:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 800410e:	b181      	cbz	r1, 8004132 <USBD_SetConfig+0x66>
          pdev->dev_config = cfgidx;
 8004110:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004112:	2303      	movs	r3, #3
 8004114:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004118:	f7ff fd7c 	bl	8003c14 <USBD_SetClassConfig>
 800411c:	2802      	cmp	r0, #2
 800411e:	d003      	beq.n	8004128 <USBD_SetConfig+0x5c>
          USBD_CtlSendStatus(pdev);
 8004120:	4620      	mov	r0, r4
 8004122:	f000 fa31 	bl	8004588 <USBD_CtlSendStatus>
 8004126:	e7f1      	b.n	800410c <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8004128:	4629      	mov	r1, r5
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff feda 	bl	8003ee4 <USBD_CtlError>
            return;
 8004130:	e7ec      	b.n	800410c <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8004132:	f000 fa29 	bl	8004588 <USBD_CtlSendStatus>
 8004136:	e7e9      	b.n	800410c <USBD_SetConfig+0x40>
        if (cfgidx == 0U)
 8004138:	b1a1      	cbz	r1, 8004164 <USBD_SetConfig+0x98>
        else if (cfgidx != pdev->dev_config)
 800413a:	6843      	ldr	r3, [r0, #4]
 800413c:	4299      	cmp	r1, r3
 800413e:	d020      	beq.n	8004182 <USBD_SetConfig+0xb6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004140:	b2d9      	uxtb	r1, r3
 8004142:	f7ff fd74 	bl	8003c2e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004146:	f240 139c 	movw	r3, #412	; 0x19c
 800414a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800414e:	7819      	ldrb	r1, [r3, #0]
 8004150:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff fd5e 	bl	8003c14 <USBD_SetClassConfig>
 8004158:	2802      	cmp	r0, #2
 800415a:	d00d      	beq.n	8004178 <USBD_SetConfig+0xac>
          USBD_CtlSendStatus(pdev);
 800415c:	4620      	mov	r0, r4
 800415e:	f000 fa13 	bl	8004588 <USBD_CtlSendStatus>
 8004162:	e7d3      	b.n	800410c <USBD_SetConfig+0x40>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004164:	2302      	movs	r3, #2
 8004166:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800416a:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800416c:	f7ff fd5f 	bl	8003c2e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004170:	4620      	mov	r0, r4
 8004172:	f000 fa09 	bl	8004588 <USBD_CtlSendStatus>
 8004176:	e7c9      	b.n	800410c <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8004178:	4629      	mov	r1, r5
 800417a:	4620      	mov	r0, r4
 800417c:	f7ff feb2 	bl	8003ee4 <USBD_CtlError>
            return;
 8004180:	e7c4      	b.n	800410c <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8004182:	f000 fa01 	bl	8004588 <USBD_CtlSendStatus>
 8004186:	e7c1      	b.n	800410c <USBD_SetConfig+0x40>

08004188 <USBD_GetConfig>:
{
 8004188:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800418a:	88cb      	ldrh	r3, [r1, #6]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10b      	bne.n	80041a8 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004190:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004194:	b19b      	cbz	r3, 80041be <USBD_GetConfig+0x36>
 8004196:	2b02      	cmp	r3, #2
 8004198:	d909      	bls.n	80041ae <USBD_GetConfig+0x26>
 800419a:	2b03      	cmp	r3, #3
 800419c:	d10f      	bne.n	80041be <USBD_GetConfig+0x36>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800419e:	2201      	movs	r2, #1
 80041a0:	1d01      	adds	r1, r0, #4
 80041a2:	f000 f9c5 	bl	8004530 <USBD_CtlSendData>
        break;
 80041a6:	e001      	b.n	80041ac <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80041a8:	f7ff fe9c 	bl	8003ee4 <USBD_CtlError>
}
 80041ac:	bd08      	pop	{r3, pc}
        pdev->dev_default_config = 0U;
 80041ae:	4601      	mov	r1, r0
 80041b0:	2300      	movs	r3, #0
 80041b2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80041b6:	2201      	movs	r2, #1
 80041b8:	f000 f9ba 	bl	8004530 <USBD_CtlSendData>
        break;
 80041bc:	e7f6      	b.n	80041ac <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80041be:	f7ff fe91 	bl	8003ee4 <USBD_CtlError>
}
 80041c2:	e7f3      	b.n	80041ac <USBD_GetConfig+0x24>

080041c4 <USBD_GetStatus>:
{
 80041c4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80041c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041ca:	3b01      	subs	r3, #1
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d812      	bhi.n	80041f6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80041d0:	88cb      	ldrh	r3, [r1, #6]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d10c      	bne.n	80041f0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80041d6:	2301      	movs	r3, #1
 80041d8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80041da:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80041de:	b10b      	cbz	r3, 80041e4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80041e0:	2303      	movs	r3, #3
 80041e2:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80041e4:	2202      	movs	r2, #2
 80041e6:	f100 010c 	add.w	r1, r0, #12
 80041ea:	f000 f9a1 	bl	8004530 <USBD_CtlSendData>
}
 80041ee:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80041f0:	f7ff fe78 	bl	8003ee4 <USBD_CtlError>
        break;
 80041f4:	e7fb      	b.n	80041ee <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80041f6:	f7ff fe75 	bl	8003ee4 <USBD_CtlError>
}
 80041fa:	e7f8      	b.n	80041ee <USBD_GetStatus+0x2a>

080041fc <USBD_ClrFeature>:
{
 80041fc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80041fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004202:	3b01      	subs	r3, #1
 8004204:	2b02      	cmp	r3, #2
 8004206:	d809      	bhi.n	800421c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004208:	884b      	ldrh	r3, [r1, #2]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d000      	beq.n	8004210 <USBD_ClrFeature+0x14>
}
 800420e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004216:	f000 f9b7 	bl	8004588 <USBD_CtlSendStatus>
 800421a:	e7f8      	b.n	800420e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800421c:	f7ff fe62 	bl	8003ee4 <USBD_CtlError>
}
 8004220:	e7f5      	b.n	800420e <USBD_ClrFeature+0x12>

08004222 <USBD_StdDevReq>:
{
 8004222:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004224:	780b      	ldrb	r3, [r1, #0]
 8004226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800422a:	2b20      	cmp	r3, #32
 800422c:	d005      	beq.n	800423a <USBD_StdDevReq+0x18>
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d003      	beq.n	800423a <USBD_StdDevReq+0x18>
 8004232:	b143      	cbz	r3, 8004246 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8004234:	f7ff fe56 	bl	8003ee4 <USBD_CtlError>
      break;
 8004238:	e003      	b.n	8004242 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 800423a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4798      	blx	r3
}
 8004242:	2000      	movs	r0, #0
 8004244:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8004246:	784b      	ldrb	r3, [r1, #1]
 8004248:	2b09      	cmp	r3, #9
 800424a:	d81b      	bhi.n	8004284 <USBD_StdDevReq+0x62>
 800424c:	e8df f003 	tbb	[pc, r3]
 8004250:	141a1711 	.word	0x141a1711
 8004254:	1a05081a 	.word	0x1a05081a
 8004258:	0b0e      	.short	0x0b0e
          USBD_GetDescriptor(pdev, req);
 800425a:	f7ff fe4d 	bl	8003ef8 <USBD_GetDescriptor>
          break;
 800425e:	e7f0      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8004260:	f7ff ff0d 	bl	800407e <USBD_SetAddress>
          break;
 8004264:	e7ed      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8004266:	f7ff ff31 	bl	80040cc <USBD_SetConfig>
          break;
 800426a:	e7ea      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 800426c:	f7ff ff8c 	bl	8004188 <USBD_GetConfig>
          break;
 8004270:	e7e7      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8004272:	f7ff ffa7 	bl	80041c4 <USBD_GetStatus>
          break;
 8004276:	e7e4      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8004278:	f7ff fe16 	bl	8003ea8 <USBD_SetFeature>
          break;
 800427c:	e7e1      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 800427e:	f7ff ffbd 	bl	80041fc <USBD_ClrFeature>
          break;
 8004282:	e7de      	b.n	8004242 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8004284:	f7ff fe2e 	bl	8003ee4 <USBD_CtlError>
          break;
 8004288:	e7db      	b.n	8004242 <USBD_StdDevReq+0x20>

0800428a <USBD_StdItfReq>:
{
 800428a:	b538      	push	{r3, r4, r5, lr}
 800428c:	4605      	mov	r5, r0
 800428e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004290:	780b      	ldrb	r3, [r1, #0]
 8004292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004296:	2b20      	cmp	r3, #32
 8004298:	d006      	beq.n	80042a8 <USBD_StdItfReq+0x1e>
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d004      	beq.n	80042a8 <USBD_StdItfReq+0x1e>
 800429e:	b11b      	cbz	r3, 80042a8 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80042a0:	f7ff fe20 	bl	8003ee4 <USBD_CtlError>
}
 80042a4:	2000      	movs	r0, #0
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80042a8:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80042ac:	3b01      	subs	r3, #1
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d816      	bhi.n	80042e0 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80042b2:	7923      	ldrb	r3, [r4, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d80e      	bhi.n	80042d6 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80042b8:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80042c4:	88e3      	ldrh	r3, [r4, #6]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ec      	bne.n	80042a4 <USBD_StdItfReq+0x1a>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d1ea      	bne.n	80042a4 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 f95a 	bl	8004588 <USBD_CtlSendStatus>
 80042d4:	e7e6      	b.n	80042a4 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80042d6:	4621      	mov	r1, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	f7ff fe03 	bl	8003ee4 <USBD_CtlError>
 80042de:	e7e1      	b.n	80042a4 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 80042e0:	4621      	mov	r1, r4
 80042e2:	4628      	mov	r0, r5
 80042e4:	f7ff fdfe 	bl	8003ee4 <USBD_CtlError>
          break;
 80042e8:	e7dc      	b.n	80042a4 <USBD_StdItfReq+0x1a>

080042ea <USBD_StdEPReq>:
{
 80042ea:	b538      	push	{r3, r4, r5, lr}
 80042ec:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80042ee:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042f0:	780b      	ldrb	r3, [r1, #0]
 80042f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d008      	beq.n	800430c <USBD_StdEPReq+0x22>
 80042fa:	b2d0      	uxtb	r0, r2
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d005      	beq.n	800430c <USBD_StdEPReq+0x22>
 8004300:	b15b      	cbz	r3, 800431a <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fdee 	bl	8003ee4 <USBD_CtlError>
  return ret;
 8004308:	2000      	movs	r0, #0
      break;
 800430a:	e005      	b.n	8004318 <USBD_StdEPReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 800430c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4620      	mov	r0, r4
 8004314:	4798      	blx	r3
  return ret;
 8004316:	2000      	movs	r0, #0
}
 8004318:	bd38      	pop	{r3, r4, r5, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 800431a:	2b20      	cmp	r3, #32
 800431c:	d105      	bne.n	800432a <USBD_StdEPReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800431e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4620      	mov	r0, r4
 8004326:	4798      	blx	r3
        return ret;
 8004328:	e7f6      	b.n	8004318 <USBD_StdEPReq+0x2e>
      switch (req->bRequest)
 800432a:	784b      	ldrb	r3, [r1, #1]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d032      	beq.n	8004396 <USBD_StdEPReq+0xac>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05e      	beq.n	80043f2 <USBD_StdEPReq+0x108>
 8004334:	2b03      	cmp	r3, #3
 8004336:	f040 80d8 	bne.w	80044ea <USBD_StdEPReq+0x200>
          switch (pdev->dev_state)
 800433a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800433e:	2b02      	cmp	r3, #2
 8004340:	d006      	beq.n	8004350 <USBD_StdEPReq+0x66>
 8004342:	2b03      	cmp	r3, #3
 8004344:	d016      	beq.n	8004374 <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 8004346:	4620      	mov	r0, r4
 8004348:	f7ff fdcc 	bl	8003ee4 <USBD_CtlError>
  return ret;
 800434c:	2000      	movs	r0, #0
              break;
 800434e:	e7e3      	b.n	8004318 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004350:	b108      	cbz	r0, 8004356 <USBD_StdEPReq+0x6c>
 8004352:	2880      	cmp	r0, #128	; 0x80
 8004354:	d104      	bne.n	8004360 <USBD_StdEPReq+0x76>
                USBD_CtlError(pdev, req);
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff fdc4 	bl	8003ee4 <USBD_CtlError>
  return ret;
 800435c:	2000      	movs	r0, #0
 800435e:	e7db      	b.n	8004318 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004360:	4601      	mov	r1, r0
 8004362:	4620      	mov	r0, r4
 8004364:	f000 fb83 	bl	8004a6e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	4620      	mov	r0, r4
 800436c:	f000 fb7f 	bl	8004a6e <USBD_LL_StallEP>
  return ret;
 8004370:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8004372:	e7d1      	b.n	8004318 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004374:	884b      	ldrh	r3, [r1, #2]
 8004376:	b923      	cbnz	r3, 8004382 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) &&
 8004378:	b118      	cbz	r0, 8004382 <USBD_StdEPReq+0x98>
 800437a:	2880      	cmp	r0, #128	; 0x80
 800437c:	d001      	beq.n	8004382 <USBD_StdEPReq+0x98>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800437e:	88cb      	ldrh	r3, [r1, #6]
 8004380:	b123      	cbz	r3, 800438c <USBD_StdEPReq+0xa2>
              USBD_CtlSendStatus(pdev);
 8004382:	4620      	mov	r0, r4
 8004384:	f000 f900 	bl	8004588 <USBD_CtlSendStatus>
  return ret;
 8004388:	2000      	movs	r0, #0
              break;
 800438a:	e7c5      	b.n	8004318 <USBD_StdEPReq+0x2e>
                  USBD_LL_StallEP(pdev, ep_addr);
 800438c:	4601      	mov	r1, r0
 800438e:	4620      	mov	r0, r4
 8004390:	f000 fb6d 	bl	8004a6e <USBD_LL_StallEP>
 8004394:	e7f5      	b.n	8004382 <USBD_StdEPReq+0x98>
          switch (pdev->dev_state)
 8004396:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800439a:	2b02      	cmp	r3, #2
 800439c:	d006      	beq.n	80043ac <USBD_StdEPReq+0xc2>
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d016      	beq.n	80043d0 <USBD_StdEPReq+0xe6>
              USBD_CtlError(pdev, req);
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff fd9e 	bl	8003ee4 <USBD_CtlError>
  return ret;
 80043a8:	2000      	movs	r0, #0
              break;
 80043aa:	e7b5      	b.n	8004318 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80043ac:	b108      	cbz	r0, 80043b2 <USBD_StdEPReq+0xc8>
 80043ae:	2880      	cmp	r0, #128	; 0x80
 80043b0:	d104      	bne.n	80043bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff fd96 	bl	8003ee4 <USBD_CtlError>
  return ret;
 80043b8:	2000      	movs	r0, #0
 80043ba:	e7ad      	b.n	8004318 <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 80043bc:	4601      	mov	r1, r0
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 fb55 	bl	8004a6e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80043c4:	2180      	movs	r1, #128	; 0x80
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 fb51 	bl	8004a6e <USBD_LL_StallEP>
  return ret;
 80043cc:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 80043ce:	e7a3      	b.n	8004318 <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043d0:	884b      	ldrh	r3, [r1, #2]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 808e 	bne.w	80044f4 <USBD_StdEPReq+0x20a>
                if ((ep_addr & 0x7FU) != 0x00U)
 80043d8:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80043dc:	d104      	bne.n	80043e8 <USBD_StdEPReq+0xfe>
                USBD_CtlSendStatus(pdev);
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 f8d2 	bl	8004588 <USBD_CtlSendStatus>
  return ret;
 80043e4:	2000      	movs	r0, #0
 80043e6:	e797      	b.n	8004318 <USBD_StdEPReq+0x2e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80043e8:	4601      	mov	r1, r0
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 fb47 	bl	8004a7e <USBD_LL_ClearStallEP>
 80043f0:	e7f5      	b.n	80043de <USBD_StdEPReq+0xf4>
          switch (pdev->dev_state)
 80043f2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d006      	beq.n	8004408 <USBD_StdEPReq+0x11e>
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d02a      	beq.n	8004454 <USBD_StdEPReq+0x16a>
              USBD_CtlError(pdev, req);
 80043fe:	4620      	mov	r0, r4
 8004400:	f7ff fd70 	bl	8003ee4 <USBD_CtlError>
  return ret;
 8004404:	2000      	movs	r0, #0
              break;
 8004406:	e787      	b.n	8004318 <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004408:	b108      	cbz	r0, 800440e <USBD_StdEPReq+0x124>
 800440a:	2880      	cmp	r0, #128	; 0x80
 800440c:	d113      	bne.n	8004436 <USBD_StdEPReq+0x14c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800440e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004412:	d115      	bne.n	8004440 <USBD_StdEPReq+0x156>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004414:	f000 007f 	and.w	r0, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004418:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800441c:	0083      	lsls	r3, r0, #2
 800441e:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8004422:	4421      	add	r1, r4
 8004424:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004426:	2500      	movs	r5, #0
 8004428:	600d      	str	r5, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800442a:	2202      	movs	r2, #2
 800442c:	4620      	mov	r0, r4
 800442e:	f000 f87f 	bl	8004530 <USBD_CtlSendData>
  return ret;
 8004432:	4628      	mov	r0, r5
              break;
 8004434:	e770      	b.n	8004318 <USBD_StdEPReq+0x2e>
                USBD_CtlError(pdev, req);
 8004436:	4620      	mov	r0, r4
 8004438:	f7ff fd54 	bl	8003ee4 <USBD_CtlError>
  return ret;
 800443c:	2000      	movs	r0, #0
                break;
 800443e:	e76b      	b.n	8004318 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004440:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004448:	0083      	lsls	r3, r0, #2
 800444a:	f103 0110 	add.w	r1, r3, #16
 800444e:	4421      	add	r1, r4
 8004450:	3104      	adds	r1, #4
 8004452:	e7e8      	b.n	8004426 <USBD_StdEPReq+0x13c>
              if ((ep_addr & 0x80U) == 0x80U)
 8004454:	b252      	sxtb	r2, r2
 8004456:	2a00      	cmp	r2, #0
 8004458:	db1f      	blt.n	800449a <USBD_StdEPReq+0x1b0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800445a:	f000 030f 	and.w	r3, r0, #15
 800445e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004462:	009d      	lsls	r5, r3, #2
 8004464:	4425      	add	r5, r4
 8004466:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 800446a:	b323      	cbz	r3, 80044b6 <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800446c:	2a00      	cmp	r2, #0
 800446e:	db27      	blt.n	80044c0 <USBD_StdEPReq+0x1d6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004470:	f000 027f 	and.w	r2, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004474:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004478:	0093      	lsls	r3, r2, #2
 800447a:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 800447e:	4425      	add	r5, r4
 8004480:	3504      	adds	r5, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004482:	b108      	cbz	r0, 8004488 <USBD_StdEPReq+0x19e>
 8004484:	2880      	cmp	r0, #128	; 0x80
 8004486:	d125      	bne.n	80044d4 <USBD_StdEPReq+0x1ea>
                pep->status = 0x0000U;
 8004488:	2300      	movs	r3, #0
 800448a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800448c:	2202      	movs	r2, #2
 800448e:	4629      	mov	r1, r5
 8004490:	4620      	mov	r0, r4
 8004492:	f000 f84d 	bl	8004530 <USBD_CtlSendData>
  return ret;
 8004496:	2000      	movs	r0, #0
              break;
 8004498:	e73e      	b.n	8004318 <USBD_StdEPReq+0x2e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800449a:	f000 030f 	and.w	r3, r0, #15
 800449e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044a2:	009d      	lsls	r5, r3, #2
 80044a4:	4425      	add	r5, r4
 80044a6:	69ab      	ldr	r3, [r5, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1df      	bne.n	800446c <USBD_StdEPReq+0x182>
                  USBD_CtlError(pdev, req);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff fd19 	bl	8003ee4 <USBD_CtlError>
  return ret;
 80044b2:	2000      	movs	r0, #0
                  break;
 80044b4:	e730      	b.n	8004318 <USBD_StdEPReq+0x2e>
                  USBD_CtlError(pdev, req);
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff fd14 	bl	8003ee4 <USBD_CtlError>
  return ret;
 80044bc:	2000      	movs	r0, #0
                  break;
 80044be:	e72b      	b.n	8004318 <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80044c0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80044c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044c8:	0093      	lsls	r3, r2, #2
 80044ca:	f103 0510 	add.w	r5, r3, #16
 80044ce:	4425      	add	r5, r4
 80044d0:	3504      	adds	r5, #4
 80044d2:	e7d6      	b.n	8004482 <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80044d4:	4601      	mov	r1, r0
 80044d6:	4620      	mov	r0, r4
 80044d8:	f000 fad9 	bl	8004a8e <USBD_LL_IsStallEP>
 80044dc:	b110      	cbz	r0, 80044e4 <USBD_StdEPReq+0x1fa>
                pep->status = 0x0001U;
 80044de:	2301      	movs	r3, #1
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	e7d3      	b.n	800448c <USBD_StdEPReq+0x1a2>
                pep->status = 0x0000U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	e7d0      	b.n	800448c <USBD_StdEPReq+0x1a2>
          USBD_CtlError(pdev, req);
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7ff fcfa 	bl	8003ee4 <USBD_CtlError>
  return ret;
 80044f0:	2000      	movs	r0, #0
          break;
 80044f2:	e711      	b.n	8004318 <USBD_StdEPReq+0x2e>
  return ret;
 80044f4:	2000      	movs	r0, #0
 80044f6:	e70f      	b.n	8004318 <USBD_StdEPReq+0x2e>

080044f8 <USBD_GetString>:
  if (desc != NULL)
 80044f8:	b1c8      	cbz	r0, 800452e <USBD_GetString+0x36>
{
 80044fa:	b570      	push	{r4, r5, r6, lr}
 80044fc:	460d      	mov	r5, r1
 80044fe:	4616      	mov	r6, r2
 8004500:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004502:	f7ff fcc7 	bl	8003e94 <USBD_GetLen>
 8004506:	3001      	adds	r0, #1
 8004508:	0040      	lsls	r0, r0, #1
 800450a:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800450c:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800450e:	2303      	movs	r3, #3
 8004510:	706b      	strb	r3, [r5, #1]
 8004512:	2302      	movs	r3, #2
    while (*desc != '\0')
 8004514:	e007      	b.n	8004526 <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8004516:	3401      	adds	r4, #1
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 800451e:	3302      	adds	r3, #2
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2100      	movs	r1, #0
 8004524:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8004526:	7821      	ldrb	r1, [r4, #0]
 8004528:	2900      	cmp	r1, #0
 800452a:	d1f4      	bne.n	8004516 <USBD_GetString+0x1e>
}
 800452c:	bd70      	pop	{r4, r5, r6, pc}
 800452e:	4770      	bx	lr

08004530 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004530:	b510      	push	{r4, lr}
 8004532:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004534:	2202      	movs	r2, #2
 8004536:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800453a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800453c:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800453e:	460a      	mov	r2, r1
 8004540:	2100      	movs	r1, #0
 8004542:	f000 fac3 	bl	8004acc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004546:	2000      	movs	r0, #0
 8004548:	bd10      	pop	{r4, pc}

0800454a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800454a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800454c:	4613      	mov	r3, r2
 800454e:	460a      	mov	r2, r1
 8004550:	2100      	movs	r1, #0
 8004552:	f000 fabb 	bl	8004acc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004556:	2000      	movs	r0, #0
 8004558:	bd08      	pop	{r3, pc}

0800455a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800455a:	b510      	push	{r4, lr}
 800455c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800455e:	2203      	movs	r2, #3
 8004560:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004564:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004568:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800456c:	460a      	mov	r2, r1
 800456e:	2100      	movs	r1, #0
 8004570:	f000 fab4 	bl	8004adc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004574:	2000      	movs	r0, #0
 8004576:	bd10      	pop	{r4, pc}

08004578 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004578:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800457a:	4613      	mov	r3, r2
 800457c:	460a      	mov	r2, r1
 800457e:	2100      	movs	r1, #0
 8004580:	f000 faac 	bl	8004adc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004584:	2000      	movs	r0, #0
 8004586:	bd08      	pop	{r3, pc}

08004588 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004588:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800458a:	2304      	movs	r3, #4
 800458c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004590:	2300      	movs	r3, #0
 8004592:	461a      	mov	r2, r3
 8004594:	4619      	mov	r1, r3
 8004596:	f000 fa99 	bl	8004acc <USBD_LL_Transmit>

  return USBD_OK;
}
 800459a:	2000      	movs	r0, #0
 800459c:	bd08      	pop	{r3, pc}

0800459e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800459e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80045a0:	2305      	movs	r3, #5
 80045a2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045a6:	2300      	movs	r3, #0
 80045a8:	461a      	mov	r2, r3
 80045aa:	4619      	mov	r1, r3
 80045ac:	f000 fa96 	bl	8004adc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80045b0:	2000      	movs	r0, #0
 80045b2:	bd08      	pop	{r3, pc}

080045b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80045b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80045b6:	2200      	movs	r2, #0
 80045b8:	f240 112c 	movw	r1, #300	; 0x12c
 80045bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80045c0:	f240 30f0 	movw	r0, #1008	; 0x3f0
 80045c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80045c8:	f7ff faef 	bl	8003baa <USBD_Init>
 80045cc:	b9e8      	cbnz	r0, 800460a <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80045ce:	f240 010c 	movw	r1, #12
 80045d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80045d6:	f240 30f0 	movw	r0, #1008	; 0x3f0
 80045da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80045de:	f7ff fb0d 	bl	8003bfc <USBD_RegisterClass>
 80045e2:	b9a8      	cbnz	r0, 8004610 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80045e4:	f240 111c 	movw	r1, #284	; 0x11c
 80045e8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80045ec:	f240 30f0 	movw	r0, #1008	; 0x3f0
 80045f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80045f4:	f7ff fa91 	bl	8003b1a <USBD_CDC_RegisterInterface>
 80045f8:	b968      	cbnz	r0, 8004616 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80045fa:	f240 30f0 	movw	r0, #1008	; 0x3f0
 80045fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004602:	f7ff fb02 	bl	8003c0a <USBD_Start>
 8004606:	b948      	cbnz	r0, 800461c <MX_USB_DEVICE_Init+0x68>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004608:	bd08      	pop	{r3, pc}
    Error_Handler();
 800460a:	f7fc f974 	bl	80008f6 <Error_Handler>
 800460e:	e7de      	b.n	80045ce <MX_USB_DEVICE_Init+0x1a>
    Error_Handler();
 8004610:	f7fc f971 	bl	80008f6 <Error_Handler>
 8004614:	e7e6      	b.n	80045e4 <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
 8004616:	f7fc f96e 	bl	80008f6 <Error_Handler>
 800461a:	e7ee      	b.n	80045fa <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
 800461c:	f7fc f96b 	bl	80008f6 <Error_Handler>
}
 8004620:	e7f2      	b.n	8004608 <MX_USB_DEVICE_Init+0x54>

08004622 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004622:	2000      	movs	r0, #0
 8004624:	4770      	bx	lr

08004626 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004626:	2000      	movs	r0, #0
 8004628:	4770      	bx	lr

0800462a <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800462a:	b570      	push	{r4, r5, r6, lr}
 800462c:	4605      	mov	r5, r0
 800462e:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004630:	f240 34f0 	movw	r4, #1008	; 0x3f0
 8004634:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004638:	4601      	mov	r1, r0
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff fa7c 	bl	8003b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff fa99 	bl	8003b78 <USBD_CDC_ReceivePacket>
  //my code begin
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//LED ON
 8004646:	2200      	movs	r2, #0
 8004648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800464c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004650:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004654:	f7fc fe12 	bl	800127c <HAL_GPIO_WritePin>
	uint16_t length = (uint16_t) *Len;
 8004658:	8833      	ldrh	r3, [r6, #0]
	if(length == 4 && flashStatus == Unlocked)
 800465a:	2b04      	cmp	r3, #4
 800465c:	d106      	bne.n	800466c <CDC_Receive_FS+0x42>
 800465e:	f240 33c0 	movw	r3, #960	; 0x3c0
 8004662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d00d      	beq.n	8004688 <CDC_Receive_FS+0x5e>
							  (Buf[1]<<8) +
							  Buf[0];//32bit Word contains 4 Bytes
		flashWord(dataToFlash);
	}else
	{
		messageHandler(Buf);
 800466c:	4628      	mov	r0, r5
 800466e:	f7fc f830 	bl	80006d2 <messageHandler>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//LED OFF
 8004672:	2201      	movs	r2, #1
 8004674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004678:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800467c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004680:	f7fc fdfc 	bl	800127c <HAL_GPIO_WritePin>
  //my code end
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004684:	2000      	movs	r0, #0
 8004686:	bd70      	pop	{r4, r5, r6, pc}
		uint32_t dataToFlash = (Buf[3]<<24) +
 8004688:	78e8      	ldrb	r0, [r5, #3]
							  (Buf[2]<<16) +
 800468a:	78ab      	ldrb	r3, [r5, #2]
 800468c:	041b      	lsls	r3, r3, #16
		uint32_t dataToFlash = (Buf[3]<<24) +
 800468e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
							  (Buf[1]<<8) +
 8004692:	7868      	ldrb	r0, [r5, #1]
							  (Buf[2]<<16) +
 8004694:	eb03 2300 	add.w	r3, r3, r0, lsl #8
							  Buf[0];//32bit Word contains 4 Bytes
 8004698:	7828      	ldrb	r0, [r5, #0]
		flashWord(dataToFlash);
 800469a:	4418      	add	r0, r3
 800469c:	f7fb fd58 	bl	8000150 <flashWord>
	{
 80046a0:	e7e7      	b.n	8004672 <CDC_Receive_FS+0x48>

080046a2 <CDC_Init_FS>:
{
 80046a2:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80046a4:	f240 34f0 	movw	r4, #1008	; 0x3f0
 80046a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80046ac:	2200      	movs	r2, #0
 80046ae:	f640 219c 	movw	r1, #2716	; 0xa9c
 80046b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fa36 	bl	8003b28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80046bc:	f240 61b4 	movw	r1, #1716	; 0x6b4
 80046c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7ff fa37 	bl	8003b38 <USBD_CDC_SetRxBuffer>
}
 80046ca:	2000      	movs	r0, #0
 80046cc:	bd10      	pop	{r4, pc}

080046ce <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80046ce:	f240 33f0 	movw	r3, #1008	; 0x3f0
 80046d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80046da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046de:	b10b      	cbz	r3, 80046e4 <CDC_Transmit_FS+0x16>
    return USBD_BUSY;
 80046e0:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80046e2:	4770      	bx	lr
{
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460a      	mov	r2, r1
 80046e8:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80046ea:	f240 34f0 	movw	r4, #1008	; 0x3f0
 80046ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff fa18 	bl	8003b28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7ff fa23 	bl	8003b44 <USBD_CDC_TransmitPacket>
}
 80046fe:	bd10      	pop	{r4, pc}

08004700 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004700:	2312      	movs	r3, #18
 8004702:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004704:	f240 1048 	movw	r0, #328	; 0x148
 8004708:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800470c:	4770      	bx	lr

0800470e <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800470e:	2304      	movs	r3, #4
 8004710:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004712:	f240 105c 	movw	r0, #348	; 0x15c
 8004716:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800471a:	4770      	bx	lr

0800471c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800471c:	2300      	movs	r3, #0
 800471e:	4293      	cmp	r3, r2
 8004720:	d216      	bcs.n	8004750 <IntToUnicode+0x34>
{
 8004722:	b430      	push	{r4, r5}
 8004724:	e00b      	b.n	800473e <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004726:	3437      	adds	r4, #55	; 0x37
 8004728:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800472c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800472e:	005c      	lsls	r4, r3, #1
 8004730:	3401      	adds	r4, #1
 8004732:	2500      	movs	r5, #0
 8004734:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8004736:	3301      	adds	r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4293      	cmp	r3, r2
 800473c:	d206      	bcs.n	800474c <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800473e:	0f04      	lsrs	r4, r0, #28
 8004740:	2c09      	cmp	r4, #9
 8004742:	d8f0      	bhi.n	8004726 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004744:	3430      	adds	r4, #48	; 0x30
 8004746:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800474a:	e7ef      	b.n	800472c <IntToUnicode+0x10>
  }
}
 800474c:	bc30      	pop	{r4, r5}
 800474e:	4770      	bx	lr
 8004750:	4770      	bx	lr

08004752 <Get_SerialNum>:
{
 8004752:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004754:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 8004758:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800475c:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800475e:	f24f 73ec 	movw	r3, #63468	; 0xf7ec
 8004762:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8004766:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004768:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 800476c:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8004770:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004772:	18c0      	adds	r0, r0, r3
 8004774:	d100      	bne.n	8004778 <Get_SerialNum+0x26>
}
 8004776:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004778:	f240 1460 	movw	r4, #352	; 0x160
 800477c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004780:	2208      	movs	r2, #8
 8004782:	1ca1      	adds	r1, r4, #2
 8004784:	f7ff ffca 	bl	800471c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004788:	2204      	movs	r2, #4
 800478a:	f104 0112 	add.w	r1, r4, #18
 800478e:	4628      	mov	r0, r5
 8004790:	f7ff ffc4 	bl	800471c <IntToUnicode>
}
 8004794:	e7ef      	b.n	8004776 <Get_SerialNum+0x24>

08004796 <USBD_FS_SerialStrDescriptor>:
{
 8004796:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004798:	231a      	movs	r3, #26
 800479a:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800479c:	f7ff ffd9 	bl	8004752 <Get_SerialNum>
}
 80047a0:	f240 1060 	movw	r0, #352	; 0x160
 80047a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80047a8:	bd08      	pop	{r3, pc}

080047aa <USBD_FS_ProductStrDescriptor>:
{
 80047aa:	b508      	push	{r3, lr}
 80047ac:	460a      	mov	r2, r1
  if(speed == 0)
 80047ae:	b170      	cbz	r0, 80047ce <USBD_FS_ProductStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047b0:	f640 6184 	movw	r1, #3716	; 0xe84
 80047b4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80047b8:	f644 40b0 	movw	r0, #19632	; 0x4cb0
 80047bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80047c0:	f7ff fe9a 	bl	80044f8 <USBD_GetString>
}
 80047c4:	f640 6084 	movw	r0, #3716	; 0xe84
 80047c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80047cc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047ce:	f640 6184 	movw	r1, #3716	; 0xe84
 80047d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80047d6:	f644 40b0 	movw	r0, #19632	; 0x4cb0
 80047da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80047de:	f7ff fe8b 	bl	80044f8 <USBD_GetString>
 80047e2:	e7ef      	b.n	80047c4 <USBD_FS_ProductStrDescriptor+0x1a>

080047e4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80047e4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80047e6:	f640 6484 	movw	r4, #3716	; 0xe84
 80047ea:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80047ee:	460a      	mov	r2, r1
 80047f0:	4621      	mov	r1, r4
 80047f2:	f644 40a4 	movw	r0, #19620	; 0x4ca4
 80047f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80047fa:	f7ff fe7d 	bl	80044f8 <USBD_GetString>
}
 80047fe:	4620      	mov	r0, r4
 8004800:	bd10      	pop	{r4, pc}

08004802 <USBD_FS_ConfigStrDescriptor>:
{
 8004802:	b508      	push	{r3, lr}
 8004804:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004806:	b170      	cbz	r0, 8004826 <USBD_FS_ConfigStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004808:	f640 6184 	movw	r1, #3716	; 0xe84
 800480c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004810:	f644 4088 	movw	r0, #19592	; 0x4c88
 8004814:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004818:	f7ff fe6e 	bl	80044f8 <USBD_GetString>
}
 800481c:	f640 6084 	movw	r0, #3716	; 0xe84
 8004820:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004824:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004826:	f640 6184 	movw	r1, #3716	; 0xe84
 800482a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800482e:	f644 4088 	movw	r0, #19592	; 0x4c88
 8004832:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004836:	f7ff fe5f 	bl	80044f8 <USBD_GetString>
 800483a:	e7ef      	b.n	800481c <USBD_FS_ConfigStrDescriptor+0x1a>

0800483c <USBD_FS_InterfaceStrDescriptor>:
{
 800483c:	b508      	push	{r3, lr}
 800483e:	460a      	mov	r2, r1
  if(speed == 0)
 8004840:	b170      	cbz	r0, 8004860 <USBD_FS_InterfaceStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004842:	f640 6184 	movw	r1, #3716	; 0xe84
 8004846:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800484a:	f644 4094 	movw	r0, #19604	; 0x4c94
 800484e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004852:	f7ff fe51 	bl	80044f8 <USBD_GetString>
}
 8004856:	f640 6084 	movw	r0, #3716	; 0xe84
 800485a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800485e:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004860:	f640 6184 	movw	r1, #3716	; 0xe84
 8004864:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004868:	f644 4094 	movw	r0, #19604	; 0x4c94
 800486c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004870:	f7ff fe42 	bl	80044f8 <USBD_GetString>
 8004874:	e7ef      	b.n	8004856 <USBD_FS_InterfaceStrDescriptor+0x1a>

08004876 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004876:	b118      	cbz	r0, 8004880 <USBD_Get_USB_Status+0xa>
 8004878:	2802      	cmp	r0, #2
 800487a:	d003      	beq.n	8004884 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800487c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800487e:	4770      	bx	lr
      usb_status = USBD_OK;
 8004880:	2000      	movs	r0, #0
 8004882:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8004884:	2001      	movs	r0, #1
    break;
 8004886:	4770      	bx	lr

08004888 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8004888:	6802      	ldr	r2, [r0, #0]
 800488a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800488e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004892:	429a      	cmp	r2, r3
 8004894:	d000      	beq.n	8004898 <HAL_PCD_MspInit+0x10>
 8004896:	4770      	bx	lr
{
 8004898:	b500      	push	{lr}
 800489a:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800489c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048aa:	61da      	str	r2, [r3, #28]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	4611      	mov	r1, r2
 80048ba:	2014      	movs	r0, #20
 80048bc:	f7fc f8ff 	bl	8000abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80048c0:	2014      	movs	r0, #20
 80048c2:	f7fc f932 	bl	8000b2a <HAL_NVIC_EnableIRQ>
}
 80048c6:	b003      	add	sp, #12
 80048c8:	f85d fb04 	ldr.w	pc, [sp], #4

080048cc <HAL_PCD_MspDeInit>:
{
 80048cc:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB)
 80048ce:	6802      	ldr	r2, [r0, #0]
 80048d0:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80048d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048d8:	429a      	cmp	r2, r3
 80048da:	d000      	beq.n	80048de <HAL_PCD_MspDeInit+0x12>
}
 80048dc:	bd08      	pop	{r3, pc}
    __HAL_RCC_USB_CLK_DISABLE();
 80048de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80048ec:	61da      	str	r2, [r3, #28]
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 80048ee:	2014      	movs	r0, #20
 80048f0:	f7fc f929 	bl	8000b46 <HAL_NVIC_DisableIRQ>
}
 80048f4:	e7f2      	b.n	80048dc <HAL_PCD_MspDeInit+0x10>

080048f6 <HAL_PCD_SetupStageCallback>:
{
 80048f6:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80048f8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80048fc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004900:	f7ff f99c 	bl	8003c3c <USBD_LL_SetupStage>
}
 8004904:	bd08      	pop	{r3, pc}

08004906 <HAL_PCD_DataOutStageCallback>:
{
 8004906:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004908:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800490c:	00d3      	lsls	r3, r2, #3
 800490e:	4403      	add	r3, r0
 8004910:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004914:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004918:	f7ff f9bd 	bl	8003c96 <USBD_LL_DataOutStage>
}
 800491c:	bd08      	pop	{r3, pc}

0800491e <HAL_PCD_DataInStageCallback>:
{
 800491e:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004920:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004924:	00d3      	lsls	r3, r2, #3
 8004926:	4403      	add	r3, r0
 8004928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800492e:	f7ff f9fb 	bl	8003d28 <USBD_LL_DataInStage>
}
 8004932:	bd08      	pop	{r3, pc}

08004934 <HAL_PCD_SOFCallback>:
{
 8004934:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004936:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800493a:	f7ff fa9d 	bl	8003e78 <USBD_LL_SOF>
}
 800493e:	bd08      	pop	{r3, pc}

08004940 <HAL_PCD_ResetCallback>:
{
 8004940:	b510      	push	{r4, lr}
 8004942:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004944:	6883      	ldr	r3, [r0, #8]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d001      	beq.n	800494e <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800494a:	f7fb ffd4 	bl	80008f6 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800494e:	2101      	movs	r1, #1
 8004950:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004954:	f7ff fa79 	bl	8003e4a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004958:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800495c:	f7ff fa4d 	bl	8003dfa <USBD_LL_Reset>
}
 8004960:	bd10      	pop	{r4, pc}

08004962 <HAL_PCD_SuspendCallback>:
{
 8004962:	b510      	push	{r4, lr}
 8004964:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004966:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800496a:	f7ff fa71 	bl	8003e50 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800496e:	69a3      	ldr	r3, [r4, #24]
 8004970:	b13b      	cbz	r3, 8004982 <HAL_PCD_SuspendCallback+0x20>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004972:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004976:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	f042 0206 	orr.w	r2, r2, #6
 8004980:	611a      	str	r2, [r3, #16]
}
 8004982:	bd10      	pop	{r4, pc}

08004984 <HAL_PCD_ResumeCallback>:
{
 8004984:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004986:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800498a:	f7ff fa6a 	bl	8003e62 <USBD_LL_Resume>
}
 800498e:	bd08      	pop	{r3, pc}

08004990 <USBD_LL_Init>:
{
 8004990:	b510      	push	{r4, lr}
 8004992:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004994:	f241 0084 	movw	r0, #4228	; 0x1084
 8004998:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800499c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80049a0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80049a4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80049a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049ac:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80049ae:	2308      	movs	r3, #8
 80049b0:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80049b2:	2302      	movs	r3, #2
 80049b4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80049ba:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80049bc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80049be:	f7fc fcec 	bl	800139a <HAL_PCD_Init>
 80049c2:	bb30      	cbnz	r0, 8004a12 <USBD_LL_Init+0x82>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80049c4:	2318      	movs	r3, #24
 80049c6:	2200      	movs	r2, #0
 80049c8:	4611      	mov	r1, r2
 80049ca:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049ce:	f7fd fb43 	bl	8002058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80049d2:	2358      	movs	r3, #88	; 0x58
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049dc:	f7fd fb3c 	bl	8002058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	2200      	movs	r2, #0
 80049e4:	2181      	movs	r1, #129	; 0x81
 80049e6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049ea:	f7fd fb35 	bl	8002058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80049ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80049f2:	2200      	movs	r2, #0
 80049f4:	2101      	movs	r1, #1
 80049f6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80049fa:	f7fd fb2d 	bl	8002058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80049fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a02:	2200      	movs	r2, #0
 8004a04:	2182      	movs	r1, #130	; 0x82
 8004a06:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004a0a:	f7fd fb25 	bl	8002058 <HAL_PCDEx_PMAConfig>
}
 8004a0e:	2000      	movs	r0, #0
 8004a10:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004a12:	f7fb ff70 	bl	80008f6 <Error_Handler>
 8004a16:	e7d5      	b.n	80049c4 <USBD_LL_Init+0x34>

08004a18 <USBD_LL_DeInit>:
{
 8004a18:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8004a1a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a1e:	f7fc fd42 	bl	80014a6 <HAL_PCD_DeInit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a22:	f7ff ff28 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a26:	bd08      	pop	{r3, pc}

08004a28 <USBD_LL_Start>:
{
 8004a28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004a2a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a2e:	f7fc fd51 	bl	80014d4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a32:	f7ff ff20 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a36:	bd08      	pop	{r3, pc}

08004a38 <USBD_LL_Stop>:
{
 8004a38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8004a3a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a3e:	f7fc fd62 	bl	8001506 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a42:	f7ff ff18 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a46:	bd08      	pop	{r3, pc}

08004a48 <USBD_LL_OpenEP>:
{
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	4622      	mov	r2, r4
 8004a50:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a54:	f7fd f9d1 	bl	8001dfa <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a58:	f7ff ff0d 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a5c:	bd10      	pop	{r4, pc}

08004a5e <USBD_LL_CloseEP>:
{
 8004a5e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004a60:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a64:	f7fd fa03 	bl	8001e6e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a68:	f7ff ff05 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a6c:	bd08      	pop	{r3, pc}

08004a6e <USBD_LL_StallEP>:
{
 8004a6e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004a70:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a74:	f7fd fa7b 	bl	8001f6e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a78:	f7ff fefd 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a7c:	bd08      	pop	{r3, pc}

08004a7e <USBD_LL_ClearStallEP>:
{
 8004a7e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004a80:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a84:	f7fd faae 	bl	8001fe4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a88:	f7ff fef5 	bl	8004876 <USBD_Get_USB_Status>
}
 8004a8c:	bd08      	pop	{r3, pc}

08004a8e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a8e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004a92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004a96:	d108      	bne.n	8004aaa <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004a98:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004a9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004aa0:	00ca      	lsls	r2, r1, #3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 8004aa8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004aaa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004aae:	3101      	adds	r1, #1
 8004ab0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	7898      	ldrb	r0, [r3, #2]
 8004aba:	4770      	bx	lr

08004abc <USBD_LL_SetUSBAddress>:
{
 8004abc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004abe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ac2:	f7fd f89f 	bl	8001c04 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ac6:	f7ff fed6 	bl	8004876 <USBD_Get_USB_Status>
}
 8004aca:	bd08      	pop	{r3, pc}

08004acc <USBD_LL_Transmit>:
{
 8004acc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004ace:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ad2:	f7fd fa27 	bl	8001f24 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ad6:	f7ff fece 	bl	8004876 <USBD_Get_USB_Status>
}
 8004ada:	bd08      	pop	{r3, pc}

08004adc <USBD_LL_PrepareReceive>:
{
 8004adc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004ade:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ae2:	f7fd f9f5 	bl	8001ed0 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ae6:	f7ff fec6 	bl	8004876 <USBD_Get_USB_Status>
}
 8004aea:	bd08      	pop	{r3, pc}

08004aec <USBD_LL_GetRxDataSize>:
{
 8004aec:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004aee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004af2:	f7fd fa0e 	bl	8001f12 <HAL_PCD_EP_GetRxCount>
}
 8004af6:	bd08      	pop	{r3, pc}

08004af8 <USBD_static_malloc>:
}
 8004af8:	f240 10a0 	movw	r0, #416	; 0x1a0
 8004afc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004b00:	4770      	bx	lr

08004b02 <USBD_static_free>:
}
 8004b02:	4770      	bx	lr

08004b04 <HAL_PCDEx_SetConnectionState>:
}
 8004b04:	4770      	bx	lr
	...

08004b08 <__libc_init_array>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	4e0c      	ldr	r6, [pc, #48]	; (8004b40 <__libc_init_array+0x38>)
 8004b0e:	4c0d      	ldr	r4, [pc, #52]	; (8004b44 <__libc_init_array+0x3c>)
 8004b10:	1ba4      	subs	r4, r4, r6
 8004b12:	10a4      	asrs	r4, r4, #2
 8004b14:	42a5      	cmp	r5, r4
 8004b16:	d109      	bne.n	8004b2c <__libc_init_array+0x24>
 8004b18:	f000 f81a 	bl	8004b50 <_init>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	4e0a      	ldr	r6, [pc, #40]	; (8004b48 <__libc_init_array+0x40>)
 8004b20:	4c0a      	ldr	r4, [pc, #40]	; (8004b4c <__libc_init_array+0x44>)
 8004b22:	1ba4      	subs	r4, r4, r6
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	42a5      	cmp	r5, r4
 8004b28:	d105      	bne.n	8004b36 <__libc_init_array+0x2e>
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b30:	4798      	blx	r3
 8004b32:	3501      	adds	r5, #1
 8004b34:	e7ee      	b.n	8004b14 <__libc_init_array+0xc>
 8004b36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b3a:	4798      	blx	r3
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7f2      	b.n	8004b26 <__libc_init_array+0x1e>
 8004b40:	08004cc4 	.word	0x08004cc4
 8004b44:	08004cc4 	.word	0x08004cc4
 8004b48:	08004cc4 	.word	0x08004cc4
 8004b4c:	08004cc8 	.word	0x08004cc8

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
