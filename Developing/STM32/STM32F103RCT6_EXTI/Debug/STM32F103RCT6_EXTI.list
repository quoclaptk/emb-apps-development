
STM32F103RCT6_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f1c  08002f1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002f1c  08002f1c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f1c  08002f1c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000078  08002fac  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08002fac  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c791  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035fa  00000000  00000000  0003c832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  0003fe30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00040cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eca1  00000000  00000000  00041a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdf0  00000000  00000000  000606e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e4dc  00000000  00000000  000704d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  0010ea08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08002db4 	.word	0x08002db4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08002db4 	.word	0x08002db4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <_Z16UpdateRemoteCodev>:

RCSwitch mySwitch = RCSwitch();
STM32Flash flash;
/***********************************************************/
void UpdateRemoteCode(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
	uint32_t temp=0, varNew = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
	uint32_t buff[4];
	for(uint8_t i=0; i<4; i++)
 8000242:	2300      	movs	r3, #0
 8000244:	77fb      	strb	r3, [r7, #31]
 8000246:	7ffb      	ldrb	r3, [r7, #31]
 8000248:	2b03      	cmp	r3, #3
 800024a:	d83a      	bhi.n	80002c2 <_Z16UpdateRemoteCodev+0x8e>
	{
		temp = i;
 800024c:	7ffb      	ldrb	r3, [r7, #31]
 800024e:	61bb      	str	r3, [r7, #24]
		while(!mySwitch.available());
 8000250:	482e      	ldr	r0, [pc, #184]	; (800030c <_Z16UpdateRemoteCodev+0xd8>)
 8000252:	f002 f8cf 	bl	80023f4 <_ZN8RCSwitch9availableEv>
 8000256:	4603      	mov	r3, r0
 8000258:	f083 0301 	eor.w	r3, r3, #1
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b00      	cmp	r3, #0
 8000260:	d000      	beq.n	8000264 <_Z16UpdateRemoteCodev+0x30>
 8000262:	e7f5      	b.n	8000250 <_Z16UpdateRemoteCodev+0x1c>
		varNew = (uint32_t)mySwitch.getReceivedValue();
 8000264:	4829      	ldr	r0, [pc, #164]	; (800030c <_Z16UpdateRemoteCodev+0xd8>)
 8000266:	f002 f8e5 	bl	8002434 <_ZN8RCSwitch16getReceivedValueEv>
 800026a:	6178      	str	r0, [r7, #20]
		if(i==0)
 800026c:	7ffb      	ldrb	r3, [r7, #31]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d108      	bne.n	8000284 <_Z16UpdateRemoteCodev+0x50>
		{
			buff[i] = varNew;
 8000272:	7ffb      	ldrb	r3, [r7, #31]
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	f107 0220 	add.w	r2, r7, #32
 800027a:	4413      	add	r3, r2
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	f843 2c1c 	str.w	r2, [r3, #-28]
 8000282:	e017      	b.n	80002b4 <_Z16UpdateRemoteCodev+0x80>
		}
		else
		{
			if(buff[i-1] != varNew)
 8000284:	7ffb      	ldrb	r3, [r7, #31]
 8000286:	3b01      	subs	r3, #1
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	f107 0220 	add.w	r2, r7, #32
 800028e:	4413      	add	r3, r2
 8000290:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	429a      	cmp	r2, r3
 8000298:	d008      	beq.n	80002ac <_Z16UpdateRemoteCodev+0x78>
			{
				buff[i] = varNew;
 800029a:	7ffb      	ldrb	r3, [r7, #31]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	f107 0220 	add.w	r2, r7, #32
 80002a2:	4413      	add	r3, r2
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	f843 2c1c 	str.w	r2, [r3, #-28]
 80002aa:	e003      	b.n	80002b4 <_Z16UpdateRemoteCodev+0x80>
			}
			else
			{
				i= temp -1;
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	3b01      	subs	r3, #1
 80002b2:	77fb      	strb	r3, [r7, #31]
			}
		}
		mySwitch.resetAvailable();
 80002b4:	4815      	ldr	r0, [pc, #84]	; (800030c <_Z16UpdateRemoteCodev+0xd8>)
 80002b6:	f002 f8af 	bl	8002418 <_ZN8RCSwitch14resetAvailableEv>
	for(uint8_t i=0; i<4; i++)
 80002ba:	7ffb      	ldrb	r3, [r7, #31]
 80002bc:	3301      	adds	r3, #1
 80002be:	77fb      	strb	r3, [r7, #31]
 80002c0:	e7c1      	b.n	8000246 <_Z16UpdateRemoteCodev+0x12>
	}
	flash.flashErase(DATA_START_ADDRESS);
 80002c2:	4913      	ldr	r1, [pc, #76]	; (8000310 <_Z16UpdateRemoteCodev+0xdc>)
 80002c4:	4813      	ldr	r0, [pc, #76]	; (8000314 <_Z16UpdateRemoteCodev+0xe0>)
 80002c6:	f002 fa43 	bl	8002750 <_ZN10STM32Flash10flashEraseEm>
	for(uint8_t i=0; i<4; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	77bb      	strb	r3, [r7, #30]
 80002ce:	7fbb      	ldrb	r3, [r7, #30]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d816      	bhi.n	8000302 <_Z16UpdateRemoteCodev+0xce>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, DATA_START_ADDRESS+ i*4, buff[i]);
 80002d4:	7fbb      	ldrb	r3, [r7, #30]
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80002dc:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80002e0:	7fbb      	ldrb	r3, [r7, #30]
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	f107 0220 	add.w	r2, r7, #32
 80002e8:	4413      	add	r3, r2
 80002ea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80002ee:	461a      	mov	r2, r3
 80002f0:	f04f 0300 	mov.w	r3, #0
 80002f4:	2002      	movs	r0, #2
 80002f6:	f000 fc8d 	bl	8000c14 <HAL_FLASH_Program>
	for(uint8_t i=0; i<4; i++)
 80002fa:	7fbb      	ldrb	r3, [r7, #30]
 80002fc:	3301      	adds	r3, #1
 80002fe:	77bb      	strb	r3, [r7, #30]
 8000300:	e7e5      	b.n	80002ce <_Z16UpdateRemoteCodev+0x9a>
	}
}
 8000302:	bf00      	nop
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000dc 	.word	0x200000dc
 8000310:	0801fc00 	.word	0x0801fc00
 8000314:	200000f8 	.word	0x200000f8

08000318 <_Z11GetPositionm>:
/***********************************************************/
uint8_t GetPosition(uint32_t data)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<4; i++)
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b03      	cmp	r3, #3
 8000328:	d810      	bhi.n	800034c <_Z11GetPositionm+0x34>
	{
		if( (*(uint32_t*)(DATA_START_ADDRESS + i*4)) == data)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000330:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	429a      	cmp	r2, r3
 800033c:	d102      	bne.n	8000344 <_Z11GetPositionm+0x2c>
		{
			return i;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	e004      	b.n	800034e <_Z11GetPositionm+0x36>
	for(uint32_t i=0; i<4; i++)
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3301      	adds	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e7eb      	b.n	8000324 <_Z11GetPositionm+0xc>
		}
	}
	return 4;
 800034c:	2304      	movs	r3, #4
}
 800034e:	4618      	mov	r0, r3
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <main>:
/***********************************************************/
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0

	uint32_t blink_count = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
	HAL_Init();
 8000362:	f000 fae7 	bl	8000934 <HAL_Init>
	SystemClock_Config();
 8000366:	f000 f881 	bl	800046c <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 800036a:	f000 f931 	bl	80005d0 <_ZL12MX_GPIO_Initv>
	MX_TIM1_Init();
 800036e:	f000 f8c7 	bl	8000500 <_ZL12MX_TIM1_Initv>
	HAL_TIM_Base_Start_IT(&htim1);
 8000372:	4833      	ldr	r0, [pc, #204]	; (8000440 <main+0xe8>)
 8000374:	f001 fbc2 	bl	8001afc <HAL_TIM_Base_Start_IT>
	mySwitch.enableReceive(0);
 8000378:	2100      	movs	r1, #0
 800037a:	4832      	ldr	r0, [pc, #200]	; (8000444 <main+0xec>)
 800037c:	f002 f812 	bl	80023a4 <_ZN8RCSwitch13enableReceiveEi>
	Utility().delayInit();
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fbac 	bl	8002ae0 <_ZN7UtilityC1Ev>
 8000388:	463b      	mov	r3, r7
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fbd8 	bl	8002b40 <_ZN7Utility9delayInitEv>
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fbb4 	bl	8002b00 <_ZN7UtilityD1Ev>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)== GPIO_PIN_RESET)
 8000398:	2108      	movs	r1, #8
 800039a:	482b      	ldr	r0, [pc, #172]	; (8000448 <main+0xf0>)
 800039c:	f000 ff16 	bl	80011cc <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf0c      	ite	eq
 80003a6:	2301      	moveq	r3, #1
 80003a8:	2300      	movne	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <main+0x5c>
	{
		UpdateRemoteCode();
 80003b0:	f7ff ff40 	bl	8000234 <_Z16UpdateRemoteCodev>
	}
	while (1)
	{
		if (mySwitch.available())
 80003b4:	4823      	ldr	r0, [pc, #140]	; (8000444 <main+0xec>)
 80003b6:	f002 f81d 	bl	80023f4 <_ZN8RCSwitch9availableEv>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d034      	beq.n	800042a <main+0xd2>
		{
			switch (GetPosition((uint32_t)mySwitch.getReceivedValue()))
 80003c0:	4820      	ldr	r0, [pc, #128]	; (8000444 <main+0xec>)
 80003c2:	f002 f837 	bl	8002434 <_ZN8RCSwitch16getReceivedValueEv>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ffa5 	bl	8000318 <_Z11GetPositionm>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d823      	bhi.n	800041c <main+0xc4>
 80003d4:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <main+0x84>)
 80003d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003da:	bf00      	nop
 80003dc:	080003ed 	.word	0x080003ed
 80003e0:	080003f9 	.word	0x080003f9
 80003e4:	08000405 	.word	0x08000405
 80003e8:	08000411 	.word	0x08000411
			{
			case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2101      	movs	r1, #1
 80003f0:	4816      	ldr	r0, [pc, #88]	; (800044c <main+0xf4>)
 80003f2:	f000 ff02 	bl	80011fa <HAL_GPIO_WritePin>
				break;
 80003f6:	e011      	b.n	800041c <main+0xc4>
			case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	4813      	ldr	r0, [pc, #76]	; (800044c <main+0xf4>)
 80003fe:	f000 fefc 	bl	80011fa <HAL_GPIO_WritePin>
				break;
 8000402:	e00b      	b.n	800041c <main+0xc4>
			case 2:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2102      	movs	r1, #2
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <main+0xf4>)
 800040a:	f000 fef6 	bl	80011fa <HAL_GPIO_WritePin>
				break;
 800040e:	e005      	b.n	800041c <main+0xc4>
			case 3:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <main+0xf4>)
 8000416:	f000 fef0 	bl	80011fa <HAL_GPIO_WritePin>
				break;
 800041a:	bf00      	nop
			}
			mySwitch.resetAvailable();
 800041c:	4809      	ldr	r0, [pc, #36]	; (8000444 <main+0xec>)
 800041e:	f001 fffb 	bl	8002418 <_ZN8RCSwitch14resetAvailableEv>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000422:	2102      	movs	r1, #2
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <main+0xf4>)
 8000426:	f000 ff00 	bl	800122a <HAL_GPIO_TogglePin>
		}
		blink_count++;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3301      	adds	r3, #1
 800042e:	607b      	str	r3, [r7, #4]
		if(blink_count>0xDFFFF)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000436:	d3bd      	bcc.n	80003b4 <main+0x5c>
		{
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
			blink_count = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
		if (mySwitch.available())
 800043c:	e7ba      	b.n	80003b4 <main+0x5c>
 800043e:	bf00      	nop
 8000440:	20000094 	.word	0x20000094
 8000444:	200000dc 	.word	0x200000dc
 8000448:	40010800 	.word	0x40010800
 800044c:	40011000 	.word	0x40011000

08000450 <HAL_GPIO_EXTI_Callback>:
		}
	}
}
/***********************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_1)
 800045a:	88fb      	ldrh	r3, [r7, #6]
 800045c:	2b02      	cmp	r3, #2
 800045e:	d101      	bne.n	8000464 <HAL_GPIO_EXTI_Callback+0x14>
	{
		mySwitch.handleInterrupt();
 8000460:	f002 f8c8 	bl	80025f4 <_ZN8RCSwitch15handleInterruptEv>
	}
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b090      	sub	sp, #64	; 0x40
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0318 	add.w	r3, r7, #24
 8000476:	2228      	movs	r2, #40	; 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f002 fbf4 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048e:	2302      	movs	r3, #2
 8000490:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	2310      	movs	r3, #16
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800049e:	2300      	movs	r3, #0
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80004a2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80004a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 feed 	bl	800128c <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf14      	ite	ne
 80004b8:	2301      	movne	r3, #1
 80004ba:	2300      	moveq	r3, #0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80004c2:	f000 f8e7 	bl	8000694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	230f      	movs	r3, #15
 80004c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ca:	2302      	movs	r3, #2
 80004cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f954 	bl	800178c <HAL_RCC_ClockConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80004f4:	f000 f8ce 	bl	8000694 <Error_Handler>
  }
}
 80004f8:	bf00      	nop
 80004fa:	3740      	adds	r7, #64	; 0x40
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 800051e:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <_ZL12MX_TIM1_Initv+0xcc>)
 8000520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 8000524:	2209      	movs	r2, #9
 8000526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 319;
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 8000530:	f240 123f 	movw	r2, #319	; 0x13f
 8000534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000548:	481f      	ldr	r0, [pc, #124]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 800054a:	f001 fa87 	bl	8001a5c <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf14      	ite	ne
 8000554:	2301      	movne	r3, #1
 8000556:	2300      	moveq	r3, #0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 800055e:	f000 f899 	bl	8000694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4619      	mov	r1, r3
 800056e:	4816      	ldr	r0, [pc, #88]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 8000570:	f001 fc2c 	bl	8001dcc <HAL_TIM_ConfigClockSource>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	bf14      	ite	ne
 800057a:	2301      	movne	r3, #1
 800057c:	2300      	moveq	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8000584:	f000 f886 	bl	8000694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <_ZL12MX_TIM1_Initv+0xc8>)
 8000596:	f001 fe1b 	bl	80021d0 <HAL_TIMEx_MasterConfigSynchronization>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80005aa:	f000 f873 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2019      	movs	r0, #25
 80005b4:	f000 faf7 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005b8:	2019      	movs	r0, #25
 80005ba:	f000 fb10 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM1_Init 2 */
}
 80005be:	bf00      	nop
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000094 	.word	0x20000094
 80005cc:	40012c00 	.word	0x40012c00

080005d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <_ZL12MX_GPIO_Initv+0xb4>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <_ZL12MX_GPIO_Initv+0xb4>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <_ZL12MX_GPIO_Initv+0xb4>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <_ZL12MX_GPIO_Initv+0xb4>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <_ZL12MX_GPIO_Initv+0xb4>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <_ZL12MX_GPIO_Initv+0xb4>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2103      	movs	r1, #3
 8000618:	481b      	ldr	r0, [pc, #108]	; (8000688 <_ZL12MX_GPIO_Initv+0xb8>)
 800061a:	f000 fdee 	bl	80011fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800061e:	2303      	movs	r3, #3
 8000620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2302      	movs	r3, #2
 800062c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4619      	mov	r1, r3
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <_ZL12MX_GPIO_Initv+0xb8>)
 8000636:	f000 fc35 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800063a:	2302      	movs	r3, #2
 800063c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <_ZL12MX_GPIO_Initv+0xbc>)
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	4810      	ldr	r0, [pc, #64]	; (8000690 <_ZL12MX_GPIO_Initv+0xc0>)
 800064e:	f000 fc29 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000652:	2308      	movs	r3, #8
 8000654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <_ZL12MX_GPIO_Initv+0xc0>)
 8000666:	f000 fc1d 	bl	8000ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2007      	movs	r0, #7
 8000670:	f000 fa99 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000674:	2007      	movs	r0, #7
 8000676:	f000 fab2 	bl	8000bde <HAL_NVIC_EnableIRQ>

}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	40011000 	.word	0x40011000
 800068c:	10310000 	.word	0x10310000
 8000690:	40010800 	.word	0x40010800

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <_ZN8RCSwitchD1Ev>:

// Number of maximum high/Low changes per packet.
// We can handle up to (unsigned long) => 32 bit * 2 H/L changes per bit + 2 for sync
#define RCSWITCH_MAX_CHANGES 67

class RCSwitch: private Utility {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_ZN8RCSwitchD1Ev+0x20>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fa25 	bl	8002b00 <_ZN7UtilityD1Ev>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08002de4 	.word	0x08002de4

080006c4 <_ZN8RCSwitchD0Ev>:
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ffe7 	bl	80006a0 <_ZN8RCSwitchD1Ev>
 80006d2:	211c      	movs	r1, #28
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f002 fa67 	bl	8002ba8 <_ZdlPvj>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d10a      	bne.n	800070a <_Z41__static_initialization_and_destruction_0ii+0x26>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d105      	bne.n	800070a <_Z41__static_initialization_and_destruction_0ii+0x26>
RCSwitch mySwitch = RCSwitch();
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000700:	f001 fde4 	bl	80022cc <_ZN8RCSwitchC1Ev>
STM32Flash flash;
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000706:	f001 ffe9 	bl	80026dc <_ZN10STM32FlashC1Ev>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d10a      	bne.n	8000726 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000716:	4293      	cmp	r3, r2
 8000718:	d105      	bne.n	8000726 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800071c:	f001 ffee 	bl	80026fc <_ZN10STM32FlashD1Ev>
RCSwitch mySwitch = RCSwitch();
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000722:	f7ff ffbd 	bl	80006a0 <_ZN8RCSwitchD1Ev>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000dc 	.word	0x200000dc
 8000734:	200000f8 	.word	0x200000f8

08000738 <_GLOBAL__sub_I_htim1>:
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
 800073c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ffcf 	bl	80006e4 <_Z41__static_initialization_and_destruction_0ii>
 8000746:	bd80      	pop	{r7, pc}

08000748 <_GLOBAL__sub_D_htim1>:
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
 800074c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ffc7 	bl	80006e4 <_Z41__static_initialization_and_destruction_0ii>
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_MspInit+0x5c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <HAL_MspInit+0x5c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x5c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x5c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_MspInit+0x60>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_MspInit+0x60>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010000 	.word	0x40010000

080007bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_TIM_Base_MspInit+0x44>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d113      	bne.n	80007f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_TIM_Base_MspInit+0x48>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <HAL_TIM_Base_MspInit+0x48>)
 80007d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_TIM_Base_MspInit+0x48>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2019      	movs	r0, #25
 80007ec:	f000 f9db 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007f0:	2019      	movs	r0, #25
 80007f2:	f000 f9f4 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40012c00 	.word	0x40012c00
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
	...

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sysTickUptime++;
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Handler+0x18>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a03      	ldr	r2, [pc, #12]	; (8000864 <SysTick_Handler+0x18>)
 8000858:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085a:	f000 f8b1 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000fc 	.word	0x200000fc

08000868 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	Tim1TickUptime++;
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <EXTI1_IRQHandler+0x18>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a03      	ldr	r2, [pc, #12]	; (8000880 <EXTI1_IRQHandler+0x18>)
 8000874:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000876:	2002      	movs	r0, #2
 8000878:	f000 fcf0 	bl	800125c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000100 	.word	0x20000100

08000884 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM1_UP_IRQHandler+0x10>)
 800088a:	f001 f997 	bl	8001bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000094 	.word	0x20000094

08000898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	return 1;
 800089c:	2301      	movs	r3, #1
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_kill>:

int _kill(int pid, int sig)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008b0:	f002 f99a 	bl	8002be8 <__errno>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2216      	movs	r2, #22
 80008b8:	601a      	str	r2, [r3, #0]
	return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_exit>:

void _exit (int status)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffe7 	bl	80008a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008d8:	e7fe      	b.n	80008d8 <_exit+0x12>

080008da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008ea:	e003      	b.n	80008f4 <LoopCopyDataInit>

080008ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008f2:	3104      	adds	r1, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008f4:	480a      	ldr	r0, [pc, #40]	; (8000920 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008fc:	d3f6      	bcc.n	80008ec <CopyDataInit>
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000900:	e002      	b.n	8000908 <LoopFillZerobss>

08000902 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000904:	f842 3b04 	str.w	r3, [r2], #4

08000908 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800090a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800090c:	d3f9      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090e:	f7ff ffe4 	bl	80008da <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000912:	f002 f96f 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fd1f 	bl	8000358 <main>
  bx lr
 800091a:	4770      	bx	lr
  ldr r3, =_sidata
 800091c:	08002f34 	.word	0x08002f34
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000924:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000928:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800092c:	20000270 	.word	0x20000270

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f923 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff ff02 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f93b 	bl	8000bfa <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f903 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000238 	.word	0x20000238

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000238 	.word	0x20000238

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <__NVIC_EnableIRQ+0x34>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff90 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff2d 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff42 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff35 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <HAL_FLASH_Program+0xd8>)
 8000c30:	7e1b      	ldrb	r3, [r3, #24]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_FLASH_Program+0x26>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e054      	b.n	8000ce4 <HAL_FLASH_Program+0xd0>
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <HAL_FLASH_Program+0xd8>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c44:	f000 f898 	bl	8000d78 <FLASH_WaitForLastOperation>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d144      	bne.n	8000cdc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d102      	bne.n	8000c5e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	757b      	strb	r3, [r7, #21]
 8000c5c:	e007      	b.n	8000c6e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c64:	2302      	movs	r3, #2
 8000c66:	757b      	strb	r3, [r7, #21]
 8000c68:	e001      	b.n	8000c6e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	75bb      	strb	r3, [r7, #22]
 8000c72:	e02d      	b.n	8000cd0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c74:	7dbb      	ldrb	r3, [r7, #22]
 8000c76:	005a      	lsls	r2, r3, #1
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	eb02 0c03 	add.w	ip, r2, r3
 8000c7e:	7dbb      	ldrb	r3, [r7, #22]
 8000c80:	0119      	lsls	r1, r3, #4
 8000c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c86:	f1c1 0620 	rsb	r6, r1, #32
 8000c8a:	f1a1 0020 	sub.w	r0, r1, #32
 8000c8e:	fa22 f401 	lsr.w	r4, r2, r1
 8000c92:	fa03 f606 	lsl.w	r6, r3, r6
 8000c96:	4334      	orrs	r4, r6
 8000c98:	fa23 f000 	lsr.w	r0, r3, r0
 8000c9c:	4304      	orrs	r4, r0
 8000c9e:	fa23 f501 	lsr.w	r5, r3, r1
 8000ca2:	b2a3      	uxth	r3, r4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4660      	mov	r0, ip
 8000ca8:	f000 f84a 	bl	8000d40 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cb0:	f000 f862 	bl	8000d78 <FLASH_WaitForLastOperation>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_FLASH_Program+0xdc>)
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <HAL_FLASH_Program+0xdc>)
 8000cbe:	f023 0301 	bic.w	r3, r3, #1
 8000cc2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d107      	bne.n	8000cda <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000cca:	7dbb      	ldrb	r3, [r7, #22]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	75bb      	strb	r3, [r7, #22]
 8000cd0:	7dba      	ldrb	r2, [r7, #22]
 8000cd2:	7d7b      	ldrb	r3, [r7, #21]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3cd      	bcc.n	8000c74 <HAL_FLASH_Program+0x60>
 8000cd8:	e000      	b.n	8000cdc <HAL_FLASH_Program+0xc8>
      {
        break;
 8000cda:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_FLASH_Program+0xd8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	761a      	strb	r2, [r3, #24]

  return status;
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	20000240 	.word	0x20000240
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00d      	beq.n	8000d26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_FLASH_Unlock+0x44>)
 8000d0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_FLASH_Unlock+0x48>)
 8000d14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <HAL_FLASH_Unlock+0x40>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000
 8000d38:	45670123 	.word	0x45670123
 8000d3c:	cdef89ab 	.word	0xcdef89ab

08000d40 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <FLASH_Program_HalfWord+0x30>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <FLASH_Program_HalfWord+0x34>)
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <FLASH_Program_HalfWord+0x34>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	801a      	strh	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000240 	.word	0x20000240
 8000d74:	40022000 	.word	0x40022000

08000d78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff fe30 	bl	80009e4 <HAL_GetTick>
 8000d84:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d86:	e010      	b.n	8000daa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8e:	d00c      	beq.n	8000daa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <FLASH_WaitForLastOperation+0x2e>
 8000d96:	f7ff fe25 	bl	80009e4 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d201      	bcs.n	8000daa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e025      	b.n	8000df6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <FLASH_WaitForLastOperation+0x88>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e8      	bne.n	8000d88 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <FLASH_WaitForLastOperation+0x88>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <FLASH_WaitForLastOperation+0x88>)
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <FLASH_WaitForLastOperation+0x88>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10b      	bne.n	8000dec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <FLASH_WaitForLastOperation+0x88>)
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d105      	bne.n	8000dec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <FLASH_WaitForLastOperation+0x88>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000dec:	f000 f80a 	bl	8000e04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d009      	beq.n	8000e2e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <FLASH_SetErrorCode+0x9c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <FLASH_SetErrorCode+0x9c>)
 8000e24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d009      	beq.n	8000e4e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <FLASH_SetErrorCode+0x9c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <FLASH_SetErrorCode+0x9c>)
 8000e44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <FLASH_SetErrorCode+0x9c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <FLASH_SetErrorCode+0x9c>)
 8000e64:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f240 1201 	movw	r2, #257	; 0x101
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d106      	bne.n	8000e8a <FLASH_SetErrorCode+0x86>
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	61d3      	str	r3, [r2, #28]
}  
 8000e88:	e002      	b.n	8000e90 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <FLASH_SetErrorCode+0x98>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	60d3      	str	r3, [r2, #12]
}  
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	20000240 	.word	0x20000240

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b08b      	sub	sp, #44	; 0x2c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e179      	b.n	80011ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8168 	bne.w	80011a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4aa0      	ldr	r2, [pc, #640]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d05e      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ee0:	4a9e      	ldr	r2, [pc, #632]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d875      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ee6:	4a9e      	ldr	r2, [pc, #632]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d058      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000eec:	4a9c      	ldr	r2, [pc, #624]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d86f      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ef2:	4a9c      	ldr	r2, [pc, #624]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d052      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ef8:	4a9a      	ldr	r2, [pc, #616]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d869      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000efe:	4a9a      	ldr	r2, [pc, #616]	; (8001168 <HAL_GPIO_Init+0x2c4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d04c      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f04:	4a98      	ldr	r2, [pc, #608]	; (8001168 <HAL_GPIO_Init+0x2c4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d863      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f0a:	4a98      	ldr	r2, [pc, #608]	; (800116c <HAL_GPIO_Init+0x2c8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d046      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f10:	4a96      	ldr	r2, [pc, #600]	; (800116c <HAL_GPIO_Init+0x2c8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d85d      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d82a      	bhi.n	8000f70 <HAL_GPIO_Init+0xcc>
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d859      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <HAL_GPIO_Init+0x80>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000f8b 	.word	0x08000f8b
 8000f30:	08000fcd 	.word	0x08000fcd
 8000f34:	08000fd3 	.word	0x08000fd3
 8000f38:	08000fd3 	.word	0x08000fd3
 8000f3c:	08000fd3 	.word	0x08000fd3
 8000f40:	08000fd3 	.word	0x08000fd3
 8000f44:	08000fd3 	.word	0x08000fd3
 8000f48:	08000fd3 	.word	0x08000fd3
 8000f4c:	08000fd3 	.word	0x08000fd3
 8000f50:	08000fd3 	.word	0x08000fd3
 8000f54:	08000fd3 	.word	0x08000fd3
 8000f58:	08000fd3 	.word	0x08000fd3
 8000f5c:	08000fd3 	.word	0x08000fd3
 8000f60:	08000fd3 	.word	0x08000fd3
 8000f64:	08000fd3 	.word	0x08000fd3
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	4a7f      	ldr	r2, [pc, #508]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f76:	e02c      	b.n	8000fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e029      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	3304      	adds	r3, #4
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e024      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e01f      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e01a      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e013      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	611a      	str	r2, [r3, #16]
          break;
 8000fbe:	e009      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	615a      	str	r2, [r3, #20]
          break;
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          break;
 8000fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d801      	bhi.n	8000fde <HAL_GPIO_Init+0x13a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_Init+0x13e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d802      	bhi.n	8000ff0 <HAL_GPIO_Init+0x14c>
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x152>
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80c1 	beq.w	80011a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_GPIO_Init+0x2d4>)
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a46      	ldr	r2, [pc, #280]	; (800117c <HAL_GPIO_Init+0x2d8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d01f      	beq.n	80010a8 <HAL_GPIO_Init+0x204>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a45      	ldr	r2, [pc, #276]	; (8001180 <HAL_GPIO_Init+0x2dc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d019      	beq.n	80010a4 <HAL_GPIO_Init+0x200>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a44      	ldr	r2, [pc, #272]	; (8001184 <HAL_GPIO_Init+0x2e0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d013      	beq.n	80010a0 <HAL_GPIO_Init+0x1fc>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a43      	ldr	r2, [pc, #268]	; (8001188 <HAL_GPIO_Init+0x2e4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1f8>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a42      	ldr	r2, [pc, #264]	; (800118c <HAL_GPIO_Init+0x2e8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1f4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a41      	ldr	r2, [pc, #260]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1f0>
 8001090:	2305      	movs	r3, #5
 8001092:	e00a      	b.n	80010aa <HAL_GPIO_Init+0x206>
 8001094:	2306      	movs	r3, #6
 8001096:	e008      	b.n	80010aa <HAL_GPIO_Init+0x206>
 8001098:	2304      	movs	r3, #4
 800109a:	e006      	b.n	80010aa <HAL_GPIO_Init+0x206>
 800109c:	2303      	movs	r3, #3
 800109e:	e004      	b.n	80010aa <HAL_GPIO_Init+0x206>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e002      	b.n	80010aa <HAL_GPIO_Init+0x206>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_GPIO_Init+0x206>
 80010a8:	2300      	movs	r3, #0
 80010aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4093      	lsls	r3, r2
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ba:	492f      	ldr	r1, [pc, #188]	; (8001178 <HAL_GPIO_Init+0x2d4>)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	492e      	ldr	r1, [pc, #184]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	492a      	ldr	r1, [pc, #168]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4924      	ldr	r1, [pc, #144]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	4920      	ldr	r1, [pc, #128]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001114:	4013      	ands	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	491a      	ldr	r1, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	608b      	str	r3, [r1, #8]
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	43db      	mvns	r3, r3
 800113a:	4916      	ldr	r1, [pc, #88]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800113c:	4013      	ands	r3, r2
 800113e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d025      	beq.n	8001198 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	4910      	ldr	r1, [pc, #64]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	60cb      	str	r3, [r1, #12]
 8001158:	e025      	b.n	80011a6 <HAL_GPIO_Init+0x302>
 800115a:	bf00      	nop
 800115c:	10320000 	.word	0x10320000
 8001160:	10310000 	.word	0x10310000
 8001164:	10220000 	.word	0x10220000
 8001168:	10210000 	.word	0x10210000
 800116c:	10120000 	.word	0x10120000
 8001170:	10110000 	.word	0x10110000
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00
 8001184:	40011000 	.word	0x40011000
 8001188:	40011400 	.word	0x40011400
 800118c:	40011800 	.word	0x40011800
 8001190:	40011c00 	.word	0x40011c00
 8001194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_GPIO_Init+0x324>)
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	43db      	mvns	r3, r3
 80011a0:	4909      	ldr	r1, [pc, #36]	; (80011c8 <HAL_GPIO_Init+0x324>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	3301      	adds	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f ae7e 	bne.w	8000eb8 <HAL_GPIO_Init+0x14>
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	372c      	adds	r7, #44	; 0x2c
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e001      	b.n	80011ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800120a:	787b      	ldrb	r3, [r7, #1]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001210:	887a      	ldrh	r2, [r7, #2]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001216:	e003      	b.n	8001220 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	041a      	lsls	r2, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	041a      	lsls	r2, r3, #16
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43d9      	mvns	r1, r3
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	400b      	ands	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	611a      	str	r2, [r3, #16]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8e8 	bl	8000450 <HAL_GPIO_EXTI_Callback>
  }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e26c      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8087 	beq.w	80013ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d00c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b8:	4b8f      	ldr	r3, [pc, #572]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d112      	bne.n	80012ea <HAL_RCC_OscConfig+0x5e>
 80012c4:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d10b      	bne.n	80012ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d2:	4b89      	ldr	r3, [pc, #548]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x12c>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d168      	bne.n	80013b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e246      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x76>
 80012f4:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a7f      	ldr	r2, [pc, #508]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e02e      	b.n	8001360 <HAL_RCC_OscConfig+0xd4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b7b      	ldr	r3, [pc, #492]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a77      	ldr	r2, [pc, #476]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0xd4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0xbc>
 800132e:	4b72      	ldr	r3, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a71      	ldr	r2, [pc, #452]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b6f      	ldr	r3, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6e      	ldr	r2, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0xd4>
 8001348:	4b6b      	ldr	r3, [pc, #428]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a67      	ldr	r2, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fb3c 	bl	80009e4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb38 	bl	80009e4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1fa      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0xe4>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb28 	bl	80009e4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb24 	bl	80009e4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1e6      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x10c>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d063      	beq.n	800148e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c6:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013d2:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d11c      	bne.n	8001418 <HAL_RCC_OscConfig+0x18c>
 80013de:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d116      	bne.n	8001418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x176>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e1ba      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4939      	ldr	r1, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	e03a      	b.n	800148e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x270>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fadd 	bl	80009e4 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fad9 	bl	80009e4 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e19b      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4927      	ldr	r1, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 800145c:	4313      	orrs	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
 8001460:	e015      	b.n	800148e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x270>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fabc 	bl	80009e4 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff fab8 	bl	80009e4 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e17a      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d03a      	beq.n	8001510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d019      	beq.n	80014d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_RCC_OscConfig+0x274>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fa9c 	bl	80009e4 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff fa98 	bl	80009e4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e15a      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 faa6 	bl	8001a20 <RCC_Delay>
 80014d4:	e01c      	b.n	8001510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_RCC_OscConfig+0x274>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fa82 	bl	80009e4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e2:	e00f      	b.n	8001504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fa7e 	bl	80009e4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d908      	bls.n	8001504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e140      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	42420000 	.word	0x42420000
 8001500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b9e      	ldr	r3, [pc, #632]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e9      	bne.n	80014e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a6 	beq.w	800166a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b97      	ldr	r3, [pc, #604]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10d      	bne.n	800154a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b94      	ldr	r3, [pc, #592]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a93      	ldr	r2, [pc, #588]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b91      	ldr	r3, [pc, #580]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b8e      	ldr	r3, [pc, #568]	; (8001784 <HAL_RCC_OscConfig+0x4f8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b8b      	ldr	r3, [pc, #556]	; (8001784 <HAL_RCC_OscConfig+0x4f8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a8a      	ldr	r2, [pc, #552]	; (8001784 <HAL_RCC_OscConfig+0x4f8>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fa3f 	bl	80009e4 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fa3b 	bl	80009e4 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b64      	cmp	r3, #100	; 0x64
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0fd      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b81      	ldr	r3, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x4f8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x312>
 8001590:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a7a      	ldr	r2, [pc, #488]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
 800159c:	e02d      	b.n	80015fa <HAL_RCC_OscConfig+0x36e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x334>
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a75      	ldr	r2, [pc, #468]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a72      	ldr	r2, [pc, #456]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	e01c      	b.n	80015fa <HAL_RCC_OscConfig+0x36e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x356>
 80015c8:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a6c      	ldr	r2, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	4b6a      	ldr	r3, [pc, #424]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a69      	ldr	r2, [pc, #420]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e00b      	b.n	80015fa <HAL_RCC_OscConfig+0x36e>
 80015e2:	4b67      	ldr	r3, [pc, #412]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a66      	ldr	r2, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a63      	ldr	r2, [pc, #396]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d015      	beq.n	800162e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff f9ef 	bl	80009e4 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff f9eb 	bl	80009e4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0ab      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ee      	beq.n	800160a <HAL_RCC_OscConfig+0x37e>
 800162c:	e014      	b.n	8001658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff f9d9 	bl	80009e4 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff f9d5 	bl	80009e4 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e095      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1ee      	bne.n	8001636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d105      	bne.n	800166a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165e:	4b48      	ldr	r3, [pc, #288]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8081 	beq.w	8001776 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001674:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d061      	beq.n	8001744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d146      	bne.n	8001716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001688:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCC_OscConfig+0x4fc>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff f9a9 	bl	80009e4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff f9a5 	bl	80009e4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e067      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d108      	bne.n	80016d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	492d      	ldr	r1, [pc, #180]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a19      	ldr	r1, [r3, #32]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	430b      	orrs	r3, r1
 80016e2:	4927      	ldr	r1, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x4fc>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff f979 	bl	80009e4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff f975 	bl	80009e4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e037      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46a>
 8001714:	e02f      	b.n	8001776 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_RCC_OscConfig+0x4fc>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff f962 	bl	80009e4 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f95e 	bl	80009e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e020      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x498>
 8001742:	e018      	b.n	8001776 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000
 8001788:	42420060 	.word	0x42420060

0800178c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0d0      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b6a      	ldr	r3, [pc, #424]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d910      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b67      	ldr	r3, [pc, #412]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 0207 	bic.w	r2, r3, #7
 80017b6:	4965      	ldr	r1, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800180a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d040      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d115      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e073      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06b      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4936      	ldr	r1, [pc, #216]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff f8b2 	bl	80009e4 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff f8ae 	bl	80009e4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e053      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d210      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4922      	ldr	r1, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1cc>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1d0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f810 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000
 8001950:	40021000 	.word	0x40021000
 8001954:	08002dec 	.word	0x08002dec
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b490      	push	{r4, r7}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001968:	1d3c      	adds	r4, r7, #4
 800196a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001970:	f240 2301 	movw	r3, #513	; 0x201
 8001974:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 800199a:	2b08      	cmp	r3, #8
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x46>
 800199e:	e02d      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a2:	623b      	str	r3, [r7, #32]
      break;
 80019a4:	e02d      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019b2:	4413      	add	r3, r2
 80019b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c5b      	lsrs	r3, r3, #17
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019d2:	4413      	add	r3, r2
 80019d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019de:	fb02 f203 	mul.w	r2, r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	e004      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	623b      	str	r3, [r7, #32]
      break;
 80019fa:	e002      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fe:	623b      	str	r3, [r7, #32]
      break;
 8001a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a02:	6a3b      	ldr	r3, [r7, #32]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc90      	pop	{r4, r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	08002dcc 	.word	0x08002dcc
 8001a14:	40021000 	.word	0x40021000
 8001a18:	007a1200 	.word	0x007a1200
 8001a1c:	003d0900 	.word	0x003d0900

08001a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <RCC_Delay+0x34>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <RCC_Delay+0x38>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0a5b      	lsrs	r3, r3, #9
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a3c:	bf00      	nop
  }
  while (Delay --);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	60fa      	str	r2, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <RCC_Delay+0x1c>
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000000 	.word	0x20000000
 8001a58:	10624dd3 	.word	0x10624dd3

08001a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e041      	b.n	8001af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fe9a 	bl	80007bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 fa88 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e044      	b.n	8001b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xac>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_TIM_Base_Start_IT+0xb0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d013      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b48:	d00e      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d009      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d111      	bne.n	8001b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d010      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8a:	e007      	b.n	8001b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40013400 	.word	0x40013400
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40000800 	.word	0x40000800
 8001bb8:	40000c00 	.word	0x40000c00

08001bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d122      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d11b      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0202 	mvn.w	r2, #2
 8001be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f9ba 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f9ad 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f9bc 	bl	8001f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0204 	mvn.w	r2, #4
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f990 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f983 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f992 	bl	8001f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0208 	mvn.w	r2, #8
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f966 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f959 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f968 	bl	8001f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0210 	mvn.w	r2, #16
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f93c 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f92f 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f93e 	bl	8001f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0201 	mvn.w	r2, #1
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f90a 	bl	8001f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b80      	cmp	r3, #128	; 0x80
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 faa7 	bl	80022ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f902 	bl	8001f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0220 	mvn.w	r2, #32
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fa72 	bl	80022a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_TIM_ConfigClockSource+0x18>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0b3      	b.n	8001f4c <HAL_TIM_ConfigClockSource+0x180>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1c:	d03e      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0xd0>
 8001e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e22:	f200 8087 	bhi.w	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	f000 8085 	beq.w	8001f38 <HAL_TIM_ConfigClockSource+0x16c>
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e32:	d87f      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e34:	2b70      	cmp	r3, #112	; 0x70
 8001e36:	d01a      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0xa2>
 8001e38:	2b70      	cmp	r3, #112	; 0x70
 8001e3a:	d87b      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e3c:	2b60      	cmp	r3, #96	; 0x60
 8001e3e:	d050      	beq.n	8001ee2 <HAL_TIM_ConfigClockSource+0x116>
 8001e40:	2b60      	cmp	r3, #96	; 0x60
 8001e42:	d877      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e44:	2b50      	cmp	r3, #80	; 0x50
 8001e46:	d03c      	beq.n	8001ec2 <HAL_TIM_ConfigClockSource+0xf6>
 8001e48:	2b50      	cmp	r3, #80	; 0x50
 8001e4a:	d873      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d058      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x136>
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d86f      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e54:	2b30      	cmp	r3, #48	; 0x30
 8001e56:	d064      	beq.n	8001f22 <HAL_TIM_ConfigClockSource+0x156>
 8001e58:	2b30      	cmp	r3, #48	; 0x30
 8001e5a:	d86b      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d060      	beq.n	8001f22 <HAL_TIM_ConfigClockSource+0x156>
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d867      	bhi.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d05c      	beq.n	8001f22 <HAL_TIM_ConfigClockSource+0x156>
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	d05a      	beq.n	8001f22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e6c:	e062      	b.n	8001f34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6899      	ldr	r1, [r3, #8]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f000 f988 	bl	8002192 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	609a      	str	r2, [r3, #8]
      break;
 8001e9a:	e04e      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f000 f971 	bl	8002192 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ebe:	609a      	str	r2, [r3, #8]
      break;
 8001ec0:	e03b      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f000 f8e8 	bl	80020a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2150      	movs	r1, #80	; 0x50
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f93f 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001ee0:	e02b      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f000 f906 	bl	8002100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2160      	movs	r1, #96	; 0x60
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f92f 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001f00:	e01b      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f000 f8c8 	bl	80020a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2140      	movs	r1, #64	; 0x40
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f91f 	bl	800215e <TIM_ITRx_SetConfig>
      break;
 8001f20:	e00b      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	f000 f916 	bl	800215e <TIM_ITRx_SetConfig>
        break;
 8001f32:	e002      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a33      	ldr	r2, [pc, #204]	; (8002090 <TIM_Base_SetConfig+0xe0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a32      	ldr	r2, [pc, #200]	; (8002094 <TIM_Base_SetConfig+0xe4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <TIM_Base_SetConfig+0xe8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a2e      	ldr	r2, [pc, #184]	; (800209c <TIM_Base_SetConfig+0xec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <TIM_Base_SetConfig+0xf0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <TIM_Base_SetConfig+0xe0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <TIM_Base_SetConfig+0x82>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <TIM_Base_SetConfig+0xe4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00f      	beq.n	8002032 <TIM_Base_SetConfig+0x82>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d00b      	beq.n	8002032 <TIM_Base_SetConfig+0x82>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <TIM_Base_SetConfig+0xe8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0x82>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <TIM_Base_SetConfig+0xec>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0x82>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <TIM_Base_SetConfig+0xf0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <TIM_Base_SetConfig+0xe0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_Base_SetConfig+0xc8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <TIM_Base_SetConfig+0xe4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d103      	bne.n	8002080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	615a      	str	r2, [r3, #20]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40013400 	.word	0x40013400
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800
 80020a0:	40000c00 	.word	0x40000c00

080020a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f023 0201 	bic.w	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f023 030a 	bic.w	r3, r3, #10
 80020e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	621a      	str	r2, [r3, #32]
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f023 0210 	bic.w	r2, r3, #16
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800212a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	031b      	lsls	r3, r3, #12
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800213c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	621a      	str	r2, [r3, #32]
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	f043 0307 	orr.w	r3, r3, #7
 8002180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	021a      	lsls	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e050      	b.n	800228a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d018      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d00e      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10c      	bne.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40013400 	.word	0x40013400
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40000c00 	.word	0x40000c00

080022a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <_ZN8RCSwitchC1Ev>:
// according to discussion on issue #14 it might be more suitable to set the separation
// limit to the same time as the 'low' part of the sync signal for the current protocol.
unsigned int RCSwitch::timings[RCSWITCH_MAX_CHANGES];
#endif

RCSwitch::RCSwitch() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fc02 	bl	8002ae0 <_ZN7UtilityC1Ev>
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <_ZN8RCSwitchC1Ev+0x50>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
  this->nTransmitterPin = -1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	609a      	str	r2, [r3, #8]
  this->setRepeatTransmit(10);
 80022ea:	210a      	movs	r1, #10
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f83b 	bl	8002368 <_ZN8RCSwitch17setRepeatTransmitEi>
  this->setProtocol(1);
 80022f2:	2101      	movs	r1, #1
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f815 	bl	8002324 <_ZN8RCSwitch11setProtocolEi>
  #if not defined( RCSwitchDisableReceiving )
  this->nReceiverInterrupt = -1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	605a      	str	r2, [r3, #4]
  this->setReceiveTolerance(60);
 8002302:	213c      	movs	r1, #60	; 0x3c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f83d 	bl	8002384 <_ZN8RCSwitch19setReceiveToleranceEi>
  RCSwitch::nReceivedValue = 0;
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <_ZN8RCSwitchC1Ev+0x54>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
  #endif
}
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	08002de4 	.word	0x08002de4
 8002320:	20000104 	.word	0x20000104

08002324 <_ZN8RCSwitch11setProtocolEi>:
}

/**
  * Sets the protocol to send, from a list of predefined protocols
  */
void RCSwitch::setProtocol(int nProtocol) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  if (nProtocol < 1 || nProtocol > numProto) {
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	dd02      	ble.n	800233a <_ZN8RCSwitch11setProtocolEi+0x16>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	dd01      	ble.n	800233e <_ZN8RCSwitch11setProtocolEi+0x1a>
    nProtocol = 1;  // TODO: trigger an error, e.g. "bad protocol" ???
 800233a:	2301      	movs	r3, #1
 800233c:	603b      	str	r3, [r7, #0]
  }
#if defined(ESP8266) || defined(ESP32)
  this->protocol = proto[nProtocol-1];
#else
  memcpy_P(&this->protocol, &proto[nProtocol-1], sizeof(Protocol));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f103 0010 	add.w	r0, r3, #16
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <_ZN8RCSwitch11setProtocolEi+0x40>)
 8002352:	4413      	add	r3, r2
 8002354:	220a      	movs	r2, #10
 8002356:	4619      	mov	r1, r3
 8002358:	f000 fc78 	bl	8002c4c <memcpy>
#endif
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	08002dfc 	.word	0x08002dfc

08002368 <_ZN8RCSwitch17setRepeatTransmitEi>:
}

/**
 * Sets Repeat Transmits
 */
void RCSwitch::setRepeatTransmit(int nRepeatTransmit) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  this->nRepeatTransmit = nRepeatTransmit;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	60da      	str	r2, [r3, #12]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
	...

08002384 <_ZN8RCSwitch19setReceiveToleranceEi>:

/**
 * Set Receiving Tolerance
 */
#if not defined( RCSwitchDisableReceiving )
void RCSwitch::setReceiveTolerance(int nPercent) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  RCSwitch::nReceiveTolerance = nPercent;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <_ZN8RCSwitch19setReceiveToleranceEi+0x1c>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	2000000c 	.word	0x2000000c

080023a4 <_ZN8RCSwitch13enableReceiveEi>:

#if not defined( RCSwitchDisableReceiving )
/**
 * Enable receiving data
 */
void RCSwitch::enableReceive(int interrupt) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  this->nReceiverInterrupt = interrupt;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	605a      	str	r2, [r3, #4]
  this->enableReceive();
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f805 	bl	80023c4 <_ZN8RCSwitch13enableReceiveEv>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <_ZN8RCSwitch13enableReceiveEv>:

void RCSwitch::enableReceive() {
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if (this->nReceiverInterrupt != -1) {
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <_ZN8RCSwitch13enableReceiveEv+0x1e>
    RCSwitch::nReceivedValue = 0;
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <_ZN8RCSwitch13enableReceiveEv+0x28>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
    RCSwitch::nReceivedBitlength = 0;
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <_ZN8RCSwitch13enableReceiveEv+0x2c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    //attachInterrupt(this->nReceiverInterrupt, handleInterrupt, CHANGE);/* LapPV */
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000104 	.word	0x20000104
 80023f0:	20000108 	.word	0x20000108

080023f4 <_ZN8RCSwitch9availableEv>:
  detachInterrupt(this->nReceiverInterrupt);
#endif // For Raspberry Pi (wiringPi) you can't unregister the ISR
  this->nReceiverInterrupt = -1;
}

bool RCSwitch::available() {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return RCSwitch::nReceivedValue != 0;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <_ZN8RCSwitch9availableEv+0x20>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20000104 	.word	0x20000104

08002418 <_ZN8RCSwitch14resetAvailableEv>:

void RCSwitch::resetAvailable() {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  RCSwitch::nReceivedValue = 0;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <_ZN8RCSwitch14resetAvailableEv+0x18>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000104 	.word	0x20000104

08002434 <_ZN8RCSwitch16getReceivedValueEv>:

unsigned long RCSwitch::getReceivedValue() {
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return RCSwitch::nReceivedValue;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <_ZN8RCSwitch16getReceivedValueEv+0x18>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000104 	.word	0x20000104

08002450 <_ZL4diffii>:
unsigned int* RCSwitch::getReceivedRawdata() {
  return RCSwitch::timings;
}

/* helper function for the receiveProtocol method */
static inline unsigned int diff(int A, int B) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  return abs(A - B);
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	bfb8      	it	lt
 8002464:	425b      	neglt	r3, r3
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <_ZN8RCSwitch15receiveProtocolEij>:

/**
 *
 */
bool RECEIVE_ATTR RCSwitch::receiveProtocol(const int p, unsigned int changeCount) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
#if defined(ESP8266) || defined(ESP32)
    const Protocol &pro = proto[p-1];
#else
    Protocol pro;
    memcpy_P(&pro, &proto[p-1], sizeof(Protocol));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4a53      	ldr	r2, [pc, #332]	; (80025d4 <_ZN8RCSwitch15receiveProtocolEij+0x164>)
 8002488:	1899      	adds	r1, r3, r2
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	220a      	movs	r2, #10
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fbdb 	bl	8002c4c <memcpy>
#endif

    unsigned long code = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    //Assuming the longer pulse length is the pulse captured in timings[0]
    const unsigned int syncLengthInPulses =  ((pro.syncFactor.low) > (pro.syncFactor.high)) ? (pro.syncFactor.low) : (pro.syncFactor.high);
 800249a:	7bba      	ldrb	r2, [r7, #14]
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	4293      	cmp	r3, r2
 80024a0:	bf38      	it	cc
 80024a2:	4613      	movcc	r3, r2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned int delay = RCSwitch::timings[0] / syncLengthInPulses;
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <_ZN8RCSwitch15receiveProtocolEij+0x168>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	623b      	str	r3, [r7, #32]
    const unsigned int delayTolerance = delay * RCSwitch::nReceiveTolerance / 100;
 80024b4:	4b49      	ldr	r3, [pc, #292]	; (80025dc <_ZN8RCSwitch15receiveProtocolEij+0x16c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	fb03 f302 	mul.w	r3, r3, r2
 80024c0:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <_ZN8RCSwitch15receiveProtocolEij+0x170>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	61fb      	str	r3, [r7, #28]
     *
     * |-filtered out-|--1st dur--|--Start data--|
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);
 80024ca:	7d3b      	ldrb	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <_ZN8RCSwitch15receiveProtocolEij+0x64>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e000      	b.n	80024d6 <_ZN8RCSwitch15receiveProtocolEij+0x66>
 80024d4:	2301      	movs	r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d25d      	bcs.n	80025a2 <_ZN8RCSwitch15receiveProtocolEij+0x132>
        code <<= 1;
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
 80024ec:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <_ZN8RCSwitch15receiveProtocolEij+0x168>)
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	4618      	mov	r0, r3
 80024f6:	7c3b      	ldrb	r3, [r7, #16]
 80024f8:	461a      	mov	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	fb03 f302 	mul.w	r3, r3, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7ff ffa5 	bl	8002450 <_ZL4diffii>
 8002506:	4602      	mov	r2, r0
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4293      	cmp	r3, r2
 800250c:	d913      	bls.n	8002536 <_ZN8RCSwitch15receiveProtocolEij+0xc6>
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	3301      	adds	r3, #1
 8002512:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <_ZN8RCSwitch15receiveProtocolEij+0x168>)
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	4618      	mov	r0, r3
 800251a:	7c7b      	ldrb	r3, [r7, #17]
 800251c:	461a      	mov	r2, r3
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	fb03 f302 	mul.w	r3, r3, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7ff ff93 	bl	8002450 <_ZL4diffii>
 800252a:	4602      	mov	r2, r0
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <_ZN8RCSwitch15receiveProtocolEij+0xc6>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <_ZN8RCSwitch15receiveProtocolEij+0xc8>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d12e      	bne.n	800259a <_ZN8RCSwitch15receiveProtocolEij+0x12a>
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
 800253c:	4a26      	ldr	r2, [pc, #152]	; (80025d8 <_ZN8RCSwitch15receiveProtocolEij+0x168>)
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	4618      	mov	r0, r3
 8002546:	7cbb      	ldrb	r3, [r7, #18]
 8002548:	461a      	mov	r2, r3
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	fb03 f302 	mul.w	r3, r3, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7ff ff7d 	bl	8002450 <_ZL4diffii>
 8002556:	4602      	mov	r2, r0
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4293      	cmp	r3, r2
 800255c:	d913      	bls.n	8002586 <_ZN8RCSwitch15receiveProtocolEij+0x116>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	3301      	adds	r3, #1
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <_ZN8RCSwitch15receiveProtocolEij+0x168>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	4618      	mov	r0, r3
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	461a      	mov	r2, r3
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	fb03 f302 	mul.w	r3, r3, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7ff ff6b 	bl	8002450 <_ZL4diffii>
 800257a:	4602      	mov	r2, r0
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <_ZN8RCSwitch15receiveProtocolEij+0x116>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <_ZN8RCSwitch15receiveProtocolEij+0x118>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <_ZN8RCSwitch15receiveProtocolEij+0x126>
            // one
            code |= 1;
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002594:	e001      	b.n	800259a <_ZN8RCSwitch15receiveProtocolEij+0x12a>
        } else {
            // Failed
            return false;
 8002596:	2300      	movs	r3, #0
 8002598:	e017      	b.n	80025ca <_ZN8RCSwitch15receiveProtocolEij+0x15a>
    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	3302      	adds	r3, #2
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	e79c      	b.n	80024dc <_ZN8RCSwitch15receiveProtocolEij+0x6c>
        }
    }

    if (changeCount > 7) {    // ignore very short transmissions: no device sends them, so this must be noise
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b07      	cmp	r3, #7
 80025a6:	d90f      	bls.n	80025c8 <_ZN8RCSwitch15receiveProtocolEij+0x158>
        RCSwitch::nReceivedValue = code;
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <_ZN8RCSwitch15receiveProtocolEij+0x174>)
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	6013      	str	r3, [r2, #0]
        RCSwitch::nReceivedBitlength = (changeCount - 1) / 2;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <_ZN8RCSwitch15receiveProtocolEij+0x178>)
 80025b6:	6013      	str	r3, [r2, #0]
        RCSwitch::nReceivedDelay = delay;
 80025b8:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <_ZN8RCSwitch15receiveProtocolEij+0x17c>)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	6013      	str	r3, [r2, #0]
        RCSwitch::nReceivedProtocol = p;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <_ZN8RCSwitch15receiveProtocolEij+0x180>)
 80025c2:	6013      	str	r3, [r2, #0]
        return true;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <_ZN8RCSwitch15receiveProtocolEij+0x15a>
    }

    return false;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	08002dfc 	.word	0x08002dfc
 80025d8:	20000114 	.word	0x20000114
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	51eb851f 	.word	0x51eb851f
 80025e4:	20000104 	.word	0x20000104
 80025e8:	20000108 	.word	0x20000108
 80025ec:	2000010c 	.word	0x2000010c
 80025f0:	20000110 	.word	0x20000110

080025f4 <_ZN8RCSwitch15handleInterruptEv>:

void RECEIVE_ATTR RCSwitch::handleInterrupt() {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0

  static unsigned int changeCount = 0;
  static unsigned long lastTime = 0;
  static unsigned int repeatCount = 0;

  const long time = Utility().micros();
 80025fa:	463b      	mov	r3, r7
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fa6f 	bl	8002ae0 <_ZN7UtilityC1Ev>
 8002602:	463b      	mov	r3, r7
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fab5 	bl	8002b74 <_ZN7Utility6microsEv>
 800260a:	4603      	mov	r3, r0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	463b      	mov	r3, r7
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fa75 	bl	8002b00 <_ZN7UtilityD1Ev>

  const unsigned int duration = time - lastTime;
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <_ZN8RCSwitch15handleInterruptEv+0xd8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	607b      	str	r3, [r7, #4]


  if (duration > RCSwitch::nSeparationLimit) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f241 02cc 	movw	r2, #4300	; 0x10cc
 8002626:	4293      	cmp	r3, r2
 8002628:	d935      	bls.n	8002696 <_ZN8RCSwitch15handleInterruptEv+0xa2>
    // A long stretch without signal level change occurred. This could
    // be the gap between two transmission.
    if ((repeatCount==0) || (diff(duration, RCSwitch::timings[0]) < 200)) {
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <_ZN8RCSwitch15handleInterruptEv+0xdc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <_ZN8RCSwitch15handleInterruptEv+0x52>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <_ZN8RCSwitch15handleInterruptEv+0xe0>)
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff08 	bl	8002450 <_ZL4diffii>
 8002640:	4603      	mov	r3, r0
 8002642:	2bc7      	cmp	r3, #199	; 0xc7
 8002644:	d801      	bhi.n	800264a <_ZN8RCSwitch15handleInterruptEv+0x56>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <_ZN8RCSwitch15handleInterruptEv+0x58>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01f      	beq.n	8002690 <_ZN8RCSwitch15handleInterruptEv+0x9c>
      // This long signal is close in length to the long signal which
      // started the previously recorded timings; this suggests that
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <_ZN8RCSwitch15handleInterruptEv+0xdc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <_ZN8RCSwitch15handleInterruptEv+0xdc>)
 8002658:	6013      	str	r3, [r2, #0]
      if (repeatCount == 2) {
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <_ZN8RCSwitch15handleInterruptEv+0xdc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d116      	bne.n	8002690 <_ZN8RCSwitch15handleInterruptEv+0x9c>
        for(unsigned int i = 1; i <= numProto; i++) {
 8002662:	2301      	movs	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d80e      	bhi.n	800268a <_ZN8RCSwitch15handleInterruptEv+0x96>
          if (receiveProtocol(i, changeCount)) {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <_ZN8RCSwitch15handleInterruptEv+0xe4>)
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fefb 	bl	8002470 <_ZN8RCSwitch15receiveProtocolEij>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <_ZN8RCSwitch15handleInterruptEv+0x94>
        for(unsigned int i = 1; i <= numProto; i++) {
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e7ee      	b.n	8002666 <_ZN8RCSwitch15handleInterruptEv+0x72>
            // receive succeeded for protocol i
            break;
 8002688:	bf00      	nop
          }
        }
        repeatCount = 0;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <_ZN8RCSwitch15handleInterruptEv+0xdc>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
      }
    }
    changeCount = 0;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_ZN8RCSwitch15handleInterruptEv+0xe4>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
  }
 
  // detect overflow
  if (changeCount >= RCSWITCH_MAX_CHANGES) {
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <_ZN8RCSwitch15handleInterruptEv+0xe4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b42      	cmp	r3, #66	; 0x42
 800269c:	d905      	bls.n	80026aa <_ZN8RCSwitch15handleInterruptEv+0xb6>
    changeCount = 0;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <_ZN8RCSwitch15handleInterruptEv+0xe4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
    repeatCount = 0;
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <_ZN8RCSwitch15handleInterruptEv+0xdc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
  }

  RCSwitch::timings[changeCount++] = duration;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <_ZN8RCSwitch15handleInterruptEv+0xe4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4909      	ldr	r1, [pc, #36]	; (80026d8 <_ZN8RCSwitch15handleInterruptEv+0xe4>)
 80026b2:	600a      	str	r2, [r1, #0]
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <_ZN8RCSwitch15handleInterruptEv+0xe0>)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  lastTime = time;  
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4a03      	ldr	r2, [pc, #12]	; (80026cc <_ZN8RCSwitch15handleInterruptEv+0xd8>)
 80026c0:	6013      	str	r3, [r2, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000224 	.word	0x20000224
 80026d0:	20000228 	.word	0x20000228
 80026d4:	20000114 	.word	0x20000114
 80026d8:	20000220 	.word	0x20000220

080026dc <_ZN10STM32FlashC1Ev>:
 *      Author: quoclaptk
 */

#include <STM32Flash.h>

STM32Flash::STM32Flash() {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <_ZN10STM32FlashC1Ev+0x1c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	08002e7c 	.word	0x08002e7c

080026fc <_ZN10STM32FlashD1Ev>:

STM32Flash::~STM32Flash() {
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <_ZN10STM32FlashD1Ev+0x1c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	08002e7c 	.word	0x08002e7c

0800271c <_ZN10STM32FlashD0Ev>:
STM32Flash::~STM32Flash() {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
}
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ffe9 	bl	80026fc <_ZN10STM32FlashD1Ev>
 800272a:	2104      	movs	r1, #4
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fa3b 	bl	8002ba8 <_ZdlPvj>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZN10STM32Flash11flashUnlockEv>:
{
	HAL_FLASH_Lock();
}

void STM32Flash::flashUnlock()
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002744:	f7fe fad6 	bl	8000cf4 <HAL_FLASH_Unlock>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_ZN10STM32Flash10flashEraseEm>:

void STM32Flash::flashErase(uint32_t addr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	flashUnlock();
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffee 	bl	800273c <_ZN10STM32Flash11flashUnlockEv>
	while((FLASH->SR&FLASH_SR_BSY));
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d000      	beq.n	8002778 <_ZN10STM32Flash10flashEraseEm+0x28>
 8002776:	e7f3      	b.n	8002760 <_ZN10STM32Flash10flashEraseEm+0x10>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	6113      	str	r3, [r2, #16]
	FLASH->AR = addr; //Page Address
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 8002790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002794:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d000      	beq.n	80027ae <_ZN10STM32Flash10flashEraseEm+0x5e>
 80027ac:	e7f3      	b.n	8002796 <_ZN10STM32Flash10flashEraseEm+0x46>
	FLASH->CR &= ~FLASH_SR_BSY;
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <_ZN10STM32Flash10flashEraseEm+0x80>)
 80027c0:	f023 0302 	bic.w	r3, r3, #2
 80027c4:	6113      	str	r3, [r2, #16]
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000

080027d4 <_ZN9PrintableD1Ev>:
*/

class Printable
{
  public:
    virtual ~Printable(){};
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <_ZN9PrintableD1Ev+0x1c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	08002ea0 	.word	0x08002ea0

080027f4 <_ZN9PrintableD0Ev>:
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffe9 	bl	80027d4 <_ZN9PrintableD1Ev>
 8002802:	2104      	movs	r1, #4
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f9cf 	bl	8002ba8 <_ZdlPvj>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_ZN9IPAddressD1Ev>:
    // stored.
    uint8_t* raw_address() { return _address.bytes; };

public:
    // Constructors
    virtual ~IPAddress(){};
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	4a05      	ldr	r2, [pc, #20]	; (8002834 <_ZN9IPAddressD1Ev+0x20>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ffd5 	bl	80027d4 <_ZN9PrintableD1Ev>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08002e8c 	.word	0x08002e8c

08002838 <_ZN9IPAddressD0Ev>:
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ffe7 	bl	8002814 <_ZN9IPAddressD1Ev>
 8002846:	2108      	movs	r1, #8
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f9ad 	bl	8002ba8 <_ZdlPvj>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZN9PrintableC1Ev>:
class Printable
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <_ZN9PrintableC1Ev+0x1c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	08002ea0 	.word	0x08002ea0

08002878 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	70fb      	strb	r3, [r7, #3]
 800288a:	460b      	mov	r3, r1
 800288c:	70bb      	strb	r3, [r7, #2]
 800288e:	4613      	mov	r3, r2
 8002890:	707b      	strb	r3, [r7, #1]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ffdf 	bl	8002858 <_ZN9PrintableC1Ev>
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <_ZN9IPAddressC1Ehhhh+0x4c>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
{
    _address.bytes[0] = first_octet;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	711a      	strb	r2, [r3, #4]
    _address.bytes[1] = second_octet;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	78ba      	ldrb	r2, [r7, #2]
 80028aa:	715a      	strb	r2, [r3, #5]
    _address.bytes[2] = third_octet;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	787a      	ldrb	r2, [r7, #1]
 80028b0:	719a      	strb	r2, [r3, #6]
    _address.bytes[3] = fourth_octet;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7c3a      	ldrb	r2, [r7, #16]
 80028b6:	71da      	strb	r2, [r3, #7]
}
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	08002e8c 	.word	0x08002e8c

080028c8 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
    size_t n = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
    for (int i =0; i < 3; i++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	dc19      	bgt.n	8002914 <_ZNK9IPAddress7printToER5Print+0x4c>
    {
        n += p.print(_address.bytes[i], DEC);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	220a      	movs	r2, #10
 80028ec:	4619      	mov	r1, r3
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	f000 f884 	bl	80029fc <_ZN5Print5printEhi>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
        n += p.print('.');
 80028fc:	212e      	movs	r1, #46	; 0x2e
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	f000 f86a 	bl	80029d8 <_ZN5Print5printEc>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
    for (int i =0; i < 3; i++)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3301      	adds	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	e7e2      	b.n	80028da <_ZNK9IPAddress7printToER5Print+0x12>
    }
    n += p.print(_address.bytes[3], DEC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	79db      	ldrb	r3, [r3, #7]
 8002918:	220a      	movs	r2, #10
 800291a:	4619      	mov	r1, r3
 800291c:	6838      	ldr	r0, [r7, #0]
 800291e:	f000 f86d 	bl	80029fc <_ZN5Print5printEhi>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
    return n;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_Z41__static_initialization_and_destruction_0ii>:
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10c      	bne.n	800295e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294a:	4293      	cmp	r3, r2
 800294c:	d107      	bne.n	800295e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	4808      	ldr	r0, [pc, #32]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800295a:	f7ff ff8d 	bl	8002878 <_ZN9IPAddressC1Ehhhh>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296a:	4293      	cmp	r3, r2
 800296c:	d102      	bne.n	8002974 <_Z41__static_initialization_and_destruction_0ii+0x40>
 800296e:	4803      	ldr	r0, [pc, #12]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002970:	f7ff ff50 	bl	8002814 <_ZN9IPAddressD1Ev>
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000022c 	.word	0x2000022c

08002980 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
 8002984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002988:	2001      	movs	r0, #1
 800298a:	f7ff ffd3 	bl	8002934 <_Z41__static_initialization_and_destruction_0ii>
 800298e:	bd80      	pop	{r7, pc}

08002990 <_GLOBAL__sub_D__ZN9IPAddressC2Ev>:
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
 8002994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002998:	2000      	movs	r0, #0
 800299a:	f7ff ffcb 	bl	8002934 <_Z41__static_initialization_and_destruction_0ii>
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN5Print5writeEPKc>:
    
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t)= 0;
    size_t write(const char *str) {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <_ZN5Print5writeEPKc+0x14>
 80029b0:	2300      	movs	r3, #0
 80029b2:	e00d      	b.n	80029d0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3304      	adds	r3, #4
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	6838      	ldr	r0, [r7, #0]
 80029be:	f7fd fc31 	bl	8000224 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	47a0      	blx	r4
 80029cc:	4603      	mov	r3, r0
 80029ce:	bf00      	nop
    }
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd90      	pop	{r4, r7, pc}

080029d8 <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	4611      	mov	r1, r2
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
 80029f2:	4603      	mov	r3, r0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	460b      	mov	r3, r1
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f805 	bl	8002a20 <_ZN5Print5printEmi>
 8002a16:	4603      	mov	r3, r0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <_ZN5Print5printEmi+0x26>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	4798      	blx	r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	e008      	b.n	8002a58 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f806 	bl	8002a60 <_ZN5Print11printNumberEmh>
 8002a54:	4603      	mov	r3, r0
 8002a56:	bf00      	nop
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	; 0x38
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	3320      	adds	r3, #32
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d801      	bhi.n	8002a86 <_ZN5Print11printNumberEmh+0x26>
 8002a82:	230a      	movs	r3, #10
 8002a84:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
 8002a86:	79fa      	ldrb	r2, [r7, #7]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a8e:	fb02 f201 	mul.w	r2, r2, r1
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8002aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	d804      	bhi.n	8002ab4 <_ZN5Print11printNumberEmh+0x54>
 8002aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aae:	3330      	adds	r3, #48	; 0x30
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e003      	b.n	8002abc <_ZN5Print11printNumberEmh+0x5c>
 8002ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab8:	3337      	adds	r3, #55	; 0x37
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	637a      	str	r2, [r7, #52]	; 0x34
 8002ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac4:	7013      	strb	r3, [r2, #0]
  } while(n);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d000      	beq.n	8002ace <_ZN5Print11printNumberEmh+0x6e>
  do {
 8002acc:	e7db      	b.n	8002a86 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8002ace:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff65 	bl	80029a0 <_ZN5Print5writeEPKc>
 8002ad6:	4603      	mov	r3, r0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3738      	adds	r7, #56	; 0x38
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_ZN7UtilityC1Ev>:
#include <utility.h>

//extern SPI_HandleTypeDef hspi1;
extern uint32_t sysTickUptime;
extern uint32_t Tim1TickUptime;
Utility::Utility() {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <_ZN7UtilityC1Ev+0x1c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	08002eb4 	.word	0x08002eb4

08002b00 <_ZN7UtilityD1Ev>:

Utility::~Utility() {
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <_ZN7UtilityD1Ev+0x1c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	08002eb4 	.word	0x08002eb4

08002b20 <_ZN7UtilityD0Ev>:
Utility::~Utility() {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
}
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe9 	bl	8002b00 <_ZN7UtilityD1Ev>
 8002b2e:	2104      	movs	r1, #4
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f839 	bl	8002ba8 <_ZdlPvj>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN7Utility9delayInitEv>:

void Utility::delayInit(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_ZN7Utility9delayInitEv+0x2c>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <_ZN7Utility9delayInitEv+0x2c>)
 8002b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b52:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <_ZN7Utility9delayInitEv+0x30>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <_ZN7Utility9delayInitEv+0x30>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000edf0 	.word	0xe000edf0
 8002b70:	e0001000 	.word	0xe0001000

08002b74 <_ZN7Utility6microsEv>:
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < ms_ticks);
}
/*********************************************************************/
uint32_t Utility::micros(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_ZN7Utility6microsEv+0x28>)
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <_ZN7Utility6microsEv+0x2c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <_ZN7Utility6microsEv+0x30>)
 8002b86:	fba1 1303 	umull	r1, r3, r1, r3
 8002b8a:	0c9b      	lsrs	r3, r3, #18
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
	//return (Tim1TickUptime*200 + TIM1->CNT);
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e0001000 	.word	0xe0001000
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <_ZdlPvj>:
 8002ba8:	f000 b803 	b.w	8002bb2 <_ZdlPv>

08002bac <__cxa_pure_virtual>:
 8002bac:	b508      	push	{r3, lr}
 8002bae:	f000 f80f 	bl	8002bd0 <_ZSt9terminatev>

08002bb2 <_ZdlPv>:
 8002bb2:	f000 b843 	b.w	8002c3c <free>

08002bb6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8002bb6:	b508      	push	{r3, lr}
 8002bb8:	4780      	blx	r0
 8002bba:	f000 f80e 	bl	8002bda <abort>
	...

08002bc0 <_ZSt13get_terminatev>:
 8002bc0:	4b02      	ldr	r3, [pc, #8]	; (8002bcc <_ZSt13get_terminatev+0xc>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	f3bf 8f5b 	dmb	ish
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000010 	.word	0x20000010

08002bd0 <_ZSt9terminatev>:
 8002bd0:	b508      	push	{r3, lr}
 8002bd2:	f7ff fff5 	bl	8002bc0 <_ZSt13get_terminatev>
 8002bd6:	f7ff ffee 	bl	8002bb6 <_ZN10__cxxabiv111__terminateEPFvvE>

08002bda <abort>:
 8002bda:	2006      	movs	r0, #6
 8002bdc:	b508      	push	{r3, lr}
 8002bde:	f000 f8bf 	bl	8002d60 <raise>
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7fd fe6f 	bl	80008c6 <_exit>

08002be8 <__errno>:
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <__errno+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000014 	.word	0x20000014

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	4d0c      	ldr	r5, [pc, #48]	; (8002c2c <__libc_init_array+0x38>)
 8002bfa:	4c0d      	ldr	r4, [pc, #52]	; (8002c30 <__libc_init_array+0x3c>)
 8002bfc:	1b64      	subs	r4, r4, r5
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	f000 f8d6 	bl	8002db4 <_init>
 8002c08:	2600      	movs	r6, #0
 8002c0a:	4d0a      	ldr	r5, [pc, #40]	; (8002c34 <__libc_init_array+0x40>)
 8002c0c:	4c0a      	ldr	r4, [pc, #40]	; (8002c38 <__libc_init_array+0x44>)
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08002f1c 	.word	0x08002f1c
 8002c30:	08002f1c 	.word	0x08002f1c
 8002c34:	08002f1c 	.word	0x08002f1c
 8002c38:	08002f28 	.word	0x08002f28

08002c3c <free>:
 8002c3c:	4b02      	ldr	r3, [pc, #8]	; (8002c48 <free+0xc>)
 8002c3e:	4601      	mov	r1, r0
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	f000 b819 	b.w	8002c78 <_free_r>
 8002c46:	bf00      	nop
 8002c48:	20000014 	.word	0x20000014

08002c4c <memcpy>:
 8002c4c:	440a      	add	r2, r1
 8002c4e:	4291      	cmp	r1, r2
 8002c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c54:	d100      	bne.n	8002c58 <memcpy+0xc>
 8002c56:	4770      	bx	lr
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c5e:	4291      	cmp	r1, r2
 8002c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c64:	d1f9      	bne.n	8002c5a <memcpy+0xe>
 8002c66:	bd10      	pop	{r4, pc}

08002c68 <memset>:
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4402      	add	r2, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <_free_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4605      	mov	r5, r0
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	d043      	beq.n	8002d08 <_free_r+0x90>
 8002c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c84:	1f0c      	subs	r4, r1, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bfb8      	it	lt
 8002c8a:	18e4      	addlt	r4, r4, r3
 8002c8c:	f000 f884 	bl	8002d98 <__malloc_lock>
 8002c90:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <_free_r+0x94>)
 8002c92:	6813      	ldr	r3, [r2, #0]
 8002c94:	4610      	mov	r0, r2
 8002c96:	b933      	cbnz	r3, 8002ca6 <_free_r+0x2e>
 8002c98:	6063      	str	r3, [r4, #4]
 8002c9a:	6014      	str	r4, [r2, #0]
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ca2:	f000 b87f 	b.w	8002da4 <__malloc_unlock>
 8002ca6:	42a3      	cmp	r3, r4
 8002ca8:	d90a      	bls.n	8002cc0 <_free_r+0x48>
 8002caa:	6821      	ldr	r1, [r4, #0]
 8002cac:	1862      	adds	r2, r4, r1
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	bf01      	itttt	eq
 8002cb2:	681a      	ldreq	r2, [r3, #0]
 8002cb4:	685b      	ldreq	r3, [r3, #4]
 8002cb6:	1852      	addeq	r2, r2, r1
 8002cb8:	6022      	streq	r2, [r4, #0]
 8002cba:	6063      	str	r3, [r4, #4]
 8002cbc:	6004      	str	r4, [r0, #0]
 8002cbe:	e7ed      	b.n	8002c9c <_free_r+0x24>
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b10b      	cbz	r3, 8002cca <_free_r+0x52>
 8002cc6:	42a3      	cmp	r3, r4
 8002cc8:	d9fa      	bls.n	8002cc0 <_free_r+0x48>
 8002cca:	6811      	ldr	r1, [r2, #0]
 8002ccc:	1850      	adds	r0, r2, r1
 8002cce:	42a0      	cmp	r0, r4
 8002cd0:	d10b      	bne.n	8002cea <_free_r+0x72>
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	4401      	add	r1, r0
 8002cd6:	1850      	adds	r0, r2, r1
 8002cd8:	4283      	cmp	r3, r0
 8002cda:	6011      	str	r1, [r2, #0]
 8002cdc:	d1de      	bne.n	8002c9c <_free_r+0x24>
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4401      	add	r1, r0
 8002ce4:	6011      	str	r1, [r2, #0]
 8002ce6:	6053      	str	r3, [r2, #4]
 8002ce8:	e7d8      	b.n	8002c9c <_free_r+0x24>
 8002cea:	d902      	bls.n	8002cf2 <_free_r+0x7a>
 8002cec:	230c      	movs	r3, #12
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	e7d4      	b.n	8002c9c <_free_r+0x24>
 8002cf2:	6820      	ldr	r0, [r4, #0]
 8002cf4:	1821      	adds	r1, r4, r0
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	bf01      	itttt	eq
 8002cfa:	6819      	ldreq	r1, [r3, #0]
 8002cfc:	685b      	ldreq	r3, [r3, #4]
 8002cfe:	1809      	addeq	r1, r1, r0
 8002d00:	6021      	streq	r1, [r4, #0]
 8002d02:	6063      	str	r3, [r4, #4]
 8002d04:	6054      	str	r4, [r2, #4]
 8002d06:	e7c9      	b.n	8002c9c <_free_r+0x24>
 8002d08:	bd38      	pop	{r3, r4, r5, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000234 	.word	0x20000234

08002d10 <_raise_r>:
 8002d10:	291f      	cmp	r1, #31
 8002d12:	b538      	push	{r3, r4, r5, lr}
 8002d14:	4604      	mov	r4, r0
 8002d16:	460d      	mov	r5, r1
 8002d18:	d904      	bls.n	8002d24 <_raise_r+0x14>
 8002d1a:	2316      	movs	r3, #22
 8002d1c:	6003      	str	r3, [r0, #0]
 8002d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d26:	b112      	cbz	r2, 8002d2e <_raise_r+0x1e>
 8002d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002d2c:	b94b      	cbnz	r3, 8002d42 <_raise_r+0x32>
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 f830 	bl	8002d94 <_getpid_r>
 8002d34:	462a      	mov	r2, r5
 8002d36:	4601      	mov	r1, r0
 8002d38:	4620      	mov	r0, r4
 8002d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d3e:	f000 b817 	b.w	8002d70 <_kill_r>
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d00a      	beq.n	8002d5c <_raise_r+0x4c>
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	d103      	bne.n	8002d52 <_raise_r+0x42>
 8002d4a:	2316      	movs	r3, #22
 8002d4c:	6003      	str	r3, [r0, #0]
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e7e7      	b.n	8002d22 <_raise_r+0x12>
 8002d52:	2400      	movs	r4, #0
 8002d54:	4628      	mov	r0, r5
 8002d56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002d5a:	4798      	blx	r3
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	e7e0      	b.n	8002d22 <_raise_r+0x12>

08002d60 <raise>:
 8002d60:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <raise+0xc>)
 8002d62:	4601      	mov	r1, r0
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	f7ff bfd3 	b.w	8002d10 <_raise_r>
 8002d6a:	bf00      	nop
 8002d6c:	20000014 	.word	0x20000014

08002d70 <_kill_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	2300      	movs	r3, #0
 8002d74:	4d06      	ldr	r5, [pc, #24]	; (8002d90 <_kill_r+0x20>)
 8002d76:	4604      	mov	r4, r0
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	602b      	str	r3, [r5, #0]
 8002d7e:	f7fd fd92 	bl	80008a6 <_kill>
 8002d82:	1c43      	adds	r3, r0, #1
 8002d84:	d102      	bne.n	8002d8c <_kill_r+0x1c>
 8002d86:	682b      	ldr	r3, [r5, #0]
 8002d88:	b103      	cbz	r3, 8002d8c <_kill_r+0x1c>
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	bd38      	pop	{r3, r4, r5, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000260 	.word	0x20000260

08002d94 <_getpid_r>:
 8002d94:	f7fd bd80 	b.w	8000898 <_getpid>

08002d98 <__malloc_lock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	; (8002da0 <__malloc_lock+0x8>)
 8002d9a:	f000 b809 	b.w	8002db0 <__retarget_lock_acquire_recursive>
 8002d9e:	bf00      	nop
 8002da0:	20000268 	.word	0x20000268

08002da4 <__malloc_unlock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <__malloc_unlock+0x8>)
 8002da6:	f000 b804 	b.w	8002db2 <__retarget_lock_release_recursive>
 8002daa:	bf00      	nop
 8002dac:	20000268 	.word	0x20000268

08002db0 <__retarget_lock_acquire_recursive>:
 8002db0:	4770      	bx	lr

08002db2 <__retarget_lock_release_recursive>:
 8002db2:	4770      	bx	lr

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
