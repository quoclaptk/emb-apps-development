
STM32F407VET6_W5500_ETHENET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e0c  08008e0c  00018e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000cc  20000000  08008e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
  8 .bss          00000934  200000cc  200000cc  000200cc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000a00  20000a00  000200cc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015895  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003413  00000000  00000000  00035991  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001180  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001078  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000795b  00000000  00000000  0003afa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005756  00000000  00000000  000428fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00048051  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000506c  00000000  00000000  000480d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a88 	.word	0x08008a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08008a88 	.word	0x08008a88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f929 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f006 ff3e 	bl	8007444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f941 	bl	800087a <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f909 	bl	8000826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000064 	.word	0x20000064
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000138 	.word	0x20000138

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000138 	.word	0x20000138

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	4909      	ldr	r1, [pc, #36]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	095b      	lsrs	r3, r3, #5
 80006f2:	79fa      	ldrb	r2, [r7, #7]
 80006f4:	f002 021f 	and.w	r2, r2, #31
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	490d      	ldr	r1, [pc, #52]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	4909      	ldr	r1, [pc, #36]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	2201      	movs	r2, #1
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	401a      	ands	r2, r3
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ae:	2101      	movs	r1, #1
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	1e59      	subs	r1, r3, #1
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	; 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff90 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff2b 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff40 	bl	80006bc <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ff90 	bl	8000768 <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff5f 	bl	8000714 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff33 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffa2 	bl	80007cc <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	e16b      	b.n	8000b88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	f040 815a 	bne.w	8000b82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00b      	beq.n	80008ee <HAL_GPIO_Init+0x5a>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d130      	bne.n	8000950 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0xfc>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d123      	bne.n	80009d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	691a      	ldr	r2, [r3, #16]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	69b9      	ldr	r1, [r7, #24]
 80009d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0203 	and.w	r2, r3, #3
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80b4 	beq.w	8000b82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4a5f      	ldr	r2, [pc, #380]	; (8000b9c <HAL_GPIO_Init+0x308>)
 8000a20:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <HAL_GPIO_Init+0x308>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b5c      	ldr	r3, [pc, #368]	; (8000b9c <HAL_GPIO_Init+0x308>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a36:	4a5a      	ldr	r2, [pc, #360]	; (8000ba0 <HAL_GPIO_Init+0x30c>)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a51      	ldr	r2, [pc, #324]	; (8000ba4 <HAL_GPIO_Init+0x310>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d02b      	beq.n	8000aba <HAL_GPIO_Init+0x226>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a50      	ldr	r2, [pc, #320]	; (8000ba8 <HAL_GPIO_Init+0x314>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d025      	beq.n	8000ab6 <HAL_GPIO_Init+0x222>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4f      	ldr	r2, [pc, #316]	; (8000bac <HAL_GPIO_Init+0x318>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d01f      	beq.n	8000ab2 <HAL_GPIO_Init+0x21e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4e      	ldr	r2, [pc, #312]	; (8000bb0 <HAL_GPIO_Init+0x31c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d019      	beq.n	8000aae <HAL_GPIO_Init+0x21a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <HAL_GPIO_Init+0x320>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d013      	beq.n	8000aaa <HAL_GPIO_Init+0x216>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d00d      	beq.n	8000aa6 <HAL_GPIO_Init+0x212>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4b      	ldr	r2, [pc, #300]	; (8000bbc <HAL_GPIO_Init+0x328>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d007      	beq.n	8000aa2 <HAL_GPIO_Init+0x20e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4a      	ldr	r2, [pc, #296]	; (8000bc0 <HAL_GPIO_Init+0x32c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_GPIO_Init+0x20a>
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	e00e      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	e00c      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	e00a      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e008      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e004      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x228>
 8000aba:	2300      	movs	r3, #0
 8000abc:	69fa      	ldr	r2, [r7, #28]
 8000abe:	f002 0203 	and.w	r2, r2, #3
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000acc:	4934      	ldr	r1, [pc, #208]	; (8000ba0 <HAL_GPIO_Init+0x30c>)
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b28:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	f67f ae90 	bls.w	80008b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b90:	bf00      	nop
 8000b92:	3724      	adds	r7, #36	; 0x24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40021400 	.word	0x40021400
 8000bbc:	40021800 	.word	0x40021800
 8000bc0:	40021c00 	.word	0x40021c00
 8000bc4:	40013c00 	.word	0x40013c00

08000bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000be4:	e003      	b.n	8000bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	041a      	lsls	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	619a      	str	r2, [r3, #24]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e25b      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d075      	beq.n	8000d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c1a:	4ba3      	ldr	r3, [pc, #652]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d00c      	beq.n	8000c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c26:	4ba0      	ldr	r3, [pc, #640]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d112      	bne.n	8000c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c32:	4b9d      	ldr	r3, [pc, #628]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c3e:	d10b      	bne.n	8000c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	4b99      	ldr	r3, [pc, #612]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d05b      	beq.n	8000d04 <HAL_RCC_OscConfig+0x108>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d157      	bne.n	8000d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e236      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c60:	d106      	bne.n	8000c70 <HAL_RCC_OscConfig+0x74>
 8000c62:	4a91      	ldr	r2, [pc, #580]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	4b90      	ldr	r3, [pc, #576]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e01d      	b.n	8000cac <HAL_RCC_OscConfig+0xb0>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c78:	d10c      	bne.n	8000c94 <HAL_RCC_OscConfig+0x98>
 8000c7a:	4a8b      	ldr	r2, [pc, #556]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	4b8a      	ldr	r3, [pc, #552]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4a88      	ldr	r2, [pc, #544]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	4b87      	ldr	r3, [pc, #540]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e00b      	b.n	8000cac <HAL_RCC_OscConfig+0xb0>
 8000c94:	4a84      	ldr	r2, [pc, #528]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	4b84      	ldr	r3, [pc, #528]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4a81      	ldr	r2, [pc, #516]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d013      	beq.n	8000cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fcd2 	bl	800065c <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cbc:	f7ff fcce 	bl	800065c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b64      	cmp	r3, #100	; 0x64
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e1fb      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0xc0>
 8000cda:	e014      	b.n	8000d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fcbe 	bl	800065c <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fcba 	bl	800065c <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e1e7      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0xe8>
 8000d02:	e000      	b.n	8000d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d063      	beq.n	8000dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d12:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00b      	beq.n	8000d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d11c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d116      	bne.n	8000d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <HAL_RCC_OscConfig+0x152>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e1bb      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4e:	4956      	ldr	r1, [pc, #344]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	e03a      	b.n	8000dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d020      	beq.n	8000dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d6c:	4b4f      	ldr	r3, [pc, #316]	; (8000eac <HAL_RCC_OscConfig+0x2b0>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc73 	bl	800065c <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fc6f 	bl	800065c <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e19c      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8c:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f0      	beq.n	8000d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d98:	4943      	ldr	r1, [pc, #268]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d9a:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e015      	b.n	8000dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <HAL_RCC_OscConfig+0x2b0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db4:	f7ff fc52 	bl	800065c <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fc4e 	bl	800065c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e17b      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d030      	beq.n	8000e48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d016      	beq.n	8000e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <HAL_RCC_OscConfig+0x2b4>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df4:	f7ff fc32 	bl	800065c <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc2e 	bl	800065c <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e15b      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0x200>
 8000e1a:	e015      	b.n	8000e48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_RCC_OscConfig+0x2b4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fc1b 	bl	800065c <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fc17 	bl	800065c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e144      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f0      	bne.n	8000e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a0 	beq.w	8000f96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10f      	bne.n	8000e86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_RCC_OscConfig+0x2ac>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e82:	2301      	movs	r3, #1
 8000e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_RCC_OscConfig+0x2b8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d121      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_RCC_OscConfig+0x2b8>)
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_RCC_OscConfig+0x2b8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fbdd 	bl	800065c <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	e011      	b.n	8000eca <HAL_RCC_OscConfig+0x2ce>
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	42470000 	.word	0x42470000
 8000eb0:	42470e80 	.word	0x42470e80
 8000eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb8:	f7ff fbd0 	bl	800065c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e0fd      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eca:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <HAL_RCC_OscConfig+0x4d4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d106      	bne.n	8000eec <HAL_RCC_OscConfig+0x2f0>
 8000ede:	4a7d      	ldr	r2, [pc, #500]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eea:	e01c      	b.n	8000f26 <HAL_RCC_OscConfig+0x32a>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x312>
 8000ef4:	4a77      	ldr	r2, [pc, #476]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000ef6:	4b77      	ldr	r3, [pc, #476]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6713      	str	r3, [r2, #112]	; 0x70
 8000f00:	4a74      	ldr	r2, [pc, #464]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f02:	4b74      	ldr	r3, [pc, #464]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f0c:	e00b      	b.n	8000f26 <HAL_RCC_OscConfig+0x32a>
 8000f0e:	4a71      	ldr	r2, [pc, #452]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f10:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6713      	str	r3, [r2, #112]	; 0x70
 8000f1a:	4a6e      	ldr	r2, [pc, #440]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d015      	beq.n	8000f5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb95 	bl	800065c <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb91 	bl	800065c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0bc      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0ee      	beq.n	8000f36 <HAL_RCC_OscConfig+0x33a>
 8000f58:	e014      	b.n	8000f84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb7f 	bl	800065c <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb7b 	bl	800065c <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e0a6      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ee      	bne.n	8000f62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8a:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8092 	beq.w	80010c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d05c      	beq.n	8001066 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d141      	bne.n	8001038 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <HAL_RCC_OscConfig+0x4dc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb4f 	bl	800065c <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb4b 	bl	800065c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e078      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fe0:	493c      	ldr	r1, [pc, #240]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	019b      	lsls	r3, r3, #6
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	061b      	lsls	r3, r3, #24
 8001006:	4313      	orrs	r3, r2
 8001008:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <HAL_RCC_OscConfig+0x4dc>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fb24 	bl	800065c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001018:	f7ff fb20 	bl	800065c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e04d      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0x41c>
 8001036:	e045      	b.n	80010c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_RCC_OscConfig+0x4dc>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fb0d 	bl	800065c <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fb09 	bl	800065c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e036      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0x44a>
 8001064:	e02e      	b.n	80010c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e029      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_RCC_OscConfig+0x4d8>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	429a      	cmp	r2, r3
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001090:	429a      	cmp	r2, r3
 8001092:	d115      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800109a:	4013      	ands	r3, r2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d10d      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d106      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40007000 	.word	0x40007000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	42470060 	.word	0x42470060

080010dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0cc      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 020f 	and.w	r2, r3, #15
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d20c      	bcs.n	8001118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fe:	4b65      	ldr	r3, [pc, #404]	; (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 020f 	and.w	r2, r3, #15
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0b8      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001130:	4a59      	ldr	r2, [pc, #356]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	4b59      	ldr	r3, [pc, #356]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800113a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001148:	4a53      	ldr	r2, [pc, #332]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001154:	4950      	ldr	r1, [pc, #320]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4313      	orrs	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d044      	beq.n	80011fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d119      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e07f      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d003      	beq.n	800119a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	2b03      	cmp	r3, #3
 8001198:	d107      	bne.n	80011aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06f      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e067      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ba:	4937      	ldr	r1, [pc, #220]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 0203 	bic.w	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011cc:	f7ff fa46 	bl	800065c <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d4:	f7ff fa42 	bl	800065c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e04f      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 020c 	and.w	r2, r3, #12
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d1eb      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 020f 	and.w	r2, r3, #15
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d90c      	bls.n	8001224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 020f 	and.w	r2, r3, #15
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e032      	b.n	800128a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001230:	4919      	ldr	r1, [pc, #100]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124e:	4912      	ldr	r1, [pc, #72]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001262:	f000 f821 	bl	80012a8 <HAL_RCC_GetSysClockFreq>
 8001266:	4601      	mov	r1, r0
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	fa21 f303 	lsr.w	r3, r1, r3
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f9a6 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00
 8001298:	40023800 	.word	0x40023800
 800129c:	08008d58 	.word	0x08008d58
 80012a0:	20000064 	.word	0x20000064
 80012a4:	20000000 	.word	0x20000000

080012a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012b0:	2200      	movs	r2, #0
 80012b2:	60fa      	str	r2, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	617a      	str	r2, [r7, #20]
 80012b8:	2200      	movs	r2, #0
 80012ba:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80012bc:	2200      	movs	r2, #0
 80012be:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c0:	4a51      	ldr	r2, [pc, #324]	; (8001408 <HAL_RCC_GetSysClockFreq+0x160>)
 80012c2:	6892      	ldr	r2, [r2, #8]
 80012c4:	f002 020c 	and.w	r2, r2, #12
 80012c8:	2a04      	cmp	r2, #4
 80012ca:	d007      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x34>
 80012cc:	2a08      	cmp	r2, #8
 80012ce:	d008      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	f040 8090 	bne.w	80013f6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012d6:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_RCC_GetSysClockFreq+0x164>)
 80012d8:	613b      	str	r3, [r7, #16]
       break;
 80012da:	e08f      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_GetSysClockFreq+0x168>)
 80012de:	613b      	str	r3, [r7, #16]
      break;
 80012e0:	e08c      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e2:	4a49      	ldr	r2, [pc, #292]	; (8001408 <HAL_RCC_GetSysClockFreq+0x160>)
 80012e4:	6852      	ldr	r2, [r2, #4]
 80012e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012ea:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ec:	4a46      	ldr	r2, [pc, #280]	; (8001408 <HAL_RCC_GetSysClockFreq+0x160>)
 80012ee:	6852      	ldr	r2, [r2, #4]
 80012f0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d023      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_RCC_GetSysClockFreq+0x160>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	f04f 0400 	mov.w	r4, #0
 8001302:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	ea03 0301 	and.w	r3, r3, r1
 800130e:	ea04 0402 	and.w	r4, r4, r2
 8001312:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <HAL_RCC_GetSysClockFreq+0x168>)
 8001314:	fb02 f104 	mul.w	r1, r2, r4
 8001318:	2200      	movs	r2, #0
 800131a:	fb02 f203 	mul.w	r2, r2, r3
 800131e:	440a      	add	r2, r1
 8001320:	493b      	ldr	r1, [pc, #236]	; (8001410 <HAL_RCC_GetSysClockFreq+0x168>)
 8001322:	fba3 0101 	umull	r0, r1, r3, r1
 8001326:	1853      	adds	r3, r2, r1
 8001328:	4619      	mov	r1, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f04f 0400 	mov.w	r4, #0
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	f7fe ffa4 	bl	8000280 <__aeabi_uldivmod>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e04c      	b.n	80013da <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001340:	4a31      	ldr	r2, [pc, #196]	; (8001408 <HAL_RCC_GetSysClockFreq+0x160>)
 8001342:	6852      	ldr	r2, [r2, #4]
 8001344:	0992      	lsrs	r2, r2, #6
 8001346:	4611      	mov	r1, r2
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001350:	f04f 0600 	mov.w	r6, #0
 8001354:	ea05 0501 	and.w	r5, r5, r1
 8001358:	ea06 0602 	and.w	r6, r6, r2
 800135c:	4629      	mov	r1, r5
 800135e:	4632      	mov	r2, r6
 8001360:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001364:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001368:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800136c:	4651      	mov	r1, sl
 800136e:	465a      	mov	r2, fp
 8001370:	46aa      	mov	sl, r5
 8001372:	46b3      	mov	fp, r6
 8001374:	4655      	mov	r5, sl
 8001376:	465e      	mov	r6, fp
 8001378:	1b4d      	subs	r5, r1, r5
 800137a:	eb62 0606 	sbc.w	r6, r2, r6
 800137e:	4629      	mov	r1, r5
 8001380:	4632      	mov	r2, r6
 8001382:	0194      	lsls	r4, r2, #6
 8001384:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001388:	018b      	lsls	r3, r1, #6
 800138a:	1a5b      	subs	r3, r3, r1
 800138c:	eb64 0402 	sbc.w	r4, r4, r2
 8001390:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001394:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001398:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800139c:	4643      	mov	r3, r8
 800139e:	464c      	mov	r4, r9
 80013a0:	4655      	mov	r5, sl
 80013a2:	465e      	mov	r6, fp
 80013a4:	18ed      	adds	r5, r5, r3
 80013a6:	eb46 0604 	adc.w	r6, r6, r4
 80013aa:	462b      	mov	r3, r5
 80013ac:	4634      	mov	r4, r6
 80013ae:	02a2      	lsls	r2, r4, #10
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	e897 0018 	ldmia.w	r7, {r3, r4}
 80013c2:	4618      	mov	r0, r3
 80013c4:	4621      	mov	r1, r4
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f04f 0400 	mov.w	r4, #0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	f7fe ff56 	bl	8000280 <__aeabi_uldivmod>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_GetSysClockFreq+0x160>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0c1b      	lsrs	r3, r3, #16
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	3301      	adds	r3, #1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	e002      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RCC_GetSysClockFreq+0x164>)
 80013f8:	613b      	str	r3, [r7, #16]
      break;
 80013fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013fc:	693b      	ldr	r3, [r7, #16]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	00f42400 	.word	0x00f42400
 8001410:	017d7840 	.word	0x017d7840

08001414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e055      	b.n	80014d2 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d106      	bne.n	8001446 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f006 f827 	bl	8007494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2202      	movs	r2, #2
 800144a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800145c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6851      	ldr	r1, [r2, #4]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6892      	ldr	r2, [r2, #8]
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68d2      	ldr	r2, [r2, #12]
 8001470:	4311      	orrs	r1, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6912      	ldr	r2, [r2, #16]
 8001476:	4311      	orrs	r1, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6952      	ldr	r2, [r2, #20]
 800147c:	4311      	orrs	r1, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6992      	ldr	r2, [r2, #24]
 8001482:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	69d2      	ldr	r2, [r2, #28]
 800148c:	4311      	orrs	r1, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6a12      	ldr	r2, [r2, #32]
 8001492:	4311      	orrs	r1, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6992      	ldr	r2, [r2, #24]
 80014a4:	0c12      	lsrs	r2, r2, #16
 80014a6:	f002 0104 	and.w	r1, r2, #4
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ae:	430a      	orrs	r2, r1
 80014b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	69d2      	ldr	r2, [r2, #28]
 80014bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_SPI_Transmit+0x22>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e11c      	b.n	8001736 <HAL_SPI_Transmit+0x25c>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001504:	f7ff f8aa 	bl	800065c <HAL_GetTick>
 8001508:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d002      	beq.n	8001520 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800151a:	2302      	movs	r3, #2
 800151c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800151e:	e101      	b.n	8001724 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_SPI_Transmit+0x52>
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001530:	e0f8      	b.n	8001724 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2203      	movs	r2, #3
 8001536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001578:	d107      	bne.n	800158a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001588:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d007      	beq.n	80015a8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015b0:	d14b      	bne.n	800164a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HAL_SPI_Transmit+0xe6>
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d13e      	bne.n	800163e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015c8:	8812      	ldrh	r2, [r2, #0]
 80015ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	1c9a      	adds	r2, r3, #2
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3b01      	subs	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80015e4:	e02b      	b.n	800163e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d112      	bne.n	800161a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	1c9a      	adds	r2, r3, #2
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800160e:	b29b      	uxth	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	86da      	strh	r2, [r3, #54]	; 0x36
 8001618:	e011      	b.n	800163e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800161a:	f7ff f81f 	bl	800065c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d303      	bcc.n	8001632 <HAL_SPI_Transmit+0x158>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d102      	bne.n	8001638 <HAL_SPI_Transmit+0x15e>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800163c:	e072      	b.n	8001724 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ce      	bne.n	80015e6 <HAL_SPI_Transmit+0x10c>
 8001648:	e04c      	b.n	80016e4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_SPI_Transmit+0x17e>
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d140      	bne.n	80016da <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	330c      	adds	r3, #12
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800167e:	e02c      	b.n	80016da <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d113      	bne.n	80016b6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	330c      	adds	r3, #12
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80016b4:	e011      	b.n	80016da <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80016b6:	f7fe ffd1 	bl	800065c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d303      	bcc.n	80016ce <HAL_SPI_Transmit+0x1f4>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d102      	bne.n	80016d4 <HAL_SPI_Transmit+0x1fa>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80016d8:	e024      	b.n	8001724 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1cd      	bne.n	8001680 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fa33 	bl	8001b54 <SPI_EndRxTxTransaction>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08c      	sub	sp, #48	; 0x30
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800174c:	2301      	movs	r3, #1
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_SPI_TransmitReceive+0x26>
 8001760:	2302      	movs	r3, #2
 8001762:	e188      	b.n	8001a76 <HAL_SPI_TransmitReceive+0x338>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800176c:	f7fe ff76 	bl	800065c <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800178a:	2b01      	cmp	r3, #1
 800178c:	d00f      	beq.n	80017ae <HAL_SPI_TransmitReceive+0x70>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001794:	d107      	bne.n	80017a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <HAL_SPI_TransmitReceive+0x68>
 800179e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d003      	beq.n	80017ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80017ac:	e159      	b.n	8001a62 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_SPI_TransmitReceive+0x82>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_SPI_TransmitReceive+0x82>
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80017c6:	e14c      	b.n	8001a62 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d003      	beq.n	80017dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2205      	movs	r2, #5
 80017d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	887a      	ldrh	r2, [r7, #2]
 80017fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b40      	cmp	r3, #64	; 0x40
 800181e:	d007      	beq.n	8001830 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001838:	d178      	bne.n	800192c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_SPI_TransmitReceive+0x10a>
 8001842:	8b7b      	ldrh	r3, [r7, #26]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d166      	bne.n	8001916 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	1c9a      	adds	r2, r3, #2
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800186c:	e053      	b.n	8001916 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b02      	cmp	r3, #2
 800187a:	d11b      	bne.n	80018b4 <HAL_SPI_TransmitReceive+0x176>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001880:	b29b      	uxth	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d016      	beq.n	80018b4 <HAL_SPI_TransmitReceive+0x176>
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d113      	bne.n	80018b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001894:	8812      	ldrh	r2, [r2, #0]
 8001896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	1c9a      	adds	r2, r3, #2
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d119      	bne.n	80018f6 <HAL_SPI_TransmitReceive+0x1b8>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d014      	beq.n	80018f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	68d2      	ldr	r2, [r2, #12]
 80018d6:	b292      	uxth	r2, r2
 80018d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	1c9a      	adds	r2, r3, #2
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80018f2:	2301      	movs	r3, #1
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80018f6:	f7fe feb1 	bl	800065c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001902:	429a      	cmp	r2, r3
 8001904:	d307      	bcc.n	8001916 <HAL_SPI_TransmitReceive+0x1d8>
 8001906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d003      	beq.n	8001916 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001914:	e0a5      	b.n	8001a62 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1a6      	bne.n	800186e <HAL_SPI_TransmitReceive+0x130>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1a1      	bne.n	800186e <HAL_SPI_TransmitReceive+0x130>
 800192a:	e07c      	b.n	8001a26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_SPI_TransmitReceive+0x1fc>
 8001934:	8b7b      	ldrh	r3, [r7, #26]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d16b      	bne.n	8001a12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	330c      	adds	r3, #12
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001960:	e057      	b.n	8001a12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b02      	cmp	r3, #2
 800196e:	d11c      	bne.n	80019aa <HAL_SPI_TransmitReceive+0x26c>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d017      	beq.n	80019aa <HAL_SPI_TransmitReceive+0x26c>
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d114      	bne.n	80019aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	330c      	adds	r3, #12
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d119      	bne.n	80019ec <HAL_SPI_TransmitReceive+0x2ae>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d014      	beq.n	80019ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	68d2      	ldr	r2, [r2, #12]
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80019ec:	f7fe fe36 	bl	800065c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	1ad2      	subs	r2, r2, r3
 80019f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d303      	bcc.n	8001a04 <HAL_SPI_TransmitReceive+0x2c6>
 80019fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a02:	d102      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x2cc>
 8001a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d103      	bne.n	8001a12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001a10:	e027      	b.n	8001a62 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1a2      	bne.n	8001962 <HAL_SPI_TransmitReceive+0x224>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d19d      	bne.n	8001962 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f892 	bl	8001b54 <SPI_EndRxTxTransaction>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001a42:	e00e      	b.n	8001a62 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3730      	adds	r7, #48	; 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a8e:	e04c      	b.n	8001b2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d048      	beq.n	8001b2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a98:	f7fe fde0 	bl	800065c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d202      	bcs.n	8001aae <SPI_WaitFlagStateUntilTimeout+0x30>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d13d      	bne.n	8001b2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	6852      	ldr	r2, [r2, #4]
 8001ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ac6:	d111      	bne.n	8001aec <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	d004      	beq.n	8001adc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d107      	bne.n	8001aec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af4:	d10f      	bne.n	8001b16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00f      	b.n	8001b4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1a3      	bne.n	8001a90 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <SPI_EndRxTxTransaction+0x7c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <SPI_EndRxTxTransaction+0x80>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0d5b      	lsrs	r3, r3, #21
 8001b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b7e:	d112      	bne.n	8001ba6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2200      	movs	r2, #0
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff ff77 	bl	8001a7e <SPI_WaitFlagStateUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e00f      	b.n	8001bc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	2b80      	cmp	r3, #128	; 0x80
 8001bbe:	d0f2      	beq.n	8001ba6 <SPI_EndRxTxTransaction+0x52>
 8001bc0:	e000      	b.n	8001bc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8001bc2:	bf00      	nop
  }

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000064 	.word	0x20000064
 8001bd4:	165e9f81 	.word	0x165e9f81

08001bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8ee 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8e0 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8f1 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0204 	mvn.w	r2, #4
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8c4 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8b6 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8c7 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0208 	mvn.w	r2, #8
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f89a 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f88c 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f89d 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0210 	mvn.w	r2, #16
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2208      	movs	r2, #8
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f870 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f862 	bl	8001de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f873 	bl	8001e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0201 	mvn.w	r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f005 f9e7 	bl	800712a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f862 	bl	8001e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f838 	bl	8001e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0220 	mvn.w	r2, #32
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f82c 	bl	8001e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint8_t ret;
  uint8_t spi_data[3];

  WIZCHIP_CRITICAL_ENTER();
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4798      	blx	r3
  WIZCHIP.CS._select();
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	4798      	blx	r3

  AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

  if (!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <WIZCHIP_READ+0x24>
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <WIZCHIP_READ+0x4e>
  {
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	0c12      	lsrs	r2, r2, #16
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	0a12      	lsrs	r2, r2, #8
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4798      	blx	r3
 8001eac:	e011      	b.n	8001ed2 <WIZCHIP_READ+0x72>
  }
  else																// burst operation
  {
    spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	733b      	strb	r3, [r7, #12]
    spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	737b      	strb	r3, [r7, #13]
    spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	73bb      	strb	r3, [r7, #14]
    WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	2103      	movs	r1, #3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4798      	blx	r3
  }
  
  ret = WIZCHIP.IF.SPI._read_byte();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4798      	blx	r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]

  WIZCHIP.CS._deselect();
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	4798      	blx	r3
  WIZCHIP_CRITICAL_EXIT();
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4798      	blx	r3
  return ret;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <WIZCHIP_WRITE>:

void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  uint8_t spi_data[4];

  WIZCHIP_CRITICAL_ENTER();
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4798      	blx	r3
  WIZCHIP.CS._select();
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	4798      	blx	r3

  AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	607b      	str	r3, [r7, #4]

  //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
  if (!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d119      	bne.n	8001f54 <WIZCHIP_WRITE+0x5c>
  {
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	0c12      	lsrs	r2, r2, #16
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	0a12      	lsrs	r2, r2, #8
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	4610      	mov	r0, r2
 8001f46:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte(wb);
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4798      	blx	r3
 8001f52:	e013      	b.n	8001f7c <WIZCHIP_WRITE+0x84>
  }
  else									// burst operation
  {
    spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	733b      	strb	r3, [r7, #12]
    spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	737b      	strb	r3, [r7, #13]
    spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	73bb      	strb	r3, [r7, #14]
    spi_data[3] = wb;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	73fb      	strb	r3, [r7, #15]
    WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	2104      	movs	r1, #4
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4798      	blx	r3
  }

  WIZCHIP.CS._deselect();
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	4798      	blx	r3
  WIZCHIP_CRITICAL_EXIT();
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4798      	blx	r3
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000008 	.word	0x20000008

08001f94 <WIZCHIP_READ_BUF>:
         
void WIZCHIP_READ_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t spi_data[3];
  uint16_t i;

  WIZCHIP_CRITICAL_ENTER();
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4798      	blx	r3
  WIZCHIP.CS._select();
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4798      	blx	r3

  AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

  if (!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <WIZCHIP_READ_BUF+0x2a>
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d126      	bne.n	800200c <WIZCHIP_READ_BUF+0x78>
  {
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	0c12      	lsrs	r2, r2, #16
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	0a12      	lsrs	r2, r2, #8
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4798      	blx	r3

    for (i = 0; i < len; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	82fb      	strh	r3, [r7, #22]
 8001fea:	e00a      	b.n	8002002 <WIZCHIP_READ_BUF+0x6e>
    pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	18d4      	adds	r4, r2, r3
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < len; i++)
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	3301      	adds	r3, #1
 8002000:	82fb      	strh	r3, [r7, #22]
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3f0      	bcc.n	8001fec <WIZCHIP_READ_BUF+0x58>
  if (!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800200a:	e017      	b.n	800203c <WIZCHIP_READ_BUF+0xa8>
  }
  else																// burst operation
  {
    spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	743b      	strb	r3, [r7, #16]
    spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b2db      	uxtb	r3, r3
 800201a:	747b      	strb	r3, [r7, #17]
    spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	74bb      	strb	r3, [r7, #18]
    WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f107 0210 	add.w	r2, r7, #16
 800202a:	2103      	movs	r1, #3
 800202c:	4610      	mov	r0, r2
 800202e:	4798      	blx	r3
    WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	4611      	mov	r1, r2
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	4798      	blx	r3
  }

  WIZCHIP.CS._deselect();
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	4798      	blx	r3
  WIZCHIP_CRITICAL_EXIT();
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4798      	blx	r3
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	20000008 	.word	0x20000008

08002054 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  uint8_t spi_data[3];
  uint16_t i;

  WIZCHIP_CRITICAL_ENTER();
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4798      	blx	r3
  WIZCHIP.CS._select();
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4798      	blx	r3

  AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	60fb      	str	r3, [r7, #12]

  if (!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d126      	bne.n	80020cc <WIZCHIP_WRITE_BUF+0x78>
  {
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0c12      	lsrs	r2, r2, #16
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4610      	mov	r0, r2
 800208a:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	0a12      	lsrs	r2, r2, #8
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	4610      	mov	r0, r2
 8002098:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	4610      	mov	r0, r2
 80020a4:	4798      	blx	r3
  
    for (i = 0; i < len; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	82fb      	strh	r3, [r7, #22]
 80020aa:	e00a      	b.n	80020c2 <WIZCHIP_WRITE_BUF+0x6e>
      WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	8afa      	ldrh	r2, [r7, #22]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	440a      	add	r2, r1
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	4610      	mov	r0, r2
 80020ba:	4798      	blx	r3
    for (i = 0; i < len; i++)
 80020bc:	8afb      	ldrh	r3, [r7, #22]
 80020be:	3301      	adds	r3, #1
 80020c0:	82fb      	strh	r3, [r7, #22]
 80020c2:	8afa      	ldrh	r2, [r7, #22]
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3f0      	bcc.n	80020ac <WIZCHIP_WRITE_BUF+0x58>
 80020ca:	e017      	b.n	80020fc <WIZCHIP_WRITE_BUF+0xa8>
  }
  else									// burst operation
  {
    spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	743b      	strb	r3, [r7, #16]
    spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	747b      	strb	r3, [r7, #17]
    spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	74bb      	strb	r3, [r7, #18]
    WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f107 0210 	add.w	r2, r7, #16
 80020ea:	2103      	movs	r1, #3
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3
    WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	4611      	mov	r1, r2
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	4798      	blx	r3
  }

  WIZCHIP.CS._deselect();
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	4798      	blx	r3
  WIZCHIP_CRITICAL_EXIT();
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4798      	blx	r3
}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000008 	.word	0x20000008

08002114 <getSn_TX_FSR>:

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  uint16_t val = 0, val1 = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	81fb      	strh	r3, [r7, #14]
 8002122:	2300      	movs	r3, #0
 8002124:	81bb      	strh	r3, [r7, #12]

  do
  {
    val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	3301      	adds	r3, #1
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fe94 	bl	8001e60 <WIZCHIP_READ>
 8002138:	4603      	mov	r3, r0
 800213a:	81bb      	strh	r3, [r7, #12]
    val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn), 1));
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b29c      	uxth	r4, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	3301      	adds	r3, #1
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fe86 	bl	8001e60 <WIZCHIP_READ>
 8002154:	4603      	mov	r3, r0
 8002156:	b29b      	uxth	r3, r3
 8002158:	4423      	add	r3, r4
 800215a:	81bb      	strh	r3, [r7, #12]

    if (val1 != 0)
 800215c:	89bb      	ldrh	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <getSn_TX_FSR+0x84>
    {
      val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3301      	adds	r3, #1
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fe76 	bl	8001e60 <WIZCHIP_READ>
 8002174:	4603      	mov	r3, r0
 8002176:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn), 1));
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b29c      	uxth	r4, r3
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	3301      	adds	r3, #1
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fe68 	bl	8001e60 <WIZCHIP_READ>
 8002190:	4603      	mov	r3, r0
 8002192:	b29b      	uxth	r3, r3
 8002194:	4423      	add	r3, r4
 8002196:	81fb      	strh	r3, [r7, #14]
    }
  } while (val != val1);
 8002198:	89fa      	ldrh	r2, [r7, #14]
 800219a:	89bb      	ldrh	r3, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d1c2      	bne.n	8002126 <getSn_TX_FSR+0x12>
  
  return val;
 80021a0:	89fb      	ldrh	r3, [r7, #14]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}

080021aa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80021aa:	b590      	push	{r4, r7, lr}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  uint16_t val=0,val1=0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	81fb      	strh	r3, [r7, #14]
 80021b8:	2300      	movs	r3, #0
 80021ba:	81bb      	strh	r3, [r7, #12]

  do
  {
    val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	3301      	adds	r3, #1
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe49 	bl	8001e60 <WIZCHIP_READ>
 80021ce:	4603      	mov	r3, r0
 80021d0:	81bb      	strh	r3, [r7, #12]
    val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80021d2:	89bb      	ldrh	r3, [r7, #12]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b29c      	uxth	r4, r3
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	3301      	adds	r3, #1
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fe3b 	bl	8001e60 <WIZCHIP_READ>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	4423      	add	r3, r4
 80021f0:	81bb      	strh	r3, [r7, #12]
  
    if (val1 != 0)
 80021f2:	89bb      	ldrh	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01a      	beq.n	800222e <getSn_RX_RSR+0x84>
    {
      val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3301      	adds	r3, #1
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fe2b 	bl	8001e60 <WIZCHIP_READ>
 800220a:	4603      	mov	r3, r0
 800220c:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b29c      	uxth	r4, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3301      	adds	r3, #1
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe1d 	bl	8001e60 <WIZCHIP_READ>
 8002226:	4603      	mov	r3, r0
 8002228:	b29b      	uxth	r3, r3
 800222a:	4423      	add	r3, r4
 800222c:	81fb      	strh	r3, [r7, #14]
    }
  } while (val != val1);
 800222e:	89fa      	ldrh	r2, [r7, #14]
 8002230:	89bb      	ldrh	r3, [r7, #12]
 8002232:	429a      	cmp	r2, r3
 8002234:	d1c2      	bne.n	80021bc <getSn_RX_RSR+0x12>
  
  return val;
 8002236:	89fb      	ldrh	r3, [r7, #14]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}

08002240 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	81fb      	strh	r3, [r7, #14]
  uint32_t addrsel = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]

  if (len == 0)
 8002258:	88bb      	ldrh	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d048      	beq.n	80022f0 <wiz_send_data+0xb0>
    return;
  
  ptr = getSn_TX_WR(sn);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3301      	adds	r3, #1
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fdf8 	bl	8001e60 <WIZCHIP_READ>
 8002270:	4603      	mov	r3, r0
 8002272:	b29b      	uxth	r3, r3
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	b29c      	uxth	r4, r3
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	3301      	adds	r3, #1
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fdeb 	bl	8001e60 <WIZCHIP_READ>
 800228a:	4603      	mov	r3, r0
 800228c:	b29b      	uxth	r3, r3
 800228e:	4423      	add	r3, r4
 8002290:	81fb      	strh	r3, [r7, #14]
  
  //M20140501 : implict type casting -> explict type casting
  //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
  addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	3202      	adds	r2, #2
 800229c:	00d2      	lsls	r2, r2, #3
 800229e:	4413      	add	r3, r2
 80022a0:	60bb      	str	r3, [r7, #8]
  
  //
  WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	461a      	mov	r2, r3
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	68b8      	ldr	r0, [r7, #8]
 80022aa:	f7ff fed3 	bl	8002054 <WIZCHIP_WRITE_BUF>
   
  ptr += len;
 80022ae:	89fa      	ldrh	r2, [r7, #14]
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	81fb      	strh	r3, [r7, #14]
  setSn_TX_WR(sn,ptr);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	3301      	adds	r3, #1
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80022c2:	461a      	mov	r2, r3
 80022c4:	89fb      	ldrh	r3, [r7, #14]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f7ff fe12 	bl	8001ef8 <WIZCHIP_WRITE>
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	3301      	adds	r3, #1
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80022e0:	461a      	mov	r2, r3
 80022e2:	89fb      	ldrh	r3, [r7, #14]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f7ff fe05 	bl	8001ef8 <WIZCHIP_WRITE>
 80022ee:	e000      	b.n	80022f2 <wiz_send_data+0xb2>
    return;
 80022f0:	bf00      	nop
}
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}

080022f8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4613      	mov	r3, r2
 8002306:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	81fb      	strh	r3, [r7, #14]
  uint32_t addrsel = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
   
  if (len == 0)
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d048      	beq.n	80023a8 <wiz_recv_data+0xb0>
    return;
  
  ptr = getSn_RX_RD(sn);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3301      	adds	r3, #1
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fd9c 	bl	8001e60 <WIZCHIP_READ>
 8002328:	4603      	mov	r3, r0
 800232a:	b29b      	uxth	r3, r3
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b29c      	uxth	r4, r3
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3301      	adds	r3, #1
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fd8f 	bl	8001e60 <WIZCHIP_READ>
 8002342:	4603      	mov	r3, r0
 8002344:	b29b      	uxth	r3, r3
 8002346:	4423      	add	r3, r4
 8002348:	81fb      	strh	r3, [r7, #14]
  
  //M20140501 : implict type casting -> explict type casting
  //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
  addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	3203      	adds	r2, #3
 8002354:	00d2      	lsls	r2, r2, #3
 8002356:	4413      	add	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]
 
  //
  WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800235a:	88bb      	ldrh	r3, [r7, #4]
 800235c:	461a      	mov	r2, r3
 800235e:	6839      	ldr	r1, [r7, #0]
 8002360:	68b8      	ldr	r0, [r7, #8]
 8002362:	f7ff fe17 	bl	8001f94 <WIZCHIP_READ_BUF>
  ptr += len;
 8002366:	89fa      	ldrh	r2, [r7, #14]
 8002368:	88bb      	ldrh	r3, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn,ptr);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	3301      	adds	r3, #1
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800237a:	461a      	mov	r2, r3
 800237c:	89fb      	ldrh	r3, [r7, #14]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f7ff fdb6 	bl	8001ef8 <WIZCHIP_WRITE>
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	3301      	adds	r3, #1
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002398:	461a      	mov	r2, r3
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f7ff fda9 	bl	8001ef8 <WIZCHIP_WRITE>
 80023a6:	e000      	b.n	80023aa <wiz_recv_data+0xb2>
    return;
 80023a8:	bf00      	nop
}
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = getSn_RX_RD(sn);
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	3301      	adds	r3, #1
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fd47 	bl	8001e60 <WIZCHIP_READ>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b29c      	uxth	r4, r3
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	3301      	adds	r3, #1
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fd3a 	bl	8001e60 <WIZCHIP_READ>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4423      	add	r3, r4
 80023f2:	81fb      	strh	r3, [r7, #14]
  ptr += len;
 80023f4:	89fa      	ldrh	r2, [r7, #14]
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	81fb      	strh	r3, [r7, #14]
  setSn_RX_RD(sn,ptr);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3301      	adds	r3, #1
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002408:	461a      	mov	r2, r3
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7ff fd6f 	bl	8001ef8 <WIZCHIP_WRITE>
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3301      	adds	r3, #1
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002426:	461a      	mov	r2, r3
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f7ff fd62 	bl	8001ef8 <WIZCHIP_WRITE>
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4623      	mov	r3, r4
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	4603      	mov	r3, r0
 8002450:	71bb      	strb	r3, [r7, #6]
 8002452:	460b      	mov	r3, r1
 8002454:	80bb      	strh	r3, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	70fb      	strb	r3, [r7, #3]
  CHECK_SOCKNUM();
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d902      	bls.n	8002466 <socket+0x2a>
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	e0e9      	b.n	800263a <socket+0x1fe>

  switch(protocol)
 8002466:	79bb      	ldrb	r3, [r7, #6]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d00f      	beq.n	800248c <socket+0x50>
 800246c:	2b04      	cmp	r3, #4
 800246e:	d00d      	beq.n	800248c <socket+0x50>
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <socket+0x4a>
  {
    case Sn_MR_TCP:
      {
        uint8_t taddr[4];
        getSIPR(taddr);
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	2204      	movs	r2, #4
 800247a:	4619      	mov	r1, r3
 800247c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002480:	f7ff fd88 	bl	8001f94 <WIZCHIP_READ_BUF>
        if (taddr == 0)
          return SOCKERR_SOCKINIT;
      }
    case Sn_MR_UDP:
    case Sn_MR_MACRAW:
      break;
 8002484:	e002      	b.n	800248c <socket+0x50>
    case Sn_MR_IPRAW:
    case Sn_MR_PPPoE:
      break;
#endif
    default:
      return SOCKERR_SOCKMODE;
 8002486:	f06f 0304 	mvn.w	r3, #4
 800248a:	e0d6      	b.n	800263a <socket+0x1fe>
      break;
 800248c:	bf00      	nop
  }

  if ((flag & 0x06) != 0)
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 0306 	and.w	r3, r3, #6
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <socket+0x62>
    return SOCKERR_SOCKFLAG;
 8002498:	f06f 0305 	mvn.w	r3, #5
 800249c:	e0cd      	b.n	800263a <socket+0x1fe>
#if _WIZCHIP_ == 5200
  if (flag & 0x10)
    return SOCKERR_SOCKFLAG;
#endif
	   
  if (flag != 0)
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d028      	beq.n	80024f6 <socket+0xba>
  {
    switch (protocol)
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d002      	beq.n	80024b0 <socket+0x74>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d008      	beq.n	80024c0 <socket+0x84>
            return SOCKERR_SOCKFLAG;
      	}
#endif
        break;
      default:
   	break;
 80024ae:	e022      	b.n	80024f6 <socket+0xba>
        if ((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK)) == 0)
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11a      	bne.n	80024f0 <socket+0xb4>
          return SOCKERR_SOCKFLAG;
 80024ba:	f06f 0305 	mvn.w	r3, #5
 80024be:	e0bc      	b.n	800263a <socket+0x1fe>
        if (flag & SF_IGMP_VER2)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <socket+0x9c>
   	  if ((flag & SF_MULTI_ENABLE) == 0)
 80024ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db02      	blt.n	80024d8 <socket+0x9c>
            return SOCKERR_SOCKFLAG;
 80024d2:	f06f 0305 	mvn.w	r3, #5
 80024d6:	e0b0      	b.n	800263a <socket+0x1fe>
        if (flag & SF_UNI_BLOCK)
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <socket+0xb8>
      	  if ((flag & SF_MULTI_ENABLE) == 0)
 80024e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db04      	blt.n	80024f4 <socket+0xb8>
            return SOCKERR_SOCKFLAG;
 80024ea:	f06f 0305 	mvn.w	r3, #5
 80024ee:	e0a4      	b.n	800263a <socket+0x1fe>
        break;
 80024f0:	bf00      	nop
 80024f2:	e000      	b.n	80024f6 <socket+0xba>
        break;
 80024f4:	bf00      	nop
    }
  }

  close(sn);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f8ad 	bl	8002658 <close>
  setSn_MR(sn, (protocol | (flag & 0xF0)));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	3301      	adds	r3, #1
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4618      	mov	r0, r3
 8002508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250c:	f023 030f 	bic.w	r3, r3, #15
 8002510:	b25a      	sxtb	r2, r3
 8002512:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002516:	4313      	orrs	r3, r2
 8002518:	b25b      	sxtb	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	f7ff fceb 	bl	8001ef8 <WIZCHIP_WRITE>

  if (!port)
 8002522:	88bb      	ldrh	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d110      	bne.n	800254a <socket+0x10e>
  {
    port = sock_any_port++;
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <socket+0x208>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	b291      	uxth	r1, r2
 8002530:	4a44      	ldr	r2, [pc, #272]	; (8002644 <socket+0x208>)
 8002532:	8011      	strh	r1, [r2, #0]
 8002534:	80bb      	strh	r3, [r7, #4]
    if (sock_any_port == 0xFFF0)
 8002536:	4b43      	ldr	r3, [pc, #268]	; (8002644 <socket+0x208>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800253e:	4293      	cmp	r3, r2
 8002540:	d103      	bne.n	800254a <socket+0x10e>
      sock_any_port = SOCK_ANY_PORT_NUM;
 8002542:	4b40      	ldr	r3, [pc, #256]	; (8002644 <socket+0x208>)
 8002544:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002548:	801a      	strh	r2, [r3, #0]
  }
  
  setSn_PORT(sn,port);	
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	3301      	adds	r3, #1
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	461a      	mov	r2, r3
 8002558:	88bb      	ldrh	r3, [r7, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29b      	uxth	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7ff fcc8 	bl	8001ef8 <WIZCHIP_WRITE>
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	3301      	adds	r3, #1
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	88bb      	ldrh	r3, [r7, #4]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff fcbb 	bl	8001ef8 <WIZCHIP_WRITE>
  setSn_CR(sn,Sn_CR_OPEN);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	3301      	adds	r3, #1
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fcb1 	bl	8001ef8 <WIZCHIP_WRITE>
  
  while (getSn_CR(sn))
 8002596:	bf00      	nop
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	3301      	adds	r3, #1
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fc5b 	bl	8001e60 <WIZCHIP_READ>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f3      	bne.n	8002598 <socket+0x15c>
    ;
  
  //A20150401 : For release the previous sock_io_mode
  sock_io_mode &= ~(1 <<sn);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2201      	movs	r2, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	b21a      	sxth	r2, r3
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <socket+0x20c>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <socket+0x20c>)
 80025cc:	801a      	strh	r2, [r3, #0]

  sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	b21a      	sxth	r2, r3
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <socket+0x20c>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <socket+0x20c>)
 80025ea:	801a      	strh	r2, [r3, #0]
  sock_is_sending &= ~(1<<sn);
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2201      	movs	r2, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <socket+0x210>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4013      	ands	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <socket+0x210>)
 8002608:	801a      	strh	r2, [r3, #0]
  sock_remained_size[sn] = 0;
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <socket+0x214>)
 800260e:	2100      	movs	r1, #0
 8002610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  sock_pack_info[sn] = 0;
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <socket+0x218>)
 8002618:	2100      	movs	r1, #0
 800261a:	54d1      	strb	r1, [r2, r3]
  while (getSn_SR(sn) == SOCK_CLOSED)
 800261c:	bf00      	nop
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	3301      	adds	r3, #1
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fc18 	bl	8001e60 <WIZCHIP_READ>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f3      	beq.n	800261e <socket+0x1e2>
    ;
   
  return (int8_t)sn;
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	20000006 	.word	0x20000006
 8002648:	200000e8 	.word	0x200000e8
 800264c:	200000ea 	.word	0x200000ea
 8002650:	200000ec 	.word	0x200000ec
 8002654:	200000fc 	.word	0x200000fc

08002658 <close>:

int8_t close(uint8_t sn)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  CHECK_SOCKNUM();
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d902      	bls.n	800266e <close+0x16>
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
 800266c:	e055      	b.n	800271a <close+0xc2>
	
  setSn_CR(sn, Sn_CR_CLOSE);
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	3301      	adds	r3, #1
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800267a:	2110      	movs	r1, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fc3b 	bl	8001ef8 <WIZCHIP_WRITE>
  
  /* wait to process the command... */
  while (getSn_CR(sn))
 8002682:	bf00      	nop
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	3301      	adds	r3, #1
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fbe5 	bl	8001e60 <WIZCHIP_READ>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f3      	bne.n	8002684 <close+0x2c>
    ;
  
  /* clear all interrupt of the socket. */
  setSn_IR(sn, 0xFF);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	3301      	adds	r3, #1
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026a8:	211f      	movs	r1, #31
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fc24 	bl	8001ef8 <WIZCHIP_WRITE>
  
  //A20150401 : Release the sock_io_mode of socket n.
  sock_io_mode &= ~(1<<sn);
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2201      	movs	r2, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	b21a      	sxth	r2, r3
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <close+0xcc>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4013      	ands	r3, r2
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <close+0xcc>)
 80026cc:	801a      	strh	r2, [r3, #0]

  //
  sock_is_sending &= ~(1<<sn);
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2201      	movs	r2, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	b21a      	sxth	r2, r3
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <close+0xd0>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4013      	ands	r3, r2
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <close+0xd0>)
 80026ea:	801a      	strh	r2, [r3, #0]
  sock_remained_size[sn] = 0;
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <close+0xd4>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  sock_pack_info[sn] = 0;
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <close+0xd8>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	54d1      	strb	r1, [r2, r3]
  while (getSn_SR(sn) != SOCK_CLOSED)
 80026fe:	bf00      	nop
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	3301      	adds	r3, #1
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fba7 	bl	8001e60 <WIZCHIP_READ>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f3      	bne.n	8002700 <close+0xa8>
    ;
  
  return SOCK_OK;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200000e8 	.word	0x200000e8
 8002728:	200000ea 	.word	0x200000ea
 800272c:	200000ec 	.word	0x200000ec
 8002730:	200000fc 	.word	0x200000fc

08002734 <connect>:
  }
  return SOCK_OK;
}

int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	80bb      	strh	r3, [r7, #4]
  CHECK_SOCKNUM();
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d902      	bls.n	8002750 <connect+0x1c>
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e0c6      	b.n	80028de <connect+0x1aa>
  CHECK_SOCKMODE(Sn_MR_TCP);
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	3301      	adds	r3, #1
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fb81 	bl	8001e60 <WIZCHIP_READ>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	2b01      	cmp	r3, #1
 8002766:	d002      	beq.n	800276e <connect+0x3a>
 8002768:	f06f 0304 	mvn.w	r3, #4
 800276c:	e0b7      	b.n	80028de <connect+0x1aa>
  CHECK_SOCKINIT();
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	3301      	adds	r3, #1
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fb70 	bl	8001e60 <WIZCHIP_READ>
 8002780:	4603      	mov	r3, r0
 8002782:	2b13      	cmp	r3, #19
 8002784:	d002      	beq.n	800278c <connect+0x58>
 8002786:	f06f 0302 	mvn.w	r3, #2
 800278a:	e0a8      	b.n	80028de <connect+0x1aa>
  
  //M20140501 : For avoiding fatal error on memory align mismatched
  //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
  {
    uint32_t taddr;
    taddr = ((uint32_t)addr[0] & 0x000000FF);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
    taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	3201      	adds	r2, #1
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	4413      	add	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
    taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	3202      	adds	r2, #2
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
    taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	3203      	adds	r2, #3
 80027b6:	7812      	ldrb	r2, [r2, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
    if (taddr == 0xFFFFFFFF || taddr == 0) 
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d002      	beq.n	80027ca <connect+0x96>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <connect+0x9c>
      return SOCKERR_IPINVALID;
 80027ca:	f06f 030b 	mvn.w	r3, #11
 80027ce:	e086      	b.n	80028de <connect+0x1aa>
   }
   
   //
  if (port == 0)
 80027d0:	88bb      	ldrh	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <connect+0xa8>
    return SOCKERR_PORTZERO;
 80027d6:	f06f 030a 	mvn.w	r3, #10
 80027da:	e080      	b.n	80028de <connect+0x1aa>
  
  setSn_DIPR(sn,addr);
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	3301      	adds	r3, #1
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80027e8:	2204      	movs	r2, #4
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fc31 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSn_DPORT(sn,port);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	3301      	adds	r3, #1
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fe:	461a      	mov	r2, r3
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29b      	uxth	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7ff fb74 	bl	8001ef8 <WIZCHIP_WRITE>
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3301      	adds	r3, #1
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800281c:	461a      	mov	r2, r3
 800281e:	88bb      	ldrh	r3, [r7, #4]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7ff fb67 	bl	8001ef8 <WIZCHIP_WRITE>
  setSn_CR(sn,Sn_CR_CONNECT);
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	3301      	adds	r3, #1
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002836:	2104      	movs	r1, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fb5d 	bl	8001ef8 <WIZCHIP_WRITE>
  
  while(getSn_CR(sn))
 800283e:	bf00      	nop
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3301      	adds	r3, #1
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fb07 	bl	8001e60 <WIZCHIP_READ>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f3      	bne.n	8002840 <connect+0x10c>
    ;
   
  if (sock_io_mode & (1<<sn))
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <connect+0x1b4>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	fa42 f303 	asr.w	r3, r2, r3
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02b      	beq.n	80028c4 <connect+0x190>
    return SOCK_BUSY;
 800286c:	2300      	movs	r3, #0
 800286e:	e036      	b.n	80028de <connect+0x1aa>
  
  while (getSn_SR(sn) != SOCK_ESTABLISHED)
  {
    if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	3301      	adds	r3, #1
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff faef 	bl	8001e60 <WIZCHIP_READ>
 8002882:	4603      	mov	r3, r0
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00c      	beq.n	80028a6 <connect+0x172>
    {
      setSn_IR(sn, Sn_IR_TIMEOUT);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	3301      	adds	r3, #1
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002898:	2108      	movs	r1, #8
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fb2c 	bl	8001ef8 <WIZCHIP_WRITE>
      return SOCKERR_TIMEOUT;
 80028a0:	f06f 030c 	mvn.w	r3, #12
 80028a4:	e01b      	b.n	80028de <connect+0x1aa>
    }

    if (getSn_SR(sn) == SOCK_CLOSED)
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	3301      	adds	r3, #1
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fad4 	bl	8001e60 <WIZCHIP_READ>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <connect+0x190>
    {
      return SOCKERR_SOCKCLOSED;
 80028be:	f06f 0303 	mvn.w	r3, #3
 80028c2:	e00c      	b.n	80028de <connect+0x1aa>
  while (getSn_SR(sn) != SOCK_ESTABLISHED)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3301      	adds	r3, #1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fac5 	bl	8001e60 <WIZCHIP_READ>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b17      	cmp	r3, #23
 80028da:	d1c9      	bne.n	8002870 <connect+0x13c>
    }
  }
   
  return SOCK_OK;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200000e8 	.word	0x200000e8

080028ec <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  CHECK_SOCKNUM();
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d902      	bls.n	8002902 <disconnect+0x16>
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	e062      	b.n	80029c8 <disconnect+0xdc>
  CHECK_SOCKMODE(Sn_MR_TCP);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff faa8 	bl	8001e60 <WIZCHIP_READ>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	2b01      	cmp	r3, #1
 8002918:	d002      	beq.n	8002920 <disconnect+0x34>
 800291a:	f06f 0304 	mvn.w	r3, #4
 800291e:	e053      	b.n	80029c8 <disconnect+0xdc>

  setSn_CR(sn,Sn_CR_DISCON);
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	3301      	adds	r3, #1
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800292c:	2108      	movs	r1, #8
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fae2 	bl	8001ef8 <WIZCHIP_WRITE>

  /* wait to process the command... */
  while(getSn_CR(sn))
 8002934:	bf00      	nop
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3301      	adds	r3, #1
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fa8c 	bl	8001e60 <WIZCHIP_READ>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f3      	bne.n	8002936 <disconnect+0x4a>
    ;
	
  sock_is_sending &= ~(1 << sn);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	2201      	movs	r2, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	b21b      	sxth	r3, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	b21a      	sxth	r2, r3
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <disconnect+0xe4>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b21b      	sxth	r3, r3
 8002962:	4013      	ands	r3, r2
 8002964:	b21b      	sxth	r3, r3
 8002966:	b29a      	uxth	r2, r3
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <disconnect+0xe4>)
 800296a:	801a      	strh	r2, [r3, #0]
  if (sock_io_mode & (1 << sn))
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <disconnect+0xe8>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	fa42 f303 	asr.w	r3, r2, r3
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d016      	beq.n	80029ae <disconnect+0xc2>
    return SOCK_BUSY;
 8002980:	2300      	movs	r3, #0
 8002982:	e021      	b.n	80029c8 <disconnect+0xdc>
  
  while (getSn_SR(sn) != SOCK_CLOSED)
  {
    if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	3301      	adds	r3, #1
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fa65 	bl	8001e60 <WIZCHIP_READ>
 8002996:	4603      	mov	r3, r0
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <disconnect+0xc2>
    {
      close(sn);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe58 	bl	8002658 <close>
      return SOCKERR_TIMEOUT;
 80029a8:	f06f 030c 	mvn.w	r3, #12
 80029ac:	e00c      	b.n	80029c8 <disconnect+0xdc>
  while (getSn_SR(sn) != SOCK_CLOSED)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3301      	adds	r3, #1
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa50 	bl	8001e60 <WIZCHIP_READ>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1de      	bne.n	8002984 <disconnect+0x98>
    }
  }
  
  return SOCK_OK;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200000ea 	.word	0x200000ea
 80029d4:	200000e8 	.word	0x200000e8

080029d8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80bb      	strh	r3, [r7, #4]
  uint8_t tmp = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint16_t freesize = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	81bb      	strh	r3, [r7, #12]
   
  CHECK_SOCKNUM();
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d902      	bls.n	80029fc <send+0x24>
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e0de      	b.n	8002bba <send+0x1e2>
  CHECK_SOCKMODE(Sn_MR_TCP);
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3301      	adds	r3, #1
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fa2b 	bl	8001e60 <WIZCHIP_READ>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <send+0x42>
 8002a14:	f06f 0304 	mvn.w	r3, #4
 8002a18:	e0cf      	b.n	8002bba <send+0x1e2>
  CHECK_SOCKDATA();
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <send+0x4e>
 8002a20:	f06f 030d 	mvn.w	r3, #13
 8002a24:	e0c9      	b.n	8002bba <send+0x1e2>
  tmp = getSn_SR(sn);
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fa14 	bl	8001e60 <WIZCHIP_READ>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  
  if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b17      	cmp	r3, #23
 8002a40:	d005      	beq.n	8002a4e <send+0x76>
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b1c      	cmp	r3, #28
 8002a46:	d002      	beq.n	8002a4e <send+0x76>
    return SOCKERR_SOCKSTATUS;
 8002a48:	f06f 0306 	mvn.w	r3, #6
 8002a4c:	e0b5      	b.n	8002bba <send+0x1e2>
  
  if (sock_is_sending & (1<<sn))
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <send+0x1ec>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	fa42 f303 	asr.w	r3, r2, r3
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d039      	beq.n	8002ad6 <send+0xfe>
  {
    tmp = getSn_IR(sn);
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	3301      	adds	r3, #1
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f9f6 	bl	8001e60 <WIZCHIP_READ>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	73fb      	strb	r3, [r7, #15]
    
    if (tmp & Sn_IR_SENDOK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d019      	beq.n	8002aba <send+0xe2>
    {
      setSn_IR(sn, Sn_IR_SENDOK);
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a92:	2110      	movs	r1, #16
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa2f 	bl	8001ef8 <WIZCHIP_WRITE>
        while (getSn_CR(sn))
          ;
        return SOCK_BUSY;
      }
#endif
      sock_is_sending &= ~(1<<sn);         
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <send+0x1ec>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	4013      	ands	r3, r2
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <send+0x1ec>)
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	e00d      	b.n	8002ad6 <send+0xfe>
    }
    else if (tmp & Sn_IR_TIMEOUT)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <send+0xfa>
    {
      close(sn);
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fdc6 	bl	8002658 <close>
      return SOCKERR_TIMEOUT;
 8002acc:	f06f 030c 	mvn.w	r3, #12
 8002ad0:	e073      	b.n	8002bba <send+0x1e2>
    }
    else
      return SOCK_BUSY;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e071      	b.n	8002bba <send+0x1e2>
  }
  
  freesize = getSn_TxMAX(sn);
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	3301      	adds	r3, #1
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f9bc 	bl	8001e60 <WIZCHIP_READ>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	81bb      	strh	r3, [r7, #12]
  if (len > freesize)    // check size not to exceed MAX size.
 8002af0:	88ba      	ldrh	r2, [r7, #4]
 8002af2:	89bb      	ldrh	r3, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d901      	bls.n	8002afc <send+0x124>
    len = freesize;
 8002af8:	89bb      	ldrh	r3, [r7, #12]
 8002afa:	80bb      	strh	r3, [r7, #4]
   
  while(1)
  {
    freesize = getSn_TX_FSR(sn);
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fb08 	bl	8002114 <getSn_TX_FSR>
 8002b04:	4603      	mov	r3, r0
 8002b06:	81bb      	strh	r3, [r7, #12]
    tmp = getSn_SR(sn);
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f9a3 	bl	8001e60 <WIZCHIP_READ>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]
    
    if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b17      	cmp	r3, #23
 8002b22:	d009      	beq.n	8002b38 <send+0x160>
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b1c      	cmp	r3, #28
 8002b28:	d006      	beq.n	8002b38 <send+0x160>
    {
      close(sn);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fd93 	bl	8002658 <close>
      return SOCKERR_SOCKSTATUS;
 8002b32:	f06f 0306 	mvn.w	r3, #6
 8002b36:	e040      	b.n	8002bba <send+0x1e2>
    }
    
    if ((sock_io_mode & (1<<sn)) && (len > freesize))
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <send+0x1f0>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	fa42 f303 	asr.w	r3, r2, r3
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <send+0x180>
 8002b4c:	88ba      	ldrh	r2, [r7, #4]
 8002b4e:	89bb      	ldrh	r3, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d901      	bls.n	8002b58 <send+0x180>
      return SOCK_BUSY;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e030      	b.n	8002bba <send+0x1e2>
    if (len <= freesize)
 8002b58:	88ba      	ldrh	r2, [r7, #4]
 8002b5a:	89bb      	ldrh	r3, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d900      	bls.n	8002b62 <send+0x18a>
    freesize = getSn_TX_FSR(sn);
 8002b60:	e7cc      	b.n	8002afc <send+0x124>
      break;
 8002b62:	bf00      	nop
   }
  
   wiz_send_data(sn, buf, len);
 8002b64:	88ba      	ldrh	r2, [r7, #4]
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fb68 	bl	8002240 <wiz_send_data>

#if _WIZCHIP_ == 5200
   sock_next_rd[sn] = getSn_TX_RD(sn) + len;
#endif
   setSn_CR(sn,Sn_CR_SEND);
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	3301      	adds	r3, #1
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f9ba 	bl	8001ef8 <WIZCHIP_WRITE>
   
   /* wait to process the command... */
   while(getSn_CR(sn))
 8002b84:	bf00      	nop
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f964 	bl	8001e60 <WIZCHIP_READ>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f3      	bne.n	8002b86 <send+0x1ae>
     ;
   
   sock_is_sending |= (1 << sn);
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <send+0x1ec>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <send+0x1ec>)
 8002bb6:	801a      	strh	r2, [r3, #0]
   
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000ea 	.word	0x200000ea
 8002bc8:	200000e8 	.word	0x200000e8

08002bcc <recv>:

int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80bb      	strh	r3, [r7, #4]
  uint8_t  tmp = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint16_t recvsize = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	81bb      	strh	r3, [r7, #12]
  CHECK_SOCKNUM();
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d902      	bls.n	8002bf0 <recv+0x24>
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e09c      	b.n	8002d2a <recv+0x15e>
  CHECK_SOCKMODE(Sn_MR_TCP);
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f931 	bl	8001e60 <WIZCHIP_READ>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d002      	beq.n	8002c0e <recv+0x42>
 8002c08:	f06f 0304 	mvn.w	r3, #4
 8002c0c:	e08d      	b.n	8002d2a <recv+0x15e>
  CHECK_SOCKDATA();
 8002c0e:	88bb      	ldrh	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <recv+0x4e>
 8002c14:	f06f 030d 	mvn.w	r3, #13
 8002c18:	e087      	b.n	8002d2a <recv+0x15e>
   
  recvsize = getSn_RxMAX(sn);
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	3301      	adds	r3, #1
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f91a 	bl	8001e60 <WIZCHIP_READ>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	81bb      	strh	r3, [r7, #12]
  if (recvsize < len)
 8002c34:	89ba      	ldrh	r2, [r7, #12]
 8002c36:	88bb      	ldrh	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d201      	bcs.n	8002c40 <recv+0x74>
    len = recvsize;
 8002c3c:	89bb      	ldrh	r3, [r7, #12]
 8002c3e:	80bb      	strh	r3, [r7, #4]
  
  while (1)
  {
    recvsize = getSn_RX_RSR(sn);
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fab1 	bl	80021aa <getSn_RX_RSR>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	81bb      	strh	r3, [r7, #12]
    tmp = getSn_SR(sn);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3301      	adds	r3, #1
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f901 	bl	8001e60 <WIZCHIP_READ>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]
    
    if (tmp != SOCK_ESTABLISHED)
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b17      	cmp	r3, #23
 8002c66:	d026      	beq.n	8002cb6 <recv+0xea>
    {
      if (tmp == SOCK_CLOSE_WAIT)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b1c      	cmp	r3, #28
 8002c6c:	d11c      	bne.n	8002ca8 <recv+0xdc>
      {
        if (recvsize != 0)
 8002c6e:	89bb      	ldrh	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d133      	bne.n	8002cdc <recv+0x110>
          break;
        else if (getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa4c 	bl	8002114 <getSn_TX_FSR>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461c      	mov	r4, r3
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3301      	adds	r3, #1
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f8e7 	bl	8001e60 <WIZCHIP_READ>
 8002c92:	4603      	mov	r3, r0
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	429c      	cmp	r4, r3
 8002c98:	d10d      	bne.n	8002cb6 <recv+0xea>
        {
          close(sn);
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fcdb 	bl	8002658 <close>
          return SOCKERR_SOCKSTATUS;
 8002ca2:	f06f 0306 	mvn.w	r3, #6
 8002ca6:	e040      	b.n	8002d2a <recv+0x15e>
        }
      }
      else
      {
        close(sn);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fcd4 	bl	8002658 <close>
        return SOCKERR_SOCKSTATUS;
 8002cb0:	f06f 0306 	mvn.w	r3, #6
 8002cb4:	e039      	b.n	8002d2a <recv+0x15e>
      }
    }
    
    if ((sock_io_mode & (1<<sn)) && (recvsize == 0))
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <recv+0x168>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	fa42 f303 	asr.w	r3, r2, r3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <recv+0x108>
 8002cca:	89bb      	ldrh	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <recv+0x108>
      return SOCK_BUSY;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e02a      	b.n	8002d2a <recv+0x15e>
    if (recvsize != 0)
 8002cd4:	89bb      	ldrh	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <recv+0x114>
    recvsize = getSn_RX_RSR(sn);
 8002cda:	e7b1      	b.n	8002c40 <recv+0x74>
          break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <recv+0x116>
      break;
 8002ce0:	bf00      	nop
  };
  
  if (recvsize < len)
 8002ce2:	89ba      	ldrh	r2, [r7, #12]
 8002ce4:	88bb      	ldrh	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d201      	bcs.n	8002cee <recv+0x122>
    len = recvsize;
 8002cea:	89bb      	ldrh	r3, [r7, #12]
 8002cec:	80bb      	strh	r3, [r7, #4]
  
  wiz_recv_data(sn, buf, len);
 8002cee:	88ba      	ldrh	r2, [r7, #4]
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff faff 	bl	80022f8 <wiz_recv_data>
  setSn_CR(sn,Sn_CR_RECV);
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	3301      	adds	r3, #1
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d06:	2140      	movs	r1, #64	; 0x40
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f8f5 	bl	8001ef8 <WIZCHIP_WRITE>
  while(getSn_CR(sn));
 8002d0e:	bf00      	nop
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	3301      	adds	r3, #1
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f89f 	bl	8001e60 <WIZCHIP_READ>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f3      	bne.n	8002d10 <recv+0x144>
  
  //M20150409 : Explicit Type Casting
  //return len;
  return (int32_t)len;
 8002d28:	88bb      	ldrh	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200000e8 	.word	0x200000e8

08002d38 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	4603      	mov	r3, r0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	4613      	mov	r3, r2
 8002d48:	81bb      	strh	r3, [r7, #12]
  uint8_t tmp = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
  uint16_t freesize = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	82bb      	strh	r3, [r7, #20]
  uint32_t taddr;

  CHECK_SOCKNUM();
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d902      	bls.n	8002d5e <sendto+0x26>
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e101      	b.n	8002f62 <sendto+0x22a>
  
  switch (getSn_MR(sn) & 0x0F)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	3301      	adds	r3, #1
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f87a 	bl	8001e60 <WIZCHIP_READ>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d004      	beq.n	8002d80 <sendto+0x48>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d002      	beq.n	8002d80 <sendto+0x48>
  {
    case Sn_MR_UDP:
    case Sn_MR_MACRAW:
      break;
    default:
      return SOCKERR_SOCKMODE;
 8002d7a:	f06f 0304 	mvn.w	r3, #4
 8002d7e:	e0f0      	b.n	8002f62 <sendto+0x22a>
      break;
 8002d80:	bf00      	nop
  }
  
  CHECK_SOCKDATA();
 8002d82:	89bb      	ldrh	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <sendto+0x56>
 8002d88:	f06f 030d 	mvn.w	r3, #13
 8002d8c:	e0e9      	b.n	8002f62 <sendto+0x22a>
 
  //M20140501 : For avoiding fatal error on memory align mismatched
  //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
  //{
  //uint32_t taddr;
  taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
  taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	3201      	adds	r2, #1
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	3202      	adds	r2, #2
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
  taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	3203      	adds	r2, #3
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
  //}
  //
  
  //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
  if (taddr == 0)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <sendto+0x92>
    return SOCKERR_IPINVALID;
 8002dc4:	f06f 030b 	mvn.w	r3, #11
 8002dc8:	e0cb      	b.n	8002f62 <sendto+0x22a>
  
  if (port == 0)
 8002dca:	8c3b      	ldrh	r3, [r7, #32]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <sendto+0x9e>
    return SOCKERR_PORTZERO;
 8002dd0:	f06f 030a 	mvn.w	r3, #10
 8002dd4:	e0c5      	b.n	8002f62 <sendto+0x22a>
  
  tmp = getSn_SR(sn);
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	3301      	adds	r3, #1
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f83c 	bl	8001e60 <WIZCHIP_READ>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]
  if (tmp != SOCK_MACRAW && tmp != SOCK_UDP)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b42      	cmp	r3, #66	; 0x42
 8002df0:	d005      	beq.n	8002dfe <sendto+0xc6>
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	2b22      	cmp	r3, #34	; 0x22
 8002df6:	d002      	beq.n	8002dfe <sendto+0xc6>
    return SOCKERR_SOCKSTATUS;
 8002df8:	f06f 0306 	mvn.w	r3, #6
 8002dfc:	e0b1      	b.n	8002f62 <sendto+0x22a>
      
  setSn_DIPR(sn,addr);
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	3301      	adds	r3, #1
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f920 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSn_DPORT(sn,port);      
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3301      	adds	r3, #1
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e20:	461a      	mov	r2, r3
 8002e22:	8c3b      	ldrh	r3, [r7, #32]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7ff f863 	bl	8001ef8 <WIZCHIP_WRITE>
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	3301      	adds	r3, #1
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e3e:	461a      	mov	r2, r3
 8002e40:	8c3b      	ldrh	r3, [r7, #32]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f7ff f856 	bl	8001ef8 <WIZCHIP_WRITE>
  freesize = getSn_TxMAX(sn);
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	3301      	adds	r3, #1
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f801 	bl	8001e60 <WIZCHIP_READ>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	82bb      	strh	r3, [r7, #20]
  
  if (len > freesize)    // check size not to exceed MAX size.
 8002e66:	89ba      	ldrh	r2, [r7, #12]
 8002e68:	8abb      	ldrh	r3, [r7, #20]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d901      	bls.n	8002e72 <sendto+0x13a>
    len = freesize;
 8002e6e:	8abb      	ldrh	r3, [r7, #20]
 8002e70:	81bb      	strh	r3, [r7, #12]
  
  while(1)
  {
    freesize = getSn_TX_FSR(sn);
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f94d 	bl	8002114 <getSn_TX_FSR>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	82bb      	strh	r3, [r7, #20]
    
    if (getSn_SR(sn) == SOCK_CLOSED)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3301      	adds	r3, #1
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe ffe8 	bl	8001e60 <WIZCHIP_READ>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <sendto+0x164>
      return SOCKERR_SOCKCLOSED;
 8002e96:	f06f 0303 	mvn.w	r3, #3
 8002e9a:	e062      	b.n	8002f62 <sendto+0x22a>
    
    if ((sock_io_mode & (1 << sn)) && (len > freesize))
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <sendto+0x234>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	fa42 f303 	asr.w	r3, r2, r3
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <sendto+0x184>
 8002eb0:	89ba      	ldrh	r2, [r7, #12]
 8002eb2:	8abb      	ldrh	r3, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d901      	bls.n	8002ebc <sendto+0x184>
      return SOCK_BUSY;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e052      	b.n	8002f62 <sendto+0x22a>
    
    if (len <= freesize)
 8002ebc:	89ba      	ldrh	r2, [r7, #12]
 8002ebe:	8abb      	ldrh	r3, [r7, #20]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d900      	bls.n	8002ec6 <sendto+0x18e>
    freesize = getSn_TX_FSR(sn);
 8002ec4:	e7d5      	b.n	8002e72 <sendto+0x13a>
      break;
 8002ec6:	bf00      	nop
  }
	
  wiz_send_data(sn, buf, len);
 8002ec8:	89ba      	ldrh	r2, [r7, #12]
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f9b6 	bl	8002240 <wiz_send_data>
  }
  else
    taddr = 0;
#endif

  setSn_CR(sn,Sn_CR_SEND);
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3301      	adds	r3, #1
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f808 	bl	8001ef8 <WIZCHIP_WRITE>
  
  /* wait to process the command... */
  while (getSn_CR(sn))
 8002ee8:	bf00      	nop
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	3301      	adds	r3, #1
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe ffb2 	bl	8001e60 <WIZCHIP_READ>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f3      	bne.n	8002eea <sendto+0x1b2>
    ;
  
  while (1)
  {
    tmp = getSn_IR(sn);
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	3301      	adds	r3, #1
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe ffa6 	bl	8001e60 <WIZCHIP_READ>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	75fb      	strb	r3, [r7, #23]
    if (tmp & Sn_IR_SENDOK)
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <sendto+0x208>
    {
      setSn_IR(sn, Sn_IR_SENDOK);
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f32:	2110      	movs	r1, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe ffdf 	bl	8001ef8 <WIZCHIP_WRITE>
      break;
 8002f3a:	bf00      	nop
    setSUBR((uint8_t*)&taddr);
#endif

  //M20150409 : Explicit Type Casting
  //return len;
  return (int32_t)len;
 8002f3c:	89bb      	ldrh	r3, [r7, #12]
 8002f3e:	e010      	b.n	8002f62 <sendto+0x22a>
    else if(tmp & Sn_IR_TIMEOUT)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0db      	beq.n	8002f02 <sendto+0x1ca>
      setSn_IR(sn, Sn_IR_TIMEOUT);
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3301      	adds	r3, #1
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f56:	2108      	movs	r1, #8
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe ffcd 	bl	8001ef8 <WIZCHIP_WRITE>
      return SOCKERR_TIMEOUT;
 8002f5e:	f06f 030c 	mvn.w	r3, #12
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200000e8 	.word	0x200000e8

08002f70 <recvfrom>:

int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	81bb      	strh	r3, [r7, #12]
  uint8_t mr;
  uint8_t head[8];
  uint16_t pack_len = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	83fb      	strh	r3, [r7, #30]

  CHECK_SOCKNUM();
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d902      	bls.n	8002f92 <recvfrom+0x22>
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	e162      	b.n	8003258 <recvfrom+0x2e8>
  
  //CHECK_SOCKMODE(Sn_MR_UDP);
  switch ((mr = getSn_MR(sn)) & 0x0F)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3301      	adds	r3, #1
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe ff60 	bl	8001e60 <WIZCHIP_READ>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	777b      	strb	r3, [r7, #29]
 8002fa4:	7f7b      	ldrb	r3, [r7, #29]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d004      	beq.n	8002fb8 <recvfrom+0x48>
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d002      	beq.n	8002fb8 <recvfrom+0x48>
    case Sn_MR_IPRAW:
    case Sn_MR_PPPoE:
      break;
#endif
    default:
      return SOCKERR_SOCKMODE;
 8002fb2:	f06f 0304 	mvn.w	r3, #4
 8002fb6:	e14f      	b.n	8003258 <recvfrom+0x2e8>
      break;
 8002fb8:	bf00      	nop
  }
   
  CHECK_SOCKDATA();
 8002fba:	89bb      	ldrh	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <recvfrom+0x56>
 8002fc0:	f06f 030d 	mvn.w	r3, #13
 8002fc4:	e148      	b.n	8003258 <recvfrom+0x2e8>
  
  if (sock_remained_size[sn] == 0)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	4aa5      	ldr	r2, [pc, #660]	; (8003260 <recvfrom+0x2f0>)
 8002fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d128      	bne.n	8003024 <recvfrom+0xb4>
  {
    while (1)
    {
      pack_len = getSn_RX_RSR(sn);
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f8e8 	bl	80021aa <getSn_RX_RSR>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	83fb      	strh	r3, [r7, #30]
      
      if (getSn_SR(sn) == SOCK_CLOSED)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe ff38 	bl	8001e60 <WIZCHIP_READ>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <recvfrom+0x8c>
        return SOCKERR_SOCKCLOSED;
 8002ff6:	f06f 0303 	mvn.w	r3, #3
 8002ffa:	e12d      	b.n	8003258 <recvfrom+0x2e8>
      
      if ((sock_io_mode & (1 << sn)) && (pack_len == 0))
 8002ffc:	4b99      	ldr	r3, [pc, #612]	; (8003264 <recvfrom+0x2f4>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	fa42 f303 	asr.w	r3, r2, r3
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <recvfrom+0xaa>
 8003010:	8bfb      	ldrh	r3, [r7, #30]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <recvfrom+0xaa>
        return SOCK_BUSY;
 8003016:	2300      	movs	r3, #0
 8003018:	e11e      	b.n	8003258 <recvfrom+0x2e8>
      
      if (pack_len != 0)
 800301a:	8bfb      	ldrh	r3, [r7, #30]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d100      	bne.n	8003022 <recvfrom+0xb2>
      pack_len = getSn_RX_RSR(sn);
 8003020:	e7d7      	b.n	8002fd2 <recvfrom+0x62>
        break;
 8003022:	bf00      	nop
    }
  }
  
  sock_pack_info[sn] = PACK_COMPLETED;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	4a90      	ldr	r2, [pc, #576]	; (8003268 <recvfrom+0x2f8>)
 8003028:	2100      	movs	r1, #0
 800302a:	54d1      	strb	r1, [r2, r3]
	
  switch (mr & 0x07)
 800302c:	7f7b      	ldrb	r3, [r7, #29]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	2b02      	cmp	r3, #2
 8003034:	d002      	beq.n	800303c <recvfrom+0xcc>
 8003036:	2b04      	cmp	r3, #4
 8003038:	d06f      	beq.n	800311a <recvfrom+0x1aa>
 800303a:	e0cf      	b.n	80031dc <recvfrom+0x26c>
  {
    case Sn_MR_UDP:
      if (sock_remained_size[sn] == 0)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	4a88      	ldr	r2, [pc, #544]	; (8003260 <recvfrom+0x2f0>)
 8003040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d152      	bne.n	80030ee <recvfrom+0x17e>
      {
   	wiz_recv_data(sn, head, 8);
 8003048:	f107 0114 	add.w	r1, r7, #20
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2208      	movs	r2, #8
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f951 	bl	80022f8 <wiz_recv_data>
   	setSn_CR(sn, Sn_CR_RECV);
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3301      	adds	r3, #1
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe ff47 	bl	8001ef8 <WIZCHIP_WRITE>
   	while (getSn_CR(sn))
 800306a:	bf00      	nop
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	3301      	adds	r3, #1
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fef1 	bl	8001e60 <WIZCHIP_READ>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f3      	bne.n	800306c <recvfrom+0xfc>
          ;
   	
        // read peer's IP address, port number & packet length
        addr[0] = head[0];
 8003084:	7d3a      	ldrb	r2, [r7, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	701a      	strb	r2, [r3, #0]
   	addr[1] = head[1];
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3301      	adds	r3, #1
 800308e:	7d7a      	ldrb	r2, [r7, #21]
 8003090:	701a      	strb	r2, [r3, #0]
   	addr[2] = head[2];
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3302      	adds	r3, #2
 8003096:	7dba      	ldrb	r2, [r7, #22]
 8003098:	701a      	strb	r2, [r3, #0]
   	addr[3] = head[3];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3303      	adds	r3, #3
 800309e:	7dfa      	ldrb	r2, [r7, #23]
 80030a0:	701a      	strb	r2, [r3, #0]
   	*port = head[4];
 80030a2:	7e3b      	ldrb	r3, [r7, #24]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	801a      	strh	r2, [r3, #0]
   	*port = (*port << 8) + head[5];
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	7e7b      	ldrb	r3, [r7, #25]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	801a      	strh	r2, [r3, #0]
   	sock_remained_size[sn] = head[6];
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	7eba      	ldrb	r2, [r7, #26]
 80030c2:	b291      	uxth	r1, r2
 80030c4:	4a66      	ldr	r2, [pc, #408]	; (8003260 <recvfrom+0x2f0>)
 80030c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   	sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	4964      	ldr	r1, [pc, #400]	; (8003260 <recvfrom+0x2f0>)
 80030d0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80030d4:	0212      	lsls	r2, r2, #8
 80030d6:	b291      	uxth	r1, r2
 80030d8:	7efa      	ldrb	r2, [r7, #27]
 80030da:	b292      	uxth	r2, r2
 80030dc:	440a      	add	r2, r1
 80030de:	b291      	uxth	r1, r2
 80030e0:	4a5f      	ldr	r2, [pc, #380]	; (8003260 <recvfrom+0x2f0>)
 80030e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   	sock_pack_info[sn] = PACK_FIRST;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	4a5f      	ldr	r2, [pc, #380]	; (8003268 <recvfrom+0x2f8>)
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	54d1      	strb	r1, [r2, r3]
      }
	
      if (len < sock_remained_size[sn])
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4a5b      	ldr	r2, [pc, #364]	; (8003260 <recvfrom+0x2f0>)
 80030f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f6:	89ba      	ldrh	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d202      	bcs.n	8003102 <recvfrom+0x192>
        pack_len = len;
 80030fc:	89bb      	ldrh	r3, [r7, #12]
 80030fe:	83fb      	strh	r3, [r7, #30]
 8003100:	e004      	b.n	800310c <recvfrom+0x19c>
      else
        pack_len = sock_remained_size[sn];
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <recvfrom+0x2f0>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	83fb      	strh	r3, [r7, #30]
	
      //
      // Need to packet length check (default 1472)
      //
      wiz_recv_data(sn, buf, pack_len); // data copy.
 800310c:	8bfa      	ldrh	r2, [r7, #30]
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f8f0 	bl	80022f8 <wiz_recv_data>
      break;
 8003118:	e06c      	b.n	80031f4 <recvfrom+0x284>
    case Sn_MR_MACRAW:
      if (sock_remained_size[sn] == 0)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	4a50      	ldr	r2, [pc, #320]	; (8003260 <recvfrom+0x2f0>)
 800311e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d144      	bne.n	80031b0 <recvfrom+0x240>
      {
  	wiz_recv_data(sn, head, 2);
 8003126:	f107 0114 	add.w	r1, r7, #20
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2202      	movs	r2, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f8e2 	bl	80022f8 <wiz_recv_data>
  	setSn_CR(sn, Sn_CR_RECV);
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3301      	adds	r3, #1
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fed8 	bl	8001ef8 <WIZCHIP_WRITE>
   	
        while (getSn_CR(sn))
 8003148:	bf00      	nop
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	3301      	adds	r3, #1
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fe82 	bl	8001e60 <WIZCHIP_READ>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f3      	bne.n	800314a <recvfrom+0x1da>
          ;
   	
        // read peer's IP address, port number & packet length
    	sock_remained_size[sn] = head[0];
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	7d3a      	ldrb	r2, [r7, #20]
 8003166:	b291      	uxth	r1, r2
 8003168:	4a3d      	ldr	r2, [pc, #244]	; (8003260 <recvfrom+0x2f0>)
 800316a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   	sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	493b      	ldr	r1, [pc, #236]	; (8003260 <recvfrom+0x2f0>)
 8003174:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003178:	0212      	lsls	r2, r2, #8
 800317a:	b291      	uxth	r1, r2
 800317c:	7d7a      	ldrb	r2, [r7, #21]
 800317e:	b292      	uxth	r2, r2
 8003180:	440a      	add	r2, r1
 8003182:	b291      	uxth	r1, r2
 8003184:	4a36      	ldr	r2, [pc, #216]	; (8003260 <recvfrom+0x2f0>)
 8003186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   	
        if (sock_remained_size[sn] > 1514) 
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	4a34      	ldr	r2, [pc, #208]	; (8003260 <recvfrom+0x2f0>)
 800318e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003192:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8003196:	4293      	cmp	r3, r2
 8003198:	d906      	bls.n	80031a8 <recvfrom+0x238>
   	{
   	  close(sn);
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fa5b 	bl	8002658 <close>
   	  return SOCKFATAL_PACKLEN;
 80031a2:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80031a6:	e057      	b.n	8003258 <recvfrom+0x2e8>
   	}
   	
        sock_pack_info[sn] = PACK_FIRST;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <recvfrom+0x2f8>)
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	54d1      	strb	r1, [r2, r3]
      }
	
      if (len < sock_remained_size[sn])
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <recvfrom+0x2f0>)
 80031b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b8:	89ba      	ldrh	r2, [r7, #12]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d202      	bcs.n	80031c4 <recvfrom+0x254>
        pack_len = len;
 80031be:	89bb      	ldrh	r3, [r7, #12]
 80031c0:	83fb      	strh	r3, [r7, #30]
 80031c2:	e004      	b.n	80031ce <recvfrom+0x25e>
      else
        pack_len = sock_remained_size[sn];
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	4a26      	ldr	r2, [pc, #152]	; (8003260 <recvfrom+0x2f0>)
 80031c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031cc:	83fb      	strh	r3, [r7, #30]
	
      wiz_recv_data(sn, buf, pack_len);
 80031ce:	8bfa      	ldrh	r2, [r7, #30]
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f88f 	bl	80022f8 <wiz_recv_data>
      break;
 80031da:	e00b      	b.n	80031f4 <recvfrom+0x284>
   		
      wiz_recv_data(sn, buf, pack_len); // data copy.
      break;
#endif
    default:
      wiz_recv_ignore(sn, pack_len); // data copy.
 80031dc:	8bfa      	ldrh	r2, [r7, #30]
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f8e4 	bl	80023b0 <wiz_recv_ignore>
      sock_remained_size[sn] = pack_len;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	491d      	ldr	r1, [pc, #116]	; (8003260 <recvfrom+0x2f0>)
 80031ec:	8bfa      	ldrh	r2, [r7, #30]
 80031ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      break;
 80031f2:	bf00      	nop
  }

  setSn_CR(sn, Sn_CR_RECV);
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	3301      	adds	r3, #1
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003200:	2140      	movs	r1, #64	; 0x40
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fe78 	bl	8001ef8 <WIZCHIP_WRITE>
	
  /* wait to process the command... */
  while (getSn_CR(sn))
 8003208:	bf00      	nop
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	3301      	adds	r3, #1
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fe22 	bl	8001e60 <WIZCHIP_READ>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f3      	bne.n	800320a <recvfrom+0x29a>
    ;

  sock_remained_size[sn] -= pack_len;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	490e      	ldr	r1, [pc, #56]	; (8003260 <recvfrom+0x2f0>)
 8003228:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800322c:	8bfa      	ldrh	r2, [r7, #30]
 800322e:	1a8a      	subs	r2, r1, r2
 8003230:	b291      	uxth	r1, r2
 8003232:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <recvfrom+0x2f0>)
 8003234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  //M20140501 : replace 0x01 with PACK_REMAINED
  //if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
  if (sock_remained_size[sn] != 0)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <recvfrom+0x2f0>)
 800323c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <recvfrom+0x2e6>
    sock_pack_info[sn] |= PACK_REMAINED;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	4907      	ldr	r1, [pc, #28]	; (8003268 <recvfrom+0x2f8>)
 800324a:	5c8a      	ldrb	r2, [r1, r2]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <recvfrom+0x2f8>)
 8003254:	54d1      	strb	r1, [r2, r3]
  
  //
  //M20150409 : Explicit Type Casting
  //return pack_len;
  return (int32_t)pack_len;
 8003256:	8bfb      	ldrh	r3, [r7, #30]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	200000ec 	.word	0x200000ec
 8003264:	200000e8 	.word	0x200000e8
 8003268:	200000fc 	.word	0x200000fc

0800326c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <wizchip_bus_readbyte>:
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <wizchip_bus_writebyte>:
 */
 
//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	70fb      	strb	r3, [r7, #3]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
 80032e0:	2300      	movs	r3, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <reg_wizchip_cs_cbfunc>:
    WIZCHIP.CRIS._exit  = cris_ex;
  }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  if (!cs_sel || !cs_desel)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <reg_wizchip_cs_cbfunc+0x16>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <reg_wizchip_cs_cbfunc+0x24>
  {
    WIZCHIP.CS._select   = wizchip_cs_select;
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <reg_wizchip_cs_cbfunc+0x3c>)
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <reg_wizchip_cs_cbfunc+0x40>)
 800331e:	611a      	str	r2, [r3, #16]
    WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <reg_wizchip_cs_cbfunc+0x3c>)
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <reg_wizchip_cs_cbfunc+0x44>)
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	e005      	b.n	8003334 <reg_wizchip_cs_cbfunc+0x30>
  }
  else
  {
    WIZCHIP.CS._select   = cs_sel;
 8003328:	4a05      	ldr	r2, [pc, #20]	; (8003340 <reg_wizchip_cs_cbfunc+0x3c>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6113      	str	r3, [r2, #16]
    WIZCHIP.CS._deselect = cs_desel;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <reg_wizchip_cs_cbfunc+0x3c>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6153      	str	r3, [r2, #20]
  }
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20000008 	.word	0x20000008
 8003344:	08003289 	.word	0x08003289
 8003348:	08003297 	.word	0x08003297

0800334c <reg_wizchip_spi_cbfunc>:
    WIZCHIP.IF.BUS._write_byte  = bus_wb;
  }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  while (!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_))
 8003356:	bf00      	nop
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <reg_wizchip_spi_cbfunc+0x4c>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f9      	beq.n	8003358 <reg_wizchip_spi_cbfunc+0xc>
    ;
   
  if (!spi_rb || !spi_wb)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <reg_wizchip_spi_cbfunc+0x24>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <reg_wizchip_spi_cbfunc+0x32>
  {
    WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <reg_wizchip_spi_cbfunc+0x4c>)
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <reg_wizchip_spi_cbfunc+0x50>)
 8003374:	619a      	str	r2, [r3, #24]
    WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <reg_wizchip_spi_cbfunc+0x4c>)
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <reg_wizchip_spi_cbfunc+0x54>)
 800337a:	61da      	str	r2, [r3, #28]
 800337c:	e005      	b.n	800338a <reg_wizchip_spi_cbfunc+0x3e>
  }
  else
  {
    WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800337e:	4a06      	ldr	r2, [pc, #24]	; (8003398 <reg_wizchip_spi_cbfunc+0x4c>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6193      	str	r3, [r2, #24]
    WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <reg_wizchip_spi_cbfunc+0x4c>)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	61d3      	str	r3, [r2, #28]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008
 800339c:	080032dd 	.word	0x080032dd
 80033a0:	080032ed 	.word	0x080032ed

080033a4 <ctlwizchip>:
    WIZCHIP.IF.SPI._write_burst  = spi_wb;
  }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == 5200 || _WIZCHIP_ == 5500
  uint8_t tmp = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]
#endif
  uint8_t* ptmp[2] = {0,0};
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  
  switch (cwtype)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f200 80c2 	bhi.w	8003548 <ctlwizchip+0x1a4>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <ctlwizchip+0x28>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	0800340d 	.word	0x0800340d
 80033d0:	08003413 	.word	0x08003413
 80033d4:	0800343f 	.word	0x0800343f
 80033d8:	08003433 	.word	0x08003433
 80033dc:	0800344d 	.word	0x0800344d
 80033e0:	08003459 	.word	0x08003459
 80033e4:	08003467 	.word	0x08003467
 80033e8:	0800348d 	.word	0x0800348d
 80033ec:	080034b3 	.word	0x080034b3
 80033f0:	080034ed 	.word	0x080034ed
 80033f4:	080034f3 	.word	0x080034f3
 80033f8:	080034fb 	.word	0x080034fb
 80033fc:	0800354f 	.word	0x0800354f
 8003400:	08003503 	.word	0x08003503
 8003404:	08003511 	.word	0x08003511
 8003408:	0800352d 	.word	0x0800352d
  {
    case CW_RESET_WIZCHIP:
      wizchip_sw_reset();
 800340c:	f000 f8e6 	bl	80035dc <wizchip_sw_reset>
      break;
 8003410:	e09e      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_INIT_WIZCHIP:
      if (arg != 0) 
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <ctlwizchip+0x7e>
      {
        ptmp[0] = (uint8_t*)arg;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	60fb      	str	r3, [r7, #12]
        ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3308      	adds	r3, #8
 8003420:	613b      	str	r3, [r7, #16]
      }
      return wizchip_init(ptmp[0], ptmp[1]);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f923 	bl	8003674 <wizchip_init>
 800342e:	4603      	mov	r3, r0
 8003430:	e08f      	b.n	8003552 <ctlwizchip+0x1ae>
    case CW_CLR_INTERRUPT:
      wizchip_clrinterrupt(*((intr_kind*)arg));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f9a8 	bl	800378c <wizchip_clrinterrupt>
      break;
 800343c:	e088      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_GET_INTERRUPT:
      *((intr_kind*)arg) = wizchip_getinterrupt();
 800343e:	f000 f9c3 	bl	80037c8 <wizchip_getinterrupt>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	801a      	strh	r2, [r3, #0]
      break;
 800344a:	e081      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_SET_INTRMASK:
      wizchip_setinterruptmask(*((intr_kind*)arg));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f9de 	bl	8003812 <wizchip_setinterruptmask>
      break;         
 8003456:	e07b      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_GET_INTRMASK:
      *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003458:	f000 f9f6 	bl	8003848 <wizchip_getinterruptmask>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	801a      	strh	r2, [r3, #0]
      break;
 8003464:	e074      	b.n	8003550 <ctlwizchip+0x1ac>
#if _WIZCHIP_ > 5100
    case CW_SET_INTRTIME:
      setINTLEVEL(*(uint16_t*)arg);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	b29b      	uxth	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003476:	f7fe fd3f 	bl	8001ef8 <WIZCHIP_WRITE>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4619      	mov	r1, r3
 8003482:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003486:	f7fe fd37 	bl	8001ef8 <WIZCHIP_WRITE>
      break;
 800348a:	e061      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_GET_INTRTIME:
      *(uint16_t*)arg = getINTLEVEL();
 800348c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003490:	f7fe fce6 	bl	8001e60 <WIZCHIP_READ>
 8003494:	4603      	mov	r3, r0
 8003496:	b29b      	uxth	r3, r3
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	b29c      	uxth	r4, r3
 800349c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80034a0:	f7fe fcde 	bl	8001e60 <WIZCHIP_READ>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4423      	add	r3, r4
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	801a      	strh	r2, [r3, #0]
      break;
 80034b0:	e04e      	b.n	8003550 <ctlwizchip+0x1ac>
#endif
    case CW_GET_ID:
      ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <ctlwizchip+0x1b8>)
 80034b4:	789a      	ldrb	r2, [r3, #2]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
      ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	4a27      	ldr	r2, [pc, #156]	; (800355c <ctlwizchip+0x1b8>)
 80034c0:	78d2      	ldrb	r2, [r2, #3]
 80034c2:	701a      	strb	r2, [r3, #0]
      ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	3302      	adds	r3, #2
 80034c8:	4a24      	ldr	r2, [pc, #144]	; (800355c <ctlwizchip+0x1b8>)
 80034ca:	7912      	ldrb	r2, [r2, #4]
 80034cc:	701a      	strb	r2, [r3, #0]
      ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	3303      	adds	r3, #3
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <ctlwizchip+0x1b8>)
 80034d4:	7952      	ldrb	r2, [r2, #5]
 80034d6:	701a      	strb	r2, [r3, #0]
      ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	3304      	adds	r3, #4
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <ctlwizchip+0x1b8>)
 80034de:	7992      	ldrb	r2, [r2, #6]
 80034e0:	701a      	strb	r2, [r3, #0]
      ((uint8_t*)arg)[5] = 0;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	3305      	adds	r3, #5
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
      break;
 80034ea:	e031      	b.n	8003550 <ctlwizchip+0x1ac>
#if _WIZCHIP_ ==  5500
    case CW_RESET_PHY:
      wizphy_reset();
 80034ec:	f000 f9ff 	bl	80038ee <wizphy_reset>
      break;
 80034f0:	e02e      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_SET_PHYCONF:
      wizphy_setphyconf((wiz_PhyConf*)arg);
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f000 fa22 	bl	800393c <wizphy_setphyconf>
      break;
 80034f8:	e02a      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_GET_PHYCONF:
      wizphy_getphyconf((wiz_PhyConf*)arg);
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f000 fa60 	bl	80039c0 <wizphy_getphyconf>
      break;
 8003500:	e026      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_GET_PHYSTATUS:
      break;
    case CW_SET_PHYPOWMODE:
      return wizphy_setphypmode(*(uint8_t*)arg);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 faa6 	bl	8003a58 <wizphy_setphypmode>
 800350c:	4603      	mov	r3, r0
 800350e:	e020      	b.n	8003552 <ctlwizchip+0x1ae>
#endif
#if _WIZCHIP_ == 5200 || _WIZCHIP_ == 5500
    case CW_GET_PHYPOWMODE:
      tmp = wizphy_getphypmode();
 8003510:	f000 f9d4 	bl	80038bc <wizphy_getphypmode>
 8003514:	4603      	mov	r3, r0
 8003516:	75fb      	strb	r3, [r7, #23]
      if ((int8_t)tmp == -1)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2bff      	cmp	r3, #255	; 0xff
 800351c:	d102      	bne.n	8003524 <ctlwizchip+0x180>
        return -1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	e016      	b.n	8003552 <ctlwizchip+0x1ae>
      *(uint8_t*)arg = tmp;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	7dfa      	ldrb	r2, [r7, #23]
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e011      	b.n	8003550 <ctlwizchip+0x1ac>
    case CW_GET_PHYLINK:
      tmp = wizphy_getphylink();
 800352c:	f000 f9af 	bl	800388e <wizphy_getphylink>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]
      if ((int8_t)tmp == -1)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	d102      	bne.n	8003540 <ctlwizchip+0x19c>
        return -1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	e008      	b.n	8003552 <ctlwizchip+0x1ae>
      *(uint8_t*)arg = tmp;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	7dfa      	ldrb	r2, [r7, #23]
 8003544:	701a      	strb	r2, [r3, #0]
      break;
 8003546:	e003      	b.n	8003550 <ctlwizchip+0x1ac>
#endif      
    default:
      return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	e001      	b.n	8003552 <ctlwizchip+0x1ae>
      break;
 800354e:	bf00      	nop
  }
  
  return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop
 800355c:	20000008 	.word	0x20000008

08003560 <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  switch (cntype)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d82c      	bhi.n	80035cc <ctlnetwork+0x6c>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <ctlnetwork+0x18>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003591 	.word	0x08003591
 800357c:	08003599 	.word	0x08003599
 8003580:	080035a1 	.word	0x080035a1
 8003584:	080035af 	.word	0x080035af
 8003588:	080035bd 	.word	0x080035bd
 800358c:	080035c5 	.word	0x080035c5
  {
    case CN_SET_NETINFO:
      wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003590:	6838      	ldr	r0, [r7, #0]
 8003592:	f000 faab 	bl	8003aec <wizchip_setnetinfo>
      break;
 8003596:	e01c      	b.n	80035d2 <ctlnetwork+0x72>
    case CN_GET_NETINFO:
      wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f000 fae7 	bl	8003b6c <wizchip_getnetinfo>
      break;
 800359e:	e018      	b.n	80035d2 <ctlnetwork+0x72>
    case CN_SET_NETMODE:
      return wizchip_setnetmode(*(netmode_type*)arg);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fb21 	bl	8003bec <wizchip_setnetmode>
 80035aa:	4603      	mov	r3, r0
 80035ac:	e012      	b.n	80035d4 <ctlnetwork+0x74>
    case CN_GET_NETMODE:
      *(netmode_type*)arg = wizchip_getnetmode();
 80035ae:	f000 fb3f 	bl	8003c30 <wizchip_getnetmode>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	701a      	strb	r2, [r3, #0]
      break;
 80035ba:	e00a      	b.n	80035d2 <ctlnetwork+0x72>
    case CN_SET_TIMEOUT:
      wizchip_settimeout((wiz_NetTimeout*)arg);
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	f000 fb3f 	bl	8003c40 <wizchip_settimeout>
      break;
 80035c2:	e006      	b.n	80035d2 <ctlnetwork+0x72>
    case CN_GET_TIMEOUT:
      wizchip_gettimeout((wiz_NetTimeout*)arg);
 80035c4:	6838      	ldr	r0, [r7, #0]
 80035c6:	f000 fb5c 	bl	8003c82 <wizchip_gettimeout>
      break;
 80035ca:	e002      	b.n	80035d2 <ctlnetwork+0x72>
    default:
      return -1;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295
 80035d0:	e000      	b.n	80035d4 <ctlnetwork+0x74>
  }
  
  return 0;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
  uint8_t gw[4], sn[4], sip[4];
  uint8_t mac[6];
  getSHAR(mac);
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2206      	movs	r2, #6
 80035e6:	4619      	mov	r1, r3
 80035e8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035ec:	f7fe fcd2 	bl	8001f94 <WIZCHIP_READ_BUF>
  getGAR(gw);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2204      	movs	r2, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035fc:	f7fe fcca 	bl	8001f94 <WIZCHIP_READ_BUF>
  getSUBR(sn);
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	2204      	movs	r2, #4
 8003606:	4619      	mov	r1, r3
 8003608:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800360c:	f7fe fcc2 	bl	8001f94 <WIZCHIP_READ_BUF>
  getSIPR(sip);
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	2204      	movs	r2, #4
 8003616:	4619      	mov	r1, r3
 8003618:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800361c:	f7fe fcba 	bl	8001f94 <WIZCHIP_READ_BUF>
  setMR(MR_RST);
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	2000      	movs	r0, #0
 8003624:	f7fe fc68 	bl	8001ef8 <WIZCHIP_WRITE>
  getMR(); // for delay
 8003628:	2000      	movs	r0, #0
 800362a:	f7fe fc19 	bl	8001e60 <WIZCHIP_READ>
  setSHAR(mac);
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	2206      	movs	r2, #6
 8003632:	4619      	mov	r1, r3
 8003634:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003638:	f7fe fd0c 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setGAR(gw);
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	2204      	movs	r2, #4
 8003642:	4619      	mov	r1, r3
 8003644:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003648:	f7fe fd04 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSUBR(sn);
 800364c:	f107 0310 	add.w	r3, r7, #16
 8003650:	2204      	movs	r2, #4
 8003652:	4619      	mov	r1, r3
 8003654:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003658:	f7fe fcfc 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSIPR(sip);
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	2204      	movs	r2, #4
 8003662:	4619      	mov	r1, r3
 8003664:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003668:	f7fe fcf4 	bl	8002054 <WIZCHIP_WRITE_BUF>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  int8_t i;
  int8_t tmp = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	73bb      	strb	r3, [r7, #14]
  wizchip_sw_reset();
 8003682:	f7ff ffab 	bl	80035dc <wizchip_sw_reset>
  
  if (txsize)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03b      	beq.n	8003704 <wizchip_init+0x90>
  {
    tmp = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	73bb      	strb	r3, [r7, #14]
  
    for (i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e00e      	b.n	80036b4 <wizchip_init+0x40>
      tmp += txsize[i];
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	4413      	add	r3, r2
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	73bb      	strb	r3, [r7, #14]
    for (i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	ddec      	ble.n	8003696 <wizchip_init+0x22>
    
    if (tmp > 16)
 80036bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	dd02      	ble.n	80036ca <wizchip_init+0x56>
      return -1;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	e05c      	b.n	8003784 <wizchip_init+0x110>
    
    for (i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e015      	b.n	80036fc <wizchip_init+0x88>
      setSn_TXBUF_SIZE(i, txsize[i]);
 80036d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3301      	adds	r3, #1
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80036de:	4618      	mov	r0, r3
 80036e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7fe fc04 	bl	8001ef8 <WIZCHIP_WRITE>
    for (i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 80036f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003700:	2b07      	cmp	r3, #7
 8003702:	dde5      	ble.n	80036d0 <wizchip_init+0x5c>
  }
  
  if (rxsize)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03b      	beq.n	8003782 <wizchip_init+0x10e>
  {
    tmp = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	73bb      	strb	r3, [r7, #14]
    
    for (i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e00e      	b.n	8003732 <wizchip_init+0xbe>
      tmp += rxsize[i];
 8003714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	4413      	add	r3, r2
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	4413      	add	r3, r2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	73bb      	strb	r3, [r7, #14]
    for (i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	2b07      	cmp	r3, #7
 8003738:	ddec      	ble.n	8003714 <wizchip_init+0xa0>
    
    if (tmp > 16)
 800373a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800373e:	2b10      	cmp	r3, #16
 8003740:	dd02      	ble.n	8003748 <wizchip_init+0xd4>
      return -1;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	e01d      	b.n	8003784 <wizchip_init+0x110>
    
    for (i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e015      	b.n	800377a <wizchip_init+0x106>
      setSn_RXBUF_SIZE(i, rxsize[i]);
 800374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3301      	adds	r3, #1
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800375c:	4618      	mov	r0, r3
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	f7fe fbc5 	bl	8001ef8 <WIZCHIP_WRITE>
    for (i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	2b07      	cmp	r3, #7
 8003780:	dde5      	ble.n	800374e <wizchip_init+0xda>
  }
  
  return 0;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  uint8_t ir  = (uint8_t)intr;
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	73fb      	strb	r3, [r7, #15]
  uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	b29b      	uxth	r3, r3
 80037a0:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
  ir |= sir;
  setIR(ir);
#else
  setIR(ir);
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	f023 030f 	bic.w	r3, r3, #15
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80037b0:	f7fe fba2 	bl	8001ef8 <WIZCHIP_WRITE>
  setSIR(sir);
 80037b4:	7bbb      	ldrb	r3, [r7, #14]
 80037b6:	4619      	mov	r1, r3
 80037b8:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80037bc:	f7fe fb9c 	bl	8001ef8 <WIZCHIP_WRITE>
#endif   
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  uint8_t ir  = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	71fb      	strb	r3, [r7, #7]
  uint8_t sir = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	71bb      	strb	r3, [r7, #6]
  uint16_t ret = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
  ir = getIR();
  sir = ir & 0x0F;
#else
  ir  = getIR();
 80037da:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80037de:	f7fe fb3f 	bl	8001e60 <WIZCHIP_READ>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f023 030f 	bic.w	r3, r3, #15
 80037e8:	71fb      	strb	r3, [r7, #7]
  sir = getSIR();
 80037ea:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80037ee:	f7fe fb37 	bl	8001e60 <WIZCHIP_READ>
 80037f2:	4603      	mov	r3, r0
 80037f4:	71bb      	strb	r3, [r7, #6]
  ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
  ir &= ~(1 << 6);
#endif
  ret = sir;
 80037f6:	79bb      	ldrb	r3, [r7, #6]
 80037f8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80037fa:	88bb      	ldrh	r3, [r7, #4]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	b29a      	uxth	r2, r3
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	b29b      	uxth	r3, r3
 8003804:	4413      	add	r3, r2
 8003806:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003808:	88bb      	ldrh	r3, [r7, #4]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	80fb      	strh	r3, [r7, #6]
  uint8_t imr  = (uint8_t)intr;
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	73fb      	strb	r3, [r7, #15]
  uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == 5100
  simr &= 0x0F;
  imr |= simr;
  setIMR(imr);
#else
  setIMR(imr);
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	4619      	mov	r1, r3
 800382c:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003830:	f7fe fb62 	bl	8001ef8 <WIZCHIP_WRITE>
  setSIMR(simr);
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	4619      	mov	r1, r3
 8003838:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800383c:	f7fe fb5c 	bl	8001ef8 <WIZCHIP_WRITE>
#endif   
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  uint8_t imr  = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	71fb      	strb	r3, [r7, #7]
  uint8_t simr = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	71bb      	strb	r3, [r7, #6]
  uint16_t ret = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	80bb      	strh	r3, [r7, #4]

#if _WIZCHIP_ == 5100
  imr  = getIMR();
  simr = imr & 0x0F;
#else
  imr  = getIMR();
 800385a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800385e:	f7fe faff 	bl	8001e60 <WIZCHIP_READ>
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  simr = getSIMR();
 8003866:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800386a:	f7fe faf9 	bl	8001e60 <WIZCHIP_READ>
 800386e:	4603      	mov	r3, r0
 8003870:	71bb      	strb	r3, [r7, #6]

#if _WIZCHIP_ == 5200
  imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  
  ret = simr;
 8003872:	79bb      	ldrb	r3, [r7, #6]
 8003874:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003876:	88bb      	ldrh	r3, [r7, #4]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	b29a      	uxth	r2, r3
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	b29b      	uxth	r3, r3
 8003880:	4413      	add	r3, r2
 8003882:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003884:	88bb      	ldrh	r3, [r7, #4]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
  if (getPHYSTATUS() & PHYSTATUS_LINK)
    tmp = PHY_LINK_ON;
  else
    tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
  if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003894:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003898:	f7fe fae2 	bl	8001e60 <WIZCHIP_READ>
 800389c:	4603      	mov	r3, r0
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <wizphy_getphylink+0x1e>
    tmp = PHY_LINK_ON;
 80038a6:	2301      	movs	r3, #1
 80038a8:	71fb      	strb	r3, [r7, #7]
 80038aa:	e001      	b.n	80038b0 <wizphy_getphylink+0x22>
  else
    tmp = PHY_LINK_OFF;
 80038ac:	2300      	movs	r3, #0
 80038ae:	71fb      	strb	r3, [r7, #7]
#else
  tmp = -1;
#endif

  return tmp;
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100
int8_t wizphy_getphypmode(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  int8_t tmp = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if (getPHYSTATUS() & PHYSTATUS_POWERDOWN)
    tmp = PHY_POWER_DOWN;
  else          
    tmp = PHY_POWER_NORM;
#elif _WIZCHIP_ == 5500
  if (getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 80038c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038ca:	f7fe fac9 	bl	8001e60 <WIZCHIP_READ>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <wizphy_getphypmode+0x22>
    tmp = PHY_POWER_DOWN;
 80038d8:	2301      	movs	r3, #1
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	e001      	b.n	80038e2 <wizphy_getphypmode+0x26>
  else 
    tmp = PHY_POWER_NORM;
 80038de:	2300      	movs	r3, #0
 80038e0:	71fb      	strb	r3, [r7, #7]
#else
  tmp = -1;
#endif

  return tmp;
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
  uint8_t tmp = getPHYCFGR();
 80038f4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038f8:	f7fe fab2 	bl	8001e60 <WIZCHIP_READ>
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  tmp &= PHYCFGR_RST;
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003906:	71fb      	strb	r3, [r7, #7]
  setPHYCFGR(tmp);
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	4619      	mov	r1, r3
 800390c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003910:	f7fe faf2 	bl	8001ef8 <WIZCHIP_WRITE>
  tmp = getPHYCFGR(); 
 8003914:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003918:	f7fe faa2 	bl	8001e60 <WIZCHIP_READ>
 800391c:	4603      	mov	r3, r0
 800391e:	71fb      	strb	r3, [r7, #7]
  tmp |= ~PHYCFGR_RST;
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003926:	71fb      	strb	r3, [r7, #7]
  setPHYCFGR(tmp);
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	4619      	mov	r1, r3
 800392c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003930:	f7fe fae2 	bl	8001ef8 <WIZCHIP_WRITE>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint8_t tmp = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
  
  if (phyconf->by == PHY_CONFBY_SW)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d104      	bne.n	800395a <wizphy_setphyconf+0x1e>
    tmp |= PHYCFGR_OPMD;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e003      	b.n	8003962 <wizphy_setphyconf+0x26>
  else
    tmp &= ~PHYCFGR_OPMD;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003960:	73fb      	strb	r3, [r7, #15]
  
  if (phyconf->mode == PHY_MODE_AUTONEGO)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d104      	bne.n	8003974 <wizphy_setphyconf+0x38>
    tmp |= PHYCFGR_OPMDC_ALLA;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e019      	b.n	80039a8 <wizphy_setphyconf+0x6c>
  else
  {
    if (phyconf->duplex == PHY_DUPLEX_FULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10d      	bne.n	8003998 <wizphy_setphyconf+0x5c>
    {
      if (phyconf->speed == PHY_SPEED_100)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	789b      	ldrb	r3, [r3, #2]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d104      	bne.n	800398e <wizphy_setphyconf+0x52>
        tmp |= PHYCFGR_OPMDC_100F;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	f043 0318 	orr.w	r3, r3, #24
 800398a:	73fb      	strb	r3, [r7, #15]
 800398c:	e00c      	b.n	80039a8 <wizphy_setphyconf+0x6c>
      else
        tmp |= PHYCFGR_OPMDC_10F;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	f043 0308 	orr.w	r3, r3, #8
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e007      	b.n	80039a8 <wizphy_setphyconf+0x6c>
    }   
    else
    {
      if (phyconf->speed == PHY_SPEED_100)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	789b      	ldrb	r3, [r3, #2]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d103      	bne.n	80039a8 <wizphy_setphyconf+0x6c>
        tmp |= PHYCFGR_OPMDC_100H;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	f043 0310 	orr.w	r3, r3, #16
 80039a6:	73fb      	strb	r3, [r7, #15]
      else
        tmp |= PHYCFGR_OPMDC_10H;
    }
  }
  
  setPHYCFGR(tmp);
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	4619      	mov	r1, r3
 80039ac:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039b0:	f7fe faa2 	bl	8001ef8 <WIZCHIP_WRITE>
  wizphy_reset();
 80039b4:	f7ff ff9b 	bl	80038ee <wizphy_reset>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint8_t tmp = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
  tmp = getPHYCFGR();
 80039cc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039d0:	f7fe fa46 	bl	8001e60 <WIZCHIP_READ>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
  phyconf->by = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	701a      	strb	r2, [r3, #0]
  
  switch (tmp & PHYCFGR_OPMDC_ALLA)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d001      	beq.n	80039fc <wizphy_getphyconf+0x3c>
 80039f8:	2b38      	cmp	r3, #56	; 0x38
 80039fa:	d103      	bne.n	8003a04 <wizphy_getphyconf+0x44>
  {
    case PHYCFGR_OPMDC_ALLA:
    case PHYCFGR_OPMDC_100FA: 
      phyconf->mode = PHY_MODE_AUTONEGO;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	705a      	strb	r2, [r3, #1]
      break;
 8003a02:	e003      	b.n	8003a0c <wizphy_getphyconf+0x4c>
    default:
      phyconf->mode = PHY_MODE_MANUAL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	705a      	strb	r2, [r3, #1]
      break;
 8003a0a:	bf00      	nop
  }
  
  switch (tmp & PHYCFGR_OPMDC_ALLA)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a12:	2b18      	cmp	r3, #24
 8003a14:	d003      	beq.n	8003a1e <wizphy_getphyconf+0x5e>
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d001      	beq.n	8003a1e <wizphy_getphyconf+0x5e>
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d103      	bne.n	8003a26 <wizphy_getphyconf+0x66>
  {
    case PHYCFGR_OPMDC_100FA:
    case PHYCFGR_OPMDC_100F:
    case PHYCFGR_OPMDC_100H:
      phyconf->speed = PHY_SPEED_100;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	709a      	strb	r2, [r3, #2]
      break;
 8003a24:	e003      	b.n	8003a2e <wizphy_getphyconf+0x6e>
    default:
      phyconf->speed = PHY_SPEED_10;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	709a      	strb	r2, [r3, #2]
      break;
 8003a2c:	bf00      	nop
  }
   
  switch (tmp & PHYCFGR_OPMDC_ALLA)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a34:	2b18      	cmp	r3, #24
 8003a36:	d003      	beq.n	8003a40 <wizphy_getphyconf+0x80>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d001      	beq.n	8003a40 <wizphy_getphyconf+0x80>
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d103      	bne.n	8003a48 <wizphy_getphyconf+0x88>
  {
    case PHYCFGR_OPMDC_100FA:
    case PHYCFGR_OPMDC_100F:
    case PHYCFGR_OPMDC_10F:
      phyconf->duplex = PHY_DUPLEX_FULL;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	70da      	strb	r2, [r3, #3]
      break;
 8003a46:	e003      	b.n	8003a50 <wizphy_getphyconf+0x90>
    default:
      phyconf->duplex = PHY_DUPLEX_HALF;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	70da      	strb	r2, [r3, #3]
      break;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <wizphy_setphypmode>:
  phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
  phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  tmp = getPHYCFGR();
 8003a66:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a6a:	f7fe f9f9 	bl	8001e60 <WIZCHIP_READ>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & PHYCFGR_OPMD)== 0)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <wizphy_setphypmode+0x2a>
    return -1;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	e030      	b.n	8003ae4 <wizphy_setphypmode+0x8c>
  
  tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003a88:	73fb      	strb	r3, [r7, #15]
 
  if (pmode == PHY_POWER_DOWN)
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d104      	bne.n	8003a9a <wizphy_setphypmode+0x42>
    tmp |= PHYCFGR_OPMDC_PDOWN;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e003      	b.n	8003aa2 <wizphy_setphypmode+0x4a>
  else
    tmp |= PHYCFGR_OPMDC_ALLA;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003aa0:	73fb      	strb	r3, [r7, #15]
   
  setPHYCFGR(tmp);
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aaa:	f7fe fa25 	bl	8001ef8 <WIZCHIP_WRITE>
  wizphy_reset();
 8003aae:	f7ff ff1e 	bl	80038ee <wizphy_reset>
  tmp = getPHYCFGR();
 8003ab2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ab6:	f7fe f9d3 	bl	8001e60 <WIZCHIP_READ>
 8003aba:	4603      	mov	r3, r0
 8003abc:	73fb      	strb	r3, [r7, #15]
  
  if( pmode == PHY_POWER_DOWN)
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d106      	bne.n	8003ad2 <wizphy_setphypmode+0x7a>
  {
    if (tmp & PHYCFGR_OPMDC_PDOWN)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <wizphy_setphypmode+0x88>
      return 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e008      	b.n	8003ae4 <wizphy_setphypmode+0x8c>
  }
  else
  {
    if (tmp & PHYCFGR_OPMDC_ALLA)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <wizphy_setphypmode+0x88>
      return 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e001      	b.n	8003ae4 <wizphy_setphypmode+0x8c>
  }
  
  return -1;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <wizchip_setnetinfo>:
#endif

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  setSHAR(pnetinfo->mac);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2206      	movs	r2, #6
 8003af8:	4619      	mov	r1, r3
 8003afa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003afe:	f7fe faa9 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setGAR(pnetinfo->gw);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	330e      	adds	r3, #14
 8003b06:	2204      	movs	r2, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b0e:	f7fe faa1 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSUBR(pnetinfo->sn);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	330a      	adds	r3, #10
 8003b16:	2204      	movs	r2, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003b1e:	f7fe fa99 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSIPR(pnetinfo->ip);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3306      	adds	r3, #6
 8003b26:	2204      	movs	r2, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003b2e:	f7fe fa91 	bl	8002054 <WIZCHIP_WRITE_BUF>
  _DNS_[0] = pnetinfo->dns[0];
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7c9a      	ldrb	r2, [r3, #18]
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <wizchip_setnetinfo+0x78>)
 8003b38:	701a      	strb	r2, [r3, #0]
  _DNS_[1] = pnetinfo->dns[1];
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	7cda      	ldrb	r2, [r3, #19]
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <wizchip_setnetinfo+0x78>)
 8003b40:	705a      	strb	r2, [r3, #1]
  _DNS_[2] = pnetinfo->dns[2];
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7d1a      	ldrb	r2, [r3, #20]
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <wizchip_setnetinfo+0x78>)
 8003b48:	709a      	strb	r2, [r3, #2]
  _DNS_[3] = pnetinfo->dns[3];
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7d5a      	ldrb	r2, [r3, #21]
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <wizchip_setnetinfo+0x78>)
 8003b50:	70da      	strb	r2, [r3, #3]
  _DHCP_   = pnetinfo->dhcp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7d9a      	ldrb	r2, [r3, #22]
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <wizchip_setnetinfo+0x7c>)
 8003b58:	701a      	strb	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000104 	.word	0x20000104
 8003b68:	20000108 	.word	0x20000108

08003b6c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  getSHAR(pnetinfo->mac);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2206      	movs	r2, #6
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003b7e:	f7fe fa09 	bl	8001f94 <WIZCHIP_READ_BUF>
  getGAR(pnetinfo->gw);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	330e      	adds	r3, #14
 8003b86:	2204      	movs	r2, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b8e:	f7fe fa01 	bl	8001f94 <WIZCHIP_READ_BUF>
  getSUBR(pnetinfo->sn);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	330a      	adds	r3, #10
 8003b96:	2204      	movs	r2, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003b9e:	f7fe f9f9 	bl	8001f94 <WIZCHIP_READ_BUF>
  getSIPR(pnetinfo->ip);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3306      	adds	r3, #6
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003bae:	f7fe f9f1 	bl	8001f94 <WIZCHIP_READ_BUF>
  pnetinfo->dns[0]= _DNS_[0];
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <wizchip_getnetinfo+0x78>)
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	749a      	strb	r2, [r3, #18]
  pnetinfo->dns[1]= _DNS_[1];
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <wizchip_getnetinfo+0x78>)
 8003bbc:	785a      	ldrb	r2, [r3, #1]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	74da      	strb	r2, [r3, #19]
  pnetinfo->dns[2]= _DNS_[2];
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <wizchip_getnetinfo+0x78>)
 8003bc4:	789a      	ldrb	r2, [r3, #2]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	751a      	strb	r2, [r3, #20]
  pnetinfo->dns[3]= _DNS_[3];
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <wizchip_getnetinfo+0x78>)
 8003bcc:	78da      	ldrb	r2, [r3, #3]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	755a      	strb	r2, [r3, #21]
  pnetinfo->dhcp  = _DHCP_;
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <wizchip_getnetinfo+0x7c>)
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	759a      	strb	r2, [r3, #22]
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000104 	.word	0x20000104
 8003be8:	20000108 	.word	0x20000108

08003bec <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]

#if _WIZCHIP_ != 5500   
  if (netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK))
    return -1;
#else
  if (netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP))
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <wizchip_setnetmode+0x1e>
    return -1;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	e00e      	b.n	8003c28 <wizchip_setnetmode+0x3c>
#endif      
   
  tmp = getMR();
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fe f928 	bl	8001e60 <WIZCHIP_READ>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)netmode;
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	73fb      	strb	r3, [r7, #15]
  setMR(tmp);
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fe f969 	bl	8001ef8 <WIZCHIP_WRITE>
  
  return 0;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  return (netmode_type) getMR();
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7fe f913 	bl	8001e60 <WIZCHIP_READ>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  setRCR(nettime->retry_cnt);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003c52:	f7fe f951 	bl	8001ef8 <WIZCHIP_WRITE>
  setRTR(nettime->time_100us);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	885b      	ldrh	r3, [r3, #2]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003c66:	f7fe f947 	bl	8001ef8 <WIZCHIP_WRITE>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	885b      	ldrh	r3, [r3, #2]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003c76:	f7fe f93f 	bl	8001ef8 <WIZCHIP_WRITE>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003c82:	b590      	push	{r4, r7, lr}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  nettime->retry_cnt = getRCR();
 8003c8a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003c8e:	f7fe f8e7 	bl	8001e60 <WIZCHIP_READ>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	701a      	strb	r2, [r3, #0]
  nettime->time_100us = getRTR();
 8003c9a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003c9e:	f7fe f8df 	bl	8001e60 <WIZCHIP_READ>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	b29c      	uxth	r4, r3
 8003caa:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003cae:	f7fe f8d7 	bl	8001e60 <WIZCHIP_READ>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4423      	add	r3, r4
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	805a      	strh	r2, [r3, #2]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}
	...

08003cc8 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  setSIPR(DHCP_allocated_ip);
 8003ccc:	2204      	movs	r2, #4
 8003cce:	4909      	ldr	r1, [pc, #36]	; (8003cf4 <default_ip_assign+0x2c>)
 8003cd0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003cd4:	f7fe f9be 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSUBR(DHCP_allocated_sn);
 8003cd8:	2204      	movs	r2, #4
 8003cda:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <default_ip_assign+0x30>)
 8003cdc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003ce0:	f7fe f9b8 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setGAR (DHCP_allocated_gw);
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4905      	ldr	r1, [pc, #20]	; (8003cfc <default_ip_assign+0x34>)
 8003ce8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cec:	f7fe f9b2 	bl	8002054 <WIZCHIP_WRITE_BUF>
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000110 	.word	0x20000110
 8003cf8:	20000118 	.word	0x20000118
 8003cfc:	20000114 	.word	0x20000114

08003d00 <default_ip_update>:

/* The default handler of ip chaged */
void default_ip_update(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* WIZchip Software Reset */
  setMR(MR_RST);
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fe f8f6 	bl	8001ef8 <WIZCHIP_WRITE>
  getMR(); // for delay
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fe f8a7 	bl	8001e60 <WIZCHIP_READ>
  default_ip_assign();
 8003d12:	f7ff ffd9 	bl	8003cc8 <default_ip_assign>
  setSHAR(DHCP_CHADDR);
 8003d16:	2206      	movs	r2, #6
 8003d18:	4903      	ldr	r1, [pc, #12]	; (8003d28 <default_ip_update+0x28>)
 8003d1a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d1e:	f7fe f999 	bl	8002054 <WIZCHIP_WRITE_BUF>
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000013c 	.word	0x2000013c

08003d2c <default_ip_conflict>:

/* The default handler of ip chaged */
void default_ip_conflict(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  // WIZchip Software Reset
  setMR(MR_RST);
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	2000      	movs	r0, #0
 8003d34:	f7fe f8e0 	bl	8001ef8 <WIZCHIP_WRITE>
  getMR(); // for delay
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fe f891 	bl	8001e60 <WIZCHIP_READ>
  setSHAR(DHCP_CHADDR);
 8003d3e:	2206      	movs	r2, #6
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <default_ip_conflict+0x24>)
 8003d42:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d46:	f7fe f985 	bl	8002054 <WIZCHIP_WRITE_BUF>
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000013c 	.word	0x2000013c

08003d54 <makeDHCPMSG>:
    dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
  uint8_t  bk_mac[6];
  uint8_t* ptmp;
  uint8_t  i;
  getSHAR(bk_mac);
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	2206      	movs	r2, #6
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d64:	f7fe f916 	bl	8001f94 <WIZCHIP_READ_BUF>

  pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8003d68:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
  pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8003d70:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	705a      	strb	r2, [r3, #1]
  pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8003d78:	4b6e      	ldr	r3, [pc, #440]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2206      	movs	r2, #6
 8003d7e:	709a      	strb	r2, [r3, #2]
  pDHCPMSG->hops    = DHCP_HOPS;
 8003d80:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	70da      	strb	r2, [r3, #3]
  ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8003d88:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60bb      	str	r3, [r7, #8]
  *(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <makeDHCPMSG+0x1e4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0e1b      	lsrs	r3, r3, #24
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	701a      	strb	r2, [r3, #0]
  *(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <makeDHCPMSG+0x1e4>)
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	0c12      	lsrs	r2, r2, #16
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
  *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3302      	adds	r3, #2
 8003dae:	4a62      	ldr	r2, [pc, #392]	; (8003f38 <makeDHCPMSG+0x1e4>)
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	0a12      	lsrs	r2, r2, #8
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
  *(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	3303      	adds	r3, #3
 8003dbc:	4a5e      	ldr	r2, [pc, #376]	; (8003f38 <makeDHCPMSG+0x1e4>)
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
  pDHCPMSG->secs    = DHCP_SECS;
 8003dc4:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	811a      	strh	r2, [r3, #8]
  ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330a      	adds	r3, #10
 8003dd2:	60bb      	str	r3, [r7, #8]
  *(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	701a      	strb	r2, [r3, #0]
  *(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]

  pDHCPMSG->ciaddr[0] = 0;
 8003de2:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	731a      	strb	r2, [r3, #12]
  pDHCPMSG->ciaddr[1] = 0;
 8003dea:	4b52      	ldr	r3, [pc, #328]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	735a      	strb	r2, [r3, #13]
  pDHCPMSG->ciaddr[2] = 0;
 8003df2:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	739a      	strb	r2, [r3, #14]
  pDHCPMSG->ciaddr[3] = 0;
 8003dfa:	4b4e      	ldr	r3, [pc, #312]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	73da      	strb	r2, [r3, #15]

  pDHCPMSG->yiaddr[0] = 0;
 8003e02:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	741a      	strb	r2, [r3, #16]
  pDHCPMSG->yiaddr[1] = 0;
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	745a      	strb	r2, [r3, #17]
  pDHCPMSG->yiaddr[2] = 0;
 8003e12:	4b48      	ldr	r3, [pc, #288]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	749a      	strb	r2, [r3, #18]
  pDHCPMSG->yiaddr[3] = 0;
 8003e1a:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	74da      	strb	r2, [r3, #19]

  pDHCPMSG->siaddr[0] = 0;
 8003e22:	4b44      	ldr	r3, [pc, #272]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	751a      	strb	r2, [r3, #20]
  pDHCPMSG->siaddr[1] = 0;
 8003e2a:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	755a      	strb	r2, [r3, #21]
  pDHCPMSG->siaddr[2] = 0;
 8003e32:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	759a      	strb	r2, [r3, #22]
  pDHCPMSG->siaddr[3] = 0;
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	75da      	strb	r2, [r3, #23]

  pDHCPMSG->giaddr[0] = 0;
 8003e42:	4b3c      	ldr	r3, [pc, #240]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	761a      	strb	r2, [r3, #24]
  pDHCPMSG->giaddr[1] = 0;
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	765a      	strb	r2, [r3, #25]
  pDHCPMSG->giaddr[2] = 0;
 8003e52:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2200      	movs	r2, #0
 8003e58:	769a      	strb	r2, [r3, #26]
  pDHCPMSG->giaddr[3] = 0;
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	76da      	strb	r2, [r3, #27]

  pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a35      	ldr	r2, [pc, #212]	; (8003f3c <makeDHCPMSG+0x1e8>)
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	771a      	strb	r2, [r3, #28]
  pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <makeDHCPMSG+0x1e8>)
 8003e72:	7852      	ldrb	r2, [r2, #1]
 8003e74:	775a      	strb	r2, [r3, #29]
  pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <makeDHCPMSG+0x1e8>)
 8003e7c:	7892      	ldrb	r2, [r2, #2]
 8003e7e:	779a      	strb	r2, [r3, #30]
  pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8003e80:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2d      	ldr	r2, [pc, #180]	; (8003f3c <makeDHCPMSG+0x1e8>)
 8003e86:	78d2      	ldrb	r2, [r2, #3]
 8003e88:	77da      	strb	r2, [r3, #31]
  pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8003e8a:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <makeDHCPMSG+0x1e8>)
 8003e90:	7912      	ldrb	r2, [r2, #4]
 8003e92:	f883 2020 	strb.w	r2, [r3, #32]
  pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <makeDHCPMSG+0x1e8>)
 8003e9c:	7952      	ldrb	r2, [r2, #5]
 8003e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  for (i = 6; i < 16; i++)
 8003ea2:	2306      	movs	r3, #6
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	e008      	b.n	8003eba <makeDHCPMSG+0x166>
    pDHCPMSG->chaddr[i] = 0;
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	4413      	add	r3, r2
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	771a      	strb	r2, [r3, #28]
  for (i = 6; i < 16; i++)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b0f      	cmp	r3, #15
 8003ebe:	d9f3      	bls.n	8003ea8 <makeDHCPMSG+0x154>
  for (i = 0; i < 64; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e009      	b.n	8003eda <makeDHCPMSG+0x186>
    pDHCPMSG->sname[i]  = 0;
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	4413      	add	r3, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < 64; i++)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b3f      	cmp	r3, #63	; 0x3f
 8003ede:	d9f2      	bls.n	8003ec6 <makeDHCPMSG+0x172>
  for (i = 0; i < 128; i++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e009      	b.n	8003efa <makeDHCPMSG+0x1a6>
    pDHCPMSG->file[i]   = 0;
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	4413      	add	r3, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < 128; i++)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	daf1      	bge.n	8003ee6 <makeDHCPMSG+0x192>

  // MAGIC_COOKIE
  pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2263      	movs	r2, #99	; 0x63
 8003f08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2282      	movs	r2, #130	; 0x82
 8003f12:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
  pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2253      	movs	r2, #83	; 0x53
 8003f1c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
  pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <makeDHCPMSG+0x1e0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2263      	movs	r2, #99	; 0x63
 8003f26:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000014c 	.word	0x2000014c
 8003f38:	20000144 	.word	0x20000144
 8003f3c:	2000013c 	.word	0x2000013c

08003f40 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af02      	add	r7, sp, #8
  uint16_t i;
  uint8_t ip[4];
  uint16_t k = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	80bb      	strh	r3, [r7, #4]
   
  makeDHCPMSG();
 8003f4a:	f7ff ff03 	bl	8003d54 <makeDHCPMSG>

  k = 4;     // beacaue MAGIC_COOKIE already made by makeDHCPMSG()
 8003f4e:	2304      	movs	r3, #4
 8003f50:	80bb      	strh	r3, [r7, #4]
   
  // Option Request Param
  pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003f52:	4baa      	ldr	r3, [pc, #680]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	1c59      	adds	r1, r3, #1
 8003f5a:	80b9      	strh	r1, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	2235      	movs	r2, #53	; 0x35
 8003f60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x01;
 8003f64:	4ba5      	ldr	r3, [pc, #660]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	80b9      	strh	r1, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8003f76:	4ba1      	ldr	r3, [pc, #644]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	88bb      	ldrh	r3, [r7, #4]
 8003f7c:	1c59      	adds	r1, r3, #1
 8003f7e:	80b9      	strh	r1, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
  // Client identifier
  pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003f88:	4b9c      	ldr	r3, [pc, #624]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	88bb      	ldrh	r3, [r7, #4]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	80b9      	strh	r1, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	223d      	movs	r2, #61	; 0x3d
 8003f96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x07;
 8003f9a:	4b98      	ldr	r3, [pc, #608]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	88bb      	ldrh	r3, [r7, #4]
 8003fa0:	1c59      	adds	r1, r3, #1
 8003fa2:	80b9      	strh	r1, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	2207      	movs	r2, #7
 8003fa8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x01;
 8003fac:	4b93      	ldr	r3, [pc, #588]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	88bb      	ldrh	r3, [r7, #4]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	80b9      	strh	r1, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003fbe:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	88bb      	ldrh	r3, [r7, #4]
 8003fc4:	1c59      	adds	r1, r3, #1
 8003fc6:	80b9      	strh	r1, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	4b8d      	ldr	r3, [pc, #564]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 8003fcc:	7819      	ldrb	r1, [r3, #0]
 8003fce:	1813      	adds	r3, r2, r0
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003fd6:	4b89      	ldr	r3, [pc, #548]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	88bb      	ldrh	r3, [r7, #4]
 8003fdc:	1c59      	adds	r1, r3, #1
 8003fde:	80b9      	strh	r1, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	4b87      	ldr	r3, [pc, #540]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 8003fe4:	7859      	ldrb	r1, [r3, #1]
 8003fe6:	1813      	adds	r3, r2, r0
 8003fe8:	460a      	mov	r2, r1
 8003fea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003fee:	4b83      	ldr	r3, [pc, #524]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	88bb      	ldrh	r3, [r7, #4]
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	80b9      	strh	r1, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	4b81      	ldr	r3, [pc, #516]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 8003ffc:	7899      	ldrb	r1, [r3, #2]
 8003ffe:	1813      	adds	r3, r2, r0
 8004000:	460a      	mov	r2, r1
 8004002:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8004006:	4b7d      	ldr	r3, [pc, #500]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	88bb      	ldrh	r3, [r7, #4]
 800400c:	1c59      	adds	r1, r3, #1
 800400e:	80b9      	strh	r1, [r7, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 8004014:	78d9      	ldrb	r1, [r3, #3]
 8004016:	1813      	adds	r3, r2, r0
 8004018:	460a      	mov	r2, r1
 800401a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800401e:	4b77      	ldr	r3, [pc, #476]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	88bb      	ldrh	r3, [r7, #4]
 8004024:	1c59      	adds	r1, r3, #1
 8004026:	80b9      	strh	r1, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	4b75      	ldr	r3, [pc, #468]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 800402c:	7919      	ldrb	r1, [r3, #4]
 800402e:	1813      	adds	r3, r2, r0
 8004030:	460a      	mov	r2, r1
 8004032:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8004036:	4b71      	ldr	r3, [pc, #452]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	88bb      	ldrh	r3, [r7, #4]
 800403c:	1c59      	adds	r1, r3, #1
 800403e:	80b9      	strh	r1, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	4b6f      	ldr	r3, [pc, #444]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 8004044:	7959      	ldrb	r1, [r3, #5]
 8004046:	1813      	adds	r3, r2, r0
 8004048:	460a      	mov	r2, r1
 800404a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
  // host name
  pDHCPMSG->OPT[k++] = hostName;
 800404e:	4b6b      	ldr	r3, [pc, #428]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	88bb      	ldrh	r3, [r7, #4]
 8004054:	1c59      	adds	r1, r3, #1
 8004056:	80b9      	strh	r1, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	220c      	movs	r2, #12
 800405c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	88bb      	ldrh	r3, [r7, #4]
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	80b9      	strh	r1, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	2200      	movs	r2, #0
 800406e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  
  for(i = 0 ; HOST_NAME[i] != 0; i++)
 8004072:	2300      	movs	r3, #0
 8004074:	80fb      	strh	r3, [r7, #6]
 8004076:	e00f      	b.n	8004098 <send_DHCP_DISCOVER+0x158>
    pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8004078:	4b60      	ldr	r3, [pc, #384]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	88bb      	ldrh	r3, [r7, #4]
 800407e:	1c59      	adds	r1, r3, #1
 8004080:	80b9      	strh	r1, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	495f      	ldr	r1, [pc, #380]	; (8004204 <send_DHCP_DISCOVER+0x2c4>)
 8004088:	5cc9      	ldrb	r1, [r1, r3]
 800408a:	1813      	adds	r3, r2, r0
 800408c:	460a      	mov	r2, r1
 800408e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  for(i = 0 ; HOST_NAME[i] != 0; i++)
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	3301      	adds	r3, #1
 8004096:	80fb      	strh	r3, [r7, #6]
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	4a5a      	ldr	r2, [pc, #360]	; (8004204 <send_DHCP_DISCOVER+0x2c4>)
 800409c:	5cd3      	ldrb	r3, [r2, r3]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ea      	bne.n	8004078 <send_DHCP_DISCOVER+0x138>
  
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80040a2:	4b56      	ldr	r3, [pc, #344]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	88bb      	ldrh	r3, [r7, #4]
 80040a8:	1c59      	adds	r1, r3, #1
 80040aa:	80b9      	strh	r1, [r7, #4]
 80040ac:	4618      	mov	r0, r3
 80040ae:	4b54      	ldr	r3, [pc, #336]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 80040b0:	78d9      	ldrb	r1, [r3, #3]
 80040b2:	1813      	adds	r3, r2, r0
 80040b4:	460a      	mov	r2, r1
 80040b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80040ba:	4b50      	ldr	r3, [pc, #320]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	88bb      	ldrh	r3, [r7, #4]
 80040c0:	1c59      	adds	r1, r3, #1
 80040c2:	80b9      	strh	r1, [r7, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	4b4e      	ldr	r3, [pc, #312]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 80040c8:	7919      	ldrb	r1, [r3, #4]
 80040ca:	1813      	adds	r3, r2, r0
 80040cc:	460a      	mov	r2, r1
 80040ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	88bb      	ldrh	r3, [r7, #4]
 80040d8:	1c59      	adds	r1, r3, #1
 80040da:	80b9      	strh	r1, [r7, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	4b48      	ldr	r3, [pc, #288]	; (8004200 <send_DHCP_DISCOVER+0x2c0>)
 80040e0:	7959      	ldrb	r1, [r3, #5]
 80040e2:	1813      	adds	r3, r2, r0
 80040e4:	460a      	mov	r2, r1
 80040e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k - (i + 3 + 1)] = i + 3; // length of hostname
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	88b9      	ldrh	r1, [r7, #4]
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	3304      	adds	r3, #4
 80040f4:	1acb      	subs	r3, r1, r3
 80040f6:	88f9      	ldrh	r1, [r7, #6]
 80040f8:	b2c9      	uxtb	r1, r1
 80040fa:	3103      	adds	r1, #3
 80040fc:	b2c9      	uxtb	r1, r1
 80040fe:	4413      	add	r3, r2
 8004100:	460a      	mov	r2, r1
 8004102:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	88bb      	ldrh	r3, [r7, #4]
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	80b9      	strh	r1, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	2237      	movs	r2, #55	; 0x37
 8004114:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8004118:	4b38      	ldr	r3, [pc, #224]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	88bb      	ldrh	r3, [r7, #4]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	80b9      	strh	r1, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	2206      	movs	r2, #6
 8004126:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = subnetMask;
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	88bb      	ldrh	r3, [r7, #4]
 8004130:	1c59      	adds	r1, r3, #1
 8004132:	80b9      	strh	r1, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	2201      	movs	r2, #1
 8004138:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = routersOnSubnet;
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	88bb      	ldrh	r3, [r7, #4]
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	80b9      	strh	r1, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	2203      	movs	r2, #3
 800414a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = dns;
 800414e:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	88bb      	ldrh	r3, [r7, #4]
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	80b9      	strh	r1, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	2206      	movs	r2, #6
 800415c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = domainName;
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	88bb      	ldrh	r3, [r7, #4]
 8004166:	1c59      	adds	r1, r3, #1
 8004168:	80b9      	strh	r1, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	220f      	movs	r2, #15
 800416e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = dhcpT1value;
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	88bb      	ldrh	r3, [r7, #4]
 8004178:	1c59      	adds	r1, r3, #1
 800417a:	80b9      	strh	r1, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	223a      	movs	r2, #58	; 0x3a
 8004180:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = dhcpT2value;
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	88bb      	ldrh	r3, [r7, #4]
 800418a:	1c59      	adds	r1, r3, #1
 800418c:	80b9      	strh	r1, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	223b      	movs	r2, #59	; 0x3b
 8004192:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = endOption;
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	88bb      	ldrh	r3, [r7, #4]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	80b9      	strh	r1, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	22ff      	movs	r2, #255	; 0xff
 80041a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  for (i = k; i < OPT_SIZE; i++)
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	80fb      	strh	r3, [r7, #6]
 80041ac:	e009      	b.n	80041c2 <send_DHCP_DISCOVER+0x282>
    pDHCPMSG->OPT[i] = 0;
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	4413      	add	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  for (i = k; i < OPT_SIZE; i++)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	3301      	adds	r3, #1
 80041c0:	80fb      	strh	r3, [r7, #6]
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80041c8:	d3f1      	bcc.n	80041ae <send_DHCP_DISCOVER+0x26e>

  // send broadcasting packet
  ip[0] = 255;
 80041ca:	23ff      	movs	r3, #255	; 0xff
 80041cc:	703b      	strb	r3, [r7, #0]
  ip[1] = 255;
 80041ce:	23ff      	movs	r3, #255	; 0xff
 80041d0:	707b      	strb	r3, [r7, #1]
  ip[2] = 255;
 80041d2:	23ff      	movs	r3, #255	; 0xff
 80041d4:	70bb      	strb	r3, [r7, #2]
  ip[3] = 255;
 80041d6:	23ff      	movs	r3, #255	; 0xff
 80041d8:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
  printf("> Send DHCP_DISCOVER\r\n");
#endif

  sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <send_DHCP_DISCOVER+0x2c8>)
 80041dc:	7818      	ldrb	r0, [r3, #0]
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <send_DHCP_DISCOVER+0x2bc>)
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	463a      	mov	r2, r7
 80041e4:	2343      	movs	r3, #67	; 0x43
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	f44f 7209 	mov.w	r2, #548	; 0x224
 80041ee:	f7fe fda3 	bl	8002d38 <sendto>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2000014c 	.word	0x2000014c
 8004200:	2000013c 	.word	0x2000013c
 8004204:	20000038 	.word	0x20000038
 8004208:	20000150 	.word	0x20000150

0800420c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
  int32_t i;
  uint8_t ip[4];
  uint16_t k = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	817b      	strh	r3, [r7, #10]

  makeDHCPMSG();
 8004216:	f7ff fd9d 	bl	8003d54 <makeDHCPMSG>

  if (dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <send_DHCP_REQUEST+0x7c>)
 800421c:	f993 3000 	ldrsb.w	r3, [r3]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d004      	beq.n	800422e <send_DHCP_REQUEST+0x22>
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <send_DHCP_REQUEST+0x7c>)
 8004226:	f993 3000 	ldrsb.w	r3, [r3]
 800422a:	2b04      	cmp	r3, #4
 800422c:	d134      	bne.n	8004298 <send_DHCP_REQUEST+0x8c>
  {
    *((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <send_DHCP_REQUEST+0x80>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330a      	adds	r3, #10
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
    *((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <send_DHCP_REQUEST+0x80>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330a      	adds	r3, #10
 800423e:	3301      	adds	r3, #1
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
    pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <send_DHCP_REQUEST+0x80>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <send_DHCP_REQUEST+0x84>)
 800424a:	7812      	ldrb	r2, [r2, #0]
 800424c:	731a      	strb	r2, [r3, #12]
    pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <send_DHCP_REQUEST+0x80>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <send_DHCP_REQUEST+0x84>)
 8004254:	7852      	ldrb	r2, [r2, #1]
 8004256:	735a      	strb	r2, [r3, #13]
    pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <send_DHCP_REQUEST+0x80>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <send_DHCP_REQUEST+0x84>)
 800425e:	7892      	ldrb	r2, [r2, #2]
 8004260:	739a      	strb	r2, [r3, #14]
    pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <send_DHCP_REQUEST+0x80>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <send_DHCP_REQUEST+0x84>)
 8004268:	78d2      	ldrb	r2, [r2, #3]
 800426a:	73da      	strb	r2, [r3, #15]
    ip[0] = DHCP_SIP[0];
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <send_DHCP_REQUEST+0x88>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	713b      	strb	r3, [r7, #4]
    ip[1] = DHCP_SIP[1];
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <send_DHCP_REQUEST+0x88>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	717b      	strb	r3, [r7, #5]
    ip[2] = DHCP_SIP[2];
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <send_DHCP_REQUEST+0x88>)
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	71bb      	strb	r3, [r7, #6]
    ip[3] = DHCP_SIP[3];   	   	   	
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <send_DHCP_REQUEST+0x88>)
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	e010      	b.n	80042a8 <send_DHCP_REQUEST+0x9c>
 8004286:	bf00      	nop
 8004288:	20000120 	.word	0x20000120
 800428c:	2000014c 	.word	0x2000014c
 8004290:	20000110 	.word	0x20000110
 8004294:	20000148 	.word	0x20000148
  }
  else
  {
    ip[0] = 255;
 8004298:	23ff      	movs	r3, #255	; 0xff
 800429a:	713b      	strb	r3, [r7, #4]
    ip[1] = 255;
 800429c:	23ff      	movs	r3, #255	; 0xff
 800429e:	717b      	strb	r3, [r7, #5]
    ip[2] = 255;
 80042a0:	23ff      	movs	r3, #255	; 0xff
 80042a2:	71bb      	strb	r3, [r7, #6]
    ip[3] = 255;   	   	   	
 80042a4:	23ff      	movs	r3, #255	; 0xff
 80042a6:	71fb      	strb	r3, [r7, #7]
  }
   
  k = 4;      // beacaue MAGIC_COOKIE already made by makeDHCPMSG()
 80042a8:	2304      	movs	r3, #4
 80042aa:	817b      	strh	r3, [r7, #10]
	
  // Option Request Param.
  pDHCPMSG->OPT[k++] = dhcpMessageType;
 80042ac:	4b8d      	ldr	r3, [pc, #564]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	897b      	ldrh	r3, [r7, #10]
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	8179      	strh	r1, [r7, #10]
 80042b6:	4413      	add	r3, r2
 80042b8:	2235      	movs	r2, #53	; 0x35
 80042ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x01;
 80042be:	4b89      	ldr	r3, [pc, #548]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	8179      	strh	r1, [r7, #10]
 80042c8:	4413      	add	r3, r2
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80042d0:	4b84      	ldr	r3, [pc, #528]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	8179      	strh	r1, [r7, #10]
 80042da:	4413      	add	r3, r2
 80042dc:	2203      	movs	r2, #3
 80042de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80042e2:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	1c59      	adds	r1, r3, #1
 80042ea:	8179      	strh	r1, [r7, #10]
 80042ec:	4413      	add	r3, r2
 80042ee:	223d      	movs	r2, #61	; 0x3d
 80042f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x07;
 80042f4:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	897b      	ldrh	r3, [r7, #10]
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	8179      	strh	r1, [r7, #10]
 80042fe:	4413      	add	r3, r2
 8004300:	2207      	movs	r2, #7
 8004302:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x01;
 8004306:	4b77      	ldr	r3, [pc, #476]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	897b      	ldrh	r3, [r7, #10]
 800430c:	1c59      	adds	r1, r3, #1
 800430e:	8179      	strh	r1, [r7, #10]
 8004310:	4413      	add	r3, r2
 8004312:	2201      	movs	r2, #1
 8004314:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8004318:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	1c59      	adds	r1, r3, #1
 8004320:	8179      	strh	r1, [r7, #10]
 8004322:	4618      	mov	r0, r3
 8004324:	4b70      	ldr	r3, [pc, #448]	; (80044e8 <send_DHCP_REQUEST+0x2dc>)
 8004326:	7819      	ldrb	r1, [r3, #0]
 8004328:	1813      	adds	r3, r2, r0
 800432a:	460a      	mov	r2, r1
 800432c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8004330:	4b6c      	ldr	r3, [pc, #432]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	1c59      	adds	r1, r3, #1
 8004338:	8179      	strh	r1, [r7, #10]
 800433a:	4618      	mov	r0, r3
 800433c:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <send_DHCP_REQUEST+0x2dc>)
 800433e:	7859      	ldrb	r1, [r3, #1]
 8004340:	1813      	adds	r3, r2, r0
 8004342:	460a      	mov	r2, r1
 8004344:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8004348:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	897b      	ldrh	r3, [r7, #10]
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	8179      	strh	r1, [r7, #10]
 8004352:	4618      	mov	r0, r3
 8004354:	4b64      	ldr	r3, [pc, #400]	; (80044e8 <send_DHCP_REQUEST+0x2dc>)
 8004356:	7899      	ldrb	r1, [r3, #2]
 8004358:	1813      	adds	r3, r2, r0
 800435a:	460a      	mov	r2, r1
 800435c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8004360:	4b60      	ldr	r3, [pc, #384]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	897b      	ldrh	r3, [r7, #10]
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	8179      	strh	r1, [r7, #10]
 800436a:	4618      	mov	r0, r3
 800436c:	4b5e      	ldr	r3, [pc, #376]	; (80044e8 <send_DHCP_REQUEST+0x2dc>)
 800436e:	78d9      	ldrb	r1, [r3, #3]
 8004370:	1813      	adds	r3, r2, r0
 8004372:	460a      	mov	r2, r1
 8004374:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8004378:	4b5a      	ldr	r3, [pc, #360]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	897b      	ldrh	r3, [r7, #10]
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	8179      	strh	r1, [r7, #10]
 8004382:	4618      	mov	r0, r3
 8004384:	4b58      	ldr	r3, [pc, #352]	; (80044e8 <send_DHCP_REQUEST+0x2dc>)
 8004386:	7919      	ldrb	r1, [r3, #4]
 8004388:	1813      	adds	r3, r2, r0
 800438a:	460a      	mov	r2, r1
 800438c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8004390:	4b54      	ldr	r3, [pc, #336]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	8179      	strh	r1, [r7, #10]
 800439a:	4618      	mov	r0, r3
 800439c:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <send_DHCP_REQUEST+0x2dc>)
 800439e:	7959      	ldrb	r1, [r3, #5]
 80043a0:	1813      	adds	r3, r2, r0
 80043a2:	460a      	mov	r2, r1
 80043a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  if (ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	2bff      	cmp	r3, #255	; 0xff
 80043ac:	f040 8084 	bne.w	80044b8 <send_DHCP_REQUEST+0x2ac>
  {
    pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80043b0:	4b4c      	ldr	r3, [pc, #304]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	897b      	ldrh	r3, [r7, #10]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	8179      	strh	r1, [r7, #10]
 80043ba:	4413      	add	r3, r2
 80043bc:	2232      	movs	r2, #50	; 0x32
 80043be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = 0x04;
 80043c2:	4b48      	ldr	r3, [pc, #288]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	8179      	strh	r1, [r7, #10]
 80043cc:	4413      	add	r3, r2
 80043ce:	2204      	movs	r2, #4
 80043d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80043d4:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	897b      	ldrh	r3, [r7, #10]
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	8179      	strh	r1, [r7, #10]
 80043de:	4618      	mov	r0, r3
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <send_DHCP_REQUEST+0x2e0>)
 80043e2:	7819      	ldrb	r1, [r3, #0]
 80043e4:	1813      	adds	r3, r2, r0
 80043e6:	460a      	mov	r2, r1
 80043e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80043ec:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	1c59      	adds	r1, r3, #1
 80043f4:	8179      	strh	r1, [r7, #10]
 80043f6:	4618      	mov	r0, r3
 80043f8:	4b3c      	ldr	r3, [pc, #240]	; (80044ec <send_DHCP_REQUEST+0x2e0>)
 80043fa:	7859      	ldrb	r1, [r3, #1]
 80043fc:	1813      	adds	r3, r2, r0
 80043fe:	460a      	mov	r2, r1
 8004400:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8004404:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	8179      	strh	r1, [r7, #10]
 800440e:	4618      	mov	r0, r3
 8004410:	4b36      	ldr	r3, [pc, #216]	; (80044ec <send_DHCP_REQUEST+0x2e0>)
 8004412:	7899      	ldrb	r1, [r3, #2]
 8004414:	1813      	adds	r3, r2, r0
 8004416:	460a      	mov	r2, r1
 8004418:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800441c:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	897b      	ldrh	r3, [r7, #10]
 8004422:	1c59      	adds	r1, r3, #1
 8004424:	8179      	strh	r1, [r7, #10]
 8004426:	4618      	mov	r0, r3
 8004428:	4b30      	ldr	r3, [pc, #192]	; (80044ec <send_DHCP_REQUEST+0x2e0>)
 800442a:	78d9      	ldrb	r1, [r3, #3]
 800442c:	1813      	adds	r3, r2, r0
 800442e:	460a      	mov	r2, r1
 8004430:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

    pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	897b      	ldrh	r3, [r7, #10]
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	8179      	strh	r1, [r7, #10]
 800443e:	4413      	add	r3, r2
 8004440:	2236      	movs	r2, #54	; 0x36
 8004442:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = 0x04;
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	1c59      	adds	r1, r3, #1
 800444e:	8179      	strh	r1, [r7, #10]
 8004450:	4413      	add	r3, r2
 8004452:	2204      	movs	r2, #4
 8004454:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	8179      	strh	r1, [r7, #10]
 8004462:	4618      	mov	r0, r3
 8004464:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <send_DHCP_REQUEST+0x2e4>)
 8004466:	7819      	ldrb	r1, [r3, #0]
 8004468:	1813      	adds	r3, r2, r0
 800446a:	460a      	mov	r2, r1
 800446c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8004470:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	897b      	ldrh	r3, [r7, #10]
 8004476:	1c59      	adds	r1, r3, #1
 8004478:	8179      	strh	r1, [r7, #10]
 800447a:	4618      	mov	r0, r3
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <send_DHCP_REQUEST+0x2e4>)
 800447e:	7859      	ldrb	r1, [r3, #1]
 8004480:	1813      	adds	r3, r2, r0
 8004482:	460a      	mov	r2, r1
 8004484:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	1c59      	adds	r1, r3, #1
 8004490:	8179      	strh	r1, [r7, #10]
 8004492:	4618      	mov	r0, r3
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <send_DHCP_REQUEST+0x2e4>)
 8004496:	7899      	ldrb	r1, [r3, #2]
 8004498:	1813      	adds	r3, r2, r0
 800449a:	460a      	mov	r2, r1
 800449c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	897b      	ldrh	r3, [r7, #10]
 80044a6:	1c59      	adds	r1, r3, #1
 80044a8:	8179      	strh	r1, [r7, #10]
 80044aa:	4618      	mov	r0, r3
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <send_DHCP_REQUEST+0x2e4>)
 80044ae:	78d9      	ldrb	r1, [r3, #3]
 80044b0:	1813      	adds	r3, r2, r0
 80044b2:	460a      	mov	r2, r1
 80044b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  }

  // host name
  pDHCPMSG->OPT[k++] = hostName;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	8179      	strh	r1, [r7, #10]
 80044c2:	4413      	add	r3, r2
 80044c4:	220c      	movs	r2, #12
 80044c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0; // length of hostname
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <send_DHCP_REQUEST+0x2d8>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	897b      	ldrh	r3, [r7, #10]
 80044d0:	1c59      	adds	r1, r3, #1
 80044d2:	8179      	strh	r1, [r7, #10]
 80044d4:	4413      	add	r3, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  for (i = 0 ; HOST_NAME[i] != 0; i++)
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e019      	b.n	8004516 <send_DHCP_REQUEST+0x30a>
 80044e2:	bf00      	nop
 80044e4:	2000014c 	.word	0x2000014c
 80044e8:	2000013c 	.word	0x2000013c
 80044ec:	20000110 	.word	0x20000110
 80044f0:	20000148 	.word	0x20000148
    pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80044f4:	4b66      	ldr	r3, [pc, #408]	; (8004690 <send_DHCP_REQUEST+0x484>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	897b      	ldrh	r3, [r7, #10]
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	8179      	strh	r1, [r7, #10]
 80044fe:	4618      	mov	r0, r3
 8004500:	4964      	ldr	r1, [pc, #400]	; (8004694 <send_DHCP_REQUEST+0x488>)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	440b      	add	r3, r1
 8004506:	7819      	ldrb	r1, [r3, #0]
 8004508:	1813      	adds	r3, r2, r0
 800450a:	460a      	mov	r2, r1
 800450c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  for (i = 0 ; HOST_NAME[i] != 0; i++)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	4a5f      	ldr	r2, [pc, #380]	; (8004694 <send_DHCP_REQUEST+0x488>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e8      	bne.n	80044f4 <send_DHCP_REQUEST+0x2e8>
	
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8004522:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	8179      	strh	r1, [r7, #10]
 800452c:	4618      	mov	r0, r3
 800452e:	4b5a      	ldr	r3, [pc, #360]	; (8004698 <send_DHCP_REQUEST+0x48c>)
 8004530:	78d9      	ldrb	r1, [r3, #3]
 8004532:	1813      	adds	r3, r2, r0
 8004534:	460a      	mov	r2, r1
 8004536:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800453a:	4b55      	ldr	r3, [pc, #340]	; (8004690 <send_DHCP_REQUEST+0x484>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	897b      	ldrh	r3, [r7, #10]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	8179      	strh	r1, [r7, #10]
 8004544:	4618      	mov	r0, r3
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <send_DHCP_REQUEST+0x48c>)
 8004548:	7919      	ldrb	r1, [r3, #4]
 800454a:	1813      	adds	r3, r2, r0
 800454c:	460a      	mov	r2, r1
 800454e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8004552:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	8179      	strh	r1, [r7, #10]
 800455c:	4618      	mov	r0, r3
 800455e:	4b4e      	ldr	r3, [pc, #312]	; (8004698 <send_DHCP_REQUEST+0x48c>)
 8004560:	7959      	ldrb	r1, [r3, #5]
 8004562:	1813      	adds	r3, r2, r0
 8004564:	460a      	mov	r2, r1
 8004566:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 800456a:	4b49      	ldr	r3, [pc, #292]	; (8004690 <send_DHCP_REQUEST+0x484>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3304      	adds	r3, #4
 8004574:	1acb      	subs	r3, r1, r3
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	b2c9      	uxtb	r1, r1
 800457a:	3103      	adds	r1, #3
 800457c:	b2c9      	uxtb	r1, r1
 800457e:	4413      	add	r3, r2
 8004580:	460a      	mov	r2, r1
 8004582:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
  pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8004586:	4b42      	ldr	r3, [pc, #264]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	1c59      	adds	r1, r3, #1
 800458e:	8179      	strh	r1, [r7, #10]
 8004590:	4413      	add	r3, r2
 8004592:	2237      	movs	r2, #55	; 0x37
 8004594:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x08;
 8004598:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <send_DHCP_REQUEST+0x484>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	897b      	ldrh	r3, [r7, #10]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	8179      	strh	r1, [r7, #10]
 80045a2:	4413      	add	r3, r2
 80045a4:	2208      	movs	r2, #8
 80045a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = subnetMask;
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <send_DHCP_REQUEST+0x484>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	8179      	strh	r1, [r7, #10]
 80045b4:	4413      	add	r3, r2
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = routersOnSubnet;
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <send_DHCP_REQUEST+0x484>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	897b      	ldrh	r3, [r7, #10]
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	8179      	strh	r1, [r7, #10]
 80045c6:	4413      	add	r3, r2
 80045c8:	2203      	movs	r2, #3
 80045ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = dns;
 80045ce:	4b30      	ldr	r3, [pc, #192]	; (8004690 <send_DHCP_REQUEST+0x484>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	897b      	ldrh	r3, [r7, #10]
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	8179      	strh	r1, [r7, #10]
 80045d8:	4413      	add	r3, r2
 80045da:	2206      	movs	r2, #6
 80045dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = domainName;
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <send_DHCP_REQUEST+0x484>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	897b      	ldrh	r3, [r7, #10]
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	8179      	strh	r1, [r7, #10]
 80045ea:	4413      	add	r3, r2
 80045ec:	220f      	movs	r2, #15
 80045ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = dhcpT1value;
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <send_DHCP_REQUEST+0x484>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	8179      	strh	r1, [r7, #10]
 80045fc:	4413      	add	r3, r2
 80045fe:	223a      	movs	r2, #58	; 0x3a
 8004600:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = dhcpT2value;
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	897b      	ldrh	r3, [r7, #10]
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	8179      	strh	r1, [r7, #10]
 800460e:	4413      	add	r3, r2
 8004610:	223b      	movs	r2, #59	; 0x3b
 8004612:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	8179      	strh	r1, [r7, #10]
 8004620:	4413      	add	r3, r2
 8004622:	221f      	movs	r2, #31
 8004624:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = staticRoute;
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <send_DHCP_REQUEST+0x484>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	897b      	ldrh	r3, [r7, #10]
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	8179      	strh	r1, [r7, #10]
 8004632:	4413      	add	r3, r2
 8004634:	2221      	movs	r2, #33	; 0x21
 8004636:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = endOption;
 800463a:	4b15      	ldr	r3, [pc, #84]	; (8004690 <send_DHCP_REQUEST+0x484>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	8179      	strh	r1, [r7, #10]
 8004644:	4413      	add	r3, r2
 8004646:	22ff      	movs	r2, #255	; 0xff
 8004648:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  for (i = k; i < OPT_SIZE; i++)
 800464c:	897b      	ldrh	r3, [r7, #10]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e009      	b.n	8004666 <send_DHCP_REQUEST+0x45a>
    pDHCPMSG->OPT[i] = 0;
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	33ec      	adds	r3, #236	; 0xec
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
  for (i = k; i < OPT_SIZE; i++)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800466c:	dbf1      	blt.n	8004652 <send_DHCP_REQUEST+0x446>

#ifdef _DHCP_DEBUG_
  printf("> Send DHCP_REQUEST\r\n");
#endif
	
  sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <send_DHCP_REQUEST+0x490>)
 8004670:	7818      	ldrb	r0, [r3, #0]
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <send_DHCP_REQUEST+0x484>)
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	1d3a      	adds	r2, r7, #4
 8004678:	2343      	movs	r3, #67	; 0x43
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8004682:	f7fe fb59 	bl	8002d38 <sendto>
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	2000014c 	.word	0x2000014c
 8004694:	20000038 	.word	0x20000038
 8004698:	2000013c 	.word	0x2000013c
 800469c:	20000150 	.word	0x20000150

080046a0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
  int32_t i;
  uint8_t ip[4];
  uint16_t k = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	817b      	strh	r3, [r7, #10]
	
  makeDHCPMSG();
 80046aa:	f7ff fb53 	bl	8003d54 <makeDHCPMSG>

  k = 4;      // beacaue MAGIC_COOKIE already made by makeDHCPMSG()
 80046ae:	2304      	movs	r3, #4
 80046b0:	817b      	strh	r3, [r7, #10]
   
  *((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80046b2:	4b9f      	ldr	r3, [pc, #636]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330a      	adds	r3, #10
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
  *((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80046bc:	4b9c      	ldr	r3, [pc, #624]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330a      	adds	r3, #10
 80046c2:	3301      	adds	r3, #1
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]

  // Option Request Param.
  pDHCPMSG->OPT[k++] = dhcpMessageType;
 80046c8:	4b99      	ldr	r3, [pc, #612]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	1c59      	adds	r1, r3, #1
 80046d0:	8179      	strh	r1, [r7, #10]
 80046d2:	4413      	add	r3, r2
 80046d4:	2235      	movs	r2, #53	; 0x35
 80046d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x01;
 80046da:	4b95      	ldr	r3, [pc, #596]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	8179      	strh	r1, [r7, #10]
 80046e4:	4413      	add	r3, r2
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80046ec:	4b90      	ldr	r3, [pc, #576]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	897b      	ldrh	r3, [r7, #10]
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	8179      	strh	r1, [r7, #10]
 80046f6:	4413      	add	r3, r2
 80046f8:	2204      	movs	r2, #4
 80046fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80046fe:	4b8c      	ldr	r3, [pc, #560]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	8179      	strh	r1, [r7, #10]
 8004708:	4413      	add	r3, r2
 800470a:	223d      	movs	r2, #61	; 0x3d
 800470c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x07;
 8004710:	4b87      	ldr	r3, [pc, #540]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	897b      	ldrh	r3, [r7, #10]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	8179      	strh	r1, [r7, #10]
 800471a:	4413      	add	r3, r2
 800471c:	2207      	movs	r2, #7
 800471e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x01;
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	1c59      	adds	r1, r3, #1
 800472a:	8179      	strh	r1, [r7, #10]
 800472c:	4413      	add	r3, r2
 800472e:	2201      	movs	r2, #1
 8004730:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8004734:	4b7e      	ldr	r3, [pc, #504]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	8179      	strh	r1, [r7, #10]
 800473e:	4618      	mov	r0, r3
 8004740:	4b7c      	ldr	r3, [pc, #496]	; (8004934 <send_DHCP_DECLINE+0x294>)
 8004742:	7819      	ldrb	r1, [r3, #0]
 8004744:	1813      	adds	r3, r2, r0
 8004746:	460a      	mov	r2, r1
 8004748:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800474c:	4b78      	ldr	r3, [pc, #480]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	897b      	ldrh	r3, [r7, #10]
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	8179      	strh	r1, [r7, #10]
 8004756:	4618      	mov	r0, r3
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <send_DHCP_DECLINE+0x294>)
 800475a:	7859      	ldrb	r1, [r3, #1]
 800475c:	1813      	adds	r3, r2, r0
 800475e:	460a      	mov	r2, r1
 8004760:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8004764:	4b72      	ldr	r3, [pc, #456]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	1c59      	adds	r1, r3, #1
 800476c:	8179      	strh	r1, [r7, #10]
 800476e:	4618      	mov	r0, r3
 8004770:	4b70      	ldr	r3, [pc, #448]	; (8004934 <send_DHCP_DECLINE+0x294>)
 8004772:	7899      	ldrb	r1, [r3, #2]
 8004774:	1813      	adds	r3, r2, r0
 8004776:	460a      	mov	r2, r1
 8004778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800477c:	4b6c      	ldr	r3, [pc, #432]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	1c59      	adds	r1, r3, #1
 8004784:	8179      	strh	r1, [r7, #10]
 8004786:	4618      	mov	r0, r3
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <send_DHCP_DECLINE+0x294>)
 800478a:	78d9      	ldrb	r1, [r3, #3]
 800478c:	1813      	adds	r3, r2, r0
 800478e:	460a      	mov	r2, r1
 8004790:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8004794:	4b66      	ldr	r3, [pc, #408]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	897b      	ldrh	r3, [r7, #10]
 800479a:	1c59      	adds	r1, r3, #1
 800479c:	8179      	strh	r1, [r7, #10]
 800479e:	4618      	mov	r0, r3
 80047a0:	4b64      	ldr	r3, [pc, #400]	; (8004934 <send_DHCP_DECLINE+0x294>)
 80047a2:	7919      	ldrb	r1, [r3, #4]
 80047a4:	1813      	adds	r3, r2, r0
 80047a6:	460a      	mov	r2, r1
 80047a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80047ac:	4b60      	ldr	r3, [pc, #384]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	897b      	ldrh	r3, [r7, #10]
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	8179      	strh	r1, [r7, #10]
 80047b6:	4618      	mov	r0, r3
 80047b8:	4b5e      	ldr	r3, [pc, #376]	; (8004934 <send_DHCP_DECLINE+0x294>)
 80047ba:	7959      	ldrb	r1, [r3, #5]
 80047bc:	1813      	adds	r3, r2, r0
 80047be:	460a      	mov	r2, r1
 80047c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80047c4:	4b5a      	ldr	r3, [pc, #360]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	897b      	ldrh	r3, [r7, #10]
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	8179      	strh	r1, [r7, #10]
 80047ce:	4413      	add	r3, r2
 80047d0:	2232      	movs	r2, #50	; 0x32
 80047d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x04;
 80047d6:	4b56      	ldr	r3, [pc, #344]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	1c59      	adds	r1, r3, #1
 80047de:	8179      	strh	r1, [r7, #10]
 80047e0:	4413      	add	r3, r2
 80047e2:	2204      	movs	r2, #4
 80047e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80047e8:	4b51      	ldr	r3, [pc, #324]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	897b      	ldrh	r3, [r7, #10]
 80047ee:	1c59      	adds	r1, r3, #1
 80047f0:	8179      	strh	r1, [r7, #10]
 80047f2:	4618      	mov	r0, r3
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <send_DHCP_DECLINE+0x298>)
 80047f6:	7819      	ldrb	r1, [r3, #0]
 80047f8:	1813      	adds	r3, r2, r0
 80047fa:	460a      	mov	r2, r1
 80047fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8004800:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	8179      	strh	r1, [r7, #10]
 800480a:	4618      	mov	r0, r3
 800480c:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <send_DHCP_DECLINE+0x298>)
 800480e:	7859      	ldrb	r1, [r3, #1]
 8004810:	1813      	adds	r3, r2, r0
 8004812:	460a      	mov	r2, r1
 8004814:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8004818:	4b45      	ldr	r3, [pc, #276]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	8179      	strh	r1, [r7, #10]
 8004822:	4618      	mov	r0, r3
 8004824:	4b44      	ldr	r3, [pc, #272]	; (8004938 <send_DHCP_DECLINE+0x298>)
 8004826:	7899      	ldrb	r1, [r3, #2]
 8004828:	1813      	adds	r3, r2, r0
 800482a:	460a      	mov	r2, r1
 800482c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8004830:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	897b      	ldrh	r3, [r7, #10]
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	8179      	strh	r1, [r7, #10]
 800483a:	4618      	mov	r0, r3
 800483c:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <send_DHCP_DECLINE+0x298>)
 800483e:	78d9      	ldrb	r1, [r3, #3]
 8004840:	1813      	adds	r3, r2, r0
 8004842:	460a      	mov	r2, r1
 8004844:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8004848:	4b39      	ldr	r3, [pc, #228]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	897b      	ldrh	r3, [r7, #10]
 800484e:	1c59      	adds	r1, r3, #1
 8004850:	8179      	strh	r1, [r7, #10]
 8004852:	4413      	add	r3, r2
 8004854:	2236      	movs	r2, #54	; 0x36
 8004856:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = 0x04;
 800485a:	4b35      	ldr	r3, [pc, #212]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	1c59      	adds	r1, r3, #1
 8004862:	8179      	strh	r1, [r7, #10]
 8004864:	4413      	add	r3, r2
 8004866:	2204      	movs	r2, #4
 8004868:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	897b      	ldrh	r3, [r7, #10]
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	8179      	strh	r1, [r7, #10]
 8004876:	4618      	mov	r0, r3
 8004878:	4b30      	ldr	r3, [pc, #192]	; (800493c <send_DHCP_DECLINE+0x29c>)
 800487a:	7819      	ldrb	r1, [r3, #0]
 800487c:	1813      	adds	r3, r2, r0
 800487e:	460a      	mov	r2, r1
 8004880:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	897b      	ldrh	r3, [r7, #10]
 800488a:	1c59      	adds	r1, r3, #1
 800488c:	8179      	strh	r1, [r7, #10]
 800488e:	4618      	mov	r0, r3
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <send_DHCP_DECLINE+0x29c>)
 8004892:	7859      	ldrb	r1, [r3, #1]
 8004894:	1813      	adds	r3, r2, r0
 8004896:	460a      	mov	r2, r1
 8004898:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <send_DHCP_DECLINE+0x290>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	897b      	ldrh	r3, [r7, #10]
 80048a2:	1c59      	adds	r1, r3, #1
 80048a4:	8179      	strh	r1, [r7, #10]
 80048a6:	4618      	mov	r0, r3
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <send_DHCP_DECLINE+0x29c>)
 80048aa:	7899      	ldrb	r1, [r3, #2]
 80048ac:	1813      	adds	r3, r2, r0
 80048ae:	460a      	mov	r2, r1
 80048b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	8179      	strh	r1, [r7, #10]
 80048be:	4618      	mov	r0, r3
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <send_DHCP_DECLINE+0x29c>)
 80048c2:	78d9      	ldrb	r1, [r3, #3]
 80048c4:	1813      	adds	r3, r2, r0
 80048c6:	460a      	mov	r2, r1
 80048c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  pDHCPMSG->OPT[k++] = endOption;
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	897b      	ldrh	r3, [r7, #10]
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	8179      	strh	r1, [r7, #10]
 80048d6:	4413      	add	r3, r2
 80048d8:	22ff      	movs	r2, #255	; 0xff
 80048da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

  for (i = k; i < OPT_SIZE; i++)
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e009      	b.n	80048f8 <send_DHCP_DECLINE+0x258>
    pDHCPMSG->OPT[i] = 0;
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <send_DHCP_DECLINE+0x290>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	33ec      	adds	r3, #236	; 0xec
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
  for (i = k; i < OPT_SIZE; i++)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80048fe:	dbf1      	blt.n	80048e4 <send_DHCP_DECLINE+0x244>

  //send broadcasting packet
  ip[0] = 0xFF;
 8004900:	23ff      	movs	r3, #255	; 0xff
 8004902:	713b      	strb	r3, [r7, #4]
  ip[1] = 0xFF;
 8004904:	23ff      	movs	r3, #255	; 0xff
 8004906:	717b      	strb	r3, [r7, #5]
  ip[2] = 0xFF;
 8004908:	23ff      	movs	r3, #255	; 0xff
 800490a:	71bb      	strb	r3, [r7, #6]
  ip[3] = 0xFF;
 800490c:	23ff      	movs	r3, #255	; 0xff
 800490e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
  printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

  sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <send_DHCP_DECLINE+0x2a0>)
 8004912:	7818      	ldrb	r0, [r3, #0]
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <send_DHCP_DECLINE+0x290>)
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	1d3a      	adds	r2, r7, #4
 800491a:	2343      	movs	r3, #67	; 0x43
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	f44f 7209 	mov.w	r2, #548	; 0x224
 8004924:	f7fe fa08 	bl	8002d38 <sendto>
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	2000014c 	.word	0x2000014c
 8004934:	2000013c 	.word	0x2000013c
 8004938:	20000110 	.word	0x20000110
 800493c:	20000148 	.word	0x20000148
 8004940:	20000150 	.word	0x20000150

08004944 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af02      	add	r7, sp, #8
  uint8_t * p;
  uint8_t * e;
  uint8_t type;
  uint8_t opt_len;
   
  if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800494a:	4b90      	ldr	r3, [pc, #576]	; (8004b8c <parseDHCPMSG+0x248>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd fc2b 	bl	80021aa <getSn_RX_RSR>
 8004954:	4603      	mov	r3, r0
 8004956:	823b      	strh	r3, [r7, #16]
 8004958:	8a3b      	ldrh	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d011      	beq.n	8004982 <parseDHCPMSG+0x3e>
  {
    len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800495e:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <parseDHCPMSG+0x248>)
 8004960:	7818      	ldrb	r0, [r3, #0]
 8004962:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <parseDHCPMSG+0x24c>)
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	1d3c      	adds	r4, r7, #4
 8004968:	8a3a      	ldrh	r2, [r7, #16]
 800496a:	1cbb      	adds	r3, r7, #2
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4623      	mov	r3, r4
 8004970:	f7fe fafe 	bl	8002f70 <recvfrom>
 8004974:	4603      	mov	r3, r0
 8004976:	823b      	strh	r3, [r7, #16]
#endif   
  }
  else
    return 0;

  if (svr_port == DHCP_SERVER_PORT) 
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	2b43      	cmp	r3, #67	; 0x43
 800497c:	f040 8147 	bne.w	8004c0e <parseDHCPMSG+0x2ca>
 8004980:	e001      	b.n	8004986 <parseDHCPMSG+0x42>
    return 0;
 8004982:	2300      	movs	r3, #0
 8004984:	e145      	b.n	8004c12 <parseDHCPMSG+0x2ce>
  {
    // compare mac address
    if ((pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8004986:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <parseDHCPMSG+0x24c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	7f1a      	ldrb	r2, [r3, #28]
 800498c:	4b81      	ldr	r3, [pc, #516]	; (8004b94 <parseDHCPMSG+0x250>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d124      	bne.n	80049de <parseDHCPMSG+0x9a>
 8004994:	4b7e      	ldr	r3, [pc, #504]	; (8004b90 <parseDHCPMSG+0x24c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	7f5a      	ldrb	r2, [r3, #29]
 800499a:	4b7e      	ldr	r3, [pc, #504]	; (8004b94 <parseDHCPMSG+0x250>)
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d11d      	bne.n	80049de <parseDHCPMSG+0x9a>
        (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80049a2:	4b7b      	ldr	r3, [pc, #492]	; (8004b90 <parseDHCPMSG+0x24c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	7f9a      	ldrb	r2, [r3, #30]
 80049a8:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <parseDHCPMSG+0x250>)
 80049aa:	789b      	ldrb	r3, [r3, #2]
    if ((pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d116      	bne.n	80049de <parseDHCPMSG+0x9a>
        (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80049b0:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <parseDHCPMSG+0x24c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	7fda      	ldrb	r2, [r3, #31]
 80049b6:	4b77      	ldr	r3, [pc, #476]	; (8004b94 <parseDHCPMSG+0x250>)
 80049b8:	78db      	ldrb	r3, [r3, #3]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d10f      	bne.n	80049de <parseDHCPMSG+0x9a>
	(pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80049be:	4b74      	ldr	r3, [pc, #464]	; (8004b90 <parseDHCPMSG+0x24c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80049c6:	4b73      	ldr	r3, [pc, #460]	; (8004b94 <parseDHCPMSG+0x250>)
 80049c8:	791b      	ldrb	r3, [r3, #4]
        (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d107      	bne.n	80049de <parseDHCPMSG+0x9a>
	(pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80049ce:	4b70      	ldr	r3, [pc, #448]	; (8004b90 <parseDHCPMSG+0x24c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <parseDHCPMSG+0x250>)
 80049d8:	795b      	ldrb	r3, [r3, #5]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d001      	beq.n	80049e2 <parseDHCPMSG+0x9e>
      return 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	e117      	b.n	8004c12 <parseDHCPMSG+0x2ce>
      
    type = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	74fb      	strb	r3, [r7, #19]
    p = (uint8_t *)(&pDHCPMSG->op);
 80049e6:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <parseDHCPMSG+0x24c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	617b      	str	r3, [r7, #20]
    p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	33f0      	adds	r3, #240	; 0xf0
 80049f0:	617b      	str	r3, [r7, #20]
    e = p + (len - 240);
 80049f2:	8a3b      	ldrh	r3, [r7, #16]
 80049f4:	3bf0      	subs	r3, #240	; 0xf0
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

    while (p < e)
 80049fc:	e102      	b.n	8004c04 <parseDHCPMSG+0x2c0>
    {
      switch (*p)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d06e      	beq.n	8004ae4 <parseDHCPMSG+0x1a0>
 8004a06:	2b06      	cmp	r3, #6
 8004a08:	dc06      	bgt.n	8004a18 <parseDHCPMSG+0xd4>
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d025      	beq.n	8004a5a <parseDHCPMSG+0x116>
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d042      	beq.n	8004a98 <parseDHCPMSG+0x154>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d011      	beq.n	8004a3a <parseDHCPMSG+0xf6>
 8004a16:	e0e8      	b.n	8004bea <parseDHCPMSG+0x2a6>
 8004a18:	2b35      	cmp	r3, #53	; 0x35
 8004a1a:	d012      	beq.n	8004a42 <parseDHCPMSG+0xfe>
 8004a1c:	2b35      	cmp	r3, #53	; 0x35
 8004a1e:	dc03      	bgt.n	8004a28 <parseDHCPMSG+0xe4>
 8004a20:	2b33      	cmp	r3, #51	; 0x33
 8004a22:	f000 8085 	beq.w	8004b30 <parseDHCPMSG+0x1ec>
 8004a26:	e0e0      	b.n	8004bea <parseDHCPMSG+0x2a6>
 8004a28:	2b36      	cmp	r3, #54	; 0x36
 8004a2a:	f000 80bd 	beq.w	8004ba8 <parseDHCPMSG+0x264>
 8004a2e:	2bff      	cmp	r3, #255	; 0xff
 8004a30:	f040 80db 	bne.w	8004bea <parseDHCPMSG+0x2a6>
      {
	case endOption:
          p = e;   // for break while(p < e)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	617b      	str	r3, [r7, #20]
          break;
 8004a38:	e0e4      	b.n	8004c04 <parseDHCPMSG+0x2c0>
        case padOption:
          p++;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
          break;
 8004a40:	e0e0      	b.n	8004c04 <parseDHCPMSG+0x2c0>
   	case dhcpMessageType:
          p++;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
          p++;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
          type = *p++;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	617a      	str	r2, [r7, #20]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	74fb      	strb	r3, [r7, #19]
          break;
 8004a58:	e0d4      	b.n	8004c04 <parseDHCPMSG+0x2c0>
   	case subnetMask:
          p++;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
          p++;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3301      	adds	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
          DHCP_allocated_sn[0] = *p++;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	617a      	str	r2, [r7, #20]
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <parseDHCPMSG+0x254>)
 8004a70:	701a      	strb	r2, [r3, #0]
          DHCP_allocated_sn[1] = *p++;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	617a      	str	r2, [r7, #20]
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <parseDHCPMSG+0x254>)
 8004a7c:	705a      	strb	r2, [r3, #1]
          DHCP_allocated_sn[2] = *p++;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	617a      	str	r2, [r7, #20]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	4b44      	ldr	r3, [pc, #272]	; (8004b98 <parseDHCPMSG+0x254>)
 8004a88:	709a      	strb	r2, [r3, #2]
          DHCP_allocated_sn[3] = *p++;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	617a      	str	r2, [r7, #20]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <parseDHCPMSG+0x254>)
 8004a94:	70da      	strb	r2, [r3, #3]
          break;
 8004a96:	e0b5      	b.n	8004c04 <parseDHCPMSG+0x2c0>
   	case routersOnSubnet:
          p++;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
          opt_len = *p++;       
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	617a      	str	r2, [r7, #20]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	72fb      	strb	r3, [r7, #11]
          DHCP_allocated_gw[0] = *p++;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	617a      	str	r2, [r7, #20]
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	4b3a      	ldr	r3, [pc, #232]	; (8004b9c <parseDHCPMSG+0x258>)
 8004ab2:	701a      	strb	r2, [r3, #0]
          DHCP_allocated_gw[1] = *p++;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	617a      	str	r2, [r7, #20]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <parseDHCPMSG+0x258>)
 8004abe:	705a      	strb	r2, [r3, #1]
          DHCP_allocated_gw[2] = *p++;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	617a      	str	r2, [r7, #20]
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <parseDHCPMSG+0x258>)
 8004aca:	709a      	strb	r2, [r3, #2]
          DHCP_allocated_gw[3] = *p++;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	617a      	str	r2, [r7, #20]
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <parseDHCPMSG+0x258>)
 8004ad6:	70da      	strb	r2, [r3, #3]
          p = p + (opt_len - 4);
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	3b04      	subs	r3, #4
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4413      	add	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
          break;
 8004ae2:	e08f      	b.n	8004c04 <parseDHCPMSG+0x2c0>
   	case dns:
          p++;                  
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
          opt_len = *p++;       
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	617a      	str	r2, [r7, #20]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	72fb      	strb	r3, [r7, #11]
          DHCP_allocated_dns[0] = *p++;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	617a      	str	r2, [r7, #20]
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <parseDHCPMSG+0x25c>)
 8004afe:	701a      	strb	r2, [r3, #0]
          DHCP_allocated_dns[1] = *p++;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	617a      	str	r2, [r7, #20]
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <parseDHCPMSG+0x25c>)
 8004b0a:	705a      	strb	r2, [r3, #1]
          DHCP_allocated_dns[2] = *p++;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	617a      	str	r2, [r7, #20]
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <parseDHCPMSG+0x25c>)
 8004b16:	709a      	strb	r2, [r3, #2]
          DHCP_allocated_dns[3] = *p++;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	617a      	str	r2, [r7, #20]
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <parseDHCPMSG+0x25c>)
 8004b22:	70da      	strb	r2, [r3, #3]
          p = p + (opt_len - 4);
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
          break;
 8004b2e:	e069      	b.n	8004c04 <parseDHCPMSG+0x2c0>
   	case dhcpIPaddrLeaseTime:
          p++;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3301      	adds	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
          opt_len = *p++;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	617a      	str	r2, [r7, #20]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	72fb      	strb	r3, [r7, #11]
          dhcp_lease_time  = *p++;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	617a      	str	r2, [r7, #20]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b4c:	601a      	str	r2, [r3, #0]
          dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004b4e:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	6179      	str	r1, [r7, #20]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b60:	6013      	str	r3, [r2, #0]
          dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	6179      	str	r1, [r7, #20]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b74:	6013      	str	r3, [r2, #0]
          dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	021a      	lsls	r2, r3, #8
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	6179      	str	r1, [r7, #20]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	4413      	add	r3, r2
 8004b86:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <parseDHCPMSG+0x260>)
 8004b88:	6013      	str	r3, [r2, #0]
#ifdef _DHCP_DEBUG_  
          dhcp_lease_time = 10;
#endif
          break;
 8004b8a:	e03b      	b.n	8004c04 <parseDHCPMSG+0x2c0>
 8004b8c:	20000150 	.word	0x20000150
 8004b90:	2000014c 	.word	0x2000014c
 8004b94:	2000013c 	.word	0x2000013c
 8004b98:	20000118 	.word	0x20000118
 8004b9c:	20000114 	.word	0x20000114
 8004ba0:	2000011c 	.word	0x2000011c
 8004ba4:	20000030 	.word	0x20000030
   	case dhcpServerIdentifier:
          p++;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
          opt_len = *p++;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	617a      	str	r2, [r7, #20]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	72fb      	strb	r3, [r7, #11]
          DHCP_SIP[0] = *p++;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	617a      	str	r2, [r7, #20]
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	4b16      	ldr	r3, [pc, #88]	; (8004c1c <parseDHCPMSG+0x2d8>)
 8004bc2:	701a      	strb	r2, [r3, #0]
          DHCP_SIP[1] = *p++;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	617a      	str	r2, [r7, #20]
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <parseDHCPMSG+0x2d8>)
 8004bce:	705a      	strb	r2, [r3, #1]
          DHCP_SIP[2] = *p++;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	617a      	str	r2, [r7, #20]
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <parseDHCPMSG+0x2d8>)
 8004bda:	709a      	strb	r2, [r3, #2]
          DHCP_SIP[3] = *p++;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	617a      	str	r2, [r7, #20]
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <parseDHCPMSG+0x2d8>)
 8004be6:	70da      	strb	r2, [r3, #3]
          break;
 8004be8:	e00c      	b.n	8004c04 <parseDHCPMSG+0x2c0>
   	default:
          p++;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3301      	adds	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
          opt_len = *p++;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	617a      	str	r2, [r7, #20]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	72fb      	strb	r3, [r7, #11]
          p += opt_len;
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
          break;
 8004c02:	bf00      	nop
    while (p < e)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	f4ff aef8 	bcc.w	80049fe <parseDHCPMSG+0xba>
      } // switch
    } // while
  } // if

  return type;
 8004c0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd90      	pop	{r4, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000148 	.word	0x20000148

08004c20 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
  uint8_t  type;
  uint8_t  ret;

  if (dhcp_state == STATE_DHCP_STOP)
 8004c26:	4b7f      	ldr	r3, [pc, #508]	; (8004e24 <DHCP_run+0x204>)
 8004c28:	f993 3000 	ldrsb.w	r3, [r3]
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d101      	bne.n	8004c34 <DHCP_run+0x14>
    return DHCP_STOPPED;
 8004c30:	2305      	movs	r3, #5
 8004c32:	e0f3      	b.n	8004e1c <DHCP_run+0x1fc>

  if (getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8004c34:	4b7c      	ldr	r3, [pc, #496]	; (8004e28 <DHCP_run+0x208>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fd f90c 	bl	8001e60 <WIZCHIP_READ>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b22      	cmp	r3, #34	; 0x22
 8004c4c:	d006      	beq.n	8004c5c <DHCP_run+0x3c>
    socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8004c4e:	4b76      	ldr	r3, [pc, #472]	; (8004e28 <DHCP_run+0x208>)
 8004c50:	7818      	ldrb	r0, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	2244      	movs	r2, #68	; 0x44
 8004c56:	2102      	movs	r1, #2
 8004c58:	f7fd fbf0 	bl	800243c <socket>

  ret = DHCP_RUNNING;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	71fb      	strb	r3, [r7, #7]
  type = parseDHCPMSG();
 8004c60:	f7ff fe70 	bl	8004944 <parseDHCPMSG>
 8004c64:	4603      	mov	r3, r0
 8004c66:	71bb      	strb	r3, [r7, #6]

  switch (dhcp_state)
 8004c68:	4b6e      	ldr	r3, [pc, #440]	; (8004e24 <DHCP_run+0x204>)
 8004c6a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	f200 80d0 	bhi.w	8004e14 <DHCP_run+0x1f4>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <DHCP_run+0x5c>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004c91 	.word	0x08004c91
 8004c80:	08004cb5 	.word	0x08004cb5
 8004c84:	08004cf9 	.word	0x08004cf9
 8004c88:	08004d49 	.word	0x08004d49
 8004c8c:	08004da3 	.word	0x08004da3
  {
    case STATE_DHCP_INIT:
      DHCP_allocated_ip[0] = 0;
 8004c90:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <DHCP_run+0x20c>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
      DHCP_allocated_ip[1] = 0;
 8004c96:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <DHCP_run+0x20c>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	705a      	strb	r2, [r3, #1]
      DHCP_allocated_ip[2] = 0;
 8004c9c:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <DHCP_run+0x20c>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	709a      	strb	r2, [r3, #2]
      DHCP_allocated_ip[3] = 0;
 8004ca2:	4b62      	ldr	r3, [pc, #392]	; (8004e2c <DHCP_run+0x20c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	70da      	strb	r2, [r3, #3]
      send_DHCP_DISCOVER();
 8004ca8:	f7ff f94a 	bl	8003f40 <send_DHCP_DISCOVER>
      dhcp_state = STATE_DHCP_DISCOVER;
 8004cac:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <DHCP_run+0x204>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	e0b2      	b.n	8004e1a <DHCP_run+0x1fa>
    case STATE_DHCP_DISCOVER:
      if (type == DHCP_OFFER)
 8004cb4:	79bb      	ldrb	r3, [r7, #6]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d119      	bne.n	8004cee <DHCP_run+0xce>
      {
#ifdef _DHCP_DEBUG_
	printf("> Receive DHCP_OFFER\r\n");
#endif
        DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8004cba:	4b5d      	ldr	r3, [pc, #372]	; (8004e30 <DHCP_run+0x210>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	7c1a      	ldrb	r2, [r3, #16]
 8004cc0:	4b5a      	ldr	r3, [pc, #360]	; (8004e2c <DHCP_run+0x20c>)
 8004cc2:	701a      	strb	r2, [r3, #0]
        DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	; (8004e30 <DHCP_run+0x210>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	7c5a      	ldrb	r2, [r3, #17]
 8004cca:	4b58      	ldr	r3, [pc, #352]	; (8004e2c <DHCP_run+0x20c>)
 8004ccc:	705a      	strb	r2, [r3, #1]
        DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8004cce:	4b58      	ldr	r3, [pc, #352]	; (8004e30 <DHCP_run+0x210>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	7c9a      	ldrb	r2, [r3, #18]
 8004cd4:	4b55      	ldr	r3, [pc, #340]	; (8004e2c <DHCP_run+0x20c>)
 8004cd6:	709a      	strb	r2, [r3, #2]
        DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8004cd8:	4b55      	ldr	r3, [pc, #340]	; (8004e30 <DHCP_run+0x210>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	7cda      	ldrb	r2, [r3, #19]
 8004cde:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <DHCP_run+0x20c>)
 8004ce0:	70da      	strb	r2, [r3, #3]

	send_DHCP_REQUEST();
 8004ce2:	f7ff fa93 	bl	800420c <send_DHCP_REQUEST>
	dhcp_state = STATE_DHCP_REQUEST;
 8004ce6:	4b4f      	ldr	r3, [pc, #316]	; (8004e24 <DHCP_run+0x204>)
 8004ce8:	2202      	movs	r2, #2
 8004cea:	701a      	strb	r2, [r3, #0]
      }
      else
        ret = check_DHCP_timeout();
      
      break;
 8004cec:	e095      	b.n	8004e1a <DHCP_run+0x1fa>
        ret = check_DHCP_timeout();
 8004cee:	f000 f8b1 	bl	8004e54 <check_DHCP_timeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
      break;
 8004cf6:	e090      	b.n	8004e1a <DHCP_run+0x1fa>
    case STATE_DHCP_REQUEST :
      if (type == DHCP_ACK)
 8004cf8:	79bb      	ldrb	r3, [r7, #6]
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d116      	bne.n	8004d2c <DHCP_run+0x10c>
      {
#ifdef _DHCP_DEBUG_
	printf("> Receive DHCP_ACK\r\n");
#endif
	if (check_DHCP_leasedIP())
 8004cfe:	f000 f913 	bl	8004f28 <check_DHCP_leasedIP>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <DHCP_run+0xfa>
        {
          // Network info assignment from DHCP
          dhcp_ip_assign();
 8004d08:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <DHCP_run+0x214>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4798      	blx	r3
          reset_DHCP_timeout();
 8004d0e:	f000 f9bd 	bl	800508c <reset_DHCP_timeout>
          dhcp_state = STATE_DHCP_LEASED;
 8004d12:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <DHCP_run+0x204>)
 8004d14:	2203      	movs	r2, #3
 8004d16:	701a      	strb	r2, [r3, #0]
	dhcp_state = STATE_DHCP_DISCOVER;
      }
      else
        ret = check_DHCP_timeout();
	
      break;
 8004d18:	e07f      	b.n	8004e1a <DHCP_run+0x1fa>
          reset_DHCP_timeout();
 8004d1a:	f000 f9b7 	bl	800508c <reset_DHCP_timeout>
          dhcp_ip_conflict();
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <DHCP_run+0x218>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4798      	blx	r3
          dhcp_state = STATE_DHCP_INIT;
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <DHCP_run+0x204>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
      break;
 8004d2a:	e076      	b.n	8004e1a <DHCP_run+0x1fa>
      else if (type == DHCP_NAK)
 8004d2c:	79bb      	ldrb	r3, [r7, #6]
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d105      	bne.n	8004d3e <DHCP_run+0x11e>
	reset_DHCP_timeout();
 8004d32:	f000 f9ab 	bl	800508c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_DISCOVER;
 8004d36:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <DHCP_run+0x204>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
      break;
 8004d3c:	e06d      	b.n	8004e1a <DHCP_run+0x1fa>
        ret = check_DHCP_timeout();
 8004d3e:	f000 f889 	bl	8004e54 <check_DHCP_timeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
      break;
 8004d46:	e068      	b.n	8004e1a <DHCP_run+0x1fa>
    case STATE_DHCP_LEASED :
      ret = DHCP_IP_LEASED;
 8004d48:	2304      	movs	r3, #4
 8004d4a:	71fb      	strb	r3, [r7, #7]
      if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) 
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <DHCP_run+0x21c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d060      	beq.n	8004e18 <DHCP_run+0x1f8>
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <DHCP_run+0x21c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	085a      	lsrs	r2, r3, #1
 8004d5c:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <DHCP_run+0x220>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d259      	bcs.n	8004e18 <DHCP_run+0x1f8>
      {
#ifdef _DHCP_DEBUG_
	printf("> Maintains the IP address \r\n");
#endif
	type = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	71bb      	strb	r3, [r7, #6]
	OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8004d68:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <DHCP_run+0x20c>)
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	4b35      	ldr	r3, [pc, #212]	; (8004e44 <DHCP_run+0x224>)
 8004d6e:	701a      	strb	r2, [r3, #0]
	OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8004d70:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <DHCP_run+0x20c>)
 8004d72:	785a      	ldrb	r2, [r3, #1]
 8004d74:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <DHCP_run+0x224>)
 8004d76:	705a      	strb	r2, [r3, #1]
	OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <DHCP_run+0x20c>)
 8004d7a:	789a      	ldrb	r2, [r3, #2]
 8004d7c:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <DHCP_run+0x224>)
 8004d7e:	709a      	strb	r2, [r3, #2]
	OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8004d80:	4b2a      	ldr	r3, [pc, #168]	; (8004e2c <DHCP_run+0x20c>)
 8004d82:	78da      	ldrb	r2, [r3, #3]
 8004d84:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <DHCP_run+0x224>)
 8004d86:	70da      	strb	r2, [r3, #3]
				
	DHCP_XID++;
 8004d88:	4b2f      	ldr	r3, [pc, #188]	; (8004e48 <DHCP_run+0x228>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	4a2e      	ldr	r2, [pc, #184]	; (8004e48 <DHCP_run+0x228>)
 8004d90:	6013      	str	r3, [r2, #0]

	send_DHCP_REQUEST();
 8004d92:	f7ff fa3b 	bl	800420c <send_DHCP_REQUEST>
	reset_DHCP_timeout();
 8004d96:	f000 f979 	bl	800508c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_REREQUEST;
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <DHCP_run+0x204>)
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004da0:	e03a      	b.n	8004e18 <DHCP_run+0x1f8>
    case STATE_DHCP_REREQUEST :
      ret = DHCP_IP_LEASED;
 8004da2:	2304      	movs	r3, #4
 8004da4:	71fb      	strb	r3, [r7, #7]
      if (type == DHCP_ACK)
 8004da6:	79bb      	ldrb	r3, [r7, #6]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d125      	bne.n	8004df8 <DHCP_run+0x1d8>
      {
	dhcp_retry_count = 0;
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <DHCP_run+0x22c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
	if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <DHCP_run+0x224>)
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <DHCP_run+0x20c>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d111      	bne.n	8004de2 <DHCP_run+0x1c2>
	    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <DHCP_run+0x224>)
 8004dc0:	785a      	ldrb	r2, [r3, #1]
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <DHCP_run+0x20c>)
 8004dc4:	785b      	ldrb	r3, [r3, #1]
	if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d10b      	bne.n	8004de2 <DHCP_run+0x1c2>
	    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <DHCP_run+0x224>)
 8004dcc:	789a      	ldrb	r2, [r3, #2]
 8004dce:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <DHCP_run+0x20c>)
 8004dd0:	789b      	ldrb	r3, [r3, #2]
	    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d105      	bne.n	8004de2 <DHCP_run+0x1c2>
	    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <DHCP_run+0x224>)
 8004dd8:	78da      	ldrb	r2, [r3, #3]
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <DHCP_run+0x20c>)
 8004ddc:	78db      	ldrb	r3, [r3, #3]
	    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d004      	beq.n	8004dec <DHCP_run+0x1cc>
	{
          ret = DHCP_IP_CHANGED;
 8004de2:	2303      	movs	r3, #3
 8004de4:	71fb      	strb	r3, [r7, #7]
          dhcp_ip_update();
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <DHCP_run+0x230>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4798      	blx	r3
        }
#ifdef _DHCP_DEBUG_
        else
          printf(">IP is continued.\r\n");
#endif            				
	reset_DHCP_timeout();
 8004dec:	f000 f94e 	bl	800508c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_LEASED;
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <DHCP_run+0x204>)
 8004df2:	2203      	movs	r2, #3
 8004df4:	701a      	strb	r2, [r3, #0]
	dhcp_state = STATE_DHCP_DISCOVER;
      } 
      else
        ret = check_DHCP_timeout();
	
      break;
 8004df6:	e010      	b.n	8004e1a <DHCP_run+0x1fa>
      else if (type == DHCP_NAK)
 8004df8:	79bb      	ldrb	r3, [r7, #6]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d105      	bne.n	8004e0a <DHCP_run+0x1ea>
	reset_DHCP_timeout();
 8004dfe:	f000 f945 	bl	800508c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_DISCOVER;
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <DHCP_run+0x204>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
      break;
 8004e08:	e007      	b.n	8004e1a <DHCP_run+0x1fa>
        ret = check_DHCP_timeout();
 8004e0a:	f000 f823 	bl	8004e54 <check_DHCP_timeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
      break;
 8004e12:	e002      	b.n	8004e1a <DHCP_run+0x1fa>
    default :
      break;
 8004e14:	bf00      	nop
 8004e16:	e000      	b.n	8004e1a <DHCP_run+0x1fa>
      break;
 8004e18:	bf00      	nop
  }

  return ret;
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000120 	.word	0x20000120
 8004e28:	20000150 	.word	0x20000150
 8004e2c:	20000110 	.word	0x20000110
 8004e30:	2000014c 	.word	0x2000014c
 8004e34:	20000040 	.word	0x20000040
 8004e38:	20000048 	.word	0x20000048
 8004e3c:	20000030 	.word	0x20000030
 8004e40:	20000124 	.word	0x20000124
 8004e44:	2000010c 	.word	0x2000010c
 8004e48:	20000144 	.word	0x20000144
 8004e4c:	20000121 	.word	0x20000121
 8004e50:	20000044 	.word	0x20000044

08004e54 <check_DHCP_timeout>:
  close(DHCP_SOCKET);
  dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
  uint8_t ret = DHCP_RUNNING;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	71fb      	strb	r3, [r7, #7]
	
  if (dhcp_retry_count < MAX_DHCP_RETRY)
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <check_DHCP_timeout+0xb8>)
 8004e60:	f993 3000 	ldrsb.w	r3, [r3]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	dc33      	bgt.n	8004ed0 <check_DHCP_timeout+0x7c>
  {
    if (dhcp_tick_next < dhcp_tick_1s)
 8004e68:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <check_DHCP_timeout+0xbc>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <check_DHCP_timeout+0xc0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d245      	bcs.n	8004f00 <check_DHCP_timeout+0xac>
    {
      switch ( dhcp_state )
 8004e74:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <check_DHCP_timeout+0xc4>)
 8004e76:	f993 3000 	ldrsb.w	r3, [r3]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d00a      	beq.n	8004e94 <check_DHCP_timeout+0x40>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00e      	beq.n	8004ea0 <check_DHCP_timeout+0x4c>
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d000      	beq.n	8004e88 <check_DHCP_timeout+0x34>
	case STATE_DHCP_REREQUEST:
	  printf("<<timeout>> state : STATE_DHCP_REREQUEST\r\n");
          send_DHCP_REQUEST();
          break;
	default :
          break;
 8004e86:	e011      	b.n	8004eac <check_DHCP_timeout+0x58>
	  printf("<<timeout>> state : STATE_DHCP_DISCOVER\r\n");
 8004e88:	4824      	ldr	r0, [pc, #144]	; (8004f1c <check_DHCP_timeout+0xc8>)
 8004e8a:	f002 fddb 	bl	8007a44 <puts>
          send_DHCP_DISCOVER();
 8004e8e:	f7ff f857 	bl	8003f40 <send_DHCP_DISCOVER>
          break;
 8004e92:	e00b      	b.n	8004eac <check_DHCP_timeout+0x58>
	  printf("<<timeout>> state : STATE_DHCP_REQUEST\r\n");
 8004e94:	4822      	ldr	r0, [pc, #136]	; (8004f20 <check_DHCP_timeout+0xcc>)
 8004e96:	f002 fdd5 	bl	8007a44 <puts>
          send_DHCP_REQUEST();
 8004e9a:	f7ff f9b7 	bl	800420c <send_DHCP_REQUEST>
          break;
 8004e9e:	e005      	b.n	8004eac <check_DHCP_timeout+0x58>
	  printf("<<timeout>> state : STATE_DHCP_REREQUEST\r\n");
 8004ea0:	4820      	ldr	r0, [pc, #128]	; (8004f24 <check_DHCP_timeout+0xd0>)
 8004ea2:	f002 fdcf 	bl	8007a44 <puts>
          send_DHCP_REQUEST();
 8004ea6:	f7ff f9b1 	bl	800420c <send_DHCP_REQUEST>
          break;
 8004eaa:	bf00      	nop
      }

      dhcp_tick_1s = 0;
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <check_DHCP_timeout+0xc0>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
      dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <check_DHCP_timeout+0xc0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330a      	adds	r3, #10
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <check_DHCP_timeout+0xbc>)
 8004eba:	6013      	str	r3, [r2, #0]
      dhcp_retry_count++;
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <check_DHCP_timeout+0xb8>)
 8004ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	b25a      	sxtb	r2, r3
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <check_DHCP_timeout+0xb8>)
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e017      	b.n	8004f00 <check_DHCP_timeout+0xac>
    }
  }
  else   // timeout occurred
  {
    switch (dhcp_state)
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <check_DHCP_timeout+0xc4>)
 8004ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d00a      	beq.n	8004ef0 <check_DHCP_timeout+0x9c>
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d008      	beq.n	8004ef0 <check_DHCP_timeout+0x9c>
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d000      	beq.n	8004ee4 <check_DHCP_timeout+0x90>
      case STATE_DHCP_REREQUEST:
	send_DHCP_DISCOVER();
	dhcp_state = STATE_DHCP_DISCOVER;
	break;
      default :
	break;
 8004ee2:	e00b      	b.n	8004efc <check_DHCP_timeout+0xa8>
	dhcp_state = STATE_DHCP_INIT;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <check_DHCP_timeout+0xc4>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
	ret = DHCP_FAILED;
 8004eea:	2300      	movs	r3, #0
 8004eec:	71fb      	strb	r3, [r7, #7]
	break;
 8004eee:	e005      	b.n	8004efc <check_DHCP_timeout+0xa8>
	send_DHCP_DISCOVER();
 8004ef0:	f7ff f826 	bl	8003f40 <send_DHCP_DISCOVER>
	dhcp_state = STATE_DHCP_DISCOVER;
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <check_DHCP_timeout+0xc4>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
	break;
 8004efa:	bf00      	nop
    }
    reset_DHCP_timeout();
 8004efc:	f000 f8c6 	bl	800508c <reset_DHCP_timeout>
  }
  return ret;
 8004f00:	79fb      	ldrb	r3, [r7, #7]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000121 	.word	0x20000121
 8004f10:	20000034 	.word	0x20000034
 8004f14:	20000124 	.word	0x20000124
 8004f18:	20000120 	.word	0x20000120
 8004f1c:	08008aa0 	.word	0x08008aa0
 8004f20:	08008acc 	.word	0x08008acc
 8004f24:	08008af4 	.word	0x08008af4

08004f28 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af02      	add	r7, sp, #8
  uint8_t tmp;
  int32_t ret;

  //WIZchip RCR value changed for ARP Timeout count control
  tmp = getRCR();
 8004f2e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004f32:	f7fc ff95 	bl	8001e60 <WIZCHIP_READ>
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  setRCR(0x03);
 8004f3a:	2103      	movs	r1, #3
 8004f3c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004f40:	f7fc ffda 	bl	8001ef8 <WIZCHIP_WRITE>

  // IP conflict detection : ARP request - ARP reply
  // Broadcasting ARP Request for check the IP conflict using UDP sendto() function
  ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <check_DHCP_leasedIP+0x6c>)
 8004f46:	7818      	ldrb	r0, [r3, #0]
 8004f48:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <check_DHCP_leasedIP+0x70>)
 8004f50:	2211      	movs	r2, #17
 8004f52:	4912      	ldr	r1, [pc, #72]	; (8004f9c <check_DHCP_leasedIP+0x74>)
 8004f54:	f7fd fef0 	bl	8002d38 <sendto>
 8004f58:	6038      	str	r0, [r7, #0]

  // RCR value restore
  setRCR(tmp);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004f62:	f7fc ffc9 	bl	8001ef8 <WIZCHIP_WRITE>

  if (ret == SOCKERR_TIMEOUT)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f113 0f0d 	cmn.w	r3, #13
 8004f6c:	d101      	bne.n	8004f72 <check_DHCP_leasedIP+0x4a>
  {
    // UDP send Timeout occurred : allocated IP address is unique, DHCP Success
#ifdef _DHCP_DEBUG_
    printf("\r\n> Check leased IP - OK\r\n");
#endif
    return 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e00c      	b.n	8004f8c <check_DHCP_leasedIP+0x64>
  }
  else
  {
    // Received ARP reply or etc : IP address conflict occur, DHCP Failed
    send_DHCP_DECLINE();
 8004f72:	f7ff fb95 	bl	80046a0 <send_DHCP_DECLINE>

    ret = dhcp_tick_1s;
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <check_DHCP_leasedIP+0x78>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	603b      	str	r3, [r7, #0]
    while ((dhcp_tick_1s - ret) < 2)       // wait for 1s over; wait to complete to send DECLINE message;
 8004f7c:	bf00      	nop
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <check_DHCP_leasedIP+0x78>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d9f9      	bls.n	8004f7e <check_DHCP_leasedIP+0x56>
      ;

    return 0;
 8004f8a:	2300      	movs	r3, #0
  }
}	
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000150 	.word	0x20000150
 8004f98:	20000110 	.word	0x20000110
 8004f9c:	08008b20 	.word	0x08008b20
 8004fa0:	20000124 	.word	0x20000124

08004fa4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	71fb      	strb	r3, [r7, #7]
  uint8_t zeroip[4] = {0,0,0,0};
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  getSHAR(DHCP_CHADDR);
 8004fb4:	2206      	movs	r2, #6
 8004fb6:	492f      	ldr	r1, [pc, #188]	; (8005074 <DHCP_init+0xd0>)
 8004fb8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004fbc:	f7fc ffea 	bl	8001f94 <WIZCHIP_READ_BUF>
  
  if ((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8004fc0:	4b2c      	ldr	r3, [pc, #176]	; (8005074 <DHCP_init+0xd0>)
 8004fc2:	781a      	ldrb	r2, [r3, #0]
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <DHCP_init+0xd0>)
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	4b29      	ldr	r3, [pc, #164]	; (8005074 <DHCP_init+0xd0>)
 8004fce:	789b      	ldrb	r3, [r3, #2]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <DHCP_init+0xd0>)
 8004fd6:	78db      	ldrb	r3, [r3, #3]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <DHCP_init+0xd0>)
 8004fde:	791b      	ldrb	r3, [r3, #4]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	4b23      	ldr	r3, [pc, #140]	; (8005074 <DHCP_init+0xd0>)
 8004fe6:	795b      	ldrb	r3, [r3, #5]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d117      	bne.n	8005020 <DHCP_init+0x7c>
  {
    // assing temporary mac address, you should be set SHAR before call this function. 
    DHCP_CHADDR[0] = 0x00;
 8004ff0:	4b20      	ldr	r3, [pc, #128]	; (8005074 <DHCP_init+0xd0>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
    DHCP_CHADDR[1] = 0x08;
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	; (8005074 <DHCP_init+0xd0>)
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	705a      	strb	r2, [r3, #1]
    DHCP_CHADDR[2] = 0xdc;      
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <DHCP_init+0xd0>)
 8004ffe:	22dc      	movs	r2, #220	; 0xdc
 8005000:	709a      	strb	r2, [r3, #2]
    DHCP_CHADDR[3] = 0x00;
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <DHCP_init+0xd0>)
 8005004:	2200      	movs	r2, #0
 8005006:	70da      	strb	r2, [r3, #3]
    DHCP_CHADDR[4] = 0x00;
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <DHCP_init+0xd0>)
 800500a:	2200      	movs	r2, #0
 800500c:	711a      	strb	r2, [r3, #4]
    DHCP_CHADDR[5] = 0x00; 
 800500e:	4b19      	ldr	r3, [pc, #100]	; (8005074 <DHCP_init+0xd0>)
 8005010:	2200      	movs	r2, #0
 8005012:	715a      	strb	r2, [r3, #5]
    setSHAR(DHCP_CHADDR);     
 8005014:	2206      	movs	r2, #6
 8005016:	4917      	ldr	r1, [pc, #92]	; (8005074 <DHCP_init+0xd0>)
 8005018:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800501c:	f7fd f81a 	bl	8002054 <WIZCHIP_WRITE_BUF>
  }

  DHCP_SOCKET = s; // SOCK_DHCP
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <DHCP_init+0xd4>)
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	7013      	strb	r3, [r2, #0]
  pDHCPMSG = (RIP_MSG*)buf;
 8005026:	4a15      	ldr	r2, [pc, #84]	; (800507c <DHCP_init+0xd8>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6013      	str	r3, [r2, #0]
  DHCP_XID = 0x12345678;
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <DHCP_init+0xdc>)
 800502e:	4a15      	ldr	r2, [pc, #84]	; (8005084 <DHCP_init+0xe0>)
 8005030:	601a      	str	r2, [r3, #0]

  // WIZchip Netinfo Clear
  setSIPR(zeroip);
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	2204      	movs	r2, #4
 8005038:	4619      	mov	r1, r3
 800503a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800503e:	f7fd f809 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setSIPR(zeroip);
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	2204      	movs	r2, #4
 8005048:	4619      	mov	r1, r3
 800504a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800504e:	f7fd f801 	bl	8002054 <WIZCHIP_WRITE_BUF>
  setGAR(zeroip);
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	2204      	movs	r2, #4
 8005058:	4619      	mov	r1, r3
 800505a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800505e:	f7fc fff9 	bl	8002054 <WIZCHIP_WRITE_BUF>

  reset_DHCP_timeout();
 8005062:	f000 f813 	bl	800508c <reset_DHCP_timeout>
  dhcp_state = STATE_DHCP_INIT;
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <DHCP_init+0xe4>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	2000013c 	.word	0x2000013c
 8005078:	20000150 	.word	0x20000150
 800507c:	2000014c 	.word	0x2000014c
 8005080:	20000144 	.word	0x20000144
 8005084:	12345678 	.word	0x12345678
 8005088:	20000120 	.word	0x20000120

0800508c <reset_DHCP_timeout>:


/* Rset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  dhcp_tick_1s = 0;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <reset_DHCP_timeout+0x20>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
  dhcp_tick_next = DHCP_WAIT_TIME;
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <reset_DHCP_timeout+0x24>)
 8005098:	220a      	movs	r2, #10
 800509a:	601a      	str	r2, [r3, #0]
  dhcp_retry_count = 0;
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <reset_DHCP_timeout+0x28>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	20000124 	.word	0x20000124
 80050b0:	20000034 	.word	0x20000034
 80050b4:	20000121 	.word	0x20000121

080050b8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  dhcp_tick_1s++;
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <DHCP_time_handler+0x18>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	4a03      	ldr	r2, [pc, #12]	; (80050d0 <DHCP_time_handler+0x18>)
 80050c4:	6013      	str	r3, [r2, #0]
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000124 	.word	0x20000124

080050d4 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  ip[0] = DHCP_allocated_ip[0];
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <getIPfromDHCP+0x3c>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	701a      	strb	r2, [r3, #0]
  ip[1] = DHCP_allocated_ip[1];
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3301      	adds	r3, #1
 80050e8:	4a09      	ldr	r2, [pc, #36]	; (8005110 <getIPfromDHCP+0x3c>)
 80050ea:	7852      	ldrb	r2, [r2, #1]
 80050ec:	701a      	strb	r2, [r3, #0]
  ip[2] = DHCP_allocated_ip[2];	
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3302      	adds	r3, #2
 80050f2:	4a07      	ldr	r2, [pc, #28]	; (8005110 <getIPfromDHCP+0x3c>)
 80050f4:	7892      	ldrb	r2, [r2, #2]
 80050f6:	701a      	strb	r2, [r3, #0]
  ip[3] = DHCP_allocated_ip[3];
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3303      	adds	r3, #3
 80050fc:	4a04      	ldr	r2, [pc, #16]	; (8005110 <getIPfromDHCP+0x3c>)
 80050fe:	78d2      	ldrb	r2, [r2, #3]
 8005100:	701a      	strb	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000110 	.word	0x20000110

08005114 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  ip[0] = DHCP_allocated_gw[0];
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <getGWfromDHCP+0x3c>)
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	701a      	strb	r2, [r3, #0]
  ip[1] = DHCP_allocated_gw[1];
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3301      	adds	r3, #1
 8005128:	4a09      	ldr	r2, [pc, #36]	; (8005150 <getGWfromDHCP+0x3c>)
 800512a:	7852      	ldrb	r2, [r2, #1]
 800512c:	701a      	strb	r2, [r3, #0]
  ip[2] = DHCP_allocated_gw[2];
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3302      	adds	r3, #2
 8005132:	4a07      	ldr	r2, [pc, #28]	; (8005150 <getGWfromDHCP+0x3c>)
 8005134:	7892      	ldrb	r2, [r2, #2]
 8005136:	701a      	strb	r2, [r3, #0]
  ip[3] = DHCP_allocated_gw[3];			
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3303      	adds	r3, #3
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <getGWfromDHCP+0x3c>)
 800513e:	78d2      	ldrb	r2, [r2, #3]
 8005140:	701a      	strb	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20000114 	.word	0x20000114

08005154 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  ip[0] = DHCP_allocated_sn[0];
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <getSNfromDHCP+0x3c>)
 800515e:	781a      	ldrb	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	701a      	strb	r2, [r3, #0]
  ip[1] = DHCP_allocated_sn[1];
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3301      	adds	r3, #1
 8005168:	4a09      	ldr	r2, [pc, #36]	; (8005190 <getSNfromDHCP+0x3c>)
 800516a:	7852      	ldrb	r2, [r2, #1]
 800516c:	701a      	strb	r2, [r3, #0]
  ip[2] = DHCP_allocated_sn[2];
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3302      	adds	r3, #2
 8005172:	4a07      	ldr	r2, [pc, #28]	; (8005190 <getSNfromDHCP+0x3c>)
 8005174:	7892      	ldrb	r2, [r2, #2]
 8005176:	701a      	strb	r2, [r3, #0]
  ip[3] = DHCP_allocated_sn[3];         
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3303      	adds	r3, #3
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <getSNfromDHCP+0x3c>)
 800517e:	78d2      	ldrb	r2, [r2, #3]
 8005180:	701a      	strb	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000118 	.word	0x20000118

08005194 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  ip[0] = DHCP_allocated_dns[0];
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <getDNSfromDHCP+0x3c>)
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	701a      	strb	r2, [r3, #0]
  ip[1] = DHCP_allocated_dns[1];
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <getDNSfromDHCP+0x3c>)
 80051aa:	7852      	ldrb	r2, [r2, #1]
 80051ac:	701a      	strb	r2, [r3, #0]
  ip[2] = DHCP_allocated_dns[2];
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3302      	adds	r3, #2
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <getDNSfromDHCP+0x3c>)
 80051b4:	7892      	ldrb	r2, [r2, #2]
 80051b6:	701a      	strb	r2, [r3, #0]
  ip[3] = DHCP_allocated_dns[3];         
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3303      	adds	r3, #3
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <getDNSfromDHCP+0x3c>)
 80051be:	78d2      	ldrb	r2, [r2, #3]
 80051c0:	701a      	strb	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	2000011c 	.word	0x2000011c

080051d4 <NewMessageData>:
 *******************************************************************************/
#include "MQTTClient.h"

   
void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessgage)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  md->topicName = aTopicName;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	605a      	str	r2, [r3, #4]
  md->message = aMessgage;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <getNextPacketId>:

int32_t getNextPacketId(Client *c) 
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <getNextPacketId+0x1c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	e000      	b.n	8005216 <getNextPacketId+0x1e>
 8005214:	2301      	movs	r3, #1
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <sendPacket>:

int32_t sendPacket(Client* c, int32_t length, Timer* timer)
{
 800522a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522c:	b087      	sub	sp, #28
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  int32_t rc = FAILURE, sent = 0;
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
    
  while (sent < length && !expired(timer))
 8005240:	e018      	b.n	8005274 <sendPacket+0x4a>
  {
    rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, left_ms(timer));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	689c      	ldr	r4, [r3, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	18d6      	adds	r6, r2, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fc3b 	bl	8006ad0 <left_ms>
 800525a:	4603      	mov	r3, r0
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47a0      	blx	r4
 8005264:	6178      	str	r0, [r7, #20]

    if (rc < 0)  // there was an error writing the data
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	db0e      	blt.n	800528a <sendPacket+0x60>
      break;

    sent += rc;
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  while (sent < length && !expired(timer))
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	da07      	bge.n	800528c <sendPacket+0x62>
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 fbe5 	bl	8006a4c <expired>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0dc      	beq.n	8005242 <sendPacket+0x18>
 8005288:	e000      	b.n	800528c <sendPacket+0x62>
      break;
 800528a:	bf00      	nop
  }
  
  if (sent == length)
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d10b      	bne.n	80052ac <sendPacket+0x82>
  {
    countdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have SUCCESSSfully sent the packet
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f001 fbfd 	bl	8006aa0 <countdown>
    rc = SUCCESSS;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e002      	b.n	80052b2 <sendPacket+0x88>
  }
  else
    rc = FAILURE;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
 80052b0:	617b      	str	r3, [r7, #20]

  return rc;
 80052b2:	697b      	ldr	r3, [r7, #20]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052bc <MQTTClient>:


void MQTTClient(Client* c, Network* network, uint32_t command_timeout_ms, uint8_t* buf, size_t buf_size, uint8_t* readbuf, size_t readbuf_size)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  c->ipstack = network;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50
    
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e009      	b.n	80052ea <MQTTClient+0x2e>
    c->messageHandlers[i].topicFilter = 0;
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	3304      	adds	r3, #4
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4413      	add	r3, r2
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3301      	adds	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	ddf2      	ble.n	80052d6 <MQTTClient+0x1a>
  
  c->command_timeout_ms = command_timeout_ms;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]
  c->buf = buf;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	611a      	str	r2, [r3, #16]
  c->buf_size = buf_size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a3a      	ldr	r2, [r7, #32]
 8005300:	609a      	str	r2, [r3, #8]
  c->readbuf = readbuf;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005306:	615a      	str	r2, [r3, #20]
  c->readbuf_size = readbuf_size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530c:	60da      	str	r2, [r3, #12]
  c->isconnected = 0;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	621a      	str	r2, [r3, #32]
  c->ping_outstanding = 0;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	771a      	strb	r2, [r3, #28]
  c->defaultMessageHandler = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	64da      	str	r2, [r3, #76]	; 0x4c

  InitTimer(&c->ping_timer);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3354      	adds	r3, #84	; 0x54
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fbe9 	bl	8006afc <InitTimer>
}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <decodePacket>:


int32_t decodePacket(Client* c, int32_t* value, int32_t timeout)
{
 8005332:	b590      	push	{r4, r7, lr}
 8005334:	b08b      	sub	sp, #44	; 0x2c
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  uint8_t i;
  int32_t multiplier = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t len = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	623b      	str	r3, [r7, #32]
  const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8005346:	2304      	movs	r3, #4
 8005348:	61fb      	str	r3, [r7, #28]

  *value = 0;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
  do
  {
    int32_t rc = MQTTPACKET_READ_ERROR;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	61bb      	str	r3, [r7, #24]

    if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	3301      	adds	r3, #1
 800535a:	623b      	str	r3, [r7, #32]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	429a      	cmp	r2, r3
 8005362:	dd03      	ble.n	800536c <decodePacket+0x3a>
    {
      rc = MQTTPACKET_READ_ERROR; /* bad data */
 8005364:	f04f 33ff 	mov.w	r3, #4294967295
 8005368:	61bb      	str	r3, [r7, #24]
        goto exit;
 800536a:	e021      	b.n	80053b0 <decodePacket+0x7e>
    }

    rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	685c      	ldr	r4, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005376:	f107 0117 	add.w	r1, r7, #23
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	47a0      	blx	r4
 8005380:	61b8      	str	r0, [r7, #24]
     
    if (rc != 1)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d112      	bne.n	80053ae <decodePacket+0x7c>
      goto exit;
 
    *value += (i & 127) * multiplier;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	441a      	add	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	01db      	lsls	r3, r3, #7
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  } while ((i & 128) != 0);
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dbd1      	blt.n	8005350 <decodePacket+0x1e>
 80053ac:	e000      	b.n	80053b0 <decodePacket+0x7e>
      goto exit;
 80053ae:	bf00      	nop
exit:
    return len;
 80053b0:	6a3b      	ldr	r3, [r7, #32]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	372c      	adds	r7, #44	; 0x2c
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd90      	pop	{r4, r7, pc}

080053ba <readPacket>:

int32_t readPacket(Client* c, Timer* timer) 
{
 80053ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053bc:	b089      	sub	sp, #36	; 0x24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
  int32_t rc = FAILURE;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	61fb      	str	r3, [r7, #28]
  MQTTHeader header = {0};
 80053ca:	2300      	movs	r3, #0
 80053cc:	753b      	strb	r3, [r7, #20]
  int32_t len = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61bb      	str	r3, [r7, #24]
  int32_t rem_len = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]

  /* 1. read the header byte.  This has the packet type in it */
  if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, left_ms(timer)) != 1)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053da:	685c      	ldr	r4, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	695e      	ldr	r6, [r3, #20]
 80053e4:	68b8      	ldr	r0, [r7, #8]
 80053e6:	f001 fb73 	bl	8006ad0 <left_ms>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2201      	movs	r2, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47a0      	blx	r4
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d13b      	bne.n	8005472 <readPacket+0xb8>
    goto exit;

  len = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61bb      	str	r3, [r7, #24]
  /* 2. read the remaining length.  This is variable in itself */
  decodePacket(c, &rem_len, left_ms(timer));
 80053fe:	68b8      	ldr	r0, [r7, #8]
 8005400:	f001 fb66 	bl	8006ad0 <left_ms>
 8005404:	4602      	mov	r2, r0
 8005406:	f107 0310 	add.w	r3, r7, #16
 800540a:	4619      	mov	r1, r3
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff ff90 	bl	8005332 <decodePacket>
  len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	3301      	adds	r3, #1
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f000 ff0b 	bl	8006238 <MQTTPacket_encode>
 8005422:	4602      	mov	r2, r0
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	4413      	add	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]

  /* 3. read the rest of the buffer using a callback to supply the rest of the data */
  if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, left_ms(timer)) != rem_len))
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	dd16      	ble.n	800545e <readPacket+0xa4>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005434:	685c      	ldr	r4, [r3, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	18d6      	adds	r6, r2, r3
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	68b8      	ldr	r0, [r7, #8]
 8005448:	f001 fb42 	bl	8006ad0 <left_ms>
 800544c:	4603      	mov	r3, r0
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	47a0      	blx	r4
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d10b      	bne.n	8005476 <readPacket+0xbc>
    goto exit;

  header.byte = c->readbuf[0];
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	753b      	strb	r3, [r7, #20]
  rc = header.bits.type;
 8005466:	7d3b      	ldrb	r3, [r7, #20]
 8005468:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800546c:	b2db      	uxtb	r3, r3
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e002      	b.n	8005478 <readPacket+0xbe>
    goto exit;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <readPacket+0xbe>
    goto exit;
 8005476:	bf00      	nop
exit:
  return rc;
 8005478:	69fb      	ldr	r3, [r7, #28]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3724      	adds	r7, #36	; 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005482 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8005482:	b480      	push	{r7}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  char* curf = topicFilter;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	617b      	str	r3, [r7, #20]
  char* curn = topicName->lenstring.data;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	613b      	str	r3, [r7, #16]
  char* curn_end = curn + topicName->lenstring.len;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	461a      	mov	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	60bb      	str	r3, [r7, #8]
    
  while (*curf && curn < curn_end)
 80054a2:	e039      	b.n	8005518 <isTopicMatched+0x96>
  {
    if (*curn == '/' && *curf != '/')
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b2f      	cmp	r3, #47	; 0x2f
 80054aa:	d103      	bne.n	80054b4 <isTopicMatched+0x32>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b2f      	cmp	r3, #47	; 0x2f
 80054b2:	d13a      	bne.n	800552a <isTopicMatched+0xa8>
      break;
  
    if (*curf != '+' && *curf != '#' && *curf != *curn)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b2b      	cmp	r3, #43	; 0x2b
 80054ba:	d009      	beq.n	80054d0 <isTopicMatched+0x4e>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b23      	cmp	r3, #35	; 0x23
 80054c2:	d005      	beq.n	80054d0 <isTopicMatched+0x4e>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d12e      	bne.n	800552e <isTopicMatched+0xac>
      break;
  
    if (*curf == '+')
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b2b      	cmp	r3, #43	; 0x2b
 80054d6:	d112      	bne.n	80054fe <isTopicMatched+0x7c>
    {   // skip until we meet the next separator, or end of string
      char* nextpos = curn + 1;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
  
      while (nextpos < curn_end && *nextpos != '/')
 80054de:	e005      	b.n	80054ec <isTopicMatched+0x6a>
        nextpos = ++curn + 1;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3301      	adds	r3, #1
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
      while (nextpos < curn_end && *nextpos != '/')
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d20b      	bcs.n	800550c <isTopicMatched+0x8a>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b2f      	cmp	r3, #47	; 0x2f
 80054fa:	d1f1      	bne.n	80054e0 <isTopicMatched+0x5e>
 80054fc:	e006      	b.n	800550c <isTopicMatched+0x8a>
    }
    else if (*curf == '#')
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b23      	cmp	r3, #35	; 0x23
 8005504:	d102      	bne.n	800550c <isTopicMatched+0x8a>
      curn = curn_end - 1;    // skip until end of string
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3b01      	subs	r3, #1
 800550a:	613b      	str	r3, [r7, #16]
  
    curf++;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	3301      	adds	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
    curn++;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3301      	adds	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
  while (*curf && curn < curn_end)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <isTopicMatched+0xae>
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d3bd      	bcc.n	80054a4 <isTopicMatched+0x22>
 8005528:	e002      	b.n	8005530 <isTopicMatched+0xae>
      break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <isTopicMatched+0xae>
      break;
 800552e:	bf00      	nop
  }
    
  return (curn == curn_end) && (*curf == '\0');
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	d105      	bne.n	8005544 <isTopicMatched+0xc2>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <isTopicMatched+0xc2>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <isTopicMatched+0xc4>
 8005544:	2300      	movs	r3, #0
 8005546:	b2db      	uxtb	r3, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <deliverMessage>:

int32_t deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  int32_t rc = FAILURE;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	627b      	str	r3, [r7, #36]	; 0x24

  // we have to find the right message handler - indexed by topic
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005566:	2300      	movs	r3, #0
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	e03f      	b.n	80055ec <deliverMessage+0x98>
  {
    if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	3304      	adds	r3, #4
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d034      	beq.n	80055e6 <deliverMessage+0x92>
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	3304      	adds	r3, #4
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4619      	mov	r1, r3
 800558a:	68b8      	ldr	r0, [r7, #8]
 800558c:	f001 f823 	bl	80065d6 <MQTTPacket_equals>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <deliverMessage+0x5c>
        isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	3304      	adds	r3, #4
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ff6c 	bl	8005482 <isTopicMatched>
 80055aa:	4603      	mov	r3, r0
    if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <deliverMessage+0x92>
    {
      if (c->messageHandlers[i].fp != NULL)
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	3304      	adds	r3, #4
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d012      	beq.n	80055e6 <deliverMessage+0x92>
      {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80055c0:	f107 0318 	add.w	r3, r7, #24
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fe03 	bl	80051d4 <NewMessageData>
        c->messageHandlers[i].fp(&md);
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	3304      	adds	r3, #4
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4413      	add	r3, r2
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f107 0218 	add.w	r2, r7, #24
 80055de:	4610      	mov	r0, r2
 80055e0:	4798      	blx	r3
        rc = SUCCESSS;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	3301      	adds	r3, #1
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	ddbc      	ble.n	800556c <deliverMessage+0x18>
      }
    }
  }
    
  if (rc == FAILURE && c->defaultMessageHandler != NULL) 
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d112      	bne.n	8005620 <deliverMessage+0xcc>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <deliverMessage+0xcc>
  {
    MessageData md;
    NewMessageData(&md, topicName, message);
 8005602:	f107 0310 	add.w	r3, r7, #16
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fde2 	bl	80051d4 <NewMessageData>
    c->defaultMessageHandler(&md);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005614:	f107 0210 	add.w	r2, r7, #16
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
    rc = SUCCESSS;
 800561c:	2300      	movs	r3, #0
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
  }   
    
  return rc;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005622:	4618      	mov	r0, r3
 8005624:	3728      	adds	r7, #40	; 0x28
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <keepalive>:

int32_t keepalive(Client* c)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b086      	sub	sp, #24
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  int32_t rc = FAILURE;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
 8005636:	617b      	str	r3, [r7, #20]
  
  if (c->keepAliveInterval == 0)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <keepalive+0x1c>
  {
    rc = SUCCESSS;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
    goto exit;
 8005644:	e032      	b.n	80056ac <keepalive+0x82>
  }

  if (expired(&c->ping_timer))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3354      	adds	r3, #84	; 0x54
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f9fe 	bl	8006a4c <expired>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02a      	beq.n	80056ac <keepalive+0x82>
  {
    if (!c->ping_outstanding)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d125      	bne.n	80056ac <keepalive+0x82>
    {
      Timer timer;
      InitTimer(&timer);
 8005660:	f107 0308 	add.w	r3, r7, #8
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fa49 	bl	8006afc <InitTimer>
      countdown_ms(&timer, 1000);
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005672:	4618      	mov	r0, r3
 8005674:	f001 fa00 	bl	8006a78 <countdown_ms>
      int32_t len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 fd0e 	bl	80060a4 <MQTTSerialize_pingreq>
 8005688:	6138      	str	r0, [r7, #16]
      
      if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dd0d      	ble.n	80056ac <keepalive+0x82>
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	461a      	mov	r2, r3
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fdc6 	bl	800522a <sendPacket>
 800569e:	6178      	str	r0, [r7, #20]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <keepalive+0x82>
        c->ping_outstanding = 1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	771a      	strb	r2, [r3, #28]
    }
  }

exit:
  return rc;
 80056ac:	697b      	ldr	r3, [r7, #20]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <cycle>:

int32_t cycle(Client* c, Timer* timer)
{
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	b095      	sub	sp, #84	; 0x54
 80056bc:	af06      	add	r7, sp, #24
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  // read the socket, see what work is due
  uint16_t packet_type = readPacket(c, timer);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fe78 	bl	80053ba <readPacket>
 80056ca:	4603      	mov	r3, r0
 80056cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
  int32_t len = 0, rc = SUCCESSS;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
 80056d2:	2300      	movs	r3, #0
 80056d4:	633b      	str	r3, [r7, #48]	; 0x30

  switch (packet_type)
 80056d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056d8:	3b02      	subs	r3, #2
 80056da:	2b0b      	cmp	r3, #11
 80056dc:	f200 80be 	bhi.w	800585c <cycle+0x1a4>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <cycle+0x30>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800585d 	.word	0x0800585d
 80056ec:	08005719 	.word	0x08005719
 80056f0:	0800585d 	.word	0x0800585d
 80056f4:	080057dd 	.word	0x080057dd
 80056f8:	0800585d 	.word	0x0800585d
 80056fc:	0800585d 	.word	0x0800585d
 8005700:	0800585d 	.word	0x0800585d
 8005704:	0800585d 	.word	0x0800585d
 8005708:	0800585d 	.word	0x0800585d
 800570c:	0800585d 	.word	0x0800585d
 8005710:	0800585d 	.word	0x0800585d
 8005714:	0800584f 	.word	0x0800584f
    case PUBLISH:
      {
        MQTTString topicName;
        MQTTMessage msg;
      
        if (MQTTDeserialize_publish((uint8_t*)&msg.dup, (uint8_t*)&msg.qos, (uint8_t*)&msg.retained, (uint16_t*)&msg.id, &topicName,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
               (uint8_t**)&msg.payload, (int32_t*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68d2      	ldr	r2, [r2, #12]
        if (MQTTDeserialize_publish((uint8_t*)&msg.dup, (uint8_t*)&msg.qos, (uint8_t*)&msg.retained, (uint16_t*)&msg.id, &topicName,
 8005720:	4616      	mov	r6, r2
 8005722:	f107 0210 	add.w	r2, r7, #16
 8005726:	1d15      	adds	r5, r2, #4
 8005728:	f107 0210 	add.w	r2, r7, #16
 800572c:	1c54      	adds	r4, r2, #1
 800572e:	f107 0110 	add.w	r1, r7, #16
 8005732:	f107 0210 	add.w	r2, r7, #16
 8005736:	1c90      	adds	r0, r2, #2
 8005738:	9604      	str	r6, [sp, #16]
 800573a:	9303      	str	r3, [sp, #12]
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	330c      	adds	r3, #12
 8005742:	9302      	str	r3, [sp, #8]
 8005744:	f107 0310 	add.w	r3, r7, #16
 8005748:	3308      	adds	r3, #8
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	f107 0320 	add.w	r3, r7, #32
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	462b      	mov	r3, r5
 8005754:	4622      	mov	r2, r4
 8005756:	f000 fcb4 	bl	80060c2 <MQTTDeserialize_publish>
 800575a:	4603      	mov	r3, r0
 800575c:	2b01      	cmp	r3, #1
 800575e:	f040 8081 	bne.w	8005864 <cycle+0x1ac>
          goto exit;
          
        deliverMessage(c, &topicName, &msg);
 8005762:	f107 0210 	add.w	r2, r7, #16
 8005766:	f107 0320 	add.w	r3, r7, #32
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fef1 	bl	8005554 <deliverMessage>
      
        if (msg.qos != QOS0)
 8005772:	7c3b      	ldrb	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d06e      	beq.n	8005856 <cycle+0x19e>
        {
          if (msg.qos == QOS1)
 8005778:	7c3b      	ldrb	r3, [r7, #16]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d10c      	bne.n	8005798 <cycle+0xe0>
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6918      	ldr	r0, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4619      	mov	r1, r3
 8005788:	8abb      	ldrh	r3, [r7, #20]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2300      	movs	r3, #0
 800578e:	2204      	movs	r2, #4
 8005790:	f000 fff0 	bl	8006774 <MQTTSerialize_ack>
 8005794:	6378      	str	r0, [r7, #52]	; 0x34
 8005796:	e00e      	b.n	80057b6 <cycle+0xfe>
          else if (msg.qos == QOS2)
 8005798:	7c3b      	ldrb	r3, [r7, #16]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d10b      	bne.n	80057b6 <cycle+0xfe>
            len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6918      	ldr	r0, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4619      	mov	r1, r3
 80057a8:	8abb      	ldrh	r3, [r7, #20]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2300      	movs	r3, #0
 80057ae:	2205      	movs	r2, #5
 80057b0:	f000 ffe0 	bl	8006774 <MQTTSerialize_ack>
 80057b4:	6378      	str	r0, [r7, #52]	; 0x34
  
          if (len <= 0)
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc03      	bgt.n	80057c4 <cycle+0x10c>
            rc = FAILURE;
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295
 80057c0:	633b      	str	r3, [r7, #48]	; 0x30
 80057c2:	e005      	b.n	80057d0 <cycle+0x118>
          else
            rc = sendPacket(c, len, timer);
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fd2e 	bl	800522a <sendPacket>
 80057ce:	6338      	str	r0, [r7, #48]	; 0x30
  
          if (rc == FAILURE)
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d13e      	bne.n	8005856 <cycle+0x19e>
            goto exit; // there was a problem
 80057d8:	bf00      	nop
 80057da:	e044      	b.n	8005866 <cycle+0x1ae>
    case PUBREC:
      {
        uint16_t mypacketid;
        uint8_t dup, type;

        if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695c      	ldr	r4, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f107 020e 	add.w	r2, r7, #14
 80057e8:	f107 010d 	add.w	r1, r7, #13
 80057ec:	f107 000c 	add.w	r0, r7, #12
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4623      	mov	r3, r4
 80057f4:	f000 fcd5 	bl	80061a2 <MQTTDeserialize_ack>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d003      	beq.n	8005806 <cycle+0x14e>
          rc = FAILURE;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	633b      	str	r3, [r7, #48]	; 0x30
 8005804:	e01e      	b.n	8005844 <cycle+0x18c>
        else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6918      	ldr	r0, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4619      	mov	r1, r3
 8005810:	89fb      	ldrh	r3, [r7, #14]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	2206      	movs	r2, #6
 8005818:	f000 ffac 	bl	8006774 <MQTTSerialize_ack>
 800581c:	6378      	str	r0, [r7, #52]	; 0x34
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc03      	bgt.n	800582c <cycle+0x174>
          rc = FAILURE;
 8005824:	f04f 33ff 	mov.w	r3, #4294967295
 8005828:	633b      	str	r3, [r7, #48]	; 0x30
 800582a:	e00b      	b.n	8005844 <cycle+0x18c>
        else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff fcfa 	bl	800522a <sendPacket>
 8005836:	6338      	str	r0, [r7, #48]	; 0x30
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <cycle+0x18c>
          rc = FAILURE; // there was a problem
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
        
        if (rc == FAILURE)
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d106      	bne.n	800585a <cycle+0x1a2>
          goto exit; // there was a problem
 800584c:	e00b      	b.n	8005866 <cycle+0x1ae>
        break;
      }
    case PUBCOMP:
      break;
    case PINGRESP:
      c->ping_outstanding = 0;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
      break;
 8005854:	e002      	b.n	800585c <cycle+0x1a4>
        break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <cycle+0x1a4>
        break;
 800585a:	bf00      	nop
  }
  keepalive(c);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fee4 	bl	800562a <keepalive>
 8005862:	e000      	b.n	8005866 <cycle+0x1ae>
          goto exit;
 8005864:	bf00      	nop
exit:
  if (rc == SUCCESSS)
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <cycle+0x1b8>
    rc = packet_type;
 800586c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
  
  return rc;
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005872:	4618      	mov	r0, r3
 8005874:	373c      	adds	r7, #60	; 0x3c
 8005876:	46bd      	mov	sp, r7
 8005878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587a:	bf00      	nop

0800587c <MQTTYield>:

int32_t MQTTYield(Client* c, int32_t timeout_ms)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  int32_t rc = SUCCESSS;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  Timer timer;

  InitTimer(&timer);    
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	4618      	mov	r0, r3
 8005890:	f001 f934 	bl	8006afc <InitTimer>
  countdown_ms(&timer, timeout_ms);
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	f107 030c 	add.w	r3, r7, #12
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f001 f8eb 	bl	8006a78 <countdown_ms>
    
  while (!expired(&timer))
 80058a2:	e00d      	b.n	80058c0 <MQTTYield+0x44>
  {
    if (cycle(c, &timer) == FAILURE)
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff ff04 	bl	80056b8 <cycle>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d103      	bne.n	80058c0 <MQTTYield+0x44>
    {
      rc = FAILURE;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	617b      	str	r3, [r7, #20]
      break;
 80058be:	e007      	b.n	80058d0 <MQTTYield+0x54>
  while (!expired(&timer))
 80058c0:	f107 030c 	add.w	r3, r7, #12
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 f8c1 	bl	8006a4c <expired>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0e9      	beq.n	80058a4 <MQTTYield+0x28>
    }
  }
  
  return rc;
 80058d0:	697b      	ldr	r3, [r7, #20]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <waitfor>:

// only used in single-threaded mode where one command at a time is in process
int32_t waitfor(Client* c, int32_t packet_type, Timer* timer)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b086      	sub	sp, #24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
  int32_t rc = FAILURE;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	617b      	str	r3, [r7, #20]
    
  do
  {
    if (expired(timer)) 
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 f8ad 	bl	8006a4c <expired>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <waitfor+0x32>
      break; // we timed out
  }
  while ((rc = cycle(c, timer)) != packet_type);  
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff fedc 	bl	80056b8 <cycle>
 8005900:	6178      	str	r0, [r7, #20]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	d1f0      	bne.n	80058ec <waitfor+0x12>
 800590a:	e000      	b.n	800590e <waitfor+0x34>
      break; // we timed out
 800590c:	bf00      	nop
    
  return rc;
 800590e:	697b      	ldr	r3, [r7, #20]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <MQTTConnect>:

int32_t MQTTConnect(Client* c, MQTTPacket_connectData* options)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b09c      	sub	sp, #112	; 0x70
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  Timer connect_timer;
  int32_t rc = FAILURE;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	66fb      	str	r3, [r7, #108]	; 0x6c
  MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8005928:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <MQTTConnect+0x108>)
 800592a:	f107 030c 	add.w	r3, r7, #12
 800592e:	4611      	mov	r1, r2
 8005930:	2254      	movs	r2, #84	; 0x54
 8005932:	4618      	mov	r0, r3
 8005934:	f001 ff52 	bl	80077dc <memcpy>
  int32_t len = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	66bb      	str	r3, [r7, #104]	; 0x68
    
  InitTimer(&connect_timer);
 800593c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005940:	4618      	mov	r0, r3
 8005942:	f001 f8db 	bl	8006afc <InitTimer>
  countdown_ms(&connect_timer, c->command_timeout_ms);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f001 f891 	bl	8006a78 <countdown_ms>

  if (c->isconnected) // don't send connect packet again if we are already connected
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d150      	bne.n	8005a00 <MQTTConnect+0xe8>
    goto exit;

  if (options == 0)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <MQTTConnect+0x52>
    options = &default_options; // set default options if none were supplied
 8005964:	f107 030c 	add.w	r3, r7, #12
 8005968:	603b      	str	r3, [r7, #0]
    
  c->keepAliveInterval = options->keepAliveInterval;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	8a9b      	ldrh	r3, [r3, #20]
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	619a      	str	r2, [r3, #24]
  countdown(&c->ping_timer, c->keepAliveInterval);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f001 f88d 	bl	8006aa0 <countdown>
  
  if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6918      	ldr	r0, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	4619      	mov	r1, r3
 8005992:	f000 fa0b 	bl	8005dac <MQTTSerialize_connect>
 8005996:	66b8      	str	r0, [r7, #104]	; 0x68
 8005998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800599a:	2b00      	cmp	r3, #0
 800599c:	dd32      	ble.n	8005a04 <MQTTConnect+0xec>
    goto exit;

  if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800599e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80059a2:	461a      	mov	r2, r3
 80059a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fc3f 	bl	800522a <sendPacket>
 80059ac:	66f8      	str	r0, [r7, #108]	; 0x6c
 80059ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d129      	bne.n	8005a08 <MQTTConnect+0xf0>
    goto exit; // there was a problem
    
  // this will be a blocking call, wait for the connack
  if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80059b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80059b8:	461a      	mov	r2, r3
 80059ba:	2102      	movs	r1, #2
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ff8c 	bl	80058da <waitfor>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d117      	bne.n	80059f8 <MQTTConnect+0xe0>
  {
    uint8_t connack_rc = 255;
 80059c8:	23ff      	movs	r3, #255	; 0xff
 80059ca:	72fb      	strb	r3, [r7, #11]
    int8_t sessionPresent = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	72bb      	strb	r3, [r7, #10]

    if (MQTTDeserialize_connack((uint8_t*)&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f107 010b 	add.w	r1, r7, #11
 80059dc:	f107 000a 	add.w	r0, r7, #10
 80059e0:	f000 fad2 	bl	8005f88 <MQTTDeserialize_connack>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d102      	bne.n	80059f0 <MQTTConnect+0xd8>
      rc = connack_rc;
 80059ea:	7afb      	ldrb	r3, [r7, #11]
 80059ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ee:	e00c      	b.n	8005a0a <MQTTConnect+0xf2>
    else
      rc = FAILURE;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295
 80059f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f6:	e008      	b.n	8005a0a <MQTTConnect+0xf2>
  }
  else
    rc = FAILURE;
 80059f8:	f04f 33ff 	mov.w	r3, #4294967295
 80059fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059fe:	e004      	b.n	8005a0a <MQTTConnect+0xf2>
    goto exit;
 8005a00:	bf00      	nop
 8005a02:	e002      	b.n	8005a0a <MQTTConnect+0xf2>
    goto exit;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <MQTTConnect+0xf2>
    goto exit; // there was a problem
 8005a08:	bf00      	nop
    
exit:
  if (rc == SUCCESSS)
 8005a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <MQTTConnect+0xfe>
    c->isconnected = 1;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	621a      	str	r2, [r3, #32]

  return rc;
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3770      	adds	r7, #112	; 0x70
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	08008b34 	.word	0x08008b34

08005a24 <MQTTSubscribe>:


int32_t MQTTSubscribe(Client* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b094      	sub	sp, #80	; 0x50
 8005a28:	af04      	add	r7, sp, #16
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71fb      	strb	r3, [r7, #7]
  int32_t rc = FAILURE;  
 8005a34:	f04f 33ff 	mov.w	r3, #4294967295
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  Timer timer;
  int32_t len = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
  MQTTString topic = MQTTString_initializer;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	2300      	movs	r3, #0
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
  topic.cstring = (char *)topicFilter;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	623b      	str	r3, [r7, #32]
    
  InitTimer(&timer);
 8005a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 f852 	bl	8006afc <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f808 	bl	8006a78 <countdown_ms>

  if (!c->isconnected)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d074      	beq.n	8005b5a <MQTTSubscribe+0x136>
    goto exit;
    
  len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int32_t*)&qos);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	691c      	ldr	r4, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	461d      	mov	r5, r3
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff fbbc 	bl	80051f8 <getNextPacketId>
 8005a80:	4603      	mov	r3, r0
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	1dfb      	adds	r3, r7, #7
 8005a86:	9302      	str	r3, [sp, #8]
 8005a88:	f107 0320 	add.w	r3, r7, #32
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	2200      	movs	r2, #0
 8005a96:	4629      	mov	r1, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fee8 	bl	800686e <MQTTSerialize_subscribe>
 8005a9e:	6378      	str	r0, [r7, #52]	; 0x34
  
  if (len <= 0)
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dd5b      	ble.n	8005b5e <MQTTSubscribe+0x13a>
    goto exit;

  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8005aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff fbbb 	bl	800522a <sendPacket>
 8005ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d152      	bne.n	8005b62 <MQTTSubscribe+0x13e>
    goto exit;             // there was a problem
    
  if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
 8005abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2109      	movs	r1, #9
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff ff08 	bl	80058da <waitfor>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d140      	bne.n	8005b52 <MQTTSubscribe+0x12e>
  {
    int32_t count = 0, grantedQoS = -1;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad8:	61bb      	str	r3, [r7, #24]
    uint16_t mypacketid;
    
    if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	68d2      	ldr	r2, [r2, #12]
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	f107 0118 	add.w	r1, r7, #24
 8005ae8:	f107 021c 	add.w	r2, r7, #28
 8005aec:	f107 0016 	add.w	r0, r7, #22
 8005af0:	9401      	str	r4, [sp, #4]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	460b      	mov	r3, r1
 8005af6:	2101      	movs	r1, #1
 8005af8:	f000 ff34 	bl	8006964 <MQTTDeserialize_suback>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <MQTTSubscribe+0xe2>
      rc = grantedQoS; // 0, 1, 2 or 0x80 
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (rc != 0x80)
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	2b80      	cmp	r3, #128	; 0x80
 8005b0a:	d02b      	beq.n	8005b64 <MQTTSubscribe+0x140>
    {
      for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b10:	e01b      	b.n	8005b4a <MQTTSubscribe+0x126>
      {
        if (c->messageHandlers[i].topicFilter == 0)
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	3304      	adds	r3, #4
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d110      	bne.n	8005b44 <MQTTSubscribe+0x120>
        {
          c->messageHandlers[i].topicFilter = topicFilter;
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	3304      	adds	r3, #4
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	605a      	str	r2, [r3, #4]
          c->messageHandlers[i].fp = messageHandler;
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	3304      	adds	r3, #4
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	609a      	str	r2, [r3, #8]
          rc = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b42:	e00f      	b.n	8005b64 <MQTTSubscribe+0x140>
      for (int32_t i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	3301      	adds	r3, #1
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	dde0      	ble.n	8005b12 <MQTTSubscribe+0xee>
 8005b50:	e008      	b.n	8005b64 <MQTTSubscribe+0x140>
        }
      }
    }
  }
  else 
    rc = FAILURE;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b58:	e004      	b.n	8005b64 <MQTTSubscribe+0x140>
    goto exit;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <MQTTSubscribe+0x140>
    goto exit;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <MQTTSubscribe+0x140>
    goto exit;             // there was a problem
 8005b62:	bf00      	nop
        
exit:
  return rc;
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3740      	adds	r7, #64	; 0x40
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bdb0      	pop	{r4, r5, r7, pc}

08005b6e <MQTTPublish>:
exit:
  return rc;
}

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
 8005b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b70:	b097      	sub	sp, #92	; 0x5c
 8005b72:	af08      	add	r7, sp, #32
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  int32_t rc = FAILURE;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
  Timer timer;   
  MQTTString topic = MQTTString_initializer;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	2300      	movs	r3, #0
 8005b86:	623b      	str	r3, [r7, #32]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
  topic.cstring = (char *)topicName;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61fb      	str	r3, [r7, #28]
  int32_t len = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30

  InitTimer(&timer);
 8005b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 ffaf 	bl	8006afc <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 ff65 	bl	8006a78 <countdown_ms>
    
  if (!c->isconnected)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 808e 	beq.w	8005cd4 <MQTTPublish+0x166>
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d003      	beq.n	8005bc8 <MQTTPublish+0x5a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d106      	bne.n	8005bd6 <MQTTPublish+0x68>
    message->id = getNextPacketId(c);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fb15 	bl	80051f8 <getNextPacketId>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	809a      	strh	r2, [r3, #4]
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	469c      	mov	ip, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 e000 	ldrb.w	lr, [r3]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	785d      	ldrb	r5, [r3, #1]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	889e      	ldrh	r6, [r3, #4]
        topic, (uint8_t*)message->payload, message->payloadlen);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68d2      	ldr	r2, [r2, #12]
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 8005bf8:	9206      	str	r2, [sp, #24]
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	ac02      	add	r4, sp, #8
 8005bfe:	f107 031c 	add.w	r3, r7, #28
 8005c02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c0a:	9601      	str	r6, [sp, #4]
 8005c0c:	9500      	str	r5, [sp, #0]
 8005c0e:	4673      	mov	r3, lr
 8005c10:	2200      	movs	r2, #0
 8005c12:	4661      	mov	r1, ip
 8005c14:	6838      	ldr	r0, [r7, #0]
 8005c16:	f000 fd33 	bl	8006680 <MQTTSerialize_publish>
 8005c1a:	6338      	str	r0, [r7, #48]	; 0x30
    
  if (len <= 0)
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dd5a      	ble.n	8005cd8 <MQTTPublish+0x16a>
    goto exit;
  
  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8005c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c26:	461a      	mov	r2, r3
 8005c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff fafd 	bl	800522a <sendPacket>
 8005c30:	6378      	str	r0, [r7, #52]	; 0x34
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d151      	bne.n	8005cdc <MQTTPublish+0x16e>
    goto exit; // there was a problem
    
  if (message->qos == QOS1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d122      	bne.n	8005c86 <MQTTPublish+0x118>
  {
    if (waitfor(c, PUBACK, &timer) == PUBACK)
 8005c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c44:	461a      	mov	r2, r3
 8005c46:	2104      	movs	r1, #4
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fe46 	bl	80058da <waitfor>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d114      	bne.n	8005c7e <MQTTPublish+0x110>
    {
      uint16_t mypacketid;
      uint8_t dup, type;

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	695c      	ldr	r4, [r3, #20]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f107 021a 	add.w	r2, r7, #26
 8005c60:	f107 0119 	add.w	r1, r7, #25
 8005c64:	f107 0018 	add.w	r0, r7, #24
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	f000 fa99 	bl	80061a2 <MQTTDeserialize_ack>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d033      	beq.n	8005cde <MQTTPublish+0x170>
        rc = FAILURE;
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c7c:	e02f      	b.n	8005cde <MQTTPublish+0x170>
    }
    else
      rc = FAILURE;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	e02b      	b.n	8005cde <MQTTPublish+0x170>
  }
  else if (message->qos == QOS2)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d127      	bne.n	8005cde <MQTTPublish+0x170>
  {
    if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8005c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c92:	461a      	mov	r2, r3
 8005c94:	2107      	movs	r1, #7
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fe1f 	bl	80058da <waitfor>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b07      	cmp	r3, #7
 8005ca0:	d114      	bne.n	8005ccc <MQTTPublish+0x15e>
    {
      uint16_t mypacketid;
      uint8_t dup, type;
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	695c      	ldr	r4, [r3, #20]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f107 0216 	add.w	r2, r7, #22
 8005cae:	f107 0115 	add.w	r1, r7, #21
 8005cb2:	f107 0014 	add.w	r0, r7, #20
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4623      	mov	r3, r4
 8005cba:	f000 fa72 	bl	80061a2 <MQTTDeserialize_ack>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d00c      	beq.n	8005cde <MQTTPublish+0x170>
        rc = FAILURE;
 8005cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cca:	e008      	b.n	8005cde <MQTTPublish+0x170>
    }
    else
      rc = FAILURE;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd2:	e004      	b.n	8005cde <MQTTPublish+0x170>
    goto exit;
 8005cd4:	bf00      	nop
 8005cd6:	e002      	b.n	8005cde <MQTTPublish+0x170>
    goto exit;
 8005cd8:	bf00      	nop
 8005cda:	e000      	b.n	8005cde <MQTTPublish+0x170>
    goto exit; // there was a problem
 8005cdc:	bf00      	nop
  }
    
exit:
  return rc;
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	373c      	adds	r7, #60	; 0x3c
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ce8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  int32_t len = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  FUNC_ENTRY;

  if (options->MQTTVersion == 3)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	799b      	ldrb	r3, [r3, #6]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d102      	bne.n	8005d02 <MQTTSerialize_connectLength+0x1a>
    len = 12; /* variable depending on MQTT or MQIsdp */
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e005      	b.n	8005d0e <MQTTSerialize_connectLength+0x26>
  else if (options->MQTTVersion == 4)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	799b      	ldrb	r3, [r3, #6]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d101      	bne.n	8005d0e <MQTTSerialize_connectLength+0x26>
    len = 10;
 8005d0a:	230a      	movs	r3, #10
 8005d0c:	60fb      	str	r3, [r7, #12]

  len += MQTTstrlen(options->clientID) + 2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3308      	adds	r3, #8
 8005d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d16:	f000 fc45 	bl	80065a4 <MQTTstrlen>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  if (options->willFlag)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	7ddb      	ldrb	r3, [r3, #23]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <MQTTSerialize_connectLength+0x6c>
    len += MQTTstrlen(options->will.topicName) + 2 + MQTTstrlen(options->will.message) + 2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3320      	adds	r3, #32
 8005d30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d34:	f000 fc36 	bl	80065a4 <MQTTstrlen>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	1c9c      	adds	r4, r3, #2
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	332c      	adds	r3, #44	; 0x2c
 8005d40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d44:	f000 fc2e 	bl	80065a4 <MQTTstrlen>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4423      	add	r3, r4
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  if (options->username.cstring || options->username.lenstring.data)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <MQTTSerialize_connectLength+0x7c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <MQTTSerialize_connectLength+0x92>
    len += MQTTstrlen(options->username)+2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	333c      	adds	r3, #60	; 0x3c
 8005d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d6c:	f000 fc1a 	bl	80065a4 <MQTTstrlen>
 8005d70:	4603      	mov	r3, r0
 8005d72:	3302      	adds	r3, #2
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  if (options->password.cstring || options->password.lenstring.data)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <MQTTSerialize_connectLength+0xa2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <MQTTSerialize_connectLength+0xb8>
    len += MQTTstrlen(options->password)+2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3348      	adds	r3, #72	; 0x48
 8005d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d92:	f000 fc07 	bl	80065a4 <MQTTstrlen>
 8005d96:	4603      	mov	r3, r0
 8005d98:	3302      	adds	r3, #2
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  FUNC_EXIT_RC(len);
  return len;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}
	...

08005dac <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_connect(uint8_t* buf, int32_t buflen, MQTTPacket_connectData* options)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	; 0x28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint8_t *ptr = buf;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	61fb      	str	r3, [r7, #28]
  MQTTHeader header = {0};
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	763b      	strb	r3, [r7, #24]
  MQTTConnectFlags flags = {0};
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	753b      	strb	r3, [r7, #20]
  int32_t len = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	623b      	str	r3, [r7, #32]
  int32_t rc = -1;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24

  FUNC_ENTRY;
  if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ff8a 	bl	8005ce8 <MQTTSerialize_connectLength>
 8005dd4:	6238      	str	r0, [r7, #32]
 8005dd6:	6a38      	ldr	r0, [r7, #32]
 8005dd8:	f000 fa9a 	bl	8006310 <MQTTPacket_len>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	dd03      	ble.n	8005dec <MQTTSerialize_connect+0x40>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005de4:	f06f 0301 	mvn.w	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
    goto exit;
 8005dea:	e0c4      	b.n	8005f76 <MQTTSerialize_connect+0x1ca>
  }

  header.byte = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	763b      	strb	r3, [r7, #24]
  header.bits.type = CONNECT;
 8005df0:	7e3b      	ldrb	r3, [r7, #24]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f362 1307 	bfi	r3, r2, #4, #4
 8005df8:	763b      	strb	r3, [r7, #24]
  writeChar(&ptr, header.byte); /* write header */
 8005dfa:	7e3a      	ldrb	r2, [r7, #24]
 8005dfc:	f107 031c 	add.w	r3, r7, #28
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fb13 	bl	800642e <writeChar>

  ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	6a39      	ldr	r1, [r7, #32]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fa13 	bl	8006238 <MQTTPacket_encode>
 8005e12:	4602      	mov	r2, r0
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	61fb      	str	r3, [r7, #28]

  if (options->MQTTVersion == 4)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	799b      	ldrb	r3, [r3, #6]
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d10c      	bne.n	8005e3c <MQTTSerialize_connect+0x90>
  {
    writeCString(&ptr, "MQTT");
 8005e22:	f107 031c 	add.w	r3, r7, #28
 8005e26:	4956      	ldr	r1, [pc, #344]	; (8005f80 <MQTTSerialize_connect+0x1d4>)
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fb3d 	bl	80064a8 <writeCString>
    writeChar(&ptr, (char) 4);
 8005e2e:	f107 031c 	add.w	r3, r7, #28
 8005e32:	2104      	movs	r1, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fafa 	bl	800642e <writeChar>
 8005e3a:	e00b      	b.n	8005e54 <MQTTSerialize_connect+0xa8>
  }
  else
  {
    writeCString(&ptr, "MQIsdp");
 8005e3c:	f107 031c 	add.w	r3, r7, #28
 8005e40:	4950      	ldr	r1, [pc, #320]	; (8005f84 <MQTTSerialize_connect+0x1d8>)
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fb30 	bl	80064a8 <writeCString>
    writeChar(&ptr, (char) 3);
 8005e48:	f107 031c 	add.w	r3, r7, #28
 8005e4c:	2103      	movs	r1, #3
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 faed 	bl	800642e <writeChar>
  }

  flags.all = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	753b      	strb	r3, [r7, #20]
  flags.bits.cleansession = options->cleansession;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7d9b      	ldrb	r3, [r3, #22]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	7d3b      	ldrb	r3, [r7, #20]
 8005e64:	f362 0341 	bfi	r3, r2, #1, #1
 8005e68:	753b      	strb	r3, [r7, #20]
  flags.bits.will = (options->willFlag) ? 1 : 0;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	7ddb      	ldrb	r3, [r3, #23]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bf14      	ite	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	2300      	moveq	r3, #0
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	7d3b      	ldrb	r3, [r7, #20]
 8005e7a:	f362 0382 	bfi	r3, r2, #2, #1
 8005e7e:	753b      	strb	r3, [r7, #20]

  if (flags.bits.will)
 8005e80:	7d3b      	ldrb	r3, [r7, #20]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d014      	beq.n	8005eb6 <MQTTSerialize_connect+0x10a>
  {
    flags.bits.willQoS = options->will.qos;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	7d3b      	ldrb	r3, [r7, #20]
 8005e9c:	f362 03c4 	bfi	r3, r2, #3, #2
 8005ea0:	753b      	strb	r3, [r7, #20]
    flags.bits.willRetain = options->will.retained;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	7d3b      	ldrb	r3, [r7, #20]
 8005eb0:	f362 1345 	bfi	r3, r2, #5, #1
 8005eb4:	753b      	strb	r3, [r7, #20]
  }

  if (options->username.cstring || options->username.lenstring.data)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <MQTTSerialize_connect+0x11a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <MQTTSerialize_connect+0x122>
    flags.bits.username = 1;
 8005ec6:	7d3b      	ldrb	r3, [r7, #20]
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ecc:	753b      	strb	r3, [r7, #20]
  if (options->password.cstring || options->password.lenstring.data)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <MQTTSerialize_connect+0x132>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <MQTTSerialize_connect+0x13a>
    flags.bits.password = 1;
 8005ede:	7d3b      	ldrb	r3, [r7, #20]
 8005ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee4:	753b      	strb	r3, [r7, #20]

  writeChar(&ptr, flags.all);
 8005ee6:	7d3a      	ldrb	r2, [r7, #20]
 8005ee8:	f107 031c 	add.w	r3, r7, #28
 8005eec:	4611      	mov	r1, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fa9d 	bl	800642e <writeChar>
  writeInt(&ptr, options->keepAliveInterval);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8a9b      	ldrh	r3, [r3, #20]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f107 031c 	add.w	r3, r7, #28
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 faa9 	bl	8006458 <writeInt>
  writeMQTTString(&ptr, options->clientID);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f107 001c 	add.w	r0, r7, #28
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f10:	f000 fae9 	bl	80064e6 <writeMQTTString>

  if (options->willFlag)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7ddb      	ldrb	r3, [r3, #23]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <MQTTSerialize_connect+0x18c>
  {
    writeMQTTString(&ptr, options->will.topicName);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f107 001c 	add.w	r0, r7, #28
 8005f22:	3320      	adds	r3, #32
 8005f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f26:	f000 fade 	bl	80064e6 <writeMQTTString>
    writeMQTTString(&ptr, options->will.message);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f107 001c 	add.w	r0, r7, #28
 8005f30:	332c      	adds	r3, #44	; 0x2c
 8005f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f34:	f000 fad7 	bl	80064e6 <writeMQTTString>
  }

  if (flags.bits.username)
 8005f38:	7d3b      	ldrb	r3, [r7, #20]
 8005f3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d006      	beq.n	8005f52 <MQTTSerialize_connect+0x1a6>
    writeMQTTString(&ptr, options->username);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f107 001c 	add.w	r0, r7, #28
 8005f4a:	333c      	adds	r3, #60	; 0x3c
 8005f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f4e:	f000 faca 	bl	80064e6 <writeMQTTString>
  if (flags.bits.password)
 8005f52:	7d3b      	ldrb	r3, [r7, #20]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d006      	beq.n	8005f6c <MQTTSerialize_connect+0x1c0>
    writeMQTTString(&ptr, options->password);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f107 001c 	add.w	r0, r7, #28
 8005f64:	3348      	adds	r3, #72	; 0x48
 8005f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f68:	f000 fabd 	bl	80064e6 <writeMQTTString>

  rc = ptr - buf;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24

  exit: FUNC_EXIT_RC(rc);
  return rc;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	; 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08008b88 	.word	0x08008b88
 8005f84:	08008b90 	.word	0x08008b90

08005f88 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_connack(uint8_t* sessionPresent, uint8_t* connack_rc, uint8_t* buf, int32_t buflen)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  MQTTHeader header = {0};
 8005f96:	2300      	movs	r3, #0
 8005f98:	773b      	strb	r3, [r7, #28]
  uint8_t* curdata = buf;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	61bb      	str	r3, [r7, #24]
  uint8_t* enddata = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	623b      	str	r3, [r7, #32]
  int32_t rc = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t mylen;
  MQTTConnackFlags flags = {0};
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	743b      	strb	r3, [r7, #16]

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
 8005faa:	f107 0318 	add.w	r3, r7, #24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fa29 	bl	8006406 <readChar>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	773b      	strb	r3, [r7, #28]
  if (header.bits.type != CONNACK)
 8005fb8:	7f3b      	ldrb	r3, [r7, #28]
 8005fba:	f023 030f 	bic.w	r3, r3, #15
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d12e      	bne.n	8006022 <MQTTDeserialize_connack+0x9a>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f107 0214 	add.w	r2, r7, #20
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 f9e9 	bl	80063a4 <MQTTPacket_decodeBuf>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	4413      	add	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
  enddata = curdata + mylen;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	623b      	str	r3, [r7, #32]
  if (enddata - curdata < 2)
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	dd1b      	ble.n	8006026 <MQTTDeserialize_connack+0x9e>
    goto exit;

  flags.all = readChar(&curdata);
 8005fee:	f107 0318 	add.w	r3, r7, #24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fa07 	bl	8006406 <readChar>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	743b      	strb	r3, [r7, #16]
  *sessionPresent = flags.bits.sessionpresent;
 8005ffc:	7c3b      	ldrb	r3, [r7, #16]
 8005ffe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	701a      	strb	r2, [r3, #0]
  *connack_rc = readChar(&curdata);
 800600a:	f107 0318 	add.w	r3, r7, #24
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f9f9 	bl	8006406 <readChar>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	701a      	strb	r2, [r3, #0]

  rc = 1;
 800601c:	2301      	movs	r3, #1
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
 8006020:	e002      	b.n	8006028 <MQTTDeserialize_connack+0xa0>
    goto exit;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <MQTTDeserialize_connack+0xa0>
    goto exit;
 8006026:	bf00      	nop
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800602a:	4618      	mov	r0, r3
 800602c:	3728      	adds	r7, #40	; 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_zero(uint8_t* buf, int32_t buflen, uint8_t packettype)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b088      	sub	sp, #32
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	4613      	mov	r3, r2
 800603e:	71fb      	strb	r3, [r7, #7]
  MQTTHeader header = {0};
 8006040:	2300      	movs	r3, #0
 8006042:	763b      	strb	r3, [r7, #24]
  int32_t rc = -1;
 8006044:	f04f 33ff 	mov.w	r3, #4294967295
 8006048:	61fb      	str	r3, [r7, #28]
  uint8_t *ptr = buf;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	617b      	str	r3, [r7, #20]

  FUNC_ENTRY;
  if (buflen < 2)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b01      	cmp	r3, #1
 8006052:	dc03      	bgt.n	800605c <MQTTSerialize_zero+0x2a>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006054:	f06f 0301 	mvn.w	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]
    goto exit;
 800605a:	e01e      	b.n	800609a <MQTTSerialize_zero+0x68>
  }
  header.byte = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	763b      	strb	r3, [r7, #24]
  header.bits.type = packettype;
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	b2da      	uxtb	r2, r3
 8006068:	7e3b      	ldrb	r3, [r7, #24]
 800606a:	f362 1307 	bfi	r3, r2, #4, #4
 800606e:	763b      	strb	r3, [r7, #24]
  writeChar(&ptr, header.byte); /* write header */
 8006070:	7e3a      	ldrb	r2, [r7, #24]
 8006072:	f107 0314 	add.w	r3, r7, #20
 8006076:	4611      	mov	r1, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f000 f9d8 	bl	800642e <writeChar>

  ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f8d8 	bl	8006238 <MQTTPacket_encode>
 8006088:	4602      	mov	r2, r0
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  rc = ptr - buf;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	461a      	mov	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	61fb      	str	r3, [r7, #28]
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 800609a:	69fb      	ldr	r3, [r7, #28]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80060ae:	220c      	movs	r2, #12
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ffbd 	bl	8006032 <MQTTSerialize_zero>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08a      	sub	sp, #40	; 0x28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
  MQTTHeader header = {0};
 80060d0:	2300      	movs	r3, #0
 80060d2:	773b      	strb	r3, [r7, #28]
  uint8_t* curdata = buf;
 80060d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d6:	61bb      	str	r3, [r7, #24]
  uint8_t* enddata = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	623b      	str	r3, [r7, #32]
  int32_t rc = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t mylen = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
 80060e4:	f107 0318 	add.w	r3, r7, #24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f98c 	bl	8006406 <readChar>
 80060ee:	4603      	mov	r3, r0
 80060f0:	773b      	strb	r3, [r7, #28]

  if (header.bits.type != PUBLISH)
 80060f2:	7f3b      	ldrb	r3, [r7, #28]
 80060f4:	f023 030f 	bic.w	r3, r3, #15
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b30      	cmp	r3, #48	; 0x30
 80060fc:	d14b      	bne.n	8006196 <MQTTDeserialize_publish+0xd4>
    goto exit;
	
  *dup = header.bits.dup;
 80060fe:	7f3b      	ldrb	r3, [r7, #28]
 8006100:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	701a      	strb	r2, [r3, #0]
  *qos = header.bits.qos;
 800610c:	7f3b      	ldrb	r3, [r7, #28]
 800610e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006112:	b2db      	uxtb	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	701a      	strb	r2, [r3, #0]
  *retained = header.bits.retain;
 800611a:	7f3b      	ldrb	r3, [r7, #28]
 800611c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006120:	b2db      	uxtb	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	701a      	strb	r2, [r3, #0]

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f107 0214 	add.w	r2, r7, #20
 800612e:	4611      	mov	r1, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f937 	bl	80063a4 <MQTTPacket_decodeBuf>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24
 8006138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	4413      	add	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
  enddata = curdata + mylen;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	623b      	str	r3, [r7, #32]

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
 8006148:	f107 0318 	add.w	r3, r7, #24
 800614c:	6a3a      	ldr	r2, [r7, #32]
 800614e:	4619      	mov	r1, r3
 8006150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006152:	f000 f9f6 	bl	8006542 <readMQTTLenString>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01d      	beq.n	8006198 <MQTTDeserialize_publish+0xd6>
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	db18      	blt.n	8006198 <MQTTDeserialize_publish+0xd6>
    goto exit;

  if (*qos > 0)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <MQTTDeserialize_publish+0xbe>
    *packetid = readInt(&curdata);
 800616e:	f107 0318 	add.w	r3, r7, #24
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f92c 	bl	80063d0 <readInt>
 8006178:	4603      	mov	r3, r0
 800617a:	b29a      	uxth	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	801a      	strh	r2, [r3, #0]

  *payloadlen = enddata - curdata;
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	1a9a      	subs	r2, r3, r2
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	601a      	str	r2, [r3, #0]
  *payload = curdata;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	601a      	str	r2, [r3, #0]
  rc = 1;
 8006190:	2301      	movs	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
 8006194:	e000      	b.n	8006198 <MQTTDeserialize_publish+0xd6>
    goto exit;
 8006196:	bf00      	nop
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800619a:	4618      	mov	r0, r3
 800619c:	3728      	adds	r7, #40	; 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b08a      	sub	sp, #40	; 0x28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	603b      	str	r3, [r7, #0]
  MQTTHeader header = {0};
 80061b0:	2300      	movs	r3, #0
 80061b2:	773b      	strb	r3, [r7, #28]
  uint8_t* curdata = buf;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	61bb      	str	r3, [r7, #24]
  uint8_t* enddata = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	623b      	str	r3, [r7, #32]
  int32_t rc = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
 80061c0:	f107 0318 	add.w	r3, r7, #24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f91e 	bl	8006406 <readChar>
 80061ca:	4603      	mov	r3, r0
 80061cc:	773b      	strb	r3, [r7, #28]
  *dup = header.bits.dup;
 80061ce:	7f3b      	ldrb	r3, [r7, #28]
 80061d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	701a      	strb	r2, [r3, #0]
  *packettype = header.bits.type;
 80061dc:	7f3b      	ldrb	r3, [r7, #28]
 80061de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	701a      	strb	r2, [r3, #0]

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f107 0214 	add.w	r2, r7, #20
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f8d6 	bl	80063a4 <MQTTPacket_decodeBuf>
 80061f8:	6278      	str	r0, [r7, #36]	; 0x24
 80061fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4413      	add	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
  enddata = curdata + mylen;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	623b      	str	r3, [r7, #32]

  if (enddata - curdata < 2)
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	2b01      	cmp	r3, #1
 8006212:	dd0b      	ble.n	800622c <MQTTDeserialize_ack+0x8a>
    goto exit;
	
  *packetid = readInt(&curdata);
 8006214:	f107 0318 	add.w	r3, r7, #24
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f8d9 	bl	80063d0 <readInt>
 800621e:	4603      	mov	r3, r0
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	801a      	strh	r2, [r3, #0]

  rc = 1;
 8006226:	2301      	movs	r3, #1
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
 800622a:	e000      	b.n	800622e <MQTTDeserialize_ack+0x8c>
    goto exit;
 800622c:	bf00      	nop
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	; 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int32_t MQTTPacket_encode(uint8_t* buf, int32_t length)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  int32_t rc = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]

  FUNC_ENTRY;
  do
  {
    uint8_t d = length % 128;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	425a      	negs	r2, r3
 800624a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006252:	bf58      	it	pl
 8006254:	4253      	negpl	r3, r2
 8006256:	72fb      	strb	r3, [r7, #11]
    length /= 128;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	da00      	bge.n	8006260 <MQTTPacket_encode+0x28>
 800625e:	337f      	adds	r3, #127	; 0x7f
 8006260:	11db      	asrs	r3, r3, #7
 8006262:	603b      	str	r3, [r7, #0]
	
    /* if there are more digits to encode, set the top bit of this digit */
    if (length > 0)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd03      	ble.n	8006272 <MQTTPacket_encode+0x3a>
      d |= 0x80;
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006270:	72fb      	strb	r3, [r7, #11]

    buf[rc++] = d;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	60fa      	str	r2, [r7, #12]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	7afa      	ldrb	r2, [r7, #11]
 8006280:	701a      	strb	r2, [r3, #0]
  } while (length > 0);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	dcde      	bgt.n	8006246 <MQTTPacket_encode+0xe>

  FUNC_EXIT_RC(rc);
  return rc;
 8006288:	68fb      	ldr	r3, [r7, #12]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int32_t MQTTPacket_decode(int32_t (*getcharfn)(uint8_t*, int32_t), int32_t* value)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  uint8_t c;
  int32_t multiplier = 1;
 80062a0:	2301      	movs	r3, #1
 80062a2:	617b      	str	r3, [r7, #20]
  int32_t len = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]

#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

  FUNC_ENTRY;
  *value = 0;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]

  do
  {
    int32_t rc = MQTTPACKET_READ_ERROR;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	60fb      	str	r3, [r7, #12]

    if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3301      	adds	r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b04      	cmp	r3, #4
 80062be:	dd03      	ble.n	80062c8 <MQTTPacket_decode+0x32>
    {
      rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80062c0:	f04f 33ff 	mov.w	r3, #4294967295
 80062c4:	60fb      	str	r3, [r7, #12]
      goto exit;
 80062c6:	e01d      	b.n	8006304 <MQTTPacket_decode+0x6e>
    }
	
    rc = (*getcharfn)(&c, 1);
 80062c8:	f107 020b 	add.w	r2, r7, #11
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2101      	movs	r1, #1
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	60f8      	str	r0, [r7, #12]

    if (rc != 1)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d112      	bne.n	8006302 <MQTTPacket_decode+0x6c>
      goto exit;
	
    *value += (c & 127) * multiplier;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e6:	6979      	ldr	r1, [r7, #20]
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	441a      	add	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	01db      	lsls	r3, r3, #7
 80062f6:	617b      	str	r3, [r7, #20]
  } while ((c & 128) != 0);
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	dbd6      	blt.n	80062ae <MQTTPacket_decode+0x18>
 8006300:	e000      	b.n	8006304 <MQTTPacket_decode+0x6e>
      goto exit;
 8006302:	bf00      	nop

exit:
  FUNC_EXIT_RC(len);
  return len;
 8006304:	693b      	ldr	r3, [r7, #16]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <MQTTPacket_len>:


int32_t MQTTPacket_len(int32_t rem_len)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  rem_len += 1; /* header byte */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3301      	adds	r3, #1
 800631c:	607b      	str	r3, [r7, #4]

  /* now remaining_length field */
  if (rem_len < 128)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b7f      	cmp	r3, #127	; 0x7f
 8006322:	dc03      	bgt.n	800632c <MQTTPacket_len+0x1c>
    rem_len += 1;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3301      	adds	r3, #1
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	e012      	b.n	8006352 <MQTTPacket_len+0x42>
  else if (rem_len < 16384)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006332:	da03      	bge.n	800633c <MQTTPacket_len+0x2c>
    rem_len += 2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3302      	adds	r3, #2
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	e00a      	b.n	8006352 <MQTTPacket_len+0x42>
  else if (rem_len < 2097151)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a08      	ldr	r2, [pc, #32]	; (8006360 <MQTTPacket_len+0x50>)
 8006340:	4293      	cmp	r3, r2
 8006342:	dc03      	bgt.n	800634c <MQTTPacket_len+0x3c>
    rem_len += 3;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3303      	adds	r3, #3
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	e002      	b.n	8006352 <MQTTPacket_len+0x42>
  else
    rem_len += 4;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	607b      	str	r3, [r7, #4]
	
  return rem_len;
 8006352:	687b      	ldr	r3, [r7, #4]
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	001ffffe 	.word	0x001ffffe

08006364 <bufchar>:


static uint8_t* bufptr;

int32_t bufchar(uint8_t* c, int32_t count)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  for (int32_t i = 0; i < count; ++i)
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e00a      	b.n	800638a <bufchar+0x26>
    *c = *bufptr++;
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <bufchar+0x3c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	4909      	ldr	r1, [pc, #36]	; (80063a0 <bufchar+0x3c>)
 800637c:	600a      	str	r2, [r1, #0]
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < count; ++i)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	dbf0      	blt.n	8006374 <bufchar+0x10>
	
  return count;
 8006392:	683b      	ldr	r3, [r7, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000128 	.word	0x20000128

080063a4 <MQTTPacket_decodeBuf>:


int32_t MQTTPacket_decodeBuf(uint8_t* buf, int32_t* value)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  bufptr = buf;
 80063ae:	4a06      	ldr	r2, [pc, #24]	; (80063c8 <MQTTPacket_decodeBuf+0x24>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6013      	str	r3, [r2, #0]
  return MQTTPacket_decode(bufchar, value);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	4805      	ldr	r0, [pc, #20]	; (80063cc <MQTTPacket_decodeBuf+0x28>)
 80063b8:	f7ff ff6d 	bl	8006296 <MQTTPacket_decode>
 80063bc:	4603      	mov	r3, r0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000128 	.word	0x20000128
 80063cc:	08006365 	.word	0x08006365

080063d0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int32_t readInt(uint8_t** pptr)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = *pptr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
  int32_t len = 256*(*ptr) + (*(ptr+1));
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	3201      	adds	r2, #1
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	4413      	add	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]
  *pptr += 2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	1c9a      	adds	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
  return len;
 80063f8:	68bb      	ldr	r3, [r7, #8]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(uint8_t** pptr)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  char c = **pptr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	73fb      	strb	r3, [r7, #15]
  (*pptr)++;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
  return c;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(uint8_t** pptr, char c)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  **pptr = c;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	701a      	strb	r2, [r3, #0]
  (*pptr)++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(uint8_t** pptr, int32_t anInt)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  **pptr = (uint8_t)(anInt / 256);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	da00      	bge.n	800646e <writeInt+0x16>
 800646c:	33ff      	adds	r3, #255	; 0xff
 800646e:	121b      	asrs	r3, r3, #8
 8006470:	b2db      	uxtb	r3, r3
 8006472:	7013      	strb	r3, [r2, #0]
  (*pptr)++;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
  **pptr = (uint8_t)(anInt % 256);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	4259      	negs	r1, r3
 8006486:	b2db      	uxtb	r3, r3
 8006488:	b2c9      	uxtb	r1, r1
 800648a:	bf58      	it	pl
 800648c:	424b      	negpl	r3, r1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	7013      	strb	r3, [r2, #0]
  (*pptr)++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(uint8_t** pptr, const char* string)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  int32_t len = strlen(string);
 80064b2:	6838      	ldr	r0, [r7, #0]
 80064b4:	f7f9 fe8c 	bl	80001d0 <strlen>
 80064b8:	4603      	mov	r3, r0
 80064ba:	60fb      	str	r3, [r7, #12]
  writeInt(pptr, len);
 80064bc:	68f9      	ldr	r1, [r7, #12]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff ffca 	bl	8006458 <writeInt>
  memcpy(*pptr, string, len);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f985 	bl	80077dc <memcpy>
  *pptr += len;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	441a      	add	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <writeMQTTString>:
  return len;
}


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	4638      	mov	r0, r7
 80064f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (mqttstring.lenstring.len > 0)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd12      	ble.n	8006520 <writeMQTTString+0x3a>
  {
    writeInt(pptr, mqttstring.lenstring.len);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4619      	mov	r1, r3
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff ffaa 	bl	8006458 <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	f001 f965 	bl	80077dc <memcpy>
    *pptr += mqttstring.lenstring.len;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	441a      	add	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]
  }
  else if (mqttstring.cstring)
    writeCString(pptr, mqttstring.cstring);
  else
    writeInt(pptr, 0);
}
 800651e:	e00c      	b.n	800653a <writeMQTTString+0x54>
  else if (mqttstring.cstring)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <writeMQTTString+0x4c>
    writeCString(pptr, mqttstring.cstring);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	4619      	mov	r1, r3
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff ffbc 	bl	80064a8 <writeCString>
}
 8006530:	e003      	b.n	800653a <writeMQTTString+0x54>
    writeInt(pptr, 0);
 8006532:	2100      	movs	r1, #0
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff ff8f 	bl	8006458 <writeInt>
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  int32_t rc = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	2b01      	cmp	r3, #1
 800655c:	dd1a      	ble.n	8006594 <readMQTTLenString+0x52>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800655e:	68b8      	ldr	r0, [r7, #8]
 8006560:	f7ff ff36 	bl	80063d0 <readInt>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	605a      	str	r2, [r3, #4]
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6852      	ldr	r2, [r2, #4]
 8006572:	441a      	add	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d80c      	bhi.n	8006594 <readMQTTLenString+0x52>
    {
      mqttstring->lenstring.data = (char*)*pptr;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	609a      	str	r2, [r3, #8]
      *pptr += mqttstring->lenstring.len;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	6852      	ldr	r2, [r2, #4]
 800658a:	441a      	add	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	601a      	str	r2, [r3, #0]
      rc = 1;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
    }
  }

  mqttstring->cstring = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
  FUNC_EXIT_RC(rc);
  return rc;
 800659a:	697b      	ldr	r3, [r7, #20]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  int rc = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]

  if (mqttstring.cstring)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d006      	beq.n	80065c8 <MQTTstrlen+0x24>
    rc = strlen(mqttstring.cstring);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7f9 fe07 	bl	80001d0 <strlen>
 80065c2:	4603      	mov	r3, r0
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e001      	b.n	80065cc <MQTTstrlen+0x28>
  else
    rc = mqttstring.lenstring.len;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	617b      	str	r3, [r7, #20]
	
  return rc;
 80065cc:	697b      	ldr	r3, [r7, #20]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  int32_t alen = 0, blen = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  char *aptr;
	
  if (a->cstring)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <MQTTPacket_equals+0x30>
  {
    aptr = a->cstring;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	613b      	str	r3, [r7, #16]
    alen = strlen(a->cstring);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7f9 fde8 	bl	80001d0 <strlen>
 8006600:	4603      	mov	r3, r0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e005      	b.n	8006612 <MQTTPacket_equals+0x3c>
  }
  else
  {
    aptr = a->lenstring.data;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	613b      	str	r3, [r7, #16]
    alen = a->lenstring.len;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	617b      	str	r3, [r7, #20]
  }

  blen = strlen(bptr);
 8006612:	6838      	ldr	r0, [r7, #0]
 8006614:	f7f9 fddc 	bl	80001d0 <strlen>
 8006618:	4603      	mov	r3, r0
 800661a:	60fb      	str	r3, [r7, #12]
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d10a      	bne.n	800663a <MQTTPacket_equals+0x64>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	461a      	mov	r2, r3
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f001 fa65 	bl	8007afa <strncmp>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <MQTTPacket_equals+0x64>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <MQTTPacket_equals+0x66>
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_publishLength(uint8_t qos, MQTTString topicName, int32_t payloadlen)
{
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	4604      	mov	r4, r0
 800664c:	4638      	mov	r0, r7
 800664e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006652:	4623      	mov	r3, r4
 8006654:	73fb      	strb	r3, [r7, #15]
  int32_t len = 2 + MQTTstrlen(topicName) + payloadlen;
 8006656:	463b      	mov	r3, r7
 8006658:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800665c:	f7ff ffa2 	bl	80065a4 <MQTTstrlen>
 8006660:	4603      	mov	r3, r0
 8006662:	1c9a      	adds	r2, r3, #2
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	4413      	add	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
  
  if (qos > 0)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <MQTTSerialize_publishLength+0x32>
    len += 2; /* packetid */
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3302      	adds	r3, #2
 8006674:	617b      	str	r3, [r7, #20]
	
  return len;
 8006676:	697b      	ldr	r3, [r7, #20]
}
 8006678:	4618      	mov	r0, r3
 800667a:	371c      	adds	r7, #28
 800667c:	46bd      	mov	sp, r7
 800667e:	bd90      	pop	{r4, r7, pc}

08006680 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_publish(uint8_t* buf, int32_t buflen, uint8_t dup, uint8_t qos, uint8_t retained, uint16_t packetid,
		MQTTString topicName, uint8_t* payload, int32_t payloadlen)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	4611      	mov	r1, r2
 800668c:	461a      	mov	r2, r3
 800668e:	460b      	mov	r3, r1
 8006690:	71fb      	strb	r3, [r7, #7]
 8006692:	4613      	mov	r3, r2
 8006694:	71bb      	strb	r3, [r7, #6]
  uint8_t *ptr = buf;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	617b      	str	r3, [r7, #20]
  MQTTHeader header = {0};
 800669a:	2300      	movs	r3, #0
 800669c:	743b      	strb	r3, [r7, #16]
  int32_t rem_len = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
  int32_t rc = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80066a6:	79b8      	ldrb	r0, [r7, #6]
 80066a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066b2:	f7ff ffc7 	bl	8006644 <MQTTSerialize_publishLength>
 80066b6:	61b8      	str	r0, [r7, #24]
 80066b8:	69b8      	ldr	r0, [r7, #24]
 80066ba:	f7ff fe29 	bl	8006310 <MQTTPacket_len>
 80066be:	4602      	mov	r2, r0
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	dd03      	ble.n	80066ce <MQTTSerialize_publish+0x4e>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80066c6:	f06f 0301 	mvn.w	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
    goto exit;
 80066cc:	e04d      	b.n	800676a <MQTTSerialize_publish+0xea>
  }

  header.bits.type = PUBLISH;
 80066ce:	7c3b      	ldrb	r3, [r7, #16]
 80066d0:	2203      	movs	r2, #3
 80066d2:	f362 1307 	bfi	r3, r2, #4, #4
 80066d6:	743b      	strb	r3, [r7, #16]
  header.bits.dup = dup;
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	7c3b      	ldrb	r3, [r7, #16]
 80066e2:	f362 03c3 	bfi	r3, r2, #3, #1
 80066e6:	743b      	strb	r3, [r7, #16]
  header.bits.qos = qos;
 80066e8:	79bb      	ldrb	r3, [r7, #6]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	7c3b      	ldrb	r3, [r7, #16]
 80066f2:	f362 0342 	bfi	r3, r2, #1, #2
 80066f6:	743b      	strb	r3, [r7, #16]
  header.bits.retain = retained;
 80066f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	b2da      	uxtb	r2, r3
 8006702:	7c3b      	ldrb	r3, [r7, #16]
 8006704:	f362 0300 	bfi	r3, r2, #0, #1
 8006708:	743b      	strb	r3, [r7, #16]
  writeChar(&ptr, header.byte); /* write header */
 800670a:	7c3a      	ldrb	r2, [r7, #16]
 800670c:	f107 0314 	add.w	r3, r7, #20
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff fe8b 	bl	800642e <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fd8b 	bl	8006238 <MQTTPacket_encode>
 8006722:	4602      	mov	r2, r0
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  writeMQTTString(&ptr, topicName);
 800672a:	f107 0014 	add.w	r0, r7, #20
 800672e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006734:	f7ff fed7 	bl	80064e6 <writeMQTTString>

  if (qos > 0)
 8006738:	79bb      	ldrb	r3, [r7, #6]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d006      	beq.n	800674c <MQTTSerialize_publish+0xcc>
    writeInt(&ptr, packetid);
 800673e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fe86 	bl	8006458 <writeInt>

  memcpy(ptr, payload, payloadlen);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f842 	bl	80077dc <memcpy>
  ptr += payloadlen;
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675c:	4413      	add	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  rc = ptr - buf;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	461a      	mov	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	61fb      	str	r3, [r7, #28]
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 800676a:	69fb      	ldr	r3, [r7, #28]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	460b      	mov	r3, r1
 8006784:	71fb      	strb	r3, [r7, #7]
 8006786:	4613      	mov	r3, r2
 8006788:	71bb      	strb	r3, [r7, #6]
  MQTTHeader header = {0};
 800678a:	2300      	movs	r3, #0
 800678c:	763b      	strb	r3, [r7, #24]
  int32_t rc = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
  uint8_t *ptr = buf;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	617b      	str	r3, [r7, #20]

  FUNC_ENTRY;

  if (buflen < 4)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b03      	cmp	r3, #3
 800679a:	dc03      	bgt.n	80067a4 <MQTTSerialize_ack+0x30>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800679c:	f06f 0301 	mvn.w	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
    goto exit;
 80067a2:	e038      	b.n	8006816 <MQTTSerialize_ack+0xa2>
  }

  header.bits.type = packettype;
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	7e3b      	ldrb	r3, [r7, #24]
 80067ae:	f362 1307 	bfi	r3, r2, #4, #4
 80067b2:	763b      	strb	r3, [r7, #24]
  header.bits.dup = dup;
 80067b4:	79bb      	ldrb	r3, [r7, #6]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	7e3b      	ldrb	r3, [r7, #24]
 80067be:	f362 03c3 	bfi	r3, r2, #3, #1
 80067c2:	763b      	strb	r3, [r7, #24]
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	2b06      	cmp	r3, #6
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	7e3b      	ldrb	r3, [r7, #24]
 80067d8:	f362 0342 	bfi	r3, r2, #1, #2
 80067dc:	763b      	strb	r3, [r7, #24]
  writeChar(&ptr, header.byte); /* write header */
 80067de:	7e3a      	ldrb	r2, [r7, #24]
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe21 	bl	800642e <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fd21 	bl	8006238 <MQTTPacket_encode>
 80067f6:	4602      	mov	r2, r0
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
  writeInt(&ptr, packetid);
 80067fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006800:	f107 0314 	add.w	r3, r7, #20
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fe26 	bl	8006458 <writeInt>
  rc = ptr - buf;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	61fb      	str	r3, [r7, #28]
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 8006816:	69fb      	ldr	r3, [r7, #28]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  int32_t len = 2; /* packetid */
 800682a:	2302      	movs	r3, #2
 800682c:	60fb      	str	r3, [r7, #12]

  for (int32_t i = 0; i < count; ++i)
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	e013      	b.n	800685c <MQTTSerialize_subscribeLength+0x3c>
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	461a      	mov	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	4413      	add	r3, r2
 8006844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006848:	f7ff feac 	bl	80065a4 <MQTTstrlen>
 800684c:	4603      	mov	r3, r0
 800684e:	3303      	adds	r3, #3
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  for (int32_t i = 0; i < count; ++i)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3301      	adds	r3, #1
 800685a:	60bb      	str	r3, [r7, #8]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	dbe7      	blt.n	8006834 <MQTTSerialize_subscribeLength+0x14>
	
  return len;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b08a      	sub	sp, #40	; 0x28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	4611      	mov	r1, r2
 800687a:	461a      	mov	r2, r3
 800687c:	460b      	mov	r3, r1
 800687e:	71fb      	strb	r3, [r7, #7]
 8006880:	4613      	mov	r3, r2
 8006882:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = buf;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	61bb      	str	r3, [r7, #24]
  MQTTHeader header = {0};
 8006888:	2300      	movs	r3, #0
 800688a:	753b      	strb	r3, [r7, #20]
  int32_t rem_len = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
  int32_t rc = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	627b      	str	r3, [r7, #36]	; 0x24

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8006894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006898:	f7ff ffc2 	bl	8006820 <MQTTSerialize_subscribeLength>
 800689c:	61f8      	str	r0, [r7, #28]
 800689e:	69f8      	ldr	r0, [r7, #28]
 80068a0:	f7ff fd36 	bl	8006310 <MQTTPacket_len>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	dd03      	ble.n	80068b4 <MQTTSerialize_subscribe+0x46>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80068ac:	f06f 0301 	mvn.w	r3, #1
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
    goto exit;
 80068b2:	e052      	b.n	800695a <MQTTSerialize_subscribe+0xec>
  }

  header.byte = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	753b      	strb	r3, [r7, #20]
  header.bits.type = SUBSCRIBE;
 80068b8:	7d3b      	ldrb	r3, [r7, #20]
 80068ba:	2208      	movs	r2, #8
 80068bc:	f362 1307 	bfi	r3, r2, #4, #4
 80068c0:	753b      	strb	r3, [r7, #20]
  header.bits.dup = dup;
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	7d3b      	ldrb	r3, [r7, #20]
 80068cc:	f362 03c3 	bfi	r3, r2, #3, #1
 80068d0:	753b      	strb	r3, [r7, #20]
  header.bits.qos = 1;
 80068d2:	7d3b      	ldrb	r3, [r7, #20]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f362 0342 	bfi	r3, r2, #1, #2
 80068da:	753b      	strb	r3, [r7, #20]
  writeChar(&ptr, header.byte); /* write header */
 80068dc:	7d3a      	ldrb	r2, [r7, #20]
 80068de:	f107 0318 	add.w	r3, r7, #24
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fda2 	bl	800642e <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	69f9      	ldr	r1, [r7, #28]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fca2 	bl	8006238 <MQTTPacket_encode>
 80068f4:	4602      	mov	r2, r0
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	4413      	add	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]

  writeInt(&ptr, packetid);
 80068fc:	88ba      	ldrh	r2, [r7, #4]
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fda7 	bl	8006458 <writeInt>

  for (int32_t i = 0; i < count; ++i)
 800690a:	2300      	movs	r3, #0
 800690c:	623b      	str	r3, [r7, #32]
 800690e:	e01b      	b.n	8006948 <MQTTSerialize_subscribe+0xda>
  {
    writeMQTTString(&ptr, topicFilters[i]);
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	461a      	mov	r2, r3
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	4413      	add	r3, r2
 8006920:	f107 0018 	add.w	r0, r7, #24
 8006924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006926:	f7ff fdde 	bl	80064e6 <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006930:	4413      	add	r3, r2
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	f107 0318 	add.w	r3, r7, #24
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fd76 	bl	800642e <writeChar>
  for (int32_t i = 0; i < count; ++i)
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	3301      	adds	r3, #1
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	6a3a      	ldr	r2, [r7, #32]
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	429a      	cmp	r2, r3
 800694e:	dbdf      	blt.n	8006910 <MQTTSerialize_subscribe+0xa2>
  }

  rc = ptr - buf;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	461a      	mov	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	; 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b08b      	sub	sp, #44	; 0x2c
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  MQTTHeader header = {0};
 8006972:	2300      	movs	r3, #0
 8006974:	773b      	strb	r3, [r7, #28]
  uint8_t* curdata = buf;
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	61bb      	str	r3, [r7, #24]
  uint8_t* enddata = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	623b      	str	r3, [r7, #32]
  int32_t rc = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
 8006982:	f107 0318 	add.w	r3, r7, #24
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fd3d 	bl	8006406 <readChar>
 800698c:	4603      	mov	r3, r0
 800698e:	773b      	strb	r3, [r7, #28]
  if (header.bits.type != SUBACK)
 8006990:	7f3b      	ldrb	r3, [r7, #28]
 8006992:	f023 030f 	bic.w	r3, r3, #15
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b90      	cmp	r3, #144	; 0x90
 800699a:	d140      	bne.n	8006a1e <MQTTDeserialize_suback+0xba>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f107 0214 	add.w	r2, r7, #20
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff fcfd 	bl	80063a4 <MQTTPacket_decodeBuf>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24
 80069ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	4413      	add	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
  enddata = curdata + mylen;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	623b      	str	r3, [r7, #32]

  if (enddata - curdata < 2)
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	dd2d      	ble.n	8006a22 <MQTTDeserialize_suback+0xbe>
    goto exit;

  *packetid = readInt(&curdata);
 80069c6:	f107 0318 	add.w	r3, r7, #24
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fd00 	bl	80063d0 <readInt>
 80069d0:	4603      	mov	r3, r0
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	801a      	strh	r2, [r3, #0]

  *count = 0;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]

  while (curdata < enddata)
 80069de:	e017      	b.n	8006a10 <MQTTDeserialize_suback+0xac>
  {
    if (*count > maxcount)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	dd03      	ble.n	80069f2 <MQTTDeserialize_suback+0x8e>
    {
      rc = -1;
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
      goto exit;
 80069f0:	e018      	b.n	8006a24 <MQTTDeserialize_suback+0xc0>
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6011      	str	r1, [r2, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	18d4      	adds	r4, r2, r3
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fcfd 	bl	8006406 <readChar>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	6023      	str	r3, [r4, #0]
  while (curdata < enddata)
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d3e3      	bcc.n	80069e0 <MQTTDeserialize_suback+0x7c>
  }

  rc = 1;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1c:	e002      	b.n	8006a24 <MQTTDeserialize_suback+0xc0>
    goto exit;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <MQTTDeserialize_suback+0xc0>
    goto exit;
 8006a22:	bf00      	nop
exit:
  FUNC_EXIT_RC(rc);
  return rc;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	372c      	adds	r7, #44	; 0x2c
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}
	...

08006a30 <MilliTimer_Handler>:
#include "socket.h"

uint32_t MilliTimer;

void MilliTimer_Handler(void) 
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  MilliTimer++;
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <MilliTimer_Handler+0x18>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a03      	ldr	r2, [pc, #12]	; (8006a48 <MilliTimer_Handler+0x18>)
 8006a3c:	6013      	str	r3, [r2, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20000154 	.word	0x20000154

08006a4c <expired>:

int8_t expired(Timer* timer) 
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  int32_t left = timer->end_time - MilliTimer;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <expired+0x28>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	60fb      	str	r3, [r7, #12]
  return (left < 0);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	0fdb      	lsrs	r3, r3, #31
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	b25b      	sxtb	r3, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000154 	.word	0x20000154

08006a78 <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  timer->end_time = MilliTimer + timeout;
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <countdown_ms+0x24>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	441a      	add	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	605a      	str	r2, [r3, #4]
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000154 	.word	0x20000154

08006aa0 <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  timer->end_time = MilliTimer + (timeout * 1000);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ab0:	fb02 f203 	mul.w	r2, r2, r3
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <countdown+0x2c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	441a      	add	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000154 	.word	0x20000154

08006ad0 <left_ms>:

int32_t left_ms(Timer* timer)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  int32_t left = timer->end_time - MilliTimer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <left_ms+0x28>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	60fb      	str	r3, [r7, #12]
  return (left < 0) ? 0 : left;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000154 	.word	0x20000154

08006afc <InitTimer>:

void InitTimer(Timer* timer)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  timer->end_time = 0;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	605a      	str	r2, [r3, #4]
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <NewNetwork>:


void NewNetwork(Network* n)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  n->my_socket = 0;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
  n->mqttread = w5500_read;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a06      	ldr	r2, [pc, #24]	; (8006b44 <NewNetwork+0x2c>)
 8006b2a:	605a      	str	r2, [r3, #4]
  n->mqttwrite = w5500_write;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a06      	ldr	r2, [pc, #24]	; (8006b48 <NewNetwork+0x30>)
 8006b30:	609a      	str	r2, [r3, #8]
  n->disconnect = w5500_disconnect;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a05      	ldr	r2, [pc, #20]	; (8006b4c <NewNetwork+0x34>)
 8006b36:	60da      	str	r2, [r3, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	08006b51 	.word	0x08006b51
 8006b48:	08006bab 	.word	0x08006bab
 8006b4c:	08006bf3 	.word	0x08006bf3

08006b50 <w5500_read>:

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	3301      	adds	r3, #1
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fb f977 	bl	8001e60 <WIZCHIP_READ>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b17      	cmp	r3, #23
 8006b76:	d113      	bne.n	8006ba0 <w5500_read+0x50>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fb fb13 	bl	80021aa <getSn_RX_RSR>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <w5500_read+0x50>
    return recv(n->my_socket, buffer, len);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	b292      	uxth	r2, r2
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fc f818 	bl	8002bcc <recv>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	e000      	b.n	8006ba2 <w5500_read+0x52>
  
  return 0;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	607a      	str	r2, [r7, #4]
 8006bb6:	603b      	str	r3, [r7, #0]
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fb f94a 	bl	8001e60 <WIZCHIP_READ>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b17      	cmp	r3, #23
 8006bd0:	d10a      	bne.n	8006be8 <w5500_write+0x3e>
    return send(n->my_socket, buffer, len);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fb fefa 	bl	80029d8 <send>
 8006be4:	4603      	mov	r3, r0
 8006be6:	e000      	b.n	8006bea <w5500_write+0x40>
  
  return 0;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  disconnect(n->my_socket);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fb fe73 	bl	80028ec <disconnect>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <ConnectNetwork>:

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	80fb      	strh	r3, [r7, #6]
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	b2d8      	uxtb	r0, r3
 8006c22:	2300      	movs	r3, #0
 8006c24:	f243 0239 	movw	r2, #12345	; 0x3039
 8006c28:	2101      	movs	r1, #1
 8006c2a:	f7fb fc07 	bl	800243c <socket>
  connect(n->my_socket, ip, port);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	88fa      	ldrh	r2, [r7, #6]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fb fd7b 	bl	8002734 <connect>

  return 0;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <MX_GPIO_Init>:
#include <W5500_driver.h>
extern wiz_NetInfo gWIZNETINFO;
SPI_HandleTypeDef W5500_SPIx;

static void MX_GPIO_Init(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c4e:	f107 030c 	add.w	r3, r7, #12
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	605a      	str	r2, [r3, #4]
 8006c58:	609a      	str	r2, [r3, #8]
 8006c5a:	60da      	str	r2, [r3, #12]
 8006c5c:	611a      	str	r2, [r3, #16]
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c64:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c80:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	f043 0310 	orr.w	r3, r3, #16
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8a:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	607b      	str	r3, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c96:	2300      	movs	r3, #0
 8006c98:	603b      	str	r3, [r7, #0]
 8006c9a:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	f043 0302 	orr.w	r3, r3, #2
 8006ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	; (8006ce4 <MX_GPIO_Init+0x9c>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006cb8:	480b      	ldr	r0, [pc, #44]	; (8006ce8 <MX_GPIO_Init+0xa0>)
 8006cba:	f7f9 ff85 	bl	8000bc8 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PE7 PE8 PE9 */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006cbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006cc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cd0:	f107 030c 	add.w	r3, r7, #12
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4804      	ldr	r0, [pc, #16]	; (8006ce8 <MX_GPIO_Init+0xa0>)
 8006cd8:	f7f9 fddc 	bl	8000894 <HAL_GPIO_Init>
}
 8006cdc:	bf00      	nop
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40023800 	.word	0x40023800
 8006ce8:	40021000 	.word	0x40021000

08006cec <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
	W5500_SPIx.Instance = SPI2;
 8006cf0:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <MX_SPI1_Init+0x68>)
 8006cf4:	601a      	str	r2, [r3, #0]
	W5500_SPIx.Init.Mode = SPI_MODE_MASTER;
 8006cf6:	4b16      	ldr	r3, [pc, #88]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006cfc:	605a      	str	r2, [r3, #4]
	W5500_SPIx.Init.Direction = SPI_DIRECTION_2LINES;
 8006cfe:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	609a      	str	r2, [r3, #8]
	W5500_SPIx.Init.DataSize = SPI_DATASIZE_8BIT;
 8006d04:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	60da      	str	r2, [r3, #12]
	W5500_SPIx.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	611a      	str	r2, [r3, #16]
	W5500_SPIx.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	615a      	str	r2, [r3, #20]
	W5500_SPIx.Init.NSS = SPI_NSS_SOFT;
 8006d16:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1c:	619a      	str	r2, [r3, #24]
	W5500_SPIx.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
	W5500_SPIx.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	621a      	str	r2, [r3, #32]
	W5500_SPIx.Init.TIMode = SPI_TIMODE_DISABLE;
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24
	W5500_SPIx.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	629a      	str	r2, [r3, #40]	; 0x28
	W5500_SPIx.Init.CRCPolynomial = 10;
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d38:	220a      	movs	r2, #10
 8006d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&W5500_SPIx) != HAL_OK)while(1);
 8006d3c:	4804      	ldr	r0, [pc, #16]	; (8006d50 <MX_SPI1_Init+0x64>)
 8006d3e:	f7fa fb69 	bl	8001414 <HAL_SPI_Init>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d000      	beq.n	8006d4a <MX_SPI1_Init+0x5e>
 8006d48:	e7fe      	b.n	8006d48 <MX_SPI1_Init+0x5c>
}
 8006d4a:	bf00      	nop
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000158 	.word	0x20000158
 8006d54:	40003800 	.word	0x40003800

08006d58 <W5500_Reset>:

void W5500_Reset(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_RESET_PORT, W5500_RESET_PIN, GPIO_PIN_RESET);
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2180      	movs	r1, #128	; 0x80
 8006d60:	4804      	ldr	r0, [pc, #16]	; (8006d74 <W5500_Reset+0x1c>)
 8006d62:	f7f9 ff31 	bl	8000bc8 <HAL_GPIO_WritePin>
	//delay_us(500);
	HAL_GPIO_WritePin(W5500_RESET_PORT, W5500_RESET_PIN, GPIO_PIN_SET);
 8006d66:	2201      	movs	r2, #1
 8006d68:	2180      	movs	r1, #128	; 0x80
 8006d6a:	4802      	ldr	r0, [pc, #8]	; (8006d74 <W5500_Reset+0x1c>)
 8006d6c:	f7f9 ff2c 	bl	8000bc8 <HAL_GPIO_WritePin>
	//delay_ms(1);
}
 8006d70:	bf00      	nop
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40021000 	.word	0x40021000

08006d78 <W5500_Init>:

void W5500_Init()
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8006d7c:	f7ff ff64 	bl	8006c48 <MX_GPIO_Init>
	MX_SPI1_Init();
 8006d80:	f7ff ffb4 	bl	8006cec <MX_SPI1_Init>
	W5500_Reset();
 8006d84:	f7ff ffe8 	bl	8006d58 <W5500_Reset>
}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <W5500_chipInit>:

void W5500_chipInit(void)
{
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
	uint8_t temp;
	uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <W5500_chipInit+0x64>)
 8006d94:	1d3c      	adds	r4, r7, #4
 8006d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	W5500DeSelect();
 8006d9c:	f000 f868 	bl	8006e70 <W5500DeSelect>
	/* spi function register */
	reg_wizchip_spi_cbfunc(W5500ReadByte, W5500WriteByte);
 8006da0:	4914      	ldr	r1, [pc, #80]	; (8006df4 <W5500_chipInit+0x68>)
 8006da2:	4815      	ldr	r0, [pc, #84]	; (8006df8 <W5500_chipInit+0x6c>)
 8006da4:	f7fc fad2 	bl	800334c <reg_wizchip_spi_cbfunc>
	/* CS function register */
	reg_wizchip_cs_cbfunc(W5500Select, W5500DeSelect);
 8006da8:	4914      	ldr	r1, [pc, #80]	; (8006dfc <W5500_chipInit+0x70>)
 8006daa:	4815      	ldr	r0, [pc, #84]	; (8006e00 <W5500_chipInit+0x74>)
 8006dac:	f7fc faaa 	bl	8003304 <reg_wizchip_cs_cbfunc>
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 8006db0:	1d3b      	adds	r3, r7, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	2001      	movs	r0, #1
 8006db6:	f7fc faf5 	bl	80033a4 <ctlwizchip>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d102      	bne.n	8006dc8 <W5500_chipInit+0x3c>
	{
		printf("W5500 initialized fail.\r\n");
 8006dc2:	4810      	ldr	r0, [pc, #64]	; (8006e04 <W5500_chipInit+0x78>)
 8006dc4:	f000 fe3e 	bl	8007a44 <puts>
	}
	//check phy status
	do
	{
		if (ctlwizchip(CW_GET_PHYLINK, (void*)&temp) == -1)
 8006dc8:	f107 0317 	add.w	r3, r7, #23
 8006dcc:	4619      	mov	r1, r3
 8006dce:	200f      	movs	r0, #15
 8006dd0:	f7fc fae8 	bl	80033a4 <ctlwizchip>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d102      	bne.n	8006de2 <W5500_chipInit+0x56>
		{
			printf("Unknown PHY link status.\r\n");
 8006ddc:	480a      	ldr	r0, [pc, #40]	; (8006e08 <W5500_chipInit+0x7c>)
 8006dde:	f000 fe31 	bl	8007a44 <puts>
		}
	} while (temp == PHY_LINK_OFF);
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0ef      	beq.n	8006dc8 <W5500_chipInit+0x3c>
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd90      	pop	{r4, r7, pc}
 8006df0:	08008bd0 	.word	0x08008bd0
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e31 	.word	0x08006e31
 8006dfc:	08006e71 	.word	0x08006e71
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08008b98 	.word	0x08008b98
 8006e08:	08008bb4 	.word	0x08008bb4

08006e0c <W5500WriteByte>:

void W5500WriteByte(uint8_t byte)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&W5500_SPIx, &byte, 1, 10);
 8006e16:	1df9      	adds	r1, r7, #7
 8006e18:	230a      	movs	r3, #10
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4803      	ldr	r0, [pc, #12]	; (8006e2c <W5500WriteByte+0x20>)
 8006e1e:	f7fa fb5c 	bl	80014da <HAL_SPI_Transmit>
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000158 	.word	0x20000158

08006e30 <W5500ReadByte>:

uint8_t W5500ReadByte(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af02      	add	r7, sp, #8
	uint8_t txData = 0xFF;
 8006e36:	23ff      	movs	r3, #255	; 0xff
 8006e38:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData;
	HAL_SPI_TransmitReceive(&W5500_SPIx, &txData, &rxData, 1, 10);
 8006e3a:	1dba      	adds	r2, r7, #6
 8006e3c:	1df9      	adds	r1, r7, #7
 8006e3e:	230a      	movs	r3, #10
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	2301      	movs	r3, #1
 8006e44:	4803      	ldr	r0, [pc, #12]	; (8006e54 <W5500ReadByte+0x24>)
 8006e46:	f7fa fc7a 	bl	800173e <HAL_SPI_TransmitReceive>
	return rxData;
 8006e4a:	79bb      	ldrb	r3, [r7, #6]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000158 	.word	0x20000158

08006e58 <W5500Select>:

void W5500Select(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_PORT, W5500_CS_PIN, GPIO_PIN_RESET);
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e62:	4802      	ldr	r0, [pc, #8]	; (8006e6c <W5500Select+0x14>)
 8006e64:	f7f9 feb0 	bl	8000bc8 <HAL_GPIO_WritePin>
}
 8006e68:	bf00      	nop
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40021000 	.word	0x40021000

08006e70 <W5500DeSelect>:

void W5500DeSelect(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_PORT, W5500_CS_PIN, GPIO_PIN_SET);
 8006e74:	2201      	movs	r2, #1
 8006e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e7a:	4802      	ldr	r0, [pc, #8]	; (8006e84 <W5500DeSelect+0x14>)
 8006e7c:	f7f9 fea4 	bl	8000bc8 <HAL_GPIO_WritePin>
}
 8006e80:	bf00      	nop
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40021000 	.word	0x40021000

08006e88 <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	609a      	str	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da09      	bge.n	8006eba <__sputc_r+0x32>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	db0d      	blt.n	8006ece <__sputc_r+0x46>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b0a      	cmp	r3, #10
 8006eb8:	d009      	beq.n	8006ece <__sputc_r+0x46>
		return (*_p->_p++ = _c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	1c59      	adds	r1, r3, #1
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6011      	str	r1, [r2, #0]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	e005      	b.n	8006eda <__sputc_r+0x52>
	else
		return (__swbuf_r(_ptr, _c, _p));
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fe5e 	bl	8007b94 <__swbuf_r>
 8006ed8:	4603      	mov	r3, r0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <msTick_Handler>:
	.dns = {DRIPADDR0, DRIPADDR1, DRIPADDR2, DRIPADDR3},
	.dhcp = NETINFO_DHCP  // NETINFO_STATIC
};

void msTick_Handler(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
	MilliTimer_Handler();
 8006ee8:	f7ff fda2 	bl	8006a30 <MilliTimer_Handler>
	if (++dhcp_counter >= 1000)
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <msTick_Handler+0x4c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	4a0f      	ldr	r2, [pc, #60]	; (8006f30 <msTick_Handler+0x4c>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <msTick_Handler+0x4c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006efe:	d314      	bcc.n	8006f2a <msTick_Handler+0x46>
	{
		dhcp_counter = 0;
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <msTick_Handler+0x4c>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
		DHCP_time_handler();
 8006f06:	f7fe f8d7 	bl	80050b8 <DHCP_time_handler>
		if (++mqtt_push_counter >= 10)
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <msTick_Handler+0x50>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <msTick_Handler+0x50>)
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <msTick_Handler+0x50>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d905      	bls.n	8006f2a <msTick_Handler+0x46>
		{
			mqtt_push_counter = 0;
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <msTick_Handler+0x50>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
			mqtt_flag = 1;
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <msTick_Handler+0x54>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200001b0 	.word	0x200001b0
 8006f34:	200009b6 	.word	0x200009b6
 8006f38:	200009f8 	.word	0x200009f8

08006f3c <print_network_information>:

void print_network_information(void)
{
 8006f3c:	b5b0      	push	{r4, r5, r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&gWIZNETINFO);
 8006f42:	4835      	ldr	r0, [pc, #212]	; (8007018 <print_network_information+0xdc>)
 8006f44:	f7fc fe12 	bl	8003b6c <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8006f48:	4b33      	ldr	r3, [pc, #204]	; (8007018 <print_network_information+0xdc>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4b32      	ldr	r3, [pc, #200]	; (8007018 <print_network_information+0xdc>)
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	461c      	mov	r4, r3
 8006f54:	4b30      	ldr	r3, [pc, #192]	; (8007018 <print_network_information+0xdc>)
 8006f56:	789b      	ldrb	r3, [r3, #2]
 8006f58:	461d      	mov	r5, r3
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <print_network_information+0xdc>)
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <print_network_information+0xdc>)
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	4619      	mov	r1, r3
 8006f66:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <print_network_information+0xdc>)
 8006f68:	795b      	ldrb	r3, [r3, #5]
 8006f6a:	9302      	str	r3, [sp, #8]
 8006f6c:	9101      	str	r1, [sp, #4]
 8006f6e:	9200      	str	r2, [sp, #0]
 8006f70:	462b      	mov	r3, r5
 8006f72:	4622      	mov	r2, r4
 8006f74:	4601      	mov	r1, r0
 8006f76:	4829      	ldr	r0, [pc, #164]	; (800701c <print_network_information+0xe0>)
 8006f78:	f000 fcf0 	bl	800795c <iprintf>
	if(gWIZNETINFO.dhcp == NETINFO_DHCP)printf("DHCP\n\r");
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <print_network_information+0xdc>)
 8006f7e:	7d9b      	ldrb	r3, [r3, #22]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d103      	bne.n	8006f8c <print_network_information+0x50>
 8006f84:	4826      	ldr	r0, [pc, #152]	; (8007020 <print_network_information+0xe4>)
 8006f86:	f000 fce9 	bl	800795c <iprintf>
 8006f8a:	e002      	b.n	8006f92 <print_network_information+0x56>
	else printf("Static IP\n\r");
 8006f8c:	4825      	ldr	r0, [pc, #148]	; (8007024 <print_network_information+0xe8>)
 8006f8e:	f000 fce5 	bl	800795c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <print_network_information+0xdc>)
 8006f94:	799b      	ldrb	r3, [r3, #6]
 8006f96:	4619      	mov	r1, r3
 8006f98:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <print_network_information+0xdc>)
 8006f9a:	79db      	ldrb	r3, [r3, #7]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <print_network_information+0xdc>)
 8006fa0:	7a1b      	ldrb	r3, [r3, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	; (8007018 <print_network_information+0xdc>)
 8006fa6:	7a5b      	ldrb	r3, [r3, #9]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4603      	mov	r3, r0
 8006fac:	481e      	ldr	r0, [pc, #120]	; (8007028 <print_network_information+0xec>)
 8006fae:	f000 fcd5 	bl	800795c <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8006fb2:	4b19      	ldr	r3, [pc, #100]	; (8007018 <print_network_information+0xdc>)
 8006fb4:	7a9b      	ldrb	r3, [r3, #10]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4b17      	ldr	r3, [pc, #92]	; (8007018 <print_network_information+0xdc>)
 8006fba:	7adb      	ldrb	r3, [r3, #11]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4b16      	ldr	r3, [pc, #88]	; (8007018 <print_network_information+0xdc>)
 8006fc0:	7b1b      	ldrb	r3, [r3, #12]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <print_network_information+0xdc>)
 8006fc6:	7b5b      	ldrb	r3, [r3, #13]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4817      	ldr	r0, [pc, #92]	; (800702c <print_network_information+0xf0>)
 8006fce:	f000 fcc5 	bl	800795c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <print_network_information+0xdc>)
 8006fd4:	7b9b      	ldrb	r3, [r3, #14]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <print_network_information+0xdc>)
 8006fda:	7bdb      	ldrb	r3, [r3, #15]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <print_network_information+0xdc>)
 8006fe0:	7c1b      	ldrb	r3, [r3, #16]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <print_network_information+0xdc>)
 8006fe6:	7c5b      	ldrb	r3, [r3, #17]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	4603      	mov	r3, r0
 8006fec:	4810      	ldr	r0, [pc, #64]	; (8007030 <print_network_information+0xf4>)
 8006fee:	f000 fcb5 	bl	800795c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 8006ff2:	4b09      	ldr	r3, [pc, #36]	; (8007018 <print_network_information+0xdc>)
 8006ff4:	7c9b      	ldrb	r3, [r3, #18]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <print_network_information+0xdc>)
 8006ffa:	7cdb      	ldrb	r3, [r3, #19]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <print_network_information+0xdc>)
 8007000:	7d1b      	ldrb	r3, [r3, #20]
 8007002:	4618      	mov	r0, r3
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <print_network_information+0xdc>)
 8007006:	7d5b      	ldrb	r3, [r3, #21]
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	4603      	mov	r3, r0
 800700c:	4809      	ldr	r0, [pc, #36]	; (8007034 <print_network_information+0xf8>)
 800700e:	f000 fca5 	bl	800795c <iprintf>
}
 8007012:	bf00      	nop
 8007014:	46bd      	mov	sp, r7
 8007016:	bdb0      	pop	{r4, r5, r7, pc}
 8007018:	2000004c 	.word	0x2000004c
 800701c:	08008be0 	.word	0x08008be0
 8007020:	08008c10 	.word	0x08008c10
 8007024:	08008c18 	.word	0x08008c18
 8007028:	08008c24 	.word	0x08008c24
 800702c:	08008c40 	.word	0x08008c40
 8007030:	08008c5c 	.word	0x08008c5c
 8007034:	08008c78 	.word	0x08008c78

08007038 <messageArrived>:

void messageArrived(MessageData* md)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	MQTTMessage* message = md->message;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < md->topicName->lenstring.len; i++)
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e011      	b.n	8007070 <messageArrived+0x38>
	{
		putchar(*(md->topicName->lenstring.data + i));
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <messageArrived+0x4c>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	4413      	add	r3, r2
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	4619      	mov	r1, r3
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <messageArrived+0x4c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	461a      	mov	r2, r3
 8007066:	f7ff ff0f 	bl	8006e88 <__sputc_r>
	for (uint8_t i = 0; i < md->topicName->lenstring.len; i++)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	3301      	adds	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	dbe7      	blt.n	800704c <messageArrived+0x14>
	}
	//printf(" (%.*s)\r\n", (int32_t)message->payloadlen, (char*)message->payload);
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000068 	.word	0x20000068

08007088 <DHCP_proc>:

uint8_t DHCP_proc(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	uint8_t dhcp_res = DHCP_run();
 800708e:	f7fd fdc7 	bl	8004c20 <DHCP_run>
 8007092:	4603      	mov	r3, r0
 8007094:	71fb      	strb	r3, [r7, #7]
	switch (dhcp_res)
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d018      	beq.n	80070ce <DHCP_proc+0x46>
 800709c:	2b00      	cmp	r3, #0
 800709e:	db1a      	blt.n	80070d6 <DHCP_proc+0x4e>
 80070a0:	3b02      	subs	r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d817      	bhi.n	80070d6 <DHCP_proc+0x4e>
	{
		case DHCP_IP_ASSIGN:
		case DHCP_IP_CHANGED:
		case DHCP_IP_LEASED:
			getIPfromDHCP(gWIZNETINFO.ip);
 80070a6:	480e      	ldr	r0, [pc, #56]	; (80070e0 <DHCP_proc+0x58>)
 80070a8:	f7fe f814 	bl	80050d4 <getIPfromDHCP>
			getGWfromDHCP(gWIZNETINFO.gw);
 80070ac:	480d      	ldr	r0, [pc, #52]	; (80070e4 <DHCP_proc+0x5c>)
 80070ae:	f7fe f831 	bl	8005114 <getGWfromDHCP>
			getSNfromDHCP(gWIZNETINFO.sn);
 80070b2:	480d      	ldr	r0, [pc, #52]	; (80070e8 <DHCP_proc+0x60>)
 80070b4:	f7fe f84e 	bl	8005154 <getSNfromDHCP>
			getDNSfromDHCP(gWIZNETINFO.dns);
 80070b8:	480c      	ldr	r0, [pc, #48]	; (80070ec <DHCP_proc+0x64>)
 80070ba:	f7fe f86b 	bl	8005194 <getDNSfromDHCP>
			gWIZNETINFO.dhcp = NETINFO_DHCP;
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <DHCP_proc+0x68>)
 80070c0:	2202      	movs	r2, #2
 80070c2:	759a      	strb	r2, [r3, #22]
			ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 80070c4:	490a      	ldr	r1, [pc, #40]	; (80070f0 <DHCP_proc+0x68>)
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7fc fa4a 	bl	8003560 <ctlnetwork>
		#ifdef _DHCP_DEBUG_
			printf("\r\n>> DHCP IP Leased Time : %ld Sec\r\n", getDHCPLeasetime());
		#endif
		break;
 80070cc:	e003      	b.n	80070d6 <DHCP_proc+0x4e>
		case DHCP_FAILED:
		#ifdef _DHCP_DEBUG_
			printf(">> DHCP Failed\r\n");
		#endif
		gWIZNETINFO.dhcp = NETINFO_STATIC;
 80070ce:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <DHCP_proc+0x68>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	759a      	strb	r2, [r3, #22]
		break;
 80070d4:	bf00      	nop
	}
	return dhcp_res;
 80070d6:	79fb      	ldrb	r3, [r7, #7]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000052 	.word	0x20000052
 80070e4:	2000005a 	.word	0x2000005a
 80070e8:	20000056 	.word	0x20000056
 80070ec:	2000005e 	.word	0x2000005e
 80070f0:	2000004c 	.word	0x2000004c

080070f4 <str_printf>:

int8_t str_printf(char *StrBuff, uint8_t BuffLen, const char *args, ...)
{
 80070f4:	b40c      	push	{r2, r3}
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
	va_list ap;
	va_start(ap, args);
 8007102:	f107 031c 	add.w	r3, r7, #28
 8007106:	60bb      	str	r3, [r7, #8]
	int8_t len = vsnprintf(StrBuff, BuffLen, args, ap);
 8007108:	78f9      	ldrb	r1, [r7, #3]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fd32 	bl	8007b78 <vsniprintf>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
	va_end(ap);
	return len;
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007126:	b002      	add	sp, #8
 8007128:	4770      	bx	lr

0800712a <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
	msTick_Handler();
 8007132:	f7ff fed7 	bl	8006ee4 <msTick_Handler>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <main>:

int main(void)
{
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b0db      	sub	sp, #364	; 0x16c
 8007144:	af04      	add	r7, sp, #16
	int32_t rc = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	uint8_t dhcp_ret = DHCP_STOPPED;
 800714c:	2305      	movs	r3, #5
 800714e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint8_t buf[100];
	Network n;
	Client c;

	HAL_Init();
 8007152:	f7f9 fa1d 	bl	8000590 <HAL_Init>
	SystemClock_Config();
 8007156:	f000 f919 	bl	800738c <SystemClock_Config>
	W5500_Init(SPI1);
 800715a:	487c      	ldr	r0, [pc, #496]	; (800734c <main+0x20c>)
 800715c:	f7ff fe0c 	bl	8006d78 <W5500_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	201c      	movs	r0, #28
 8007166:	f7f9 fb5e 	bl	8000826 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800716a:	201c      	movs	r0, #28
 800716c:	f7f9 fb77 	bl	800085e <HAL_NVIC_EnableIRQ>
	W5500_chipInit();
 8007170:	f7ff fe0c 	bl	8006d8c <W5500_chipInit>
	/*Set network informations*/
	wizchip_setnetinfo(&gWIZNETINFO);
 8007174:	4876      	ldr	r0, [pc, #472]	; (8007350 <main+0x210>)
 8007176:	f7fc fcb9 	bl	8003aec <wizchip_setnetinfo>
	setSHAR(gWIZNETINFO.mac);
 800717a:	2206      	movs	r2, #6
 800717c:	4974      	ldr	r1, [pc, #464]	; (8007350 <main+0x210>)
 800717e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007182:	f7fa ff67 	bl	8002054 <WIZCHIP_WRITE_BUF>
	if (gWIZNETINFO.dhcp == NETINFO_DHCP)
 8007186:	4b72      	ldr	r3, [pc, #456]	; (8007350 <main+0x210>)
 8007188:	7d9b      	ldrb	r3, [r3, #22]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d119      	bne.n	80071c2 <main+0x82>
	{
		DHCP_init(SOCK_DHCP, tempBuffer);
 800718e:	4971      	ldr	r1, [pc, #452]	; (8007354 <main+0x214>)
 8007190:	2007      	movs	r0, #7
 8007192:	f7fd ff07 	bl	8004fa4 <DHCP_init>
		while (!((dhcp_ret == DHCP_IP_ASSIGN) || (dhcp_ret == DHCP_IP_CHANGED) || (dhcp_ret == DHCP_FAILED) || (dhcp_ret == DHCP_IP_LEASED)))
 8007196:	e004      	b.n	80071a2 <main+0x62>
		{
			dhcp_ret = DHCP_proc();
 8007198:	f7ff ff76 	bl	8007088 <DHCP_proc>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		while (!((dhcp_ret == DHCP_IP_ASSIGN) || (dhcp_ret == DHCP_IP_CHANGED) || (dhcp_ret == DHCP_FAILED) || (dhcp_ret == DHCP_IP_LEASED)))
 80071a2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d00b      	beq.n	80071c2 <main+0x82>
 80071aa:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d007      	beq.n	80071c2 <main+0x82>
 80071b2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <main+0x82>
 80071ba:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d1ea      	bne.n	8007198 <main+0x58>
		}
	}
	print_network_information();
 80071c2:	f7ff febb 	bl	8006f3c <print_network_information>
	n.my_socket = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint8_t targetIP[4] = {192, 168, 1, 35};
 80071cc:	4b62      	ldr	r3, [pc, #392]	; (8007358 <main+0x218>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	67bb      	str	r3, [r7, #120]	; 0x78
	NewNetwork(&n);
 80071d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fc9e 	bl	8006b18 <NewNetwork>
	ConnectNetwork(&n, targetIP, 1883);
 80071dc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80071e0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80071e4:	f240 725b 	movw	r2, #1883	; 0x75b
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fd10 	bl	8006c0e <ConnectNetwork>
	MQTTClient(&c, &n, 1000, buf, 100, tempBuffer, BUFFER_SIZE);
 80071ee:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80071f2:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80071f6:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80071fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	4b54      	ldr	r3, [pc, #336]	; (8007354 <main+0x214>)
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	2364      	movs	r3, #100	; 0x64
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800720e:	f7fe f855 	bl	80052bc <MQTTClient>
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8007212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007216:	4a51      	ldr	r2, [pc, #324]	; (800735c <main+0x21c>)
 8007218:	4618      	mov	r0, r3
 800721a:	4611      	mov	r1, r2
 800721c:	2354      	movs	r3, #84	; 0x54
 800721e:	461a      	mov	r2, r3
 8007220:	f000 fadc 	bl	80077dc <memcpy>
	data.willFlag = 0;
 8007224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007228:	2200      	movs	r2, #0
 800722a:	75da      	strb	r2, [r3, #23]
	data.MQTTVersion = 4;//3;
 800722c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007230:	2204      	movs	r2, #4
 8007232:	719a      	strb	r2, [r3, #6]
	data.clientID.cstring = (char*)"w5500-client";
 8007234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007238:	4a49      	ldr	r2, [pc, #292]	; (8007360 <main+0x220>)
 800723a:	609a      	str	r2, [r3, #8]
	data.username.cstring = "username";
 800723c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007240:	4a48      	ldr	r2, [pc, #288]	; (8007364 <main+0x224>)
 8007242:	63da      	str	r2, [r3, #60]	; 0x3c
	data.password.cstring = "";
 8007244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007248:	4a47      	ldr	r2, [pc, #284]	; (8007368 <main+0x228>)
 800724a:	649a      	str	r2, [r3, #72]	; 0x48
	data.keepAliveInterval = 60;
 800724c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007250:	223c      	movs	r2, #60	; 0x3c
 8007252:	829a      	strh	r2, [r3, #20]
	data.cleansession = 1;
 8007254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007258:	2201      	movs	r2, #1
 800725a:	759a      	strb	r2, [r3, #22]
	rc = MQTTConnect(&c, &data);
 800725c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007260:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fb56 	bl	8005918 <MQTTConnect>
 800726c:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
	printf("Connected %ld\r\n", rc);
 8007270:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007274:	483d      	ldr	r0, [pc, #244]	; (800736c <main+0x22c>)
 8007276:	f000 fb71 	bl	800795c <iprintf>
	char SubString[] = "/#";
 800727a:	f107 0320 	add.w	r3, r7, #32
 800727e:	4a3c      	ldr	r2, [pc, #240]	; (8007370 <main+0x230>)
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	4611      	mov	r1, r2
 8007284:	8019      	strh	r1, [r3, #0]
 8007286:	3302      	adds	r3, #2
 8007288:	0c12      	lsrs	r2, r2, #16
 800728a:	701a      	strb	r2, [r3, #0]
	rc = MQTTSubscribe(&c, SubString, QOS0, messageArrived);
 800728c:	f107 0120 	add.w	r1, r7, #32
 8007290:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8007294:	4b37      	ldr	r3, [pc, #220]	; (8007374 <main+0x234>)
 8007296:	2200      	movs	r2, #0
 8007298:	f7fe fbc4 	bl	8005a24 <MQTTSubscribe>
 800729c:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
	printf("Subscribed (%s) %ld\r\n", SubString, rc);
 80072a0:	f107 0320 	add.w	r3, r7, #32
 80072a4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80072a8:	4619      	mov	r1, r3
 80072aa:	4833      	ldr	r0, [pc, #204]	; (8007378 <main+0x238>)
 80072ac:	f000 fb56 	bl	800795c <iprintf>
	while (1)
	{
		if (gWIZNETINFO.dhcp == NETINFO_DHCP)dhcp_ret = DHCP_proc();
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <main+0x210>)
 80072b2:	7d9b      	ldrb	r3, [r3, #22]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d104      	bne.n	80072c2 <main+0x182>
 80072b8:	f7ff fee6 	bl	8007088 <DHCP_proc>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		if (mqtt_flag)
 80072c2:	4b2e      	ldr	r3, [pc, #184]	; (800737c <main+0x23c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d038      	beq.n	800733c <main+0x1fc>
		{
			mqtt_flag = 0;
 80072ca:	4b2c      	ldr	r3, [pc, #176]	; (800737c <main+0x23c>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
			char message[16];
			int8_t len = str_printf(message, sizeof(message), "%d.%d.%d.%d", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 80072d0:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <main+0x210>)
 80072d2:	799b      	ldrb	r3, [r3, #6]
 80072d4:	461c      	mov	r4, r3
 80072d6:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <main+0x210>)
 80072d8:	79db      	ldrb	r3, [r3, #7]
 80072da:	461a      	mov	r2, r3
 80072dc:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <main+0x210>)
 80072de:	7a1b      	ldrb	r3, [r3, #8]
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <main+0x210>)
 80072e4:	7a5b      	ldrb	r3, [r3, #9]
 80072e6:	f107 0010 	add.w	r0, r7, #16
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	9101      	str	r1, [sp, #4]
 80072ee:	9200      	str	r2, [sp, #0]
 80072f0:	4623      	mov	r3, r4
 80072f2:	4a23      	ldr	r2, [pc, #140]	; (8007380 <main+0x240>)
 80072f4:	2110      	movs	r1, #16
 80072f6:	f7ff fefd 	bl	80070f4 <str_printf>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
			if (len > 0)
 8007300:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd19      	ble.n	800733c <main+0x1fc>
			{
				MQTTMessage pubMessage;
				pubMessage.qos = QOS0;
 8007308:	463b      	mov	r3, r7
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
				pubMessage.id = mes_id++;
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <main+0x244>)
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	b291      	uxth	r1, r2
 8007316:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <main+0x244>)
 8007318:	8011      	strh	r1, [r2, #0]
 800731a:	463a      	mov	r2, r7
 800731c:	8093      	strh	r3, [r2, #4]
				pubMessage.payloadlen = len;
 800731e:	f997 214f 	ldrsb.w	r2, [r7, #335]	; 0x14f
 8007322:	463b      	mov	r3, r7
 8007324:	60da      	str	r2, [r3, #12]
				pubMessage.payload = message;
 8007326:	463b      	mov	r3, r7
 8007328:	f107 0210 	add.w	r2, r7, #16
 800732c:	609a      	str	r2, [r3, #8]
				MQTTPublish(&c, "/w5500_stm32_client", &pubMessage);
 800732e:	463a      	mov	r2, r7
 8007330:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007334:	4914      	ldr	r1, [pc, #80]	; (8007388 <main+0x248>)
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fc19 	bl	8005b6e <MQTTPublish>
			}
		}
		MQTTYield(&c, 1000);
 800733c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fa99 	bl	800587c <MQTTYield>
		if (gWIZNETINFO.dhcp == NETINFO_DHCP)dhcp_ret = DHCP_proc();
 800734a:	e7b1      	b.n	80072b0 <main+0x170>
 800734c:	40013000 	.word	0x40013000
 8007350:	2000004c 	.word	0x2000004c
 8007354:	200001b4 	.word	0x200001b4
 8007358:	08008cfc 	.word	0x08008cfc
 800735c:	08008d00 	.word	0x08008d00
 8007360:	08008c94 	.word	0x08008c94
 8007364:	08008ca4 	.word	0x08008ca4
 8007368:	08008cb0 	.word	0x08008cb0
 800736c:	08008cb4 	.word	0x08008cb4
 8007370:	08008d54 	.word	0x08008d54
 8007374:	08007039 	.word	0x08007039
 8007378:	08008cc4 	.word	0x08008cc4
 800737c:	200009f8 	.word	0x200009f8
 8007380:	08008cdc 	.word	0x08008cdc
 8007384:	200009b4 	.word	0x200009b4
 8007388:	08008ce8 	.word	0x08008ce8

0800738c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b094      	sub	sp, #80	; 0x50
 8007390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007392:	f107 0320 	add.w	r3, r7, #32
 8007396:	2230      	movs	r2, #48	; 0x30
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fa29 	bl	80077f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073b0:	2300      	movs	r3, #0
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	4a21      	ldr	r2, [pc, #132]	; (800743c <SystemClock_Config+0xb0>)
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <SystemClock_Config+0xb0>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073be:	6413      	str	r3, [r2, #64]	; 0x40
 80073c0:	4b1e      	ldr	r3, [pc, #120]	; (800743c <SystemClock_Config+0xb0>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80073cc:	2300      	movs	r3, #0
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	4a1b      	ldr	r2, [pc, #108]	; (8007440 <SystemClock_Config+0xb4>)
 80073d2:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <SystemClock_Config+0xb4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4b18      	ldr	r3, [pc, #96]	; (8007440 <SystemClock_Config+0xb4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80073e8:	2302      	movs	r3, #2
 80073ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073ec:	2301      	movs	r3, #1
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80073f0:	2310      	movs	r3, #16
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073f8:	f107 0320 	add.w	r3, r7, #32
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7f9 fbfd 	bl	8000bfc <HAL_RCC_OscConfig>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d000      	beq.n	800740a <SystemClock_Config+0x7e>
  {
    while(1);
 8007408:	e7fe      	b.n	8007408 <SystemClock_Config+0x7c>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800740a:	230f      	movs	r3, #15
 800740c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800741e:	f107 030c 	add.w	r3, r7, #12
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f7f9 fe59 	bl	80010dc <HAL_RCC_ClockConfig>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d000      	beq.n	8007432 <SystemClock_Config+0xa6>
  {
	  while(1);
 8007430:	e7fe      	b.n	8007430 <SystemClock_Config+0xa4>
  }
}
 8007432:	bf00      	nop
 8007434:	3750      	adds	r7, #80	; 0x50
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40023800 	.word	0x40023800
 8007440:	40007000 	.word	0x40007000

08007444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800744a:	2300      	movs	r3, #0
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <HAL_MspInit+0x4c>)
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <HAL_MspInit+0x4c>)
 8007452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007458:	6453      	str	r3, [r2, #68]	; 0x44
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <HAL_MspInit+0x4c>)
 800745c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007466:	2300      	movs	r3, #0
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4a09      	ldr	r2, [pc, #36]	; (8007490 <HAL_MspInit+0x4c>)
 800746c:	4b08      	ldr	r3, [pc, #32]	; (8007490 <HAL_MspInit+0x4c>)
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007474:	6413      	str	r3, [r2, #64]	; 0x40
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <HAL_MspInit+0x4c>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40023800 	.word	0x40023800

08007494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08a      	sub	sp, #40	; 0x28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749c:	f107 0314 	add.w	r3, r7, #20
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	605a      	str	r2, [r3, #4]
 80074a6:	609a      	str	r2, [r3, #8]
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a28      	ldr	r2, [pc, #160]	; (8007554 <HAL_SPI_MspInit+0xc0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d14a      	bne.n	800754c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	4a27      	ldr	r2, [pc, #156]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074bc:	4b26      	ldr	r3, [pc, #152]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074c4:	6413      	str	r3, [r2, #64]	; 0x40
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	4a20      	ldr	r2, [pc, #128]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074d8:	4b1f      	ldr	r3, [pc, #124]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	f043 0304 	orr.w	r3, r3, #4
 80074e0:	6313      	str	r3, [r2, #48]	; 0x30
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]
 80074f2:	4a19      	ldr	r2, [pc, #100]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074f4:	4b18      	ldr	r3, [pc, #96]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	f043 0302 	orr.w	r3, r3, #2
 80074fc:	6313      	str	r3, [r2, #48]	; 0x30
 80074fe:	4b16      	ldr	r3, [pc, #88]	; (8007558 <HAL_SPI_MspInit+0xc4>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	60bb      	str	r3, [r7, #8]
 8007508:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800750a:	230c      	movs	r3, #12
 800750c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800750e:	2302      	movs	r3, #2
 8007510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007516:	2303      	movs	r3, #3
 8007518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800751a:	2305      	movs	r3, #5
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800751e:	f107 0314 	add.w	r3, r7, #20
 8007522:	4619      	mov	r1, r3
 8007524:	480d      	ldr	r0, [pc, #52]	; (800755c <HAL_SPI_MspInit+0xc8>)
 8007526:	f7f9 f9b5 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800752a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800752e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007530:	2302      	movs	r3, #2
 8007532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007538:	2303      	movs	r3, #3
 800753a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800753c:	2305      	movs	r3, #5
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	4619      	mov	r1, r3
 8007546:	4806      	ldr	r0, [pc, #24]	; (8007560 <HAL_SPI_MspInit+0xcc>)
 8007548:	f7f9 f9a4 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800754c:	bf00      	nop
 800754e:	3728      	adds	r7, #40	; 0x28
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40003800 	.word	0x40003800
 8007558:	40023800 	.word	0x40023800
 800755c:	40020800 	.word	0x40020800
 8007560:	40020400 	.word	0x40020400

08007564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007568:	bf00      	nop
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007572:	b480      	push	{r7}
 8007574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007576:	e7fe      	b.n	8007576 <HardFault_Handler+0x4>

08007578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800757c:	e7fe      	b.n	800757c <MemManage_Handler+0x4>

0800757e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800757e:	b480      	push	{r7}
 8007580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007582:	e7fe      	b.n	8007582 <BusFault_Handler+0x4>

08007584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007588:	e7fe      	b.n	8007588 <UsageFault_Handler+0x4>

0800758a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800758a:	b480      	push	{r7}
 800758c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800759c:	bf00      	nop
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075a6:	b480      	push	{r7}
 80075a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80075aa:	bf00      	nop
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075b8:	f7f9 f83c 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075bc:	bf00      	nop
 80075be:	bd80      	pop	{r7, pc}

080075c0 <TIM2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80075c4:	4802      	ldr	r0, [pc, #8]	; (80075d0 <TIM2_IRQHandler+0x10>)
 80075c6:	f7fa fb07 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80075ca:	bf00      	nop
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200009b8 	.word	0x200009b8

080075d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e00a      	b.n	80075fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80075e6:	68bc      	ldr	r4, [r7, #8]
 80075e8:	1c63      	adds	r3, r4, #1
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	f3af 8000 	nop.w
 80075f0:	4603      	mov	r3, r0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	3301      	adds	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	dbf0      	blt.n	80075e6 <_read+0x12>
	}

return len;
 8007604:	687b      	ldr	r3, [r7, #4]
}
 8007606:	4618      	mov	r0, r3
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}

0800760e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e009      	b.n	8007634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	60ba      	str	r2, [r7, #8]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	4618      	mov	r0, r3
 800762a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	3301      	adds	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	429a      	cmp	r2, r3
 800763a:	dbf1      	blt.n	8007620 <_write+0x12>
	}
	return len;
 800763c:	687b      	ldr	r3, [r7, #4]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <_sbrk+0x50>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d102      	bne.n	800765e <_sbrk+0x16>
		heap_end = &end;
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <_sbrk+0x50>)
 800765a:	4a10      	ldr	r2, [pc, #64]	; (800769c <_sbrk+0x54>)
 800765c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <_sbrk+0x50>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <_sbrk+0x50>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	466a      	mov	r2, sp
 800766e:	4293      	cmp	r3, r2
 8007670:	d907      	bls.n	8007682 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007672:	f000 f889 	bl	8007788 <__errno>
 8007676:	4602      	mov	r2, r0
 8007678:	230c      	movs	r3, #12
 800767a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	e006      	b.n	8007690 <_sbrk+0x48>
	}

	heap_end += incr;
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <_sbrk+0x50>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	4a03      	ldr	r2, [pc, #12]	; (8007698 <_sbrk+0x50>)
 800768c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	2000012c 	.word	0x2000012c
 800769c:	20000a00 	.word	0x20000a00

080076a0 <_close>:

int _close(int file)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	return -1;
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076c8:	605a      	str	r2, [r3, #4]
	return 0;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <_isatty>:

int _isatty(int file)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	return 1;
 80076e0:	2301      	movs	r3, #1
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
	return 0;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800770c:	4a08      	ldr	r2, [pc, #32]	; (8007730 <SystemInit+0x28>)
 800770e:	4b08      	ldr	r3, [pc, #32]	; (8007730 <SystemInit+0x28>)
 8007710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <SystemInit+0x28>)
 800771e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007722:	609a      	str	r2, [r3, #8]
#endif
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000ed00 	.word	0xe000ed00

08007734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800776c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800773a:	e003      	b.n	8007744 <LoopCopyDataInit>

0800773c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800773e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007742:	3104      	adds	r1, #4

08007744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007744:	480b      	ldr	r0, [pc, #44]	; (8007774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800774a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800774c:	d3f6      	bcc.n	800773c <CopyDataInit>
  ldr  r2, =_sbss
 800774e:	4a0b      	ldr	r2, [pc, #44]	; (800777c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007750:	e002      	b.n	8007758 <LoopFillZerobss>

08007752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007754:	f842 3b04 	str.w	r3, [r2], #4

08007758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007758:	4b09      	ldr	r3, [pc, #36]	; (8007780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800775a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800775c:	d3f9      	bcc.n	8007752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800775e:	f7ff ffd3 	bl	8007708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007762:	f000 f817 	bl	8007794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007766:	f7ff fceb 	bl	8007140 <main>
  bx  lr    
 800776a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800776c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007770:	08008e10 	.word	0x08008e10
  ldr  r0, =_sdata
 8007774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007778:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 800777c:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 8007780:	20000a00 	.word	0x20000a00

08007784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007784:	e7fe      	b.n	8007784 <ADC_IRQHandler>
	...

08007788 <__errno>:
 8007788:	4b01      	ldr	r3, [pc, #4]	; (8007790 <__errno+0x8>)
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000068 	.word	0x20000068

08007794 <__libc_init_array>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4e0d      	ldr	r6, [pc, #52]	; (80077cc <__libc_init_array+0x38>)
 8007798:	4c0d      	ldr	r4, [pc, #52]	; (80077d0 <__libc_init_array+0x3c>)
 800779a:	1ba4      	subs	r4, r4, r6
 800779c:	10a4      	asrs	r4, r4, #2
 800779e:	2500      	movs	r5, #0
 80077a0:	42a5      	cmp	r5, r4
 80077a2:	d109      	bne.n	80077b8 <__libc_init_array+0x24>
 80077a4:	4e0b      	ldr	r6, [pc, #44]	; (80077d4 <__libc_init_array+0x40>)
 80077a6:	4c0c      	ldr	r4, [pc, #48]	; (80077d8 <__libc_init_array+0x44>)
 80077a8:	f001 f96e 	bl	8008a88 <_init>
 80077ac:	1ba4      	subs	r4, r4, r6
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	2500      	movs	r5, #0
 80077b2:	42a5      	cmp	r5, r4
 80077b4:	d105      	bne.n	80077c2 <__libc_init_array+0x2e>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077bc:	4798      	blx	r3
 80077be:	3501      	adds	r5, #1
 80077c0:	e7ee      	b.n	80077a0 <__libc_init_array+0xc>
 80077c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077c6:	4798      	blx	r3
 80077c8:	3501      	adds	r5, #1
 80077ca:	e7f2      	b.n	80077b2 <__libc_init_array+0x1e>
 80077cc:	08008e08 	.word	0x08008e08
 80077d0:	08008e08 	.word	0x08008e08
 80077d4:	08008e08 	.word	0x08008e08
 80077d8:	08008e0c 	.word	0x08008e0c

080077dc <memcpy>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	1e43      	subs	r3, r0, #1
 80077e0:	440a      	add	r2, r1
 80077e2:	4291      	cmp	r1, r2
 80077e4:	d100      	bne.n	80077e8 <memcpy+0xc>
 80077e6:	bd10      	pop	{r4, pc}
 80077e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f0:	e7f7      	b.n	80077e2 <memcpy+0x6>

080077f2 <memset>:
 80077f2:	4402      	add	r2, r0
 80077f4:	4603      	mov	r3, r0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d100      	bne.n	80077fc <memset+0xa>
 80077fa:	4770      	bx	lr
 80077fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007800:	e7f9      	b.n	80077f6 <memset+0x4>
	...

08007804 <_free_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4605      	mov	r5, r0
 8007808:	2900      	cmp	r1, #0
 800780a:	d045      	beq.n	8007898 <_free_r+0x94>
 800780c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007810:	1f0c      	subs	r4, r1, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfb8      	it	lt
 8007816:	18e4      	addlt	r4, r4, r3
 8007818:	f000 fc90 	bl	800813c <__malloc_lock>
 800781c:	4a1f      	ldr	r2, [pc, #124]	; (800789c <_free_r+0x98>)
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	4610      	mov	r0, r2
 8007822:	b933      	cbnz	r3, 8007832 <_free_r+0x2e>
 8007824:	6063      	str	r3, [r4, #4]
 8007826:	6014      	str	r4, [r2, #0]
 8007828:	4628      	mov	r0, r5
 800782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800782e:	f000 bc86 	b.w	800813e <__malloc_unlock>
 8007832:	42a3      	cmp	r3, r4
 8007834:	d90c      	bls.n	8007850 <_free_r+0x4c>
 8007836:	6821      	ldr	r1, [r4, #0]
 8007838:	1862      	adds	r2, r4, r1
 800783a:	4293      	cmp	r3, r2
 800783c:	bf04      	itt	eq
 800783e:	681a      	ldreq	r2, [r3, #0]
 8007840:	685b      	ldreq	r3, [r3, #4]
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	bf04      	itt	eq
 8007846:	1852      	addeq	r2, r2, r1
 8007848:	6022      	streq	r2, [r4, #0]
 800784a:	6004      	str	r4, [r0, #0]
 800784c:	e7ec      	b.n	8007828 <_free_r+0x24>
 800784e:	4613      	mov	r3, r2
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	b10a      	cbz	r2, 8007858 <_free_r+0x54>
 8007854:	42a2      	cmp	r2, r4
 8007856:	d9fa      	bls.n	800784e <_free_r+0x4a>
 8007858:	6819      	ldr	r1, [r3, #0]
 800785a:	1858      	adds	r0, r3, r1
 800785c:	42a0      	cmp	r0, r4
 800785e:	d10b      	bne.n	8007878 <_free_r+0x74>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	4401      	add	r1, r0
 8007864:	1858      	adds	r0, r3, r1
 8007866:	4282      	cmp	r2, r0
 8007868:	6019      	str	r1, [r3, #0]
 800786a:	d1dd      	bne.n	8007828 <_free_r+0x24>
 800786c:	6810      	ldr	r0, [r2, #0]
 800786e:	6852      	ldr	r2, [r2, #4]
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	4401      	add	r1, r0
 8007874:	6019      	str	r1, [r3, #0]
 8007876:	e7d7      	b.n	8007828 <_free_r+0x24>
 8007878:	d902      	bls.n	8007880 <_free_r+0x7c>
 800787a:	230c      	movs	r3, #12
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	e7d3      	b.n	8007828 <_free_r+0x24>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	1821      	adds	r1, r4, r0
 8007884:	428a      	cmp	r2, r1
 8007886:	bf04      	itt	eq
 8007888:	6811      	ldreq	r1, [r2, #0]
 800788a:	6852      	ldreq	r2, [r2, #4]
 800788c:	6062      	str	r2, [r4, #4]
 800788e:	bf04      	itt	eq
 8007890:	1809      	addeq	r1, r1, r0
 8007892:	6021      	streq	r1, [r4, #0]
 8007894:	605c      	str	r4, [r3, #4]
 8007896:	e7c7      	b.n	8007828 <_free_r+0x24>
 8007898:	bd38      	pop	{r3, r4, r5, pc}
 800789a:	bf00      	nop
 800789c:	20000130 	.word	0x20000130

080078a0 <_malloc_r>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	1ccd      	adds	r5, r1, #3
 80078a4:	f025 0503 	bic.w	r5, r5, #3
 80078a8:	3508      	adds	r5, #8
 80078aa:	2d0c      	cmp	r5, #12
 80078ac:	bf38      	it	cc
 80078ae:	250c      	movcc	r5, #12
 80078b0:	2d00      	cmp	r5, #0
 80078b2:	4606      	mov	r6, r0
 80078b4:	db01      	blt.n	80078ba <_malloc_r+0x1a>
 80078b6:	42a9      	cmp	r1, r5
 80078b8:	d903      	bls.n	80078c2 <_malloc_r+0x22>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	2000      	movs	r0, #0
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
 80078c2:	f000 fc3b 	bl	800813c <__malloc_lock>
 80078c6:	4a23      	ldr	r2, [pc, #140]	; (8007954 <_malloc_r+0xb4>)
 80078c8:	6814      	ldr	r4, [r2, #0]
 80078ca:	4621      	mov	r1, r4
 80078cc:	b991      	cbnz	r1, 80078f4 <_malloc_r+0x54>
 80078ce:	4c22      	ldr	r4, [pc, #136]	; (8007958 <_malloc_r+0xb8>)
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	b91b      	cbnz	r3, 80078dc <_malloc_r+0x3c>
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f8bd 	bl	8007a54 <_sbrk_r>
 80078da:	6020      	str	r0, [r4, #0]
 80078dc:	4629      	mov	r1, r5
 80078de:	4630      	mov	r0, r6
 80078e0:	f000 f8b8 	bl	8007a54 <_sbrk_r>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d126      	bne.n	8007936 <_malloc_r+0x96>
 80078e8:	230c      	movs	r3, #12
 80078ea:	6033      	str	r3, [r6, #0]
 80078ec:	4630      	mov	r0, r6
 80078ee:	f000 fc26 	bl	800813e <__malloc_unlock>
 80078f2:	e7e4      	b.n	80078be <_malloc_r+0x1e>
 80078f4:	680b      	ldr	r3, [r1, #0]
 80078f6:	1b5b      	subs	r3, r3, r5
 80078f8:	d41a      	bmi.n	8007930 <_malloc_r+0x90>
 80078fa:	2b0b      	cmp	r3, #11
 80078fc:	d90f      	bls.n	800791e <_malloc_r+0x7e>
 80078fe:	600b      	str	r3, [r1, #0]
 8007900:	50cd      	str	r5, [r1, r3]
 8007902:	18cc      	adds	r4, r1, r3
 8007904:	4630      	mov	r0, r6
 8007906:	f000 fc1a 	bl	800813e <__malloc_unlock>
 800790a:	f104 000b 	add.w	r0, r4, #11
 800790e:	1d23      	adds	r3, r4, #4
 8007910:	f020 0007 	bic.w	r0, r0, #7
 8007914:	1ac3      	subs	r3, r0, r3
 8007916:	d01b      	beq.n	8007950 <_malloc_r+0xb0>
 8007918:	425a      	negs	r2, r3
 800791a:	50e2      	str	r2, [r4, r3]
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	428c      	cmp	r4, r1
 8007920:	bf0d      	iteet	eq
 8007922:	6863      	ldreq	r3, [r4, #4]
 8007924:	684b      	ldrne	r3, [r1, #4]
 8007926:	6063      	strne	r3, [r4, #4]
 8007928:	6013      	streq	r3, [r2, #0]
 800792a:	bf18      	it	ne
 800792c:	460c      	movne	r4, r1
 800792e:	e7e9      	b.n	8007904 <_malloc_r+0x64>
 8007930:	460c      	mov	r4, r1
 8007932:	6849      	ldr	r1, [r1, #4]
 8007934:	e7ca      	b.n	80078cc <_malloc_r+0x2c>
 8007936:	1cc4      	adds	r4, r0, #3
 8007938:	f024 0403 	bic.w	r4, r4, #3
 800793c:	42a0      	cmp	r0, r4
 800793e:	d005      	beq.n	800794c <_malloc_r+0xac>
 8007940:	1a21      	subs	r1, r4, r0
 8007942:	4630      	mov	r0, r6
 8007944:	f000 f886 	bl	8007a54 <_sbrk_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d0cd      	beq.n	80078e8 <_malloc_r+0x48>
 800794c:	6025      	str	r5, [r4, #0]
 800794e:	e7d9      	b.n	8007904 <_malloc_r+0x64>
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	bf00      	nop
 8007954:	20000130 	.word	0x20000130
 8007958:	20000134 	.word	0x20000134

0800795c <iprintf>:
 800795c:	b40f      	push	{r0, r1, r2, r3}
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <iprintf+0x2c>)
 8007960:	b513      	push	{r0, r1, r4, lr}
 8007962:	681c      	ldr	r4, [r3, #0]
 8007964:	b124      	cbz	r4, 8007970 <iprintf+0x14>
 8007966:	69a3      	ldr	r3, [r4, #24]
 8007968:	b913      	cbnz	r3, 8007970 <iprintf+0x14>
 800796a:	4620      	mov	r0, r4
 800796c:	f000 fae6 	bl	8007f3c <__sinit>
 8007970:	ab05      	add	r3, sp, #20
 8007972:	9a04      	ldr	r2, [sp, #16]
 8007974:	68a1      	ldr	r1, [r4, #8]
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fd5b 	bl	8008434 <_vfiprintf_r>
 800797e:	b002      	add	sp, #8
 8007980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007984:	b004      	add	sp, #16
 8007986:	4770      	bx	lr
 8007988:	20000068 	.word	0x20000068

0800798c <_puts_r>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	460e      	mov	r6, r1
 8007990:	4605      	mov	r5, r0
 8007992:	b118      	cbz	r0, 800799c <_puts_r+0x10>
 8007994:	6983      	ldr	r3, [r0, #24]
 8007996:	b90b      	cbnz	r3, 800799c <_puts_r+0x10>
 8007998:	f000 fad0 	bl	8007f3c <__sinit>
 800799c:	69ab      	ldr	r3, [r5, #24]
 800799e:	68ac      	ldr	r4, [r5, #8]
 80079a0:	b913      	cbnz	r3, 80079a8 <_puts_r+0x1c>
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 faca 	bl	8007f3c <__sinit>
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <_puts_r+0xac>)
 80079aa:	429c      	cmp	r4, r3
 80079ac:	d117      	bne.n	80079de <_puts_r+0x52>
 80079ae:	686c      	ldr	r4, [r5, #4]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	071b      	lsls	r3, r3, #28
 80079b4:	d51d      	bpl.n	80079f2 <_puts_r+0x66>
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	b1db      	cbz	r3, 80079f2 <_puts_r+0x66>
 80079ba:	3e01      	subs	r6, #1
 80079bc:	68a3      	ldr	r3, [r4, #8]
 80079be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079c2:	3b01      	subs	r3, #1
 80079c4:	60a3      	str	r3, [r4, #8]
 80079c6:	b9e9      	cbnz	r1, 8007a04 <_puts_r+0x78>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da2e      	bge.n	8007a2a <_puts_r+0x9e>
 80079cc:	4622      	mov	r2, r4
 80079ce:	210a      	movs	r1, #10
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f8df 	bl	8007b94 <__swbuf_r>
 80079d6:	3001      	adds	r0, #1
 80079d8:	d011      	beq.n	80079fe <_puts_r+0x72>
 80079da:	200a      	movs	r0, #10
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <_puts_r+0xb0>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	d101      	bne.n	80079e8 <_puts_r+0x5c>
 80079e4:	68ac      	ldr	r4, [r5, #8]
 80079e6:	e7e3      	b.n	80079b0 <_puts_r+0x24>
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <_puts_r+0xb4>)
 80079ea:	429c      	cmp	r4, r3
 80079ec:	bf08      	it	eq
 80079ee:	68ec      	ldreq	r4, [r5, #12]
 80079f0:	e7de      	b.n	80079b0 <_puts_r+0x24>
 80079f2:	4621      	mov	r1, r4
 80079f4:	4628      	mov	r0, r5
 80079f6:	f000 f931 	bl	8007c5c <__swsetup_r>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0dd      	beq.n	80079ba <_puts_r+0x2e>
 80079fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da04      	bge.n	8007a12 <_puts_r+0x86>
 8007a08:	69a2      	ldr	r2, [r4, #24]
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	db06      	blt.n	8007a1c <_puts_r+0x90>
 8007a0e:	290a      	cmp	r1, #10
 8007a10:	d004      	beq.n	8007a1c <_puts_r+0x90>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	7019      	strb	r1, [r3, #0]
 8007a1a:	e7cf      	b.n	80079bc <_puts_r+0x30>
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f8b8 	bl	8007b94 <__swbuf_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d1c9      	bne.n	80079bc <_puts_r+0x30>
 8007a28:	e7e9      	b.n	80079fe <_puts_r+0x72>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	200a      	movs	r0, #10
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	6022      	str	r2, [r4, #0]
 8007a32:	7018      	strb	r0, [r3, #0]
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	bf00      	nop
 8007a38:	08008d8c 	.word	0x08008d8c
 8007a3c:	08008dac 	.word	0x08008dac
 8007a40:	08008d6c 	.word	0x08008d6c

08007a44 <puts>:
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <puts+0xc>)
 8007a46:	4601      	mov	r1, r0
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	f7ff bf9f 	b.w	800798c <_puts_r>
 8007a4e:	bf00      	nop
 8007a50:	20000068 	.word	0x20000068

08007a54 <_sbrk_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4c06      	ldr	r4, [pc, #24]	; (8007a70 <_sbrk_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	f7ff fdf2 	bl	8007648 <_sbrk>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_sbrk_r+0x1a>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_sbrk_r+0x1a>
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	200009fc 	.word	0x200009fc

08007a74 <__sread>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	460c      	mov	r4, r1
 8007a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7c:	f000 ff86 	bl	800898c <_read_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	bfab      	itete	ge
 8007a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a86:	89a3      	ldrhlt	r3, [r4, #12]
 8007a88:	181b      	addge	r3, r3, r0
 8007a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a8e:	bfac      	ite	ge
 8007a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a92:	81a3      	strhlt	r3, [r4, #12]
 8007a94:	bd10      	pop	{r4, pc}

08007a96 <__swrite>:
 8007a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	461f      	mov	r7, r3
 8007a9c:	898b      	ldrh	r3, [r1, #12]
 8007a9e:	05db      	lsls	r3, r3, #23
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	4616      	mov	r6, r2
 8007aa6:	d505      	bpl.n	8007ab4 <__swrite+0x1e>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab0:	f000 face 	bl	8008050 <_lseek_r>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	463b      	mov	r3, r7
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	f000 b8b5 	b.w	8007c38 <_write_r>

08007ace <__sseek>:
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad6:	f000 fabb 	bl	8008050 <_lseek_r>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	bf15      	itete	ne
 8007ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aea:	81a3      	strheq	r3, [r4, #12]
 8007aec:	bf18      	it	ne
 8007aee:	81a3      	strhne	r3, [r4, #12]
 8007af0:	bd10      	pop	{r4, pc}

08007af2 <__sclose>:
 8007af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af6:	f000 b91f 	b.w	8007d38 <_close_r>

08007afa <strncmp>:
 8007afa:	b510      	push	{r4, lr}
 8007afc:	b16a      	cbz	r2, 8007b1a <strncmp+0x20>
 8007afe:	3901      	subs	r1, #1
 8007b00:	1884      	adds	r4, r0, r2
 8007b02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d103      	bne.n	8007b16 <strncmp+0x1c>
 8007b0e:	42a0      	cmp	r0, r4
 8007b10:	d001      	beq.n	8007b16 <strncmp+0x1c>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f5      	bne.n	8007b02 <strncmp+0x8>
 8007b16:	1a98      	subs	r0, r3, r2
 8007b18:	bd10      	pop	{r4, pc}
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	bd10      	pop	{r4, pc}

08007b1e <_vsniprintf_r>:
 8007b1e:	b530      	push	{r4, r5, lr}
 8007b20:	1e14      	subs	r4, r2, #0
 8007b22:	4605      	mov	r5, r0
 8007b24:	b09b      	sub	sp, #108	; 0x6c
 8007b26:	4618      	mov	r0, r3
 8007b28:	da05      	bge.n	8007b36 <_vsniprintf_r+0x18>
 8007b2a:	238b      	movs	r3, #139	; 0x8b
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b32:	b01b      	add	sp, #108	; 0x6c
 8007b34:	bd30      	pop	{r4, r5, pc}
 8007b36:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b3a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b3e:	bf14      	ite	ne
 8007b40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b44:	4623      	moveq	r3, r4
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b4e:	9100      	str	r1, [sp, #0]
 8007b50:	9104      	str	r1, [sp, #16]
 8007b52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007b56:	4602      	mov	r2, r0
 8007b58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b5a:	4669      	mov	r1, sp
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f000 fb4b 	bl	80081f8 <_svfiprintf_r>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	bfbc      	itt	lt
 8007b66:	238b      	movlt	r3, #139	; 0x8b
 8007b68:	602b      	strlt	r3, [r5, #0]
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d0e1      	beq.n	8007b32 <_vsniprintf_r+0x14>
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	e7dd      	b.n	8007b32 <_vsniprintf_r+0x14>
	...

08007b78 <vsniprintf>:
 8007b78:	b507      	push	{r0, r1, r2, lr}
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	460a      	mov	r2, r1
 8007b80:	4601      	mov	r1, r0
 8007b82:	4803      	ldr	r0, [pc, #12]	; (8007b90 <vsniprintf+0x18>)
 8007b84:	6800      	ldr	r0, [r0, #0]
 8007b86:	f7ff ffca 	bl	8007b1e <_vsniprintf_r>
 8007b8a:	b003      	add	sp, #12
 8007b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b90:	20000068 	.word	0x20000068

08007b94 <__swbuf_r>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b118      	cbz	r0, 8007ba6 <__swbuf_r+0x12>
 8007b9e:	6983      	ldr	r3, [r0, #24]
 8007ba0:	b90b      	cbnz	r3, 8007ba6 <__swbuf_r+0x12>
 8007ba2:	f000 f9cb 	bl	8007f3c <__sinit>
 8007ba6:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <__swbuf_r+0x98>)
 8007ba8:	429c      	cmp	r4, r3
 8007baa:	d12a      	bne.n	8007c02 <__swbuf_r+0x6e>
 8007bac:	686c      	ldr	r4, [r5, #4]
 8007bae:	69a3      	ldr	r3, [r4, #24]
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	071a      	lsls	r2, r3, #28
 8007bb6:	d52e      	bpl.n	8007c16 <__swbuf_r+0x82>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	b363      	cbz	r3, 8007c16 <__swbuf_r+0x82>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	1ac0      	subs	r0, r0, r3
 8007bc2:	6963      	ldr	r3, [r4, #20]
 8007bc4:	b2f6      	uxtb	r6, r6
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	4637      	mov	r7, r6
 8007bca:	db04      	blt.n	8007bd6 <__swbuf_r+0x42>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f94a 	bl	8007e68 <_fflush_r>
 8007bd4:	bb28      	cbnz	r0, 8007c22 <__swbuf_r+0x8e>
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	6022      	str	r2, [r4, #0]
 8007be2:	701e      	strb	r6, [r3, #0]
 8007be4:	6963      	ldr	r3, [r4, #20]
 8007be6:	3001      	adds	r0, #1
 8007be8:	4298      	cmp	r0, r3
 8007bea:	d004      	beq.n	8007bf6 <__swbuf_r+0x62>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	07db      	lsls	r3, r3, #31
 8007bf0:	d519      	bpl.n	8007c26 <__swbuf_r+0x92>
 8007bf2:	2e0a      	cmp	r6, #10
 8007bf4:	d117      	bne.n	8007c26 <__swbuf_r+0x92>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 f935 	bl	8007e68 <_fflush_r>
 8007bfe:	b190      	cbz	r0, 8007c26 <__swbuf_r+0x92>
 8007c00:	e00f      	b.n	8007c22 <__swbuf_r+0x8e>
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <__swbuf_r+0x9c>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	d101      	bne.n	8007c0c <__swbuf_r+0x78>
 8007c08:	68ac      	ldr	r4, [r5, #8]
 8007c0a:	e7d0      	b.n	8007bae <__swbuf_r+0x1a>
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <__swbuf_r+0xa0>)
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	bf08      	it	eq
 8007c12:	68ec      	ldreq	r4, [r5, #12]
 8007c14:	e7cb      	b.n	8007bae <__swbuf_r+0x1a>
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 f81f 	bl	8007c5c <__swsetup_r>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d0cc      	beq.n	8007bbc <__swbuf_r+0x28>
 8007c22:	f04f 37ff 	mov.w	r7, #4294967295
 8007c26:	4638      	mov	r0, r7
 8007c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	08008d8c 	.word	0x08008d8c
 8007c30:	08008dac 	.word	0x08008dac
 8007c34:	08008d6c 	.word	0x08008d6c

08007c38 <_write_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4c07      	ldr	r4, [pc, #28]	; (8007c58 <_write_r+0x20>)
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	6022      	str	r2, [r4, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7ff fce1 	bl	800760e <_write>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_write_r+0x1e>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_write_r+0x1e>
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200009fc 	.word	0x200009fc

08007c5c <__swsetup_r>:
 8007c5c:	4b32      	ldr	r3, [pc, #200]	; (8007d28 <__swsetup_r+0xcc>)
 8007c5e:	b570      	push	{r4, r5, r6, lr}
 8007c60:	681d      	ldr	r5, [r3, #0]
 8007c62:	4606      	mov	r6, r0
 8007c64:	460c      	mov	r4, r1
 8007c66:	b125      	cbz	r5, 8007c72 <__swsetup_r+0x16>
 8007c68:	69ab      	ldr	r3, [r5, #24]
 8007c6a:	b913      	cbnz	r3, 8007c72 <__swsetup_r+0x16>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f965 	bl	8007f3c <__sinit>
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <__swsetup_r+0xd0>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	d10f      	bne.n	8007c98 <__swsetup_r+0x3c>
 8007c78:	686c      	ldr	r4, [r5, #4]
 8007c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	0715      	lsls	r5, r2, #28
 8007c82:	d42c      	bmi.n	8007cde <__swsetup_r+0x82>
 8007c84:	06d0      	lsls	r0, r2, #27
 8007c86:	d411      	bmi.n	8007cac <__swsetup_r+0x50>
 8007c88:	2209      	movs	r2, #9
 8007c8a:	6032      	str	r2, [r6, #0]
 8007c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <__swsetup_r+0xd4>)
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d101      	bne.n	8007ca2 <__swsetup_r+0x46>
 8007c9e:	68ac      	ldr	r4, [r5, #8]
 8007ca0:	e7eb      	b.n	8007c7a <__swsetup_r+0x1e>
 8007ca2:	4b24      	ldr	r3, [pc, #144]	; (8007d34 <__swsetup_r+0xd8>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	bf08      	it	eq
 8007ca8:	68ec      	ldreq	r4, [r5, #12]
 8007caa:	e7e6      	b.n	8007c7a <__swsetup_r+0x1e>
 8007cac:	0751      	lsls	r1, r2, #29
 8007cae:	d512      	bpl.n	8007cd6 <__swsetup_r+0x7a>
 8007cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb2:	b141      	cbz	r1, 8007cc6 <__swsetup_r+0x6a>
 8007cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	d002      	beq.n	8007cc2 <__swsetup_r+0x66>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fda1 	bl	8007804 <_free_r>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6063      	str	r3, [r4, #4]
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f043 0308 	orr.w	r3, r3, #8
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	b94b      	cbnz	r3, 8007cf6 <__swsetup_r+0x9a>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cec:	d003      	beq.n	8007cf6 <__swsetup_r+0x9a>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 f9e3 	bl	80080bc <__smakebuf_r>
 8007cf6:	89a2      	ldrh	r2, [r4, #12]
 8007cf8:	f012 0301 	ands.w	r3, r2, #1
 8007cfc:	d00c      	beq.n	8007d18 <__swsetup_r+0xbc>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	6963      	ldr	r3, [r4, #20]
 8007d04:	425b      	negs	r3, r3
 8007d06:	61a3      	str	r3, [r4, #24]
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	b953      	cbnz	r3, 8007d22 <__swsetup_r+0xc6>
 8007d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d14:	d1ba      	bne.n	8007c8c <__swsetup_r+0x30>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	0792      	lsls	r2, r2, #30
 8007d1a:	bf58      	it	pl
 8007d1c:	6963      	ldrpl	r3, [r4, #20]
 8007d1e:	60a3      	str	r3, [r4, #8]
 8007d20:	e7f2      	b.n	8007d08 <__swsetup_r+0xac>
 8007d22:	2000      	movs	r0, #0
 8007d24:	e7f7      	b.n	8007d16 <__swsetup_r+0xba>
 8007d26:	bf00      	nop
 8007d28:	20000068 	.word	0x20000068
 8007d2c:	08008d8c 	.word	0x08008d8c
 8007d30:	08008dac 	.word	0x08008dac
 8007d34:	08008d6c 	.word	0x08008d6c

08007d38 <_close_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4c06      	ldr	r4, [pc, #24]	; (8007d54 <_close_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4605      	mov	r5, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	f7ff fcac 	bl	80076a0 <_close>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_close_r+0x1a>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_close_r+0x1a>
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	200009fc 	.word	0x200009fc

08007d58 <__sflush_r>:
 8007d58:	898a      	ldrh	r2, [r1, #12]
 8007d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	4605      	mov	r5, r0
 8007d60:	0710      	lsls	r0, r2, #28
 8007d62:	460c      	mov	r4, r1
 8007d64:	d45a      	bmi.n	8007e1c <__sflush_r+0xc4>
 8007d66:	684b      	ldr	r3, [r1, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dc05      	bgt.n	8007d78 <__sflush_r+0x20>
 8007d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dc02      	bgt.n	8007d78 <__sflush_r+0x20>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d7a:	2e00      	cmp	r6, #0
 8007d7c:	d0f9      	beq.n	8007d72 <__sflush_r+0x1a>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d84:	682f      	ldr	r7, [r5, #0]
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	d033      	beq.n	8007df2 <__sflush_r+0x9a>
 8007d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	075a      	lsls	r2, r3, #29
 8007d90:	d505      	bpl.n	8007d9e <__sflush_r+0x46>
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	1ac0      	subs	r0, r0, r3
 8007d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d98:	b10b      	cbz	r3, 8007d9e <__sflush_r+0x46>
 8007d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d9c:	1ac0      	subs	r0, r0, r3
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4602      	mov	r2, r0
 8007da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007da4:	6a21      	ldr	r1, [r4, #32]
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b0      	blx	r6
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	d106      	bne.n	8007dbe <__sflush_r+0x66>
 8007db0:	6829      	ldr	r1, [r5, #0]
 8007db2:	291d      	cmp	r1, #29
 8007db4:	d84b      	bhi.n	8007e4e <__sflush_r+0xf6>
 8007db6:	4a2b      	ldr	r2, [pc, #172]	; (8007e64 <__sflush_r+0x10c>)
 8007db8:	40ca      	lsrs	r2, r1
 8007dba:	07d6      	lsls	r6, r2, #31
 8007dbc:	d547      	bpl.n	8007e4e <__sflush_r+0xf6>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6062      	str	r2, [r4, #4]
 8007dc2:	04d9      	lsls	r1, r3, #19
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	6022      	str	r2, [r4, #0]
 8007dc8:	d504      	bpl.n	8007dd4 <__sflush_r+0x7c>
 8007dca:	1c42      	adds	r2, r0, #1
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0x7a>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b903      	cbnz	r3, 8007dd4 <__sflush_r+0x7c>
 8007dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8007dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd6:	602f      	str	r7, [r5, #0]
 8007dd8:	2900      	cmp	r1, #0
 8007dda:	d0ca      	beq.n	8007d72 <__sflush_r+0x1a>
 8007ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <__sflush_r+0x92>
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff fd0d 	bl	8007804 <_free_r>
 8007dea:	2000      	movs	r0, #0
 8007dec:	6360      	str	r0, [r4, #52]	; 0x34
 8007dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df2:	6a21      	ldr	r1, [r4, #32]
 8007df4:	2301      	movs	r3, #1
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b0      	blx	r6
 8007dfa:	1c41      	adds	r1, r0, #1
 8007dfc:	d1c6      	bne.n	8007d8c <__sflush_r+0x34>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0c3      	beq.n	8007d8c <__sflush_r+0x34>
 8007e04:	2b1d      	cmp	r3, #29
 8007e06:	d001      	beq.n	8007e0c <__sflush_r+0xb4>
 8007e08:	2b16      	cmp	r3, #22
 8007e0a:	d101      	bne.n	8007e10 <__sflush_r+0xb8>
 8007e0c:	602f      	str	r7, [r5, #0]
 8007e0e:	e7b0      	b.n	8007d72 <__sflush_r+0x1a>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e1c:	690f      	ldr	r7, [r1, #16]
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	d0a7      	beq.n	8007d72 <__sflush_r+0x1a>
 8007e22:	0793      	lsls	r3, r2, #30
 8007e24:	680e      	ldr	r6, [r1, #0]
 8007e26:	bf08      	it	eq
 8007e28:	694b      	ldreq	r3, [r1, #20]
 8007e2a:	600f      	str	r7, [r1, #0]
 8007e2c:	bf18      	it	ne
 8007e2e:	2300      	movne	r3, #0
 8007e30:	eba6 0807 	sub.w	r8, r6, r7
 8007e34:	608b      	str	r3, [r1, #8]
 8007e36:	f1b8 0f00 	cmp.w	r8, #0
 8007e3a:	dd9a      	ble.n	8007d72 <__sflush_r+0x1a>
 8007e3c:	4643      	mov	r3, r8
 8007e3e:	463a      	mov	r2, r7
 8007e40:	6a21      	ldr	r1, [r4, #32]
 8007e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e44:	4628      	mov	r0, r5
 8007e46:	47b0      	blx	r6
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	dc07      	bgt.n	8007e5c <__sflush_r+0x104>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	4407      	add	r7, r0
 8007e5e:	eba8 0800 	sub.w	r8, r8, r0
 8007e62:	e7e8      	b.n	8007e36 <__sflush_r+0xde>
 8007e64:	20400001 	.word	0x20400001

08007e68 <_fflush_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	b1db      	cbz	r3, 8007eaa <_fflush_r+0x42>
 8007e72:	b118      	cbz	r0, 8007e7c <_fflush_r+0x14>
 8007e74:	6983      	ldr	r3, [r0, #24]
 8007e76:	b90b      	cbnz	r3, 8007e7c <_fflush_r+0x14>
 8007e78:	f000 f860 	bl	8007f3c <__sinit>
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <_fflush_r+0x48>)
 8007e7e:	429c      	cmp	r4, r3
 8007e80:	d109      	bne.n	8007e96 <_fflush_r+0x2e>
 8007e82:	686c      	ldr	r4, [r5, #4]
 8007e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e88:	b17b      	cbz	r3, 8007eaa <_fflush_r+0x42>
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e92:	f7ff bf61 	b.w	8007d58 <__sflush_r>
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <_fflush_r+0x4c>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d101      	bne.n	8007ea0 <_fflush_r+0x38>
 8007e9c:	68ac      	ldr	r4, [r5, #8]
 8007e9e:	e7f1      	b.n	8007e84 <_fflush_r+0x1c>
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <_fflush_r+0x50>)
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	bf08      	it	eq
 8007ea6:	68ec      	ldreq	r4, [r5, #12]
 8007ea8:	e7ec      	b.n	8007e84 <_fflush_r+0x1c>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	bd38      	pop	{r3, r4, r5, pc}
 8007eae:	bf00      	nop
 8007eb0:	08008d8c 	.word	0x08008d8c
 8007eb4:	08008dac 	.word	0x08008dac
 8007eb8:	08008d6c 	.word	0x08008d6c

08007ebc <_cleanup_r>:
 8007ebc:	4901      	ldr	r1, [pc, #4]	; (8007ec4 <_cleanup_r+0x8>)
 8007ebe:	f000 b8a9 	b.w	8008014 <_fwalk_reent>
 8007ec2:	bf00      	nop
 8007ec4:	08007e69 	.word	0x08007e69

08007ec8 <std.isra.0>:
 8007ec8:	2300      	movs	r3, #0
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	4604      	mov	r4, r0
 8007ece:	6003      	str	r3, [r0, #0]
 8007ed0:	6043      	str	r3, [r0, #4]
 8007ed2:	6083      	str	r3, [r0, #8]
 8007ed4:	8181      	strh	r1, [r0, #12]
 8007ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed8:	81c2      	strh	r2, [r0, #14]
 8007eda:	6103      	str	r3, [r0, #16]
 8007edc:	6143      	str	r3, [r0, #20]
 8007ede:	6183      	str	r3, [r0, #24]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	305c      	adds	r0, #92	; 0x5c
 8007ee6:	f7ff fc84 	bl	80077f2 <memset>
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <std.isra.0+0x38>)
 8007eec:	6263      	str	r3, [r4, #36]	; 0x24
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <std.isra.0+0x3c>)
 8007ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std.isra.0+0x40>)
 8007ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <std.isra.0+0x44>)
 8007ef8:	6224      	str	r4, [r4, #32]
 8007efa:	6323      	str	r3, [r4, #48]	; 0x30
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	bf00      	nop
 8007f00:	08007a75 	.word	0x08007a75
 8007f04:	08007a97 	.word	0x08007a97
 8007f08:	08007acf 	.word	0x08007acf
 8007f0c:	08007af3 	.word	0x08007af3

08007f10 <__sfmoreglue>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	1e4a      	subs	r2, r1, #1
 8007f14:	2568      	movs	r5, #104	; 0x68
 8007f16:	4355      	muls	r5, r2
 8007f18:	460e      	mov	r6, r1
 8007f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f1e:	f7ff fcbf 	bl	80078a0 <_malloc_r>
 8007f22:	4604      	mov	r4, r0
 8007f24:	b140      	cbz	r0, 8007f38 <__sfmoreglue+0x28>
 8007f26:	2100      	movs	r1, #0
 8007f28:	e880 0042 	stmia.w	r0, {r1, r6}
 8007f2c:	300c      	adds	r0, #12
 8007f2e:	60a0      	str	r0, [r4, #8]
 8007f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f34:	f7ff fc5d 	bl	80077f2 <memset>
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}

08007f3c <__sinit>:
 8007f3c:	6983      	ldr	r3, [r0, #24]
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	bb33      	cbnz	r3, 8007f92 <__sinit+0x56>
 8007f44:	6483      	str	r3, [r0, #72]	; 0x48
 8007f46:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007f48:	6503      	str	r3, [r0, #80]	; 0x50
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <__sinit+0x58>)
 8007f4c:	4a12      	ldr	r2, [pc, #72]	; (8007f98 <__sinit+0x5c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6282      	str	r2, [r0, #40]	; 0x28
 8007f52:	4298      	cmp	r0, r3
 8007f54:	bf04      	itt	eq
 8007f56:	2301      	moveq	r3, #1
 8007f58:	6183      	streq	r3, [r0, #24]
 8007f5a:	f000 f81f 	bl	8007f9c <__sfp>
 8007f5e:	6060      	str	r0, [r4, #4]
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 f81b 	bl	8007f9c <__sfp>
 8007f66:	60a0      	str	r0, [r4, #8]
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 f817 	bl	8007f9c <__sfp>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	60e0      	str	r0, [r4, #12]
 8007f72:	2104      	movs	r1, #4
 8007f74:	6860      	ldr	r0, [r4, #4]
 8007f76:	f7ff ffa7 	bl	8007ec8 <std.isra.0>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	2109      	movs	r1, #9
 8007f7e:	68a0      	ldr	r0, [r4, #8]
 8007f80:	f7ff ffa2 	bl	8007ec8 <std.isra.0>
 8007f84:	2202      	movs	r2, #2
 8007f86:	2112      	movs	r1, #18
 8007f88:	68e0      	ldr	r0, [r4, #12]
 8007f8a:	f7ff ff9d 	bl	8007ec8 <std.isra.0>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61a3      	str	r3, [r4, #24]
 8007f92:	bd10      	pop	{r4, pc}
 8007f94:	08008d68 	.word	0x08008d68
 8007f98:	08007ebd 	.word	0x08007ebd

08007f9c <__sfp>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <__sfp+0x74>)
 8007fa0:	681e      	ldr	r6, [r3, #0]
 8007fa2:	69b3      	ldr	r3, [r6, #24]
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	b913      	cbnz	r3, 8007fae <__sfp+0x12>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffc7 	bl	8007f3c <__sinit>
 8007fae:	3648      	adds	r6, #72	; 0x48
 8007fb0:	68b4      	ldr	r4, [r6, #8]
 8007fb2:	6873      	ldr	r3, [r6, #4]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	d503      	bpl.n	8007fc0 <__sfp+0x24>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	b133      	cbz	r3, 8007fca <__sfp+0x2e>
 8007fbc:	6836      	ldr	r6, [r6, #0]
 8007fbe:	e7f7      	b.n	8007fb0 <__sfp+0x14>
 8007fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fc4:	b16d      	cbz	r5, 8007fe2 <__sfp+0x46>
 8007fc6:	3468      	adds	r4, #104	; 0x68
 8007fc8:	e7f4      	b.n	8007fb4 <__sfp+0x18>
 8007fca:	2104      	movs	r1, #4
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f7ff ff9f 	bl	8007f10 <__sfmoreglue>
 8007fd2:	6030      	str	r0, [r6, #0]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1f1      	bne.n	8007fbc <__sfp+0x20>
 8007fd8:	230c      	movs	r3, #12
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fe6:	81e3      	strh	r3, [r4, #14]
 8007fe8:	2301      	movs	r3, #1
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	6665      	str	r5, [r4, #100]	; 0x64
 8007fee:	6025      	str	r5, [r4, #0]
 8007ff0:	60a5      	str	r5, [r4, #8]
 8007ff2:	6065      	str	r5, [r4, #4]
 8007ff4:	6125      	str	r5, [r4, #16]
 8007ff6:	6165      	str	r5, [r4, #20]
 8007ff8:	61a5      	str	r5, [r4, #24]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008002:	f7ff fbf6 	bl	80077f2 <memset>
 8008006:	6365      	str	r5, [r4, #52]	; 0x34
 8008008:	63a5      	str	r5, [r4, #56]	; 0x38
 800800a:	64a5      	str	r5, [r4, #72]	; 0x48
 800800c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800800e:	e7e6      	b.n	8007fde <__sfp+0x42>
 8008010:	08008d68 	.word	0x08008d68

08008014 <_fwalk_reent>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4680      	mov	r8, r0
 800801a:	4689      	mov	r9, r1
 800801c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008020:	2600      	movs	r6, #0
 8008022:	b914      	cbnz	r4, 800802a <_fwalk_reent+0x16>
 8008024:	4630      	mov	r0, r6
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	68a5      	ldr	r5, [r4, #8]
 800802c:	6867      	ldr	r7, [r4, #4]
 800802e:	3f01      	subs	r7, #1
 8008030:	d501      	bpl.n	8008036 <_fwalk_reent+0x22>
 8008032:	6824      	ldr	r4, [r4, #0]
 8008034:	e7f5      	b.n	8008022 <_fwalk_reent+0xe>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d907      	bls.n	800804c <_fwalk_reent+0x38>
 800803c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008040:	3301      	adds	r3, #1
 8008042:	d003      	beq.n	800804c <_fwalk_reent+0x38>
 8008044:	4629      	mov	r1, r5
 8008046:	4640      	mov	r0, r8
 8008048:	47c8      	blx	r9
 800804a:	4306      	orrs	r6, r0
 800804c:	3568      	adds	r5, #104	; 0x68
 800804e:	e7ee      	b.n	800802e <_fwalk_reent+0x1a>

08008050 <_lseek_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4c07      	ldr	r4, [pc, #28]	; (8008070 <_lseek_r+0x20>)
 8008054:	4605      	mov	r5, r0
 8008056:	4608      	mov	r0, r1
 8008058:	4611      	mov	r1, r2
 800805a:	2200      	movs	r2, #0
 800805c:	6022      	str	r2, [r4, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f7ff fb45 	bl	80076ee <_lseek>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_lseek_r+0x1e>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	b103      	cbz	r3, 800806e <_lseek_r+0x1e>
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	200009fc 	.word	0x200009fc

08008074 <__swhatbuf_r>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	460e      	mov	r6, r1
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	2900      	cmp	r1, #0
 800807e:	b090      	sub	sp, #64	; 0x40
 8008080:	4614      	mov	r4, r2
 8008082:	461d      	mov	r5, r3
 8008084:	da07      	bge.n	8008096 <__swhatbuf_r+0x22>
 8008086:	2300      	movs	r3, #0
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	89b3      	ldrh	r3, [r6, #12]
 800808c:	061a      	lsls	r2, r3, #24
 800808e:	d410      	bmi.n	80080b2 <__swhatbuf_r+0x3e>
 8008090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008094:	e00e      	b.n	80080b4 <__swhatbuf_r+0x40>
 8008096:	aa01      	add	r2, sp, #4
 8008098:	f000 fc8a 	bl	80089b0 <_fstat_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	dbf2      	blt.n	8008086 <__swhatbuf_r+0x12>
 80080a0:	9a02      	ldr	r2, [sp, #8]
 80080a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080aa:	425a      	negs	r2, r3
 80080ac:	415a      	adcs	r2, r3
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	e7ee      	b.n	8008090 <__swhatbuf_r+0x1c>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	2000      	movs	r0, #0
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	b010      	add	sp, #64	; 0x40
 80080ba:	bd70      	pop	{r4, r5, r6, pc}

080080bc <__smakebuf_r>:
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080c0:	079d      	lsls	r5, r3, #30
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	d507      	bpl.n	80080d8 <__smakebuf_r+0x1c>
 80080c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b002      	add	sp, #8
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	ab01      	add	r3, sp, #4
 80080da:	466a      	mov	r2, sp
 80080dc:	f7ff ffca 	bl	8008074 <__swhatbuf_r>
 80080e0:	9900      	ldr	r1, [sp, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff fbdb 	bl	80078a0 <_malloc_r>
 80080ea:	b948      	cbnz	r0, 8008100 <__smakebuf_r+0x44>
 80080ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d4ef      	bmi.n	80080d4 <__smakebuf_r+0x18>
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	f043 0302 	orr.w	r3, r3, #2
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	e7e3      	b.n	80080c8 <__smakebuf_r+0xc>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <__smakebuf_r+0x7c>)
 8008102:	62b3      	str	r3, [r6, #40]	; 0x28
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	6020      	str	r0, [r4, #0]
 8008108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	6163      	str	r3, [r4, #20]
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	6120      	str	r0, [r4, #16]
 8008116:	b15b      	cbz	r3, 8008130 <__smakebuf_r+0x74>
 8008118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811c:	4630      	mov	r0, r6
 800811e:	f000 fc59 	bl	80089d4 <_isatty_r>
 8008122:	b128      	cbz	r0, 8008130 <__smakebuf_r+0x74>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	431d      	orrs	r5, r3
 8008134:	81a5      	strh	r5, [r4, #12]
 8008136:	e7cd      	b.n	80080d4 <__smakebuf_r+0x18>
 8008138:	08007ebd 	.word	0x08007ebd

0800813c <__malloc_lock>:
 800813c:	4770      	bx	lr

0800813e <__malloc_unlock>:
 800813e:	4770      	bx	lr

08008140 <__ssputs_r>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	688e      	ldr	r6, [r1, #8]
 8008146:	429e      	cmp	r6, r3
 8008148:	4682      	mov	sl, r0
 800814a:	460c      	mov	r4, r1
 800814c:	4691      	mov	r9, r2
 800814e:	4698      	mov	r8, r3
 8008150:	d835      	bhi.n	80081be <__ssputs_r+0x7e>
 8008152:	898a      	ldrh	r2, [r1, #12]
 8008154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008158:	d031      	beq.n	80081be <__ssputs_r+0x7e>
 800815a:	6825      	ldr	r5, [r4, #0]
 800815c:	6909      	ldr	r1, [r1, #16]
 800815e:	1a6f      	subs	r7, r5, r1
 8008160:	6965      	ldr	r5, [r4, #20]
 8008162:	2302      	movs	r3, #2
 8008164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008168:	fb95 f5f3 	sdiv	r5, r5, r3
 800816c:	f108 0301 	add.w	r3, r8, #1
 8008170:	443b      	add	r3, r7
 8008172:	429d      	cmp	r5, r3
 8008174:	bf38      	it	cc
 8008176:	461d      	movcc	r5, r3
 8008178:	0553      	lsls	r3, r2, #21
 800817a:	d531      	bpl.n	80081e0 <__ssputs_r+0xa0>
 800817c:	4629      	mov	r1, r5
 800817e:	f7ff fb8f 	bl	80078a0 <_malloc_r>
 8008182:	4606      	mov	r6, r0
 8008184:	b950      	cbnz	r0, 800819c <__ssputs_r+0x5c>
 8008186:	230c      	movs	r3, #12
 8008188:	f8ca 3000 	str.w	r3, [sl]
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819c:	463a      	mov	r2, r7
 800819e:	6921      	ldr	r1, [r4, #16]
 80081a0:	f7ff fb1c 	bl	80077dc <memcpy>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	6126      	str	r6, [r4, #16]
 80081b2:	6165      	str	r5, [r4, #20]
 80081b4:	443e      	add	r6, r7
 80081b6:	1bed      	subs	r5, r5, r7
 80081b8:	6026      	str	r6, [r4, #0]
 80081ba:	60a5      	str	r5, [r4, #8]
 80081bc:	4646      	mov	r6, r8
 80081be:	4546      	cmp	r6, r8
 80081c0:	bf28      	it	cs
 80081c2:	4646      	movcs	r6, r8
 80081c4:	4632      	mov	r2, r6
 80081c6:	4649      	mov	r1, r9
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	f000 fc13 	bl	80089f4 <memmove>
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	1b9b      	subs	r3, r3, r6
 80081d2:	60a3      	str	r3, [r4, #8]
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	441e      	add	r6, r3
 80081d8:	6026      	str	r6, [r4, #0]
 80081da:	2000      	movs	r0, #0
 80081dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e0:	462a      	mov	r2, r5
 80081e2:	f000 fc21 	bl	8008a28 <_realloc_r>
 80081e6:	4606      	mov	r6, r0
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d1e1      	bne.n	80081b0 <__ssputs_r+0x70>
 80081ec:	6921      	ldr	r1, [r4, #16]
 80081ee:	4650      	mov	r0, sl
 80081f0:	f7ff fb08 	bl	8007804 <_free_r>
 80081f4:	e7c7      	b.n	8008186 <__ssputs_r+0x46>
	...

080081f8 <_svfiprintf_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	b09d      	sub	sp, #116	; 0x74
 80081fe:	4680      	mov	r8, r0
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	898b      	ldrh	r3, [r1, #12]
 8008204:	061c      	lsls	r4, r3, #24
 8008206:	460d      	mov	r5, r1
 8008208:	4616      	mov	r6, r2
 800820a:	d50f      	bpl.n	800822c <_svfiprintf_r+0x34>
 800820c:	690b      	ldr	r3, [r1, #16]
 800820e:	b96b      	cbnz	r3, 800822c <_svfiprintf_r+0x34>
 8008210:	2140      	movs	r1, #64	; 0x40
 8008212:	f7ff fb45 	bl	80078a0 <_malloc_r>
 8008216:	6028      	str	r0, [r5, #0]
 8008218:	6128      	str	r0, [r5, #16]
 800821a:	b928      	cbnz	r0, 8008228 <_svfiprintf_r+0x30>
 800821c:	230c      	movs	r3, #12
 800821e:	f8c8 3000 	str.w	r3, [r8]
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	e0c5      	b.n	80083b4 <_svfiprintf_r+0x1bc>
 8008228:	2340      	movs	r3, #64	; 0x40
 800822a:	616b      	str	r3, [r5, #20]
 800822c:	2300      	movs	r3, #0
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	2320      	movs	r3, #32
 8008232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008236:	2330      	movs	r3, #48	; 0x30
 8008238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800823c:	f04f 0b01 	mov.w	fp, #1
 8008240:	4637      	mov	r7, r6
 8008242:	463c      	mov	r4, r7
 8008244:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d13c      	bne.n	80082c6 <_svfiprintf_r+0xce>
 800824c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008250:	d00b      	beq.n	800826a <_svfiprintf_r+0x72>
 8008252:	4653      	mov	r3, sl
 8008254:	4632      	mov	r2, r6
 8008256:	4629      	mov	r1, r5
 8008258:	4640      	mov	r0, r8
 800825a:	f7ff ff71 	bl	8008140 <__ssputs_r>
 800825e:	3001      	adds	r0, #1
 8008260:	f000 80a3 	beq.w	80083aa <_svfiprintf_r+0x1b2>
 8008264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008266:	4453      	add	r3, sl
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	783b      	ldrb	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 809c 	beq.w	80083aa <_svfiprintf_r+0x1b2>
 8008272:	2300      	movs	r3, #0
 8008274:	f04f 32ff 	mov.w	r2, #4294967295
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	9205      	str	r2, [sp, #20]
 800827e:	9306      	str	r3, [sp, #24]
 8008280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008284:	931a      	str	r3, [sp, #104]	; 0x68
 8008286:	2205      	movs	r2, #5
 8008288:	7821      	ldrb	r1, [r4, #0]
 800828a:	4850      	ldr	r0, [pc, #320]	; (80083cc <_svfiprintf_r+0x1d4>)
 800828c:	f7f7 ffa8 	bl	80001e0 <memchr>
 8008290:	1c67      	adds	r7, r4, #1
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	b9d8      	cbnz	r0, 80082ce <_svfiprintf_r+0xd6>
 8008296:	06d9      	lsls	r1, r3, #27
 8008298:	bf44      	itt	mi
 800829a:	2220      	movmi	r2, #32
 800829c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082a0:	071a      	lsls	r2, r3, #28
 80082a2:	bf44      	itt	mi
 80082a4:	222b      	movmi	r2, #43	; 0x2b
 80082a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082aa:	7822      	ldrb	r2, [r4, #0]
 80082ac:	2a2a      	cmp	r2, #42	; 0x2a
 80082ae:	d016      	beq.n	80082de <_svfiprintf_r+0xe6>
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	2100      	movs	r1, #0
 80082b4:	200a      	movs	r0, #10
 80082b6:	4627      	mov	r7, r4
 80082b8:	3401      	adds	r4, #1
 80082ba:	783b      	ldrb	r3, [r7, #0]
 80082bc:	3b30      	subs	r3, #48	; 0x30
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d951      	bls.n	8008366 <_svfiprintf_r+0x16e>
 80082c2:	b1c9      	cbz	r1, 80082f8 <_svfiprintf_r+0x100>
 80082c4:	e011      	b.n	80082ea <_svfiprintf_r+0xf2>
 80082c6:	2b25      	cmp	r3, #37	; 0x25
 80082c8:	d0c0      	beq.n	800824c <_svfiprintf_r+0x54>
 80082ca:	4627      	mov	r7, r4
 80082cc:	e7b9      	b.n	8008242 <_svfiprintf_r+0x4a>
 80082ce:	4a3f      	ldr	r2, [pc, #252]	; (80083cc <_svfiprintf_r+0x1d4>)
 80082d0:	1a80      	subs	r0, r0, r2
 80082d2:	fa0b f000 	lsl.w	r0, fp, r0
 80082d6:	4318      	orrs	r0, r3
 80082d8:	9004      	str	r0, [sp, #16]
 80082da:	463c      	mov	r4, r7
 80082dc:	e7d3      	b.n	8008286 <_svfiprintf_r+0x8e>
 80082de:	9a03      	ldr	r2, [sp, #12]
 80082e0:	1d11      	adds	r1, r2, #4
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	9103      	str	r1, [sp, #12]
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	db01      	blt.n	80082ee <_svfiprintf_r+0xf6>
 80082ea:	9207      	str	r2, [sp, #28]
 80082ec:	e004      	b.n	80082f8 <_svfiprintf_r+0x100>
 80082ee:	4252      	negs	r2, r2
 80082f0:	f043 0302 	orr.w	r3, r3, #2
 80082f4:	9207      	str	r2, [sp, #28]
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	783b      	ldrb	r3, [r7, #0]
 80082fa:	2b2e      	cmp	r3, #46	; 0x2e
 80082fc:	d10e      	bne.n	800831c <_svfiprintf_r+0x124>
 80082fe:	787b      	ldrb	r3, [r7, #1]
 8008300:	2b2a      	cmp	r3, #42	; 0x2a
 8008302:	f107 0101 	add.w	r1, r7, #1
 8008306:	d132      	bne.n	800836e <_svfiprintf_r+0x176>
 8008308:	9b03      	ldr	r3, [sp, #12]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	9203      	str	r2, [sp, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfb8      	it	lt
 8008314:	f04f 33ff 	movlt.w	r3, #4294967295
 8008318:	3702      	adds	r7, #2
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	4c2c      	ldr	r4, [pc, #176]	; (80083d0 <_svfiprintf_r+0x1d8>)
 800831e:	7839      	ldrb	r1, [r7, #0]
 8008320:	2203      	movs	r2, #3
 8008322:	4620      	mov	r0, r4
 8008324:	f7f7 ff5c 	bl	80001e0 <memchr>
 8008328:	b138      	cbz	r0, 800833a <_svfiprintf_r+0x142>
 800832a:	2340      	movs	r3, #64	; 0x40
 800832c:	1b00      	subs	r0, r0, r4
 800832e:	fa03 f000 	lsl.w	r0, r3, r0
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	4303      	orrs	r3, r0
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	3701      	adds	r7, #1
 800833a:	7839      	ldrb	r1, [r7, #0]
 800833c:	4825      	ldr	r0, [pc, #148]	; (80083d4 <_svfiprintf_r+0x1dc>)
 800833e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008342:	2206      	movs	r2, #6
 8008344:	1c7e      	adds	r6, r7, #1
 8008346:	f7f7 ff4b 	bl	80001e0 <memchr>
 800834a:	2800      	cmp	r0, #0
 800834c:	d035      	beq.n	80083ba <_svfiprintf_r+0x1c2>
 800834e:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <_svfiprintf_r+0x1e0>)
 8008350:	b9fb      	cbnz	r3, 8008392 <_svfiprintf_r+0x19a>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	3307      	adds	r3, #7
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	3308      	adds	r3, #8
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	444b      	add	r3, r9
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	e76c      	b.n	8008240 <_svfiprintf_r+0x48>
 8008366:	fb00 3202 	mla	r2, r0, r2, r3
 800836a:	2101      	movs	r1, #1
 800836c:	e7a3      	b.n	80082b6 <_svfiprintf_r+0xbe>
 800836e:	2300      	movs	r3, #0
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	4618      	mov	r0, r3
 8008374:	240a      	movs	r4, #10
 8008376:	460f      	mov	r7, r1
 8008378:	3101      	adds	r1, #1
 800837a:	783a      	ldrb	r2, [r7, #0]
 800837c:	3a30      	subs	r2, #48	; 0x30
 800837e:	2a09      	cmp	r2, #9
 8008380:	d903      	bls.n	800838a <_svfiprintf_r+0x192>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0ca      	beq.n	800831c <_svfiprintf_r+0x124>
 8008386:	9005      	str	r0, [sp, #20]
 8008388:	e7c8      	b.n	800831c <_svfiprintf_r+0x124>
 800838a:	fb04 2000 	mla	r0, r4, r0, r2
 800838e:	2301      	movs	r3, #1
 8008390:	e7f1      	b.n	8008376 <_svfiprintf_r+0x17e>
 8008392:	ab03      	add	r3, sp, #12
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	462a      	mov	r2, r5
 8008398:	4b10      	ldr	r3, [pc, #64]	; (80083dc <_svfiprintf_r+0x1e4>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	4640      	mov	r0, r8
 800839e:	f3af 8000 	nop.w
 80083a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083a6:	4681      	mov	r9, r0
 80083a8:	d1d9      	bne.n	800835e <_svfiprintf_r+0x166>
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	065b      	lsls	r3, r3, #25
 80083ae:	f53f af38 	bmi.w	8008222 <_svfiprintf_r+0x2a>
 80083b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083b4:	b01d      	add	sp, #116	; 0x74
 80083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ba:	ab03      	add	r3, sp, #12
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	462a      	mov	r2, r5
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <_svfiprintf_r+0x1e4>)
 80083c2:	a904      	add	r1, sp, #16
 80083c4:	4640      	mov	r0, r8
 80083c6:	f000 f9c1 	bl	800874c <_printf_i>
 80083ca:	e7ea      	b.n	80083a2 <_svfiprintf_r+0x1aa>
 80083cc:	08008dcc 	.word	0x08008dcc
 80083d0:	08008dd2 	.word	0x08008dd2
 80083d4:	08008dd6 	.word	0x08008dd6
 80083d8:	00000000 	.word	0x00000000
 80083dc:	08008141 	.word	0x08008141

080083e0 <__sfputc_r>:
 80083e0:	6893      	ldr	r3, [r2, #8]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	b410      	push	{r4}
 80083e8:	6093      	str	r3, [r2, #8]
 80083ea:	da09      	bge.n	8008400 <__sfputc_r+0x20>
 80083ec:	6994      	ldr	r4, [r2, #24]
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	db02      	blt.n	80083f8 <__sfputc_r+0x18>
 80083f2:	b2cb      	uxtb	r3, r1
 80083f4:	2b0a      	cmp	r3, #10
 80083f6:	d103      	bne.n	8008400 <__sfputc_r+0x20>
 80083f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fc:	f7ff bbca 	b.w	8007b94 <__swbuf_r>
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	1c58      	adds	r0, r3, #1
 8008404:	6010      	str	r0, [r2, #0]
 8008406:	7019      	strb	r1, [r3, #0]
 8008408:	b2c8      	uxtb	r0, r1
 800840a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800840e:	4770      	bx	lr

08008410 <__sfputs_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	4614      	mov	r4, r2
 8008418:	18d5      	adds	r5, r2, r3
 800841a:	42ac      	cmp	r4, r5
 800841c:	d101      	bne.n	8008422 <__sfputs_r+0x12>
 800841e:	2000      	movs	r0, #0
 8008420:	e007      	b.n	8008432 <__sfputs_r+0x22>
 8008422:	463a      	mov	r2, r7
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	4630      	mov	r0, r6
 800842a:	f7ff ffd9 	bl	80083e0 <__sfputc_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d1f3      	bne.n	800841a <__sfputs_r+0xa>
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008434 <_vfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	b09d      	sub	sp, #116	; 0x74
 800843a:	460c      	mov	r4, r1
 800843c:	4617      	mov	r7, r2
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	4606      	mov	r6, r0
 8008442:	b118      	cbz	r0, 800844c <_vfiprintf_r+0x18>
 8008444:	6983      	ldr	r3, [r0, #24]
 8008446:	b90b      	cbnz	r3, 800844c <_vfiprintf_r+0x18>
 8008448:	f7ff fd78 	bl	8007f3c <__sinit>
 800844c:	4b7c      	ldr	r3, [pc, #496]	; (8008640 <_vfiprintf_r+0x20c>)
 800844e:	429c      	cmp	r4, r3
 8008450:	d157      	bne.n	8008502 <_vfiprintf_r+0xce>
 8008452:	6874      	ldr	r4, [r6, #4]
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	0718      	lsls	r0, r3, #28
 8008458:	d55d      	bpl.n	8008516 <_vfiprintf_r+0xe2>
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d05a      	beq.n	8008516 <_vfiprintf_r+0xe2>
 8008460:	2300      	movs	r3, #0
 8008462:	9309      	str	r3, [sp, #36]	; 0x24
 8008464:	2320      	movs	r3, #32
 8008466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800846a:	2330      	movs	r3, #48	; 0x30
 800846c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008470:	f04f 0b01 	mov.w	fp, #1
 8008474:	46b8      	mov	r8, r7
 8008476:	4645      	mov	r5, r8
 8008478:	f815 3b01 	ldrb.w	r3, [r5], #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d155      	bne.n	800852c <_vfiprintf_r+0xf8>
 8008480:	ebb8 0a07 	subs.w	sl, r8, r7
 8008484:	d00b      	beq.n	800849e <_vfiprintf_r+0x6a>
 8008486:	4653      	mov	r3, sl
 8008488:	463a      	mov	r2, r7
 800848a:	4621      	mov	r1, r4
 800848c:	4630      	mov	r0, r6
 800848e:	f7ff ffbf 	bl	8008410 <__sfputs_r>
 8008492:	3001      	adds	r0, #1
 8008494:	f000 80c4 	beq.w	8008620 <_vfiprintf_r+0x1ec>
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	4453      	add	r3, sl
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	f898 3000 	ldrb.w	r3, [r8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 80bc 	beq.w	8008620 <_vfiprintf_r+0x1ec>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	9307      	str	r3, [sp, #28]
 80084b2:	9205      	str	r2, [sp, #20]
 80084b4:	9306      	str	r3, [sp, #24]
 80084b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084ba:	931a      	str	r3, [sp, #104]	; 0x68
 80084bc:	2205      	movs	r2, #5
 80084be:	7829      	ldrb	r1, [r5, #0]
 80084c0:	4860      	ldr	r0, [pc, #384]	; (8008644 <_vfiprintf_r+0x210>)
 80084c2:	f7f7 fe8d 	bl	80001e0 <memchr>
 80084c6:	f105 0801 	add.w	r8, r5, #1
 80084ca:	9b04      	ldr	r3, [sp, #16]
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d131      	bne.n	8008534 <_vfiprintf_r+0x100>
 80084d0:	06d9      	lsls	r1, r3, #27
 80084d2:	bf44      	itt	mi
 80084d4:	2220      	movmi	r2, #32
 80084d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084da:	071a      	lsls	r2, r3, #28
 80084dc:	bf44      	itt	mi
 80084de:	222b      	movmi	r2, #43	; 0x2b
 80084e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084e4:	782a      	ldrb	r2, [r5, #0]
 80084e6:	2a2a      	cmp	r2, #42	; 0x2a
 80084e8:	d02c      	beq.n	8008544 <_vfiprintf_r+0x110>
 80084ea:	9a07      	ldr	r2, [sp, #28]
 80084ec:	2100      	movs	r1, #0
 80084ee:	200a      	movs	r0, #10
 80084f0:	46a8      	mov	r8, r5
 80084f2:	3501      	adds	r5, #1
 80084f4:	f898 3000 	ldrb.w	r3, [r8]
 80084f8:	3b30      	subs	r3, #48	; 0x30
 80084fa:	2b09      	cmp	r3, #9
 80084fc:	d96d      	bls.n	80085da <_vfiprintf_r+0x1a6>
 80084fe:	b371      	cbz	r1, 800855e <_vfiprintf_r+0x12a>
 8008500:	e026      	b.n	8008550 <_vfiprintf_r+0x11c>
 8008502:	4b51      	ldr	r3, [pc, #324]	; (8008648 <_vfiprintf_r+0x214>)
 8008504:	429c      	cmp	r4, r3
 8008506:	d101      	bne.n	800850c <_vfiprintf_r+0xd8>
 8008508:	68b4      	ldr	r4, [r6, #8]
 800850a:	e7a3      	b.n	8008454 <_vfiprintf_r+0x20>
 800850c:	4b4f      	ldr	r3, [pc, #316]	; (800864c <_vfiprintf_r+0x218>)
 800850e:	429c      	cmp	r4, r3
 8008510:	bf08      	it	eq
 8008512:	68f4      	ldreq	r4, [r6, #12]
 8008514:	e79e      	b.n	8008454 <_vfiprintf_r+0x20>
 8008516:	4621      	mov	r1, r4
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff fb9f 	bl	8007c5c <__swsetup_r>
 800851e:	2800      	cmp	r0, #0
 8008520:	d09e      	beq.n	8008460 <_vfiprintf_r+0x2c>
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	b01d      	add	sp, #116	; 0x74
 8008528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852c:	2b25      	cmp	r3, #37	; 0x25
 800852e:	d0a7      	beq.n	8008480 <_vfiprintf_r+0x4c>
 8008530:	46a8      	mov	r8, r5
 8008532:	e7a0      	b.n	8008476 <_vfiprintf_r+0x42>
 8008534:	4a43      	ldr	r2, [pc, #268]	; (8008644 <_vfiprintf_r+0x210>)
 8008536:	1a80      	subs	r0, r0, r2
 8008538:	fa0b f000 	lsl.w	r0, fp, r0
 800853c:	4318      	orrs	r0, r3
 800853e:	9004      	str	r0, [sp, #16]
 8008540:	4645      	mov	r5, r8
 8008542:	e7bb      	b.n	80084bc <_vfiprintf_r+0x88>
 8008544:	9a03      	ldr	r2, [sp, #12]
 8008546:	1d11      	adds	r1, r2, #4
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	9103      	str	r1, [sp, #12]
 800854c:	2a00      	cmp	r2, #0
 800854e:	db01      	blt.n	8008554 <_vfiprintf_r+0x120>
 8008550:	9207      	str	r2, [sp, #28]
 8008552:	e004      	b.n	800855e <_vfiprintf_r+0x12a>
 8008554:	4252      	negs	r2, r2
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	9207      	str	r2, [sp, #28]
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	f898 3000 	ldrb.w	r3, [r8]
 8008562:	2b2e      	cmp	r3, #46	; 0x2e
 8008564:	d110      	bne.n	8008588 <_vfiprintf_r+0x154>
 8008566:	f898 3001 	ldrb.w	r3, [r8, #1]
 800856a:	2b2a      	cmp	r3, #42	; 0x2a
 800856c:	f108 0101 	add.w	r1, r8, #1
 8008570:	d137      	bne.n	80085e2 <_vfiprintf_r+0x1ae>
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	1d1a      	adds	r2, r3, #4
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	9203      	str	r2, [sp, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfb8      	it	lt
 800857e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008582:	f108 0802 	add.w	r8, r8, #2
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	4d31      	ldr	r5, [pc, #196]	; (8008650 <_vfiprintf_r+0x21c>)
 800858a:	f898 1000 	ldrb.w	r1, [r8]
 800858e:	2203      	movs	r2, #3
 8008590:	4628      	mov	r0, r5
 8008592:	f7f7 fe25 	bl	80001e0 <memchr>
 8008596:	b140      	cbz	r0, 80085aa <_vfiprintf_r+0x176>
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	1b40      	subs	r0, r0, r5
 800859c:	fa03 f000 	lsl.w	r0, r3, r0
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	4303      	orrs	r3, r0
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	f108 0801 	add.w	r8, r8, #1
 80085aa:	f898 1000 	ldrb.w	r1, [r8]
 80085ae:	4829      	ldr	r0, [pc, #164]	; (8008654 <_vfiprintf_r+0x220>)
 80085b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085b4:	2206      	movs	r2, #6
 80085b6:	f108 0701 	add.w	r7, r8, #1
 80085ba:	f7f7 fe11 	bl	80001e0 <memchr>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d034      	beq.n	800862c <_vfiprintf_r+0x1f8>
 80085c2:	4b25      	ldr	r3, [pc, #148]	; (8008658 <_vfiprintf_r+0x224>)
 80085c4:	bb03      	cbnz	r3, 8008608 <_vfiprintf_r+0x1d4>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	3307      	adds	r3, #7
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	3308      	adds	r3, #8
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	444b      	add	r3, r9
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	e74c      	b.n	8008474 <_vfiprintf_r+0x40>
 80085da:	fb00 3202 	mla	r2, r0, r2, r3
 80085de:	2101      	movs	r1, #1
 80085e0:	e786      	b.n	80084f0 <_vfiprintf_r+0xbc>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	4618      	mov	r0, r3
 80085e8:	250a      	movs	r5, #10
 80085ea:	4688      	mov	r8, r1
 80085ec:	3101      	adds	r1, #1
 80085ee:	f898 2000 	ldrb.w	r2, [r8]
 80085f2:	3a30      	subs	r2, #48	; 0x30
 80085f4:	2a09      	cmp	r2, #9
 80085f6:	d903      	bls.n	8008600 <_vfiprintf_r+0x1cc>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0c5      	beq.n	8008588 <_vfiprintf_r+0x154>
 80085fc:	9005      	str	r0, [sp, #20]
 80085fe:	e7c3      	b.n	8008588 <_vfiprintf_r+0x154>
 8008600:	fb05 2000 	mla	r0, r5, r0, r2
 8008604:	2301      	movs	r3, #1
 8008606:	e7f0      	b.n	80085ea <_vfiprintf_r+0x1b6>
 8008608:	ab03      	add	r3, sp, #12
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	4622      	mov	r2, r4
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <_vfiprintf_r+0x228>)
 8008610:	a904      	add	r1, sp, #16
 8008612:	4630      	mov	r0, r6
 8008614:	f3af 8000 	nop.w
 8008618:	f1b0 3fff 	cmp.w	r0, #4294967295
 800861c:	4681      	mov	r9, r0
 800861e:	d1d8      	bne.n	80085d2 <_vfiprintf_r+0x19e>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	065b      	lsls	r3, r3, #25
 8008624:	f53f af7d 	bmi.w	8008522 <_vfiprintf_r+0xee>
 8008628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862a:	e77c      	b.n	8008526 <_vfiprintf_r+0xf2>
 800862c:	ab03      	add	r3, sp, #12
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4622      	mov	r2, r4
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <_vfiprintf_r+0x228>)
 8008634:	a904      	add	r1, sp, #16
 8008636:	4630      	mov	r0, r6
 8008638:	f000 f888 	bl	800874c <_printf_i>
 800863c:	e7ec      	b.n	8008618 <_vfiprintf_r+0x1e4>
 800863e:	bf00      	nop
 8008640:	08008d8c 	.word	0x08008d8c
 8008644:	08008dcc 	.word	0x08008dcc
 8008648:	08008dac 	.word	0x08008dac
 800864c:	08008d6c 	.word	0x08008d6c
 8008650:	08008dd2 	.word	0x08008dd2
 8008654:	08008dd6 	.word	0x08008dd6
 8008658:	00000000 	.word	0x00000000
 800865c:	08008411 	.word	0x08008411

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4691      	mov	r9, r2
 8008666:	461f      	mov	r7, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	690b      	ldr	r3, [r1, #16]
 800866c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008670:	4293      	cmp	r3, r2
 8008672:	bfb8      	it	lt
 8008674:	4613      	movlt	r3, r2
 8008676:	f8c9 3000 	str.w	r3, [r9]
 800867a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800867e:	4606      	mov	r6, r0
 8008680:	460c      	mov	r4, r1
 8008682:	b112      	cbz	r2, 800868a <_printf_common+0x2a>
 8008684:	3301      	adds	r3, #1
 8008686:	f8c9 3000 	str.w	r3, [r9]
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	0699      	lsls	r1, r3, #26
 800868e:	bf42      	ittt	mi
 8008690:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008694:	3302      	addmi	r3, #2
 8008696:	f8c9 3000 	strmi.w	r3, [r9]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	f015 0506 	ands.w	r5, r5, #6
 80086a0:	d107      	bne.n	80086b2 <_printf_common+0x52>
 80086a2:	f104 0a19 	add.w	sl, r4, #25
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	f8d9 2000 	ldr.w	r2, [r9]
 80086ac:	1a9b      	subs	r3, r3, r2
 80086ae:	429d      	cmp	r5, r3
 80086b0:	db29      	blt.n	8008706 <_printf_common+0xa6>
 80086b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	3300      	adds	r3, #0
 80086ba:	bf18      	it	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	0692      	lsls	r2, r2, #26
 80086c0:	d42e      	bmi.n	8008720 <_printf_common+0xc0>
 80086c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c6:	4639      	mov	r1, r7
 80086c8:	4630      	mov	r0, r6
 80086ca:	47c0      	blx	r8
 80086cc:	3001      	adds	r0, #1
 80086ce:	d021      	beq.n	8008714 <_printf_common+0xb4>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	68e5      	ldr	r5, [r4, #12]
 80086d4:	f8d9 2000 	ldr.w	r2, [r9]
 80086d8:	f003 0306 	and.w	r3, r3, #6
 80086dc:	2b04      	cmp	r3, #4
 80086de:	bf08      	it	eq
 80086e0:	1aad      	subeq	r5, r5, r2
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	6922      	ldr	r2, [r4, #16]
 80086e6:	bf0c      	ite	eq
 80086e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086ec:	2500      	movne	r5, #0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bfc4      	itt	gt
 80086f2:	1a9b      	subgt	r3, r3, r2
 80086f4:	18ed      	addgt	r5, r5, r3
 80086f6:	f04f 0900 	mov.w	r9, #0
 80086fa:	341a      	adds	r4, #26
 80086fc:	454d      	cmp	r5, r9
 80086fe:	d11b      	bne.n	8008738 <_printf_common+0xd8>
 8008700:	2000      	movs	r0, #0
 8008702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008706:	2301      	movs	r3, #1
 8008708:	4652      	mov	r2, sl
 800870a:	4639      	mov	r1, r7
 800870c:	4630      	mov	r0, r6
 800870e:	47c0      	blx	r8
 8008710:	3001      	adds	r0, #1
 8008712:	d103      	bne.n	800871c <_printf_common+0xbc>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	3501      	adds	r5, #1
 800871e:	e7c2      	b.n	80086a6 <_printf_common+0x46>
 8008720:	18e1      	adds	r1, r4, r3
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	2030      	movs	r0, #48	; 0x30
 8008726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800872a:	4422      	add	r2, r4
 800872c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008734:	3302      	adds	r3, #2
 8008736:	e7c4      	b.n	80086c2 <_printf_common+0x62>
 8008738:	2301      	movs	r3, #1
 800873a:	4622      	mov	r2, r4
 800873c:	4639      	mov	r1, r7
 800873e:	4630      	mov	r0, r6
 8008740:	47c0      	blx	r8
 8008742:	3001      	adds	r0, #1
 8008744:	d0e6      	beq.n	8008714 <_printf_common+0xb4>
 8008746:	f109 0901 	add.w	r9, r9, #1
 800874a:	e7d7      	b.n	80086fc <_printf_common+0x9c>

0800874c <_printf_i>:
 800874c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008750:	4617      	mov	r7, r2
 8008752:	7e0a      	ldrb	r2, [r1, #24]
 8008754:	b085      	sub	sp, #20
 8008756:	2a6e      	cmp	r2, #110	; 0x6e
 8008758:	4698      	mov	r8, r3
 800875a:	4606      	mov	r6, r0
 800875c:	460c      	mov	r4, r1
 800875e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008760:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008764:	f000 80bc 	beq.w	80088e0 <_printf_i+0x194>
 8008768:	d81a      	bhi.n	80087a0 <_printf_i+0x54>
 800876a:	2a63      	cmp	r2, #99	; 0x63
 800876c:	d02e      	beq.n	80087cc <_printf_i+0x80>
 800876e:	d80a      	bhi.n	8008786 <_printf_i+0x3a>
 8008770:	2a00      	cmp	r2, #0
 8008772:	f000 80c8 	beq.w	8008906 <_printf_i+0x1ba>
 8008776:	2a58      	cmp	r2, #88	; 0x58
 8008778:	f000 808a 	beq.w	8008890 <_printf_i+0x144>
 800877c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008780:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008784:	e02a      	b.n	80087dc <_printf_i+0x90>
 8008786:	2a64      	cmp	r2, #100	; 0x64
 8008788:	d001      	beq.n	800878e <_printf_i+0x42>
 800878a:	2a69      	cmp	r2, #105	; 0x69
 800878c:	d1f6      	bne.n	800877c <_printf_i+0x30>
 800878e:	6821      	ldr	r1, [r4, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008796:	d023      	beq.n	80087e0 <_printf_i+0x94>
 8008798:	1d11      	adds	r1, r2, #4
 800879a:	6019      	str	r1, [r3, #0]
 800879c:	6813      	ldr	r3, [r2, #0]
 800879e:	e027      	b.n	80087f0 <_printf_i+0xa4>
 80087a0:	2a73      	cmp	r2, #115	; 0x73
 80087a2:	f000 80b4 	beq.w	800890e <_printf_i+0x1c2>
 80087a6:	d808      	bhi.n	80087ba <_printf_i+0x6e>
 80087a8:	2a6f      	cmp	r2, #111	; 0x6f
 80087aa:	d02a      	beq.n	8008802 <_printf_i+0xb6>
 80087ac:	2a70      	cmp	r2, #112	; 0x70
 80087ae:	d1e5      	bne.n	800877c <_printf_i+0x30>
 80087b0:	680a      	ldr	r2, [r1, #0]
 80087b2:	f042 0220 	orr.w	r2, r2, #32
 80087b6:	600a      	str	r2, [r1, #0]
 80087b8:	e003      	b.n	80087c2 <_printf_i+0x76>
 80087ba:	2a75      	cmp	r2, #117	; 0x75
 80087bc:	d021      	beq.n	8008802 <_printf_i+0xb6>
 80087be:	2a78      	cmp	r2, #120	; 0x78
 80087c0:	d1dc      	bne.n	800877c <_printf_i+0x30>
 80087c2:	2278      	movs	r2, #120	; 0x78
 80087c4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80087c8:	496e      	ldr	r1, [pc, #440]	; (8008984 <_printf_i+0x238>)
 80087ca:	e064      	b.n	8008896 <_printf_i+0x14a>
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80087d2:	1d11      	adds	r1, r2, #4
 80087d4:	6019      	str	r1, [r3, #0]
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087dc:	2301      	movs	r3, #1
 80087de:	e0a3      	b.n	8008928 <_printf_i+0x1dc>
 80087e0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80087e4:	f102 0104 	add.w	r1, r2, #4
 80087e8:	6019      	str	r1, [r3, #0]
 80087ea:	d0d7      	beq.n	800879c <_printf_i+0x50>
 80087ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da03      	bge.n	80087fc <_printf_i+0xb0>
 80087f4:	222d      	movs	r2, #45	; 0x2d
 80087f6:	425b      	negs	r3, r3
 80087f8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80087fc:	4962      	ldr	r1, [pc, #392]	; (8008988 <_printf_i+0x23c>)
 80087fe:	220a      	movs	r2, #10
 8008800:	e017      	b.n	8008832 <_printf_i+0xe6>
 8008802:	6820      	ldr	r0, [r4, #0]
 8008804:	6819      	ldr	r1, [r3, #0]
 8008806:	f010 0f80 	tst.w	r0, #128	; 0x80
 800880a:	d003      	beq.n	8008814 <_printf_i+0xc8>
 800880c:	1d08      	adds	r0, r1, #4
 800880e:	6018      	str	r0, [r3, #0]
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	e006      	b.n	8008822 <_printf_i+0xd6>
 8008814:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008818:	f101 0004 	add.w	r0, r1, #4
 800881c:	6018      	str	r0, [r3, #0]
 800881e:	d0f7      	beq.n	8008810 <_printf_i+0xc4>
 8008820:	880b      	ldrh	r3, [r1, #0]
 8008822:	4959      	ldr	r1, [pc, #356]	; (8008988 <_printf_i+0x23c>)
 8008824:	2a6f      	cmp	r2, #111	; 0x6f
 8008826:	bf14      	ite	ne
 8008828:	220a      	movne	r2, #10
 800882a:	2208      	moveq	r2, #8
 800882c:	2000      	movs	r0, #0
 800882e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008832:	6865      	ldr	r5, [r4, #4]
 8008834:	60a5      	str	r5, [r4, #8]
 8008836:	2d00      	cmp	r5, #0
 8008838:	f2c0 809c 	blt.w	8008974 <_printf_i+0x228>
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	f020 0004 	bic.w	r0, r0, #4
 8008842:	6020      	str	r0, [r4, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d13f      	bne.n	80088c8 <_printf_i+0x17c>
 8008848:	2d00      	cmp	r5, #0
 800884a:	f040 8095 	bne.w	8008978 <_printf_i+0x22c>
 800884e:	4675      	mov	r5, lr
 8008850:	2a08      	cmp	r2, #8
 8008852:	d10b      	bne.n	800886c <_printf_i+0x120>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	07da      	lsls	r2, r3, #31
 8008858:	d508      	bpl.n	800886c <_printf_i+0x120>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6862      	ldr	r2, [r4, #4]
 800885e:	429a      	cmp	r2, r3
 8008860:	bfde      	ittt	le
 8008862:	2330      	movle	r3, #48	; 0x30
 8008864:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800886c:	ebae 0305 	sub.w	r3, lr, r5
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	f8cd 8000 	str.w	r8, [sp]
 8008876:	463b      	mov	r3, r7
 8008878:	aa03      	add	r2, sp, #12
 800887a:	4621      	mov	r1, r4
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff feef 	bl	8008660 <_printf_common>
 8008882:	3001      	adds	r0, #1
 8008884:	d155      	bne.n	8008932 <_printf_i+0x1e6>
 8008886:	f04f 30ff 	mov.w	r0, #4294967295
 800888a:	b005      	add	sp, #20
 800888c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008890:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008894:	493c      	ldr	r1, [pc, #240]	; (8008988 <_printf_i+0x23c>)
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800889e:	f100 0504 	add.w	r5, r0, #4
 80088a2:	601d      	str	r5, [r3, #0]
 80088a4:	d001      	beq.n	80088aa <_printf_i+0x15e>
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	e002      	b.n	80088b0 <_printf_i+0x164>
 80088aa:	0655      	lsls	r5, r2, #25
 80088ac:	d5fb      	bpl.n	80088a6 <_printf_i+0x15a>
 80088ae:	8803      	ldrh	r3, [r0, #0]
 80088b0:	07d0      	lsls	r0, r2, #31
 80088b2:	bf44      	itt	mi
 80088b4:	f042 0220 	orrmi.w	r2, r2, #32
 80088b8:	6022      	strmi	r2, [r4, #0]
 80088ba:	b91b      	cbnz	r3, 80088c4 <_printf_i+0x178>
 80088bc:	6822      	ldr	r2, [r4, #0]
 80088be:	f022 0220 	bic.w	r2, r2, #32
 80088c2:	6022      	str	r2, [r4, #0]
 80088c4:	2210      	movs	r2, #16
 80088c6:	e7b1      	b.n	800882c <_printf_i+0xe0>
 80088c8:	4675      	mov	r5, lr
 80088ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80088ce:	fb02 3310 	mls	r3, r2, r0, r3
 80088d2:	5ccb      	ldrb	r3, [r1, r3]
 80088d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80088d8:	4603      	mov	r3, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d1f5      	bne.n	80088ca <_printf_i+0x17e>
 80088de:	e7b7      	b.n	8008850 <_printf_i+0x104>
 80088e0:	6808      	ldr	r0, [r1, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	6949      	ldr	r1, [r1, #20]
 80088e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80088ea:	d004      	beq.n	80088f6 <_printf_i+0x1aa>
 80088ec:	1d10      	adds	r0, r2, #4
 80088ee:	6018      	str	r0, [r3, #0]
 80088f0:	6813      	ldr	r3, [r2, #0]
 80088f2:	6019      	str	r1, [r3, #0]
 80088f4:	e007      	b.n	8008906 <_printf_i+0x1ba>
 80088f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088fa:	f102 0004 	add.w	r0, r2, #4
 80088fe:	6018      	str	r0, [r3, #0]
 8008900:	6813      	ldr	r3, [r2, #0]
 8008902:	d0f6      	beq.n	80088f2 <_printf_i+0x1a6>
 8008904:	8019      	strh	r1, [r3, #0]
 8008906:	2300      	movs	r3, #0
 8008908:	6123      	str	r3, [r4, #16]
 800890a:	4675      	mov	r5, lr
 800890c:	e7b1      	b.n	8008872 <_printf_i+0x126>
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	1d11      	adds	r1, r2, #4
 8008912:	6019      	str	r1, [r3, #0]
 8008914:	6815      	ldr	r5, [r2, #0]
 8008916:	6862      	ldr	r2, [r4, #4]
 8008918:	2100      	movs	r1, #0
 800891a:	4628      	mov	r0, r5
 800891c:	f7f7 fc60 	bl	80001e0 <memchr>
 8008920:	b108      	cbz	r0, 8008926 <_printf_i+0x1da>
 8008922:	1b40      	subs	r0, r0, r5
 8008924:	6060      	str	r0, [r4, #4]
 8008926:	6863      	ldr	r3, [r4, #4]
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	2300      	movs	r3, #0
 800892c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008930:	e79f      	b.n	8008872 <_printf_i+0x126>
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	462a      	mov	r2, r5
 8008936:	4639      	mov	r1, r7
 8008938:	4630      	mov	r0, r6
 800893a:	47c0      	blx	r8
 800893c:	3001      	adds	r0, #1
 800893e:	d0a2      	beq.n	8008886 <_printf_i+0x13a>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	079b      	lsls	r3, r3, #30
 8008944:	d507      	bpl.n	8008956 <_printf_i+0x20a>
 8008946:	2500      	movs	r5, #0
 8008948:	f104 0919 	add.w	r9, r4, #25
 800894c:	68e3      	ldr	r3, [r4, #12]
 800894e:	9a03      	ldr	r2, [sp, #12]
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	429d      	cmp	r5, r3
 8008954:	db05      	blt.n	8008962 <_printf_i+0x216>
 8008956:	68e0      	ldr	r0, [r4, #12]
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	4298      	cmp	r0, r3
 800895c:	bfb8      	it	lt
 800895e:	4618      	movlt	r0, r3
 8008960:	e793      	b.n	800888a <_printf_i+0x13e>
 8008962:	2301      	movs	r3, #1
 8008964:	464a      	mov	r2, r9
 8008966:	4639      	mov	r1, r7
 8008968:	4630      	mov	r0, r6
 800896a:	47c0      	blx	r8
 800896c:	3001      	adds	r0, #1
 800896e:	d08a      	beq.n	8008886 <_printf_i+0x13a>
 8008970:	3501      	adds	r5, #1
 8008972:	e7eb      	b.n	800894c <_printf_i+0x200>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1a7      	bne.n	80088c8 <_printf_i+0x17c>
 8008978:	780b      	ldrb	r3, [r1, #0]
 800897a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800897e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008982:	e765      	b.n	8008850 <_printf_i+0x104>
 8008984:	08008dee 	.word	0x08008dee
 8008988:	08008ddd 	.word	0x08008ddd

0800898c <_read_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4c07      	ldr	r4, [pc, #28]	; (80089ac <_read_r+0x20>)
 8008990:	4605      	mov	r5, r0
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	2200      	movs	r2, #0
 8008998:	6022      	str	r2, [r4, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f7fe fe1a 	bl	80075d4 <_read>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_read_r+0x1e>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_read_r+0x1e>
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	200009fc 	.word	0x200009fc

080089b0 <_fstat_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4c07      	ldr	r4, [pc, #28]	; (80089d0 <_fstat_r+0x20>)
 80089b4:	2300      	movs	r3, #0
 80089b6:	4605      	mov	r5, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	4611      	mov	r1, r2
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	f7fe fe7b 	bl	80076b8 <_fstat>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	d102      	bne.n	80089cc <_fstat_r+0x1c>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	b103      	cbz	r3, 80089cc <_fstat_r+0x1c>
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	bf00      	nop
 80089d0:	200009fc 	.word	0x200009fc

080089d4 <_isatty_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4c06      	ldr	r4, [pc, #24]	; (80089f0 <_isatty_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4605      	mov	r5, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	f7fe fe7a 	bl	80076d8 <_isatty>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_isatty_r+0x1a>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_isatty_r+0x1a>
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	200009fc 	.word	0x200009fc

080089f4 <memmove>:
 80089f4:	4288      	cmp	r0, r1
 80089f6:	b510      	push	{r4, lr}
 80089f8:	eb01 0302 	add.w	r3, r1, r2
 80089fc:	d803      	bhi.n	8008a06 <memmove+0x12>
 80089fe:	1e42      	subs	r2, r0, #1
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d10c      	bne.n	8008a1e <memmove+0x2a>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	4298      	cmp	r0, r3
 8008a08:	d2f9      	bcs.n	80089fe <memmove+0xa>
 8008a0a:	1881      	adds	r1, r0, r2
 8008a0c:	1ad2      	subs	r2, r2, r3
 8008a0e:	42d3      	cmn	r3, r2
 8008a10:	d100      	bne.n	8008a14 <memmove+0x20>
 8008a12:	bd10      	pop	{r4, pc}
 8008a14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a1c:	e7f7      	b.n	8008a0e <memmove+0x1a>
 8008a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a22:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a26:	e7eb      	b.n	8008a00 <memmove+0xc>

08008a28 <_realloc_r>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	460e      	mov	r6, r1
 8008a30:	b921      	cbnz	r1, 8008a3c <_realloc_r+0x14>
 8008a32:	4611      	mov	r1, r2
 8008a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a38:	f7fe bf32 	b.w	80078a0 <_malloc_r>
 8008a3c:	b922      	cbnz	r2, 8008a48 <_realloc_r+0x20>
 8008a3e:	f7fe fee1 	bl	8007804 <_free_r>
 8008a42:	4625      	mov	r5, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a48:	f000 f814 	bl	8008a74 <_malloc_usable_size_r>
 8008a4c:	4284      	cmp	r4, r0
 8008a4e:	d90f      	bls.n	8008a70 <_realloc_r+0x48>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7fe ff24 	bl	80078a0 <_malloc_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d0f2      	beq.n	8008a44 <_realloc_r+0x1c>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4622      	mov	r2, r4
 8008a62:	f7fe febb 	bl	80077dc <memcpy>
 8008a66:	4631      	mov	r1, r6
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7fe fecb 	bl	8007804 <_free_r>
 8008a6e:	e7e9      	b.n	8008a44 <_realloc_r+0x1c>
 8008a70:	4635      	mov	r5, r6
 8008a72:	e7e7      	b.n	8008a44 <_realloc_r+0x1c>

08008a74 <_malloc_usable_size_r>:
 8008a74:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f1a0 0004 	sub.w	r0, r0, #4
 8008a7e:	bfbc      	itt	lt
 8008a80:	580b      	ldrlt	r3, [r1, r0]
 8008a82:	18c0      	addlt	r0, r0, r3
 8008a84:	4770      	bx	lr
	...

08008a88 <_init>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr

08008a94 <_fini>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr
