
STM32F103RCT6_RF433MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b0  080025b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025b0  080025b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b0  080025b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08002630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08002630  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b997  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a9d  00000000  00000000  0002ba30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0002e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001797a  00000000  00000000  0002ec18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f66  00000000  00000000  00046592  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f31c  00000000  00000000  0004e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003364  00000000  00000000  000cd890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002544 	.word	0x08002544

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002544 	.word	0x08002544

08000224 <_Z10_vw_rx_pinv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool _vw_rx_pin(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000228:	2101      	movs	r1, #1
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <_Z10_vw_rx_pinv+0x1c>)
 800022c:	f000 fe04 	bl	8000e38 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	bf14      	ite	ne
 8000236:	2301      	movne	r3, #1
 8000238:	2300      	moveq	r3, #0
 800023a:	b2db      	uxtb	r3, r3
}
 800023c:	4618      	mov	r0, r3
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40010800 	.word	0x40010800

08000244 <_Z10_vw_tx_pinb>:
void _vw_tx_pin(bool value)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	if(value == 1)HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d005      	beq.n	8000260 <_Z10_vw_tx_pinb+0x1c>
 8000254:	2201      	movs	r2, #1
 8000256:	2102      	movs	r1, #2
 8000258:	4806      	ldr	r0, [pc, #24]	; (8000274 <_Z10_vw_tx_pinb+0x30>)
 800025a:	f000 fe04 	bl	8000e66 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
}
 800025e:	e004      	b.n	800026a <_Z10_vw_tx_pinb+0x26>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2102      	movs	r1, #2
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <_Z10_vw_tx_pinb+0x30>)
 8000266:	f000 fdfe 	bl	8000e66 <HAL_GPIO_WritePin>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <_Z11_vw_ptt_pinb>:
void _vw_ptt_pin(bool value)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	if(value == 1)HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d005      	beq.n	8000294 <_Z11_vw_ptt_pinb+0x1c>
 8000288:	2201      	movs	r2, #1
 800028a:	2104      	movs	r1, #4
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <_Z11_vw_ptt_pinb+0x30>)
 800028e:	f000 fdea 	bl	8000e66 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
 8000292:	e004      	b.n	800029e <_Z11_vw_ptt_pinb+0x26>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <_Z11_vw_ptt_pinb+0x30>)
 800029a:	f000 fde4 	bl	8000e66 <HAL_GPIO_WritePin>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40010800 	.word	0x40010800

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fac8 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f83c 	bl	8000330 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f8fe 	bl	80004b8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80002bc:	f000 f882 	bl	80003c4 <_ZL12MX_SPI1_Initv>
  MX_TIM6_Init();
 80002c0:	f000 f8bc 	bl	800043c <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80002c4:	4813      	ldr	r0, [pc, #76]	; (8000314 <main+0x68>)
 80002c6:	f001 fa75 	bl	80017b4 <HAL_TIM_Base_Start_IT>
	vw.reg_vw_rx_pin(_vw_rx_pin);
 80002ca:	4913      	ldr	r1, [pc, #76]	; (8000318 <main+0x6c>)
 80002cc:	4813      	ldr	r0, [pc, #76]	; (800031c <main+0x70>)
 80002ce:	f002 f888 	bl	80023e2 <_ZN12virtual_wire13reg_vw_rx_pinEPFbvE>
	vw.reg_vw_tx_pin(_vw_tx_pin);
 80002d2:	4913      	ldr	r1, [pc, #76]	; (8000320 <main+0x74>)
 80002d4:	4811      	ldr	r0, [pc, #68]	; (800031c <main+0x70>)
 80002d6:	f002 f892 	bl	80023fe <_ZN12virtual_wire13reg_vw_tx_pinEPFvbE>
	vw.reg_vw_ptt_pin(_vw_ptt_pin);
 80002da:	4912      	ldr	r1, [pc, #72]	; (8000324 <main+0x78>)
 80002dc:	480f      	ldr	r0, [pc, #60]	; (800031c <main+0x70>)
 80002de:	f002 f89c 	bl	800241a <_ZN12virtual_wire14reg_vw_ptt_pinEPFvbE>

	vw.vw_set_ptt_inverted(true); // Required for DR3100
 80002e2:	2101      	movs	r1, #1
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <main+0x70>)
 80002e6:	f001 fd68 	bl	8001dba <_ZN12virtual_wire19vw_set_ptt_invertedEh>
	vw.vw_setup(2000);	 // Bits per sec
 80002ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <main+0x70>)
 80002f0:	f001 fe79 	bl	8001fe6 <_ZN12virtual_wire8vw_setupEt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80002f4:	2101      	movs	r1, #1
 80002f6:	480c      	ldr	r0, [pc, #48]	; (8000328 <main+0x7c>)
 80002f8:	f000 fdcd 	bl	8000e96 <HAL_GPIO_TogglePin>
	  vw.vw_send((uint8_t *)msg, strlen(msg));
 80002fc:	220e      	movs	r2, #14
 80002fe:	490b      	ldr	r1, [pc, #44]	; (800032c <main+0x80>)
 8000300:	4806      	ldr	r0, [pc, #24]	; (800031c <main+0x70>)
 8000302:	f001 fedf 	bl	80020c4 <_ZN12virtual_wire7vw_sendEPhh>
	  vw.vw_wait_tx(); // Wait until the whole message is gone
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <main+0x70>)
 8000308:	f001 fec7 	bl	800209a <_ZN12virtual_wire10vw_wait_txEv>
	  HAL_Delay(200);
 800030c:	20c8      	movs	r0, #200	; 0xc8
 800030e:	f000 faf9 	bl	8000904 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000312:	e7ef      	b.n	80002f4 <main+0x48>
 8000314:	20000218 	.word	0x20000218
 8000318:	08000225 	.word	0x08000225
 800031c:	2000008c 	.word	0x2000008c
 8000320:	08000245 	.word	0x08000245
 8000324:	08000279 	.word	0x08000279
 8000328:	40011000 	.word	0x40011000
 800032c:	0800255c 	.word	0x0800255c

08000330 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	; 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 f8aa 	bl	8002498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000352:	2302      	movs	r3, #2
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000362:	2300      	movs	r3, #0
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000366:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fda9 	bl	8000ec8 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	bf14      	ite	ne
 800037c:	2301      	movne	r3, #1
 800037e:	2300      	moveq	r3, #0
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000386:	f000 f923 	bl	80005d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 f810 	bl	80013c8 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	bf14      	ite	ne
 80003ae:	2301      	movne	r3, #1
 80003b0:	2300      	moveq	r3, #0
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80003b8:	f000 f90a 	bl	80005d0 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3740      	adds	r7, #64	; 0x40
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003ca:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <_ZL12MX_SPI1_Initv+0x74>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 8000404:	2200      	movs	r2, #0
 8000406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 800040a:	2200      	movs	r2, #0
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 8000410:	220a      	movs	r2, #10
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000414:	4807      	ldr	r0, [pc, #28]	; (8000434 <_ZL12MX_SPI1_Initv+0x70>)
 8000416:	f001 f941 	bl	800169c <HAL_SPI_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf14      	ite	ne
 8000420:	2301      	movne	r3, #1
 8000422:	2300      	moveq	r3, #0
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800042a:	f000 f8d1 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200001c0 	.word	0x200001c0
 8000438:	40013000 	.word	0x40013000

0800043c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000442:	463b      	mov	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 800044c:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <_ZL12MX_TIM6_Initv+0x78>)
 800044e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 8000452:	220f      	movs	r2, #15
 8000454:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 800045e:	2201      	movs	r2, #1
 8000460:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000468:	4811      	ldr	r0, [pc, #68]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 800046a:	f001 f978 	bl	800175e <HAL_TIM_Base_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	bf14      	ite	ne
 8000474:	2301      	movne	r3, #1
 8000476:	2300      	moveq	r3, #0
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <_ZL12MX_TIM6_Initv+0x46>
  {
    Error_Handler();
 800047e:	f000 f8a7 	bl	80005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000482:	2300      	movs	r3, #0
 8000484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	4619      	mov	r1, r3
 800048e:	4808      	ldr	r0, [pc, #32]	; (80004b0 <_ZL12MX_TIM6_Initv+0x74>)
 8000490:	f001 fb62 	bl	8001b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	bf14      	ite	ne
 800049a:	2301      	movne	r3, #1
 800049c:	2300      	moveq	r3, #0
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <_ZL12MX_TIM6_Initv+0x6c>
  {
    Error_Handler();
 80004a4:	f000 f894 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000218 	.word	0x20000218
 80004b4:	40001000 	.word	0x40001000

080004b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a3b      	ldr	r2, [pc, #236]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004d2:	f043 0310 	orr.w	r3, r3, #16
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b39      	ldr	r3, [pc, #228]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0310 	and.w	r3, r3, #16
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b36      	ldr	r3, [pc, #216]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a35      	ldr	r2, [pc, #212]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2f      	ldr	r2, [pc, #188]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <_ZL12MX_GPIO_Initv+0x108>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2103      	movs	r1, #3
 8000518:	482a      	ldr	r0, [pc, #168]	; (80005c4 <_ZL12MX_GPIO_Initv+0x10c>)
 800051a:	f000 fca4 	bl	8000e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2106      	movs	r1, #6
 8000522:	4829      	ldr	r0, [pc, #164]	; (80005c8 <_ZL12MX_GPIO_Initv+0x110>)
 8000524:	f000 fc9f 	bl	8000e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2105      	movs	r1, #5
 800052c:	4827      	ldr	r0, [pc, #156]	; (80005cc <_ZL12MX_GPIO_Initv+0x114>)
 800052e:	f000 fc9a 	bl	8000e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000532:	2303      	movs	r3, #3
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2302      	movs	r3, #2
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	481e      	ldr	r0, [pc, #120]	; (80005c4 <_ZL12MX_GPIO_Initv+0x10c>)
 800054a:	f000 fb0b 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054e:	2301      	movs	r3, #1
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	4819      	ldr	r0, [pc, #100]	; (80005c8 <_ZL12MX_GPIO_Initv+0x110>)
 8000562:	f000 faff 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000566:	2306      	movs	r3, #6
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2302      	movs	r3, #2
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	4812      	ldr	r0, [pc, #72]	; (80005c8 <_ZL12MX_GPIO_Initv+0x110>)
 800057e:	f000 faf1 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000582:	2305      	movs	r3, #5
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2302      	movs	r3, #2
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	4619      	mov	r1, r3
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <_ZL12MX_GPIO_Initv+0x114>)
 800059a:	f000 fae3 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4806      	ldr	r0, [pc, #24]	; (80005cc <_ZL12MX_GPIO_Initv+0x114>)
 80005b2:	f000 fad7 	bl	8000b64 <HAL_GPIO_Init>

}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40010800 	.word	0x40010800
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <_Z41__static_initialization_and_destruction_0ii>:
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d107      	bne.n	80005fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d102      	bne.n	80005fc <_Z41__static_initialization_and_destruction_0ii+0x20>
virtual_wire vw;
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80005f8:	f001 fb04 	bl	8001c04 <_ZN12virtual_wireC1Ev>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d107      	bne.n	8000612 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000608:	4293      	cmp	r3, r2
 800060a:	d102      	bne.n	8000612 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800060e:	f001 fb87 	bl	8001d20 <_ZN12virtual_wireD1Ev>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c

08000620 <_GLOBAL__sub_I_vw>:
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
 8000624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ffd7 	bl	80005dc <_Z41__static_initialization_and_destruction_0ii>
 800062e:	bd80      	pop	{r7, pc}

08000630 <_GLOBAL__sub_D_vw>:
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
 8000634:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffcf 	bl	80005dc <_Z41__static_initialization_and_destruction_0ii>
 800063e:	bd80      	pop	{r7, pc}

08000640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <HAL_SPI_MspInit+0x88>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d12f      	bne.n	80006c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <HAL_SPI_MspInit+0x8c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a19      	ldr	r2, [pc, #100]	; (80006cc <HAL_SPI_MspInit+0x8c>)
 8000666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_SPI_MspInit+0x8c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_SPI_MspInit+0x8c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <HAL_SPI_MspInit+0x8c>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_SPI_MspInit+0x8c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <HAL_SPI_MspInit+0x90>)
 80006a4:	f000 fa5e 	bl	8000b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_SPI_MspInit+0x90>)
 80006bc:	f000 fa52 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40013000 	.word	0x40013000
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010800 	.word	0x40010800

080006d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <HAL_TIM_Base_MspInit+0x44>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d113      	bne.n	800070e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_TIM_Base_MspInit+0x48>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_TIM_Base_MspInit+0x48>)
 80006ec:	f043 0310 	orr.w	r3, r3, #16
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_TIM_Base_MspInit+0x48>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2036      	movs	r0, #54	; 0x36
 8000704:	f000 f9f7 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000708:	2036      	movs	r0, #54	; 0x36
 800070a:	f000 fa10 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40001000 	.word	0x40001000
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <HardFault_Handler+0x4>

08000732 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <MemManage_Handler+0x4>

08000738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <BusFault_Handler+0x4>

0800073e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f8ae 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <TIM6_IRQHandler+0x14>)
 800077a:	f001 f83e 	bl	80017fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  vw.vw_Int_Handler();
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <TIM6_IRQHandler+0x18>)
 8000780:	f001 fd60 	bl	8002244 <_ZN12virtual_wire14vw_Int_HandlerEv>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
  /* USER CODE END TIM6_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000218 	.word	0x20000218
 800078c:	2000008c 	.word	0x2000008c

08000790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <SystemInit+0x5c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <SystemInit+0x5c>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <SystemInit+0x5c>)
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4911      	ldr	r1, [pc, #68]	; (80007ec <SystemInit+0x5c>)
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SystemInit+0x60>)
 80007a8:	4013      	ands	r3, r2
 80007aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <SystemInit+0x5c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <SystemInit+0x5c>)
 80007b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <SystemInit+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <SystemInit+0x5c>)
 80007c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <SystemInit+0x5c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <SystemInit+0x5c>)
 80007ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SystemInit+0x5c>)
 80007d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <SystemInit+0x64>)
 80007de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000
 80007f0:	f8ff0000 	.word	0xf8ff0000
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007fa:	e003      	b.n	8000804 <LoopCopyDataInit>

080007fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000800:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000802:	3104      	adds	r1, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000808:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800080a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800080c:	d3f6      	bcc.n	80007fc <CopyDataInit>
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000810:	e002      	b.n	8000818 <LoopFillZerobss>

08000812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000814:	f842 3b04 	str.w	r3, [r2], #4

08000818 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800081c:	d3f9      	bcc.n	8000812 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ffb7 	bl	8000790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 fe0d 	bl	8002440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fd41 	bl	80002ac <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r3, =_sidata
 800082c:	080025c0 	.word	0x080025c0
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000834:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000838:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800083c:	20000260 	.word	0x20000260

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_Init+0x24>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_Init+0x24>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f943 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f806 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  /* HAL_MspInit(); */

  /* Return function status */
  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x54>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x58>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	fbb3 f3f1 	udiv	r3, r3, r1
 8000886:	fbb2 f3f3 	udiv	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f95d 	bl	8000b4a <HAL_SYSTICK_Config>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e00e      	b.n	80008b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d80a      	bhi.n	80008b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a0:	2200      	movs	r2, #0
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a8:	f000 f925 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <HAL_InitTick+0x5c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e000      	b.n	80008b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x20>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	4a03      	ldr	r2, [pc, #12]	; (80008ec <HAL_IncTick+0x20>)
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000008 	.word	0x20000008
 80008ec:	2000025c 	.word	0x2000025c

080008f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	2000025c 	.word	0x2000025c

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_Delay+0x40>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffe0 	bl	80008f0 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	; (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff2d 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff42 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff35 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa2 	bl	8000a9c <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b08b      	sub	sp, #44	; 0x2c
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e133      	b.n	8000de0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 8122 	bne.w	8000dda <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d034      	beq.n	8000c08 <HAL_GPIO_Init+0xa4>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d80d      	bhi.n	8000bbe <HAL_GPIO_Init+0x5a>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d02b      	beq.n	8000bfe <HAL_GPIO_Init+0x9a>
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d804      	bhi.n	8000bb4 <HAL_GPIO_Init+0x50>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d031      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d01c      	beq.n	8000bec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb2:	e048      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d043      	beq.n	8000c40 <HAL_GPIO_Init+0xdc>
 8000bb8:	2b11      	cmp	r3, #17
 8000bba:	d01b      	beq.n	8000bf4 <HAL_GPIO_Init+0x90>
          break;
 8000bbc:	e043      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bbe:	4a8f      	ldr	r2, [pc, #572]	; (8000dfc <HAL_GPIO_Init+0x298>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d026      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bc4:	4a8d      	ldr	r2, [pc, #564]	; (8000dfc <HAL_GPIO_Init+0x298>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d806      	bhi.n	8000bd8 <HAL_GPIO_Init+0x74>
 8000bca:	4a8d      	ldr	r2, [pc, #564]	; (8000e00 <HAL_GPIO_Init+0x29c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d020      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bd0:	4a8c      	ldr	r2, [pc, #560]	; (8000e04 <HAL_GPIO_Init+0x2a0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d01d      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
          break;
 8000bd6:	e036      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bd8:	4a8b      	ldr	r2, [pc, #556]	; (8000e08 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d019      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bde:	4a8b      	ldr	r2, [pc, #556]	; (8000e0c <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d016      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000be4:	4a8a      	ldr	r2, [pc, #552]	; (8000e10 <HAL_GPIO_Init+0x2ac>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
          break;
 8000bea:	e02c      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e028      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e023      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3308      	adds	r3, #8
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e01e      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	330c      	adds	r3, #12
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e019      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e012      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	611a      	str	r2, [r3, #16]
          break;
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	615a      	str	r2, [r3, #20]
          break;
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2bff      	cmp	r3, #255	; 0xff
 8000c4a:	d801      	bhi.n	8000c50 <HAL_GPIO_Init+0xec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	e001      	b.n	8000c54 <HAL_GPIO_Init+0xf0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3304      	adds	r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d802      	bhi.n	8000c62 <HAL_GPIO_Init+0xfe>
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x104>
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3b08      	subs	r3, #8
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	210f      	movs	r1, #15
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	401a      	ands	r2, r3
 8000c7a:	6a39      	ldr	r1, [r7, #32]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80a2 	beq.w	8000dda <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c96:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b5c      	ldr	r3, [pc, #368]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <HAL_GPIO_Init+0x2b4>)
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d01f      	beq.n	8000d1a <HAL_GPIO_Init+0x1b6>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_GPIO_Init+0x2bc>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d019      	beq.n	8000d16 <HAL_GPIO_Init+0x1b2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0x1ae>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4e      	ldr	r2, [pc, #312]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_GPIO_Init+0x1aa>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4d      	ldr	r2, [pc, #308]	; (8000e2c <HAL_GPIO_Init+0x2c8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d007      	beq.n	8000d0a <HAL_GPIO_Init+0x1a6>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_GPIO_Init+0x1a2>
 8000d02:	2305      	movs	r3, #5
 8000d04:	e00a      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d06:	2306      	movs	r3, #6
 8000d08:	e008      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2c:	493a      	ldr	r1, [pc, #232]	; (8000e18 <HAL_GPIO_Init+0x2b4>)
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	493a      	ldr	r1, [pc, #232]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d54:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	4930      	ldr	r1, [pc, #192]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	604b      	str	r3, [r1, #4]
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	492b      	ldr	r1, [pc, #172]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4926      	ldr	r1, [pc, #152]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	608b      	str	r3, [r1, #8]
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	4921      	ldr	r1, [pc, #132]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	491c      	ldr	r1, [pc, #112]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60cb      	str	r3, [r1, #12]
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4917      	ldr	r1, [pc, #92]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f aec4 	bne.w	8000b78 <HAL_GPIO_Init+0x14>
  }
}
 8000df0:	bf00      	nop
 8000df2:	372c      	adds	r7, #44	; 0x2c
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10110000 	.word	0x10110000
 8000e04:	10120000 	.word	0x10120000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00
 8000e24:	40011000 	.word	0x40011000
 8000e28:	40011400 	.word	0x40011400
 8000e2c:	40011800 	.word	0x40011800
 8000e30:	40011c00 	.word	0x40011c00
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e001      	b.n	8000e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	807b      	strh	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e76:	787b      	ldrb	r3, [r7, #1]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7c:	887a      	ldrh	r2, [r7, #2]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e82:	e003      	b.n	8000e8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	041a      	lsls	r2, r3, #16
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e26c      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d112      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f00:	4b8c      	ldr	r3, [pc, #560]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d168      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e246      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x76>
 8000f30:	4b80      	ldr	r3, [pc, #512]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7f      	ldr	r2, [pc, #508]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0xbc>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f84:	4b6b      	ldr	r3, [pc, #428]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6a      	ldr	r2, [pc, #424]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fca4 	bl	80008f0 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fca0 	bl	80008f0 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1fa      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0xe4>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc90 	bl	80008f0 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fc8c 	bl	80008f0 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1e6      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x10c>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d11c      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1ba      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4939      	ldr	r1, [pc, #228]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fc45 	bl	80008f0 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fc41 	bl	80008f0 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e19b      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4927      	ldr	r1, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_RCC_OscConfig+0x270>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc24 	bl	80008f0 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc20 	bl	80008f0 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e17a      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_RCC_OscConfig+0x274>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fc04 	bl	80008f0 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc00 	bl	80008f0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e15a      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 faa8 	bl	8001660 <RCC_Delay>
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_RCC_OscConfig+0x274>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fbea 	bl	80008f0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fbe6 	bl	80008f0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d908      	bls.n	8001140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e140      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	42420000 	.word	0x42420000
 800113c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b9e      	ldr	r3, [pc, #632]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e9      	bne.n	8001120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a6 	beq.w	80012a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b97      	ldr	r3, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b94      	ldr	r3, [pc, #592]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a93      	ldr	r2, [pc, #588]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b91      	ldr	r3, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b8e      	ldr	r3, [pc, #568]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a8a      	ldr	r2, [pc, #552]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fba7 	bl	80008f0 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fba3 	bl	80008f0 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0fd      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x4f8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011cc:	4b7b      	ldr	r3, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a7a      	ldr	r2, [pc, #488]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x334>
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a75      	ldr	r2, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x356>
 8001204:	4b6d      	ldr	r3, [pc, #436]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a6c      	ldr	r2, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a63      	ldr	r2, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fb57 	bl	80008f0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fb53 	bl	80008f0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0ab      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x37e>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb41 	bl	80008f0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb3d 	bl	80008f0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e095      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a47      	ldr	r2, [pc, #284]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8081 	beq.w	80013b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_RCC_OscConfig+0x4fc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb11 	bl	80008f0 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb0d 	bl	80008f0 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e067      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	492d      	ldr	r1, [pc, #180]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	430b      	orrs	r3, r1
 800131e:	4927      	ldr	r1, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x4fc>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fae1 	bl	80008f0 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fadd 	bl	80008f0 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e037      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
 8001350:	e02f      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_RCC_OscConfig+0x4fc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff faca 	bl	80008f0 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fac6 	bl	80008f0 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e020      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x498>
 800137e:	e018      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e013      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x4f4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	429a      	cmp	r2, r3
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40007000 	.word	0x40007000
 80013c4:	42420060 	.word	0x42420060

080013c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0d0      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4965      	ldr	r1, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800142e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d040      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d115      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e073      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e06b      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4936      	ldr	r1, [pc, #216]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fa1a 	bl	80008f0 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fa16 	bl	80008f0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e053      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d210      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0207 	bic.w	r2, r3, #7
 80014fe:	4922      	ldr	r1, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4601      	mov	r1, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	fa21 f303 	lsr.w	r3, r1, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1cc>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f978 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000
 800158c:	40021000 	.word	0x40021000
 8001590:	08002590 	.word	0x08002590
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b490      	push	{r4, r7}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015a4:	1d3c      	adds	r4, r7, #4
 80015a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x40>
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x46>
 80015da:	e02d      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015de:	623b      	str	r3, [r7, #32]
      break;
 80015e0:	e02d      	b.n	800163e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ee:	4413      	add	r3, r2
 80015f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0c5b      	lsrs	r3, r3, #17
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800160e:	4413      	add	r3, r2
 8001610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800161a:	fb02 f203 	mul.w	r2, r2, r3
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	e004      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_RCC_GetSysClockFreq+0xc0>)
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	623b      	str	r3, [r7, #32]
      break;
 8001636:	e002      	b.n	800163e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800163a:	623b      	str	r3, [r7, #32]
      break;
 800163c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163e:	6a3b      	ldr	r3, [r7, #32]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bc90      	pop	{r4, r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	0800256c 	.word	0x0800256c
 8001650:	0800257c 	.word	0x0800257c
 8001654:	40021000 	.word	0x40021000
 8001658:	007a1200 	.word	0x007a1200
 800165c:	003d0900 	.word	0x003d0900

08001660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <RCC_Delay+0x34>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <RCC_Delay+0x38>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0a5b      	lsrs	r3, r3, #9
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800167c:	bf00      	nop
  }
  while (Delay --);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f9      	bne.n	800167c <RCC_Delay+0x1c>
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000000 	.word	0x20000000
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e053      	b.n	8001756 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d106      	bne.n	80016ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7fe ffb9 	bl	8000640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	ea42 0103 	orr.w	r1, r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	0c1a      	lsrs	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f002 0204 	and.w	r2, r2, #4
 8001734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e01d      	b.n	80017ac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7fe ffa5 	bl	80006d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2202      	movs	r2, #2
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f000 f961 	bl	8001a64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d007      	beq.n	80017ee <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b02      	cmp	r3, #2
 800180e:	d122      	bne.n	8001856 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d11b      	bne.n	8001856 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f06f 0202 	mvn.w	r2, #2
 8001826:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8f6 	bl	8001a2e <HAL_TIM_IC_CaptureCallback>
 8001842:	e005      	b.n	8001850 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f8e9 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8f8 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d122      	bne.n	80018aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b04      	cmp	r3, #4
 8001870:	d11b      	bne.n	80018aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f06f 0204 	mvn.w	r2, #4
 800187a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8cc 	bl	8001a2e <HAL_TIM_IC_CaptureCallback>
 8001896:	e005      	b.n	80018a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f8bf 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8ce 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d122      	bne.n	80018fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f06f 0208 	mvn.w	r2, #8
 80018ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2204      	movs	r2, #4
 80018d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f8a2 	bl	8001a2e <HAL_TIM_IC_CaptureCallback>
 80018ea:	e005      	b.n	80018f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f895 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8a4 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b10      	cmp	r3, #16
 800190a:	d122      	bne.n	8001952 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b10      	cmp	r3, #16
 8001918:	d11b      	bne.n	8001952 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0210 	mvn.w	r2, #16
 8001922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2208      	movs	r2, #8
 8001928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f878 	bl	8001a2e <HAL_TIM_IC_CaptureCallback>
 800193e:	e005      	b.n	800194c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f86b 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f87a 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d10e      	bne.n	800197e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f06f 0201 	mvn.w	r2, #1
 8001976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f846 	bl	8001a0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001988:	2b80      	cmp	r3, #128	; 0x80
 800198a:	d10e      	bne.n	80019aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	2b80      	cmp	r3, #128	; 0x80
 8001998:	d107      	bne.n	80019aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f924 	bl	8001bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d10e      	bne.n	80019d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	2b40      	cmp	r3, #64	; 0x40
 80019c4:	d107      	bne.n	80019d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f83e 	bl	8001a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d10e      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d107      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0220 	mvn.w	r2, #32
 80019fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8ef 	bl	8001be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a33      	ldr	r2, [pc, #204]	; (8001b44 <TIM_Base_SetConfig+0xe0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a32      	ldr	r2, [pc, #200]	; (8001b48 <TIM_Base_SetConfig+0xe4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00f      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8a:	d00b      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <TIM_Base_SetConfig+0xe8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <TIM_Base_SetConfig+0xec>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d003      	beq.n	8001aa4 <TIM_Base_SetConfig+0x40>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <TIM_Base_SetConfig+0xf0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d108      	bne.n	8001ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <TIM_Base_SetConfig+0xe0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <TIM_Base_SetConfig+0x82>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <TIM_Base_SetConfig+0xe4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00f      	beq.n	8001ae6 <TIM_Base_SetConfig+0x82>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d00b      	beq.n	8001ae6 <TIM_Base_SetConfig+0x82>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <TIM_Base_SetConfig+0xe8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <TIM_Base_SetConfig+0x82>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <TIM_Base_SetConfig+0xec>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d003      	beq.n	8001ae6 <TIM_Base_SetConfig+0x82>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <TIM_Base_SetConfig+0xf0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d108      	bne.n	8001af8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <TIM_Base_SetConfig+0xe0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d003      	beq.n	8001b2c <TIM_Base_SetConfig+0xc8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <TIM_Base_SetConfig+0xe4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d103      	bne.n	8001b34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	615a      	str	r2, [r3, #20]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40013400 	.word	0x40013400
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40000800 	.word	0x40000800
 8001b54:	40000c00 	.word	0x40000c00

08001b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e032      	b.n	8001bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_ZN12virtual_wireC1Ev>:
 *      Author: quoclaptk
 */

#include <virtualwire.h>

virtual_wire::virtual_wire() {
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4a42      	ldr	r2, [pc, #264]	; (8001d18 <_ZN12virtual_wireC1Ev+0x114>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	22a8      	movs	r2, #168	; 0xa8
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fc3c 	bl	8002498 <memset>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	222a      	movs	r2, #42	; 0x2a
 8001c24:	711a      	strb	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	222a      	movs	r2, #42	; 0x2a
 8001c2a:	715a      	strb	r2, [r3, #5]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	222a      	movs	r2, #42	; 0x2a
 8001c30:	719a      	strb	r2, [r3, #6]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	222a      	movs	r2, #42	; 0x2a
 8001c36:	71da      	strb	r2, [r3, #7]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	222a      	movs	r2, #42	; 0x2a
 8001c3c:	721a      	strb	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	222a      	movs	r2, #42	; 0x2a
 8001c42:	725a      	strb	r2, [r3, #9]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2238      	movs	r2, #56	; 0x38
 8001c48:	729a      	strb	r2, [r3, #10]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	222c      	movs	r2, #44	; 0x2c
 8001c4e:	72da      	strb	r2, [r3, #11]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <_ZN12virtual_wireC1Ev+0x118>)
 8001cfc:	f203 1415 	addw	r4, r3, #277	; 0x115
 8001d00:	4615      	mov	r5, r2
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	6020      	str	r0, [r4, #0]
 8001d06:	6061      	str	r1, [r4, #4]
 8001d08:	60a2      	str	r2, [r4, #8]
 8001d0a:	60e3      	str	r3, [r4, #12]
	// TODO Auto-generated constructor stub

}
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdb0      	pop	{r4, r5, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	080025a8 	.word	0x080025a8
 8001d1c:	08002580 	.word	0x08002580

08001d20 <_ZN12virtual_wireD1Ev>:

virtual_wire::~virtual_wire() {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <_ZN12virtual_wireD1Ev+0x1c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	080025a8 	.word	0x080025a8

08001d40 <_ZN12virtual_wireD0Ev>:
virtual_wire::~virtual_wire() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
}
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffe9 	bl	8001d20 <_ZN12virtual_wireD1Ev>
 8001d4e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fb6f 	bl	8002436 <_ZdlPvj>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_ZN12virtual_wire14vw_symbol_6to4Eh>:
    return crc;
}

// Convert a 6 bit encoded symbol into its 4 bit decoded equivalent
uint8_t virtual_wire::vw_symbol_6to4(uint8_t symbol)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70fb      	strb	r3, [r7, #3]
    // Linear search :-( Could have a 64 byte reverse lookup table?
    // There is a little speedup here courtesy Ralph Doncaster:
    // The shortcut works because bit 5 of the symbol is 1 for the last 8
    // symbols, and it is 0 for the first 8.
    // So we only have to search half the table
    for (i = (symbol>>2) & 8, count=8; count-- ; i++)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	109b      	asrs	r3, r3, #2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	73bb      	strb	r3, [r7, #14]
 8001d7e:	7bbb      	ldrb	r3, [r7, #14]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	73ba      	strb	r2, [r7, #14]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <_ZN12virtual_wire14vw_symbol_6to4Eh+0x4c>
	if (symbol == symbols[i]) return i;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d101      	bne.n	8001da6 <_ZN12virtual_wire14vw_symbol_6to4Eh+0x44>
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	e004      	b.n	8001db0 <_ZN12virtual_wire14vw_symbol_6to4Eh+0x4e>
    for (i = (symbol>>2) & 8, count=8; count-- ; i++)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e7e7      	b.n	8001d7e <_ZN12virtual_wire14vw_symbol_6to4Eh+0x1c>

    return 0; // Not found
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <_ZN12virtual_wire19vw_set_ptt_invertedEh>:
    vw_rx_inverted = inverted;
}

// Set the ptt pin inverted (low to transmit)
void virtual_wire::vw_set_ptt_inverted(uint8_t inverted)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
	vw_ptt_inverted = inverted;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <_ZN12virtual_wire6vw_pllEv>:
// Called 8 times per bit period
// Phase locked loop tries to synchronise with the transmitter so that bit
// transitions occur at about the time vw_rx_pll_ramp is 0;
// Then the average is computed over each bit period to deduce the bit value
void virtual_wire::vw_pll()
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    // Integrate each sample
    if (vw_rx_sample)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <_ZN12virtual_wire6vw_pllEv+0x22>
	vw_rx_integrator++;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    if (vw_rx_sample != vw_rx_last_sample)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d016      	beq.n	8001e38 <_ZN12virtual_wire6vw_pllEv+0x60>
    {
	// Transition, advance if ramp > 80, retard if < 80
	vw_rx_pll_ramp += ((vw_rx_pll_ramp < VW_RAMP_TRANSITION)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	f892 20b8 	ldrb.w	r2, [r2, #184]	; 0xb8
 8001e16:	2a4f      	cmp	r2, #79	; 0x4f
 8001e18:	d801      	bhi.n	8001e1e <_ZN12virtual_wire6vw_pllEv+0x46>
 8001e1a:	220b      	movs	r2, #11
 8001e1c:	e000      	b.n	8001e20 <_ZN12virtual_wire6vw_pllEv+0x48>
 8001e1e:	221d      	movs	r2, #29
 8001e20:	4413      	add	r3, r2
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			   ? VW_RAMP_INC_RETARD
			   : VW_RAMP_INC_ADVANCE);
	vw_rx_last_sample = vw_rx_sample;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8001e36:	e007      	b.n	8001e48 <_ZN12virtual_wire6vw_pllEv+0x70>
    }
    else
    {
	// No transition
	// Advance ramp by standard 20 (== 160/8 samples)
	vw_rx_pll_ramp += VW_RAMP_INC;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001e3e:	3314      	adds	r3, #20
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    }
    if (vw_rx_pll_ramp >= VW_RX_RAMP_LEN)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001e4e:	2b9f      	cmp	r3, #159	; 0x9f
 8001e50:	f240 80c6 	bls.w	8001fe0 <_ZN12virtual_wire6vw_pllEv+0x208>
    {
	// Add this to the 12th bit of vw_rx_bits, LSB first
	// The last 12 bits are kept
	vw_rx_bits >>= 1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8001e5a:	105b      	asrs	r3, r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	// Check the integrator to see how many samples in this cycle were high.
	// If < 5 out of 8, then its declared a 0 bit, else a 1;
	if (vw_rx_integrator >= 5)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d908      	bls.n	8001e80 <_ZN12virtual_wire6vw_pllEv+0xa8>
	    vw_rx_bits |= 0x800;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8001e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	vw_rx_pll_ramp -= VW_RX_RAMP_LEN;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001e86:	3360      	adds	r3, #96	; 0x60
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	vw_rx_integrator = 0; // Clear the integral for the next cycle
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	if (vw_rx_active)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8087 	beq.w	8001fb2 <_ZN12virtual_wire6vw_pllEv+0x1da>
	{
	    // We have the start symbol and now we are collecting message bits,
	    // 6 per symbol, each which has to be decoded to 4 bits
	    if (++vw_rx_bit_count >= 12)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001eba:	2b0b      	cmp	r3, #11
 8001ebc:	bf8c      	ite	hi
 8001ebe:	2301      	movhi	r3, #1
 8001ec0:	2300      	movls	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 808b 	beq.w	8001fe0 <_ZN12virtual_wire6vw_pllEv+0x208>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte =
		    (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff41 	bl	8001d62 <_ZN12virtual_wire14vw_symbol_6to4Eh>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	011b      	lsls	r3, r3, #4
		    | vw_symbol_6to4(vw_rx_bits >> 6);
 8001ee4:	b25c      	sxtb	r4, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8001eec:	119b      	asrs	r3, r3, #6
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff35 	bl	8001d62 <_ZN12virtual_wire14vw_symbol_6to4Eh>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	b25b      	sxtb	r3, r3
 8001efc:	4323      	orrs	r3, r4
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	73fb      	strb	r3, [r7, #15]

		// The first decoded byte is the byte count of the following message
		// the count includes the byte count and the 2 trailing FCS bytes
		// REVISIT: may also include the ACK flag at 0x40
		if (vw_rx_len == 0)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf0c      	ite	eq
 8001f0e:	2301      	moveq	r3, #1
 8001f10:	2300      	movne	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01a      	beq.n	8001f4e <_ZN12virtual_wire6vw_pllEv+0x176>
		{
		    // The first byte is the byte count
		    // Check it for sensibility. It cant be less than 4, since it
		    // includes the bytes count itself and the 2 byte FCS
		    vw_rx_count = this_byte;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
		    if (vw_rx_count < 4 || vw_rx_count > VW_MAX_MESSAGE_LEN)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d904      	bls.n	8001f34 <_ZN12virtual_wire6vw_pllEv+0x15c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001f30:	2b50      	cmp	r3, #80	; 0x50
 8001f32:	d90c      	bls.n	8001f4e <_ZN12virtual_wire6vw_pllEv+0x176>
		    {
			// Stupid message length, drop the whole thing
			vw_rx_active = false;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			vw_rx_bad++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                        return;
 8001f4c:	e048      	b.n	8001fe0 <_ZN12virtual_wire6vw_pllEv+0x208>
		    }
		}
		vw_rx_buf[vw_rx_len++] = this_byte;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	b2d1      	uxtb	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	f882 1112 	strb.w	r1, [r2, #274]	; 0x112
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

		if (vw_rx_len >= vw_rx_count)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	bf2c      	ite	cs
 8001f7e:	2301      	movcs	r3, #1
 8001f80:	2300      	movcc	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00f      	beq.n	8001fa8 <_ZN12virtual_wire6vw_pllEv+0x1d0>
		{
		    // Got all the bytes now
		    vw_rx_active = false;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		    vw_rx_good++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		    vw_rx_done = true; // Better come get it before the next one starts
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		}
		vw_rx_bit_count = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8001fb0:	e016      	b.n	8001fe0 <_ZN12virtual_wire6vw_pllEv+0x208>
	    }
	}
	// Not in a message, see if we have a start symbol
	else if (vw_rx_bits == 0xb38)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8001fb8:	f640 3238 	movw	r2, #2872	; 0xb38
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10f      	bne.n	8001fe0 <_ZN12virtual_wire6vw_pllEv+0x208>
	{
	    // Have start symbol, start collecting message
	    vw_rx_active = true;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	    vw_rx_bit_count = 0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	    vw_rx_len = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	    vw_rx_done = false; // Too bad if you missed the last message
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	}
    }
}
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd90      	pop	{r4, r7, pc}

08001fe6 <_ZN12virtual_wire8vw_setupEt>:

void virtual_wire::vw_setup(uint16_t speed)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
    vw_digitalWrite_ptt(vw_ptt_inverted);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	f892 20b4 	ldrb.w	r2, [r2, #180]	; 0xb4
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	bf14      	ite	ne
 8002002:	2201      	movne	r2, #1
 8002004:	2200      	moveq	r2, #0
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	4610      	mov	r0, r2
 800200a:	4798      	blx	r3
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN12virtual_wire11vw_tx_startEv>:
void virtual_wire::vw_tx_start()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    vw_tx_index = 0;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    vw_tx_bit = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    vw_tx_sample = 0;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf

    // Enable the transmitter hardware
    this->vw_digitalWrite_ptt( true ^ vw_ptt_inverted);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	f892 20b4 	ldrb.w	r2, [r2, #180]	; 0xb4
 8002040:	2a01      	cmp	r2, #1
 8002042:	bf14      	ite	ne
 8002044:	2201      	movne	r2, #1
 8002046:	2200      	moveq	r2, #0
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	4610      	mov	r0, r2
 800204c:	4798      	blx	r3

    // Next tick interrupt will send the first bit
    vw_tx_enabled = true;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZN12virtual_wire10vw_tx_stopEv>:

// Stop the transmitter, call when all bits are sent
void virtual_wire::vw_tx_stop()
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
    // Disable the transmitter hardware
    vw_digitalWrite_ptt(false ^ vw_ptt_inverted);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	f892 20b4 	ldrb.w	r2, [r2, #180]	; 0xb4
 8002072:	2a00      	cmp	r2, #0
 8002074:	bf14      	ite	ne
 8002076:	2201      	movne	r2, #1
 8002078:	2200      	moveq	r2, #0
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	4610      	mov	r0, r2
 800207e:	4798      	blx	r3
    vw_digitalWrite_tx(false);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002086:	2000      	movs	r0, #0
 8002088:	4798      	blx	r3

    // No more ticks for the transmitter
    vw_tx_enabled = false;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_ZN12virtual_wire10vw_wait_txEv>:
}

// Wait for the transmitter to become available
// Busy-wait loop until the ISR says the message has been sent
void virtual_wire::vw_wait_tx()
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
    while (vw_tx_enabled)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d000      	beq.n	80020ba <_ZN12virtual_wire10vw_wait_txEv+0x20>
 80020b8:	e7f3      	b.n	80020a2 <_ZN12virtual_wire10vw_wait_txEv+0x8>
	;
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <_ZN12virtual_wire7vw_sendEPhh>:
	;
    return vw_rx_done;
}

int8_t virtual_wire::vw_send(uint8_t* buf, uint8_t len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint8_t index = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	77bb      	strb	r3, [r7, #30]
    uint16_t crc = 0xffff;
 80020d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020da:	83bb      	strh	r3, [r7, #28]
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3304      	adds	r3, #4
 80020e0:	3308      	adds	r3, #8
 80020e2:	61bb      	str	r3, [r7, #24]
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	3303      	adds	r3, #3
 80020e8:	75fb      	strb	r3, [r7, #23]

    if (len > VW_MAX_PAYLOAD)
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b4d      	cmp	r3, #77	; 0x4d
 80020ee:	d901      	bls.n	80020f4 <_ZN12virtual_wire7vw_sendEPhh+0x30>
	return false;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e0a3      	b.n	800223c <_ZN12virtual_wire7vw_sendEPhh+0x178>

    // Wait for transmitter to become available
    vw_wait_tx();
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ffd0 	bl	800209a <_ZN12virtual_wire10vw_wait_txEv>

    // Encode the message length
    crc = _crc_ccitt_update(crc, count);
 80020fa:	7dfa      	ldrb	r2, [r7, #23]
 80020fc:	8bbb      	ldrh	r3, [r7, #28]
 80020fe:	4619      	mov	r1, r3
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f93e 	bl	8002382 <_ZN12virtual_wire17_crc_ccitt_updateEth>
 8002106:	4603      	mov	r3, r0
 8002108:	83bb      	strh	r3, [r7, #28]
    p[index++] = symbols[count >> 4];
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	111a      	asrs	r2, r3, #4
 800210e:	7fbb      	ldrb	r3, [r7, #30]
 8002110:	1c59      	adds	r1, r3, #1
 8002112:	77b9      	strb	r1, [r7, #30]
 8002114:	4619      	mov	r1, r3
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	440b      	add	r3, r1
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	440a      	add	r2, r1
 800211e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8002122:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[count & 0xf];
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	f003 020f 	and.w	r2, r3, #15
 800212a:	7fbb      	ldrb	r3, [r7, #30]
 800212c:	1c59      	adds	r1, r3, #1
 800212e:	77b9      	strb	r1, [r7, #30]
 8002130:	4619      	mov	r1, r3
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	440b      	add	r3, r1
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	440a      	add	r2, r1
 800213a:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800213e:	701a      	strb	r2, [r3, #0]

    // Encode the message into 6 bit symbols. Each byte is converted into
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	7ffa      	ldrb	r2, [r7, #31]
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	429a      	cmp	r2, r3
 800214a:	d22f      	bcs.n	80021ac <_ZN12virtual_wire7vw_sendEPhh+0xe8>
    {
	crc = _crc_ccitt_update(crc, buf[i]);
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	8bbb      	ldrh	r3, [r7, #28]
 8002156:	4619      	mov	r1, r3
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f912 	bl	8002382 <_ZN12virtual_wire17_crc_ccitt_updateEth>
 800215e:	4603      	mov	r3, r0
 8002160:	83bb      	strh	r3, [r7, #28]
	p[index++] = symbols[buf[i] >> 4];
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	111a      	asrs	r2, r3, #4
 800216c:	7fbb      	ldrb	r3, [r7, #30]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	77b9      	strb	r1, [r7, #30]
 8002172:	4619      	mov	r1, r3
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	440b      	add	r3, r1
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	440a      	add	r2, r1
 800217c:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8002180:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[buf[i] & 0xf];
 8002182:	7ffb      	ldrb	r3, [r7, #31]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	7fbb      	ldrb	r3, [r7, #30]
 8002190:	1c59      	adds	r1, r3, #1
 8002192:	77b9      	strb	r1, [r7, #30]
 8002194:	4619      	mov	r1, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	440b      	add	r3, r1
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	440a      	add	r2, r1
 800219e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 80021a2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 80021a4:	7ffb      	ldrb	r3, [r7, #31]
 80021a6:	3301      	adds	r3, #1
 80021a8:	77fb      	strb	r3, [r7, #31]
 80021aa:	e7cb      	b.n	8002144 <_ZN12virtual_wire7vw_sendEPhh+0x80>
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
 80021ac:	8bbb      	ldrh	r3, [r7, #28]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	83bb      	strh	r3, [r7, #28]
    p[index++] = symbols[(crc >> 4)  & 0xf];
 80021b2:	8bbb      	ldrh	r3, [r7, #28]
 80021b4:	111b      	asrs	r3, r3, #4
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	7fbb      	ldrb	r3, [r7, #30]
 80021bc:	1c59      	adds	r1, r3, #1
 80021be:	77b9      	strb	r1, [r7, #30]
 80021c0:	4619      	mov	r1, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	440b      	add	r3, r1
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	440a      	add	r2, r1
 80021ca:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 80021ce:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[crc & 0xf];
 80021d0:	8bbb      	ldrh	r3, [r7, #28]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	7fbb      	ldrb	r3, [r7, #30]
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	77b9      	strb	r1, [r7, #30]
 80021dc:	4619      	mov	r1, r3
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	440b      	add	r3, r1
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	440a      	add	r2, r1
 80021e6:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 80021ea:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 12) & 0xf];
 80021ec:	8bbb      	ldrh	r3, [r7, #28]
 80021ee:	0b1b      	lsrs	r3, r3, #12
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4619      	mov	r1, r3
 80021f4:	7fbb      	ldrb	r3, [r7, #30]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	77ba      	strb	r2, [r7, #30]
 80021fa:	461a      	mov	r2, r3
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4413      	add	r3, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	440a      	add	r2, r1
 8002204:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8002208:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 8)  & 0xf];
 800220a:	8bbb      	ldrh	r3, [r7, #28]
 800220c:	121b      	asrs	r3, r3, #8
 800220e:	f003 020f 	and.w	r2, r3, #15
 8002212:	7fbb      	ldrb	r3, [r7, #30]
 8002214:	1c59      	adds	r1, r3, #1
 8002216:	77b9      	strb	r1, [r7, #30]
 8002218:	4619      	mov	r1, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	440b      	add	r3, r1
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	440a      	add	r2, r1
 8002222:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8002226:	701a      	strb	r2, [r3, #0]

    // Total number of 6-bit symbols to send
    vw_tx_len = index + VW_HEADER_LEN;
 8002228:	7fbb      	ldrb	r3, [r7, #30]
 800222a:	3308      	adds	r3, #8
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

    // Start the low level interrupt handler sending symbols
    vw_tx_start();
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff feed 	bl	8002014 <_ZN12virtual_wire11vw_tx_startEv>

    return true;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZN12virtual_wire14vw_Int_HandlerEv>:
uint8_t virtual_wire::vw_get_rx_bad()
{
    return vw_rx_bad;
}
void virtual_wire::vw_Int_Handler()
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    if (vw_rx_enabled && !vw_tx_enabled)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <_ZN12virtual_wire14vw_Int_HandlerEv+0x22>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <_ZN12virtual_wire14vw_Int_HandlerEv+0x22>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <_ZN12virtual_wire14vw_Int_HandlerEv+0x24>
 8002266:	2300      	movs	r3, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <_ZN12virtual_wire14vw_Int_HandlerEv+0x4e>
	vw_rx_sample = (bool)vw_digitalRead_rx() ^ vw_rx_inverted;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	b25a      	sxtb	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002284:	b25b      	sxtb	r3, r3
 8002286:	4053      	eors	r3, r2
 8002288:	b25b      	sxtb	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6

    // Do transmitter stuff first to reduce transmitter bit jitter due
    // to variable receiver processing
    if (vw_tx_enabled && vw_tx_sample++ == 0)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <_ZN12virtual_wire14vw_Int_HandlerEv+0x72>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	b2d1      	uxtb	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	f882 10af 	strb.w	r1, [r2, #175]	; 0xaf
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <_ZN12virtual_wire14vw_Int_HandlerEv+0x72>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <_ZN12virtual_wire14vw_Int_HandlerEv+0x74>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d042      	beq.n	8002342 <_ZN12virtual_wire14vw_Int_HandlerEv+0xfe>
    {
	// Send next bit
	// Symbols are sent LSB first
	// Finished sending the whole message? (after waiting one bit period
	// since the last bit)
	if (vw_tx_index >= vw_tx_len)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d30b      	bcc.n	80022e4 <_ZN12virtual_wire14vw_Int_HandlerEv+0xa0>
	{
	    vw_tx_stop();
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff fec6 	bl	800205e <_ZN12virtual_wire10vw_tx_stopEv>
	    vw_tx_msg_count++;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80022d8:	3301      	adds	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80022e2:	e02e      	b.n	8002342 <_ZN12virtual_wire14vw_Int_HandlerEv+0xfe>
	}
	else
	{
	    vw_digitalWrite_tx(vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80022f0:	4619      	mov	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	440b      	add	r3, r1
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	b2cc      	uxtb	r4, r1
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
 800230a:	fa40 f303 	asr.w	r3, r0, r3
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	4790      	blx	r2
	    if (vw_tx_bit >= 6)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8002326:	2b05      	cmp	r3, #5
 8002328:	d90b      	bls.n	8002342 <_ZN12virtual_wire14vw_Int_HandlerEv+0xfe>
	    {
		vw_tx_bit = 0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
		vw_tx_index++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8002338:	3301      	adds	r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
	    }
	}
    }
    if (vw_tx_sample > 7)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8002348:	2b07      	cmp	r3, #7
 800234a:	d903      	bls.n	8002354 <_ZN12virtual_wire14vw_Int_HandlerEv+0x110>
	vw_tx_sample = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf

    if (vw_rx_enabled && !vw_tx_enabled)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <_ZN12virtual_wire14vw_Int_HandlerEv+0x12a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <_ZN12virtual_wire14vw_Int_HandlerEv+0x12a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <_ZN12virtual_wire14vw_Int_HandlerEv+0x12c>
 800236e:	2300      	movs	r3, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <_ZN12virtual_wire14vw_Int_HandlerEv+0x136>
	vw_pll();
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fd2f 	bl	8001dd8 <_ZN12virtual_wire6vw_pllEv>
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <_ZN12virtual_wire17_crc_ccitt_updateEth>:
	}

	return crc;
}
uint16_t virtual_wire::_crc_ccitt_update (uint16_t crc, uint8_t data)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	807b      	strh	r3, [r7, #2]
 800238e:	4613      	mov	r3, r2
 8002390:	707b      	strb	r3, [r7, #1]
	data ^= lo8 (crc);
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	b25a      	sxtb	r2, r3
 8002396:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800239a:	4053      	eors	r3, r2
 800239c:	b25b      	sxtb	r3, r3
 800239e:	707b      	strb	r3, [r7, #1]
	data ^= data << 4;
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	b25a      	sxtb	r2, r3
 80023a6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80023aa:	4053      	eors	r3, r2
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	707b      	strb	r3, [r7, #1]

	return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) ^ ((uint16_t)data << 3));
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	121b      	asrs	r3, r3, #8
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b21a      	sxth	r2, r3
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	111b      	asrs	r3, r3, #4
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4053      	eors	r3, r2
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	4053      	eors	r3, r2
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	b29b      	uxth	r3, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <_ZN12virtual_wire13reg_vw_rx_pinEPFbvE>:

	return crc;
}

void virtual_wire::reg_vw_rx_pin(bool (*rx_pin)(void))
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
	_VWConf.vw_rx_pin = rx_pin;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <_ZN12virtual_wire13reg_vw_tx_pinEPFvbE>:

void virtual_wire::reg_vw_tx_pin(void (*tx_pin)(bool value))
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
	_VWConf.vw_tx_pin = tx_pin;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <_ZN12virtual_wire14reg_vw_ptt_pinEPFvbE>:

void virtual_wire::reg_vw_ptt_pin(void (*ptt_pin)(bool value))
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
	_VWConf.vw_ptt_pin = ptt_pin;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_ZdlPvj>:
 8002436:	f000 b800 	b.w	800243a <_ZdlPv>

0800243a <_ZdlPv>:
 800243a:	f000 b825 	b.w	8002488 <free>
	...

08002440 <__libc_init_array>:
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	2500      	movs	r5, #0
 8002444:	4e0c      	ldr	r6, [pc, #48]	; (8002478 <__libc_init_array+0x38>)
 8002446:	4c0d      	ldr	r4, [pc, #52]	; (800247c <__libc_init_array+0x3c>)
 8002448:	1ba4      	subs	r4, r4, r6
 800244a:	10a4      	asrs	r4, r4, #2
 800244c:	42a5      	cmp	r5, r4
 800244e:	d109      	bne.n	8002464 <__libc_init_array+0x24>
 8002450:	f000 f878 	bl	8002544 <_init>
 8002454:	2500      	movs	r5, #0
 8002456:	4e0a      	ldr	r6, [pc, #40]	; (8002480 <__libc_init_array+0x40>)
 8002458:	4c0a      	ldr	r4, [pc, #40]	; (8002484 <__libc_init_array+0x44>)
 800245a:	1ba4      	subs	r4, r4, r6
 800245c:	10a4      	asrs	r4, r4, #2
 800245e:	42a5      	cmp	r5, r4
 8002460:	d105      	bne.n	800246e <__libc_init_array+0x2e>
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002468:	4798      	blx	r3
 800246a:	3501      	adds	r5, #1
 800246c:	e7ee      	b.n	800244c <__libc_init_array+0xc>
 800246e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002472:	4798      	blx	r3
 8002474:	3501      	adds	r5, #1
 8002476:	e7f2      	b.n	800245e <__libc_init_array+0x1e>
 8002478:	080025b0 	.word	0x080025b0
 800247c:	080025b0 	.word	0x080025b0
 8002480:	080025b0 	.word	0x080025b0
 8002484:	080025b8 	.word	0x080025b8

08002488 <free>:
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <free+0xc>)
 800248a:	4601      	mov	r1, r0
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	f000 b80b 	b.w	80024a8 <_free_r>
 8002492:	bf00      	nop
 8002494:	2000000c 	.word	0x2000000c

08002498 <memset>:
 8002498:	4603      	mov	r3, r0
 800249a:	4402      	add	r2, r0
 800249c:	4293      	cmp	r3, r2
 800249e:	d100      	bne.n	80024a2 <memset+0xa>
 80024a0:	4770      	bx	lr
 80024a2:	f803 1b01 	strb.w	r1, [r3], #1
 80024a6:	e7f9      	b.n	800249c <memset+0x4>

080024a8 <_free_r>:
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	4605      	mov	r5, r0
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d043      	beq.n	8002538 <_free_r+0x90>
 80024b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024b4:	1f0c      	subs	r4, r1, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bfb8      	it	lt
 80024ba:	18e4      	addlt	r4, r4, r3
 80024bc:	f000 f840 	bl	8002540 <__malloc_lock>
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <_free_r+0x94>)
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	4610      	mov	r0, r2
 80024c6:	b933      	cbnz	r3, 80024d6 <_free_r+0x2e>
 80024c8:	6063      	str	r3, [r4, #4]
 80024ca:	6014      	str	r4, [r2, #0]
 80024cc:	4628      	mov	r0, r5
 80024ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024d2:	f000 b836 	b.w	8002542 <__malloc_unlock>
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	d90b      	bls.n	80024f2 <_free_r+0x4a>
 80024da:	6821      	ldr	r1, [r4, #0]
 80024dc:	1862      	adds	r2, r4, r1
 80024de:	4293      	cmp	r3, r2
 80024e0:	bf01      	itttt	eq
 80024e2:	681a      	ldreq	r2, [r3, #0]
 80024e4:	685b      	ldreq	r3, [r3, #4]
 80024e6:	1852      	addeq	r2, r2, r1
 80024e8:	6022      	streq	r2, [r4, #0]
 80024ea:	6063      	str	r3, [r4, #4]
 80024ec:	6004      	str	r4, [r0, #0]
 80024ee:	e7ed      	b.n	80024cc <_free_r+0x24>
 80024f0:	4613      	mov	r3, r2
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	b10a      	cbz	r2, 80024fa <_free_r+0x52>
 80024f6:	42a2      	cmp	r2, r4
 80024f8:	d9fa      	bls.n	80024f0 <_free_r+0x48>
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	1858      	adds	r0, r3, r1
 80024fe:	42a0      	cmp	r0, r4
 8002500:	d10b      	bne.n	800251a <_free_r+0x72>
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	4401      	add	r1, r0
 8002506:	1858      	adds	r0, r3, r1
 8002508:	4282      	cmp	r2, r0
 800250a:	6019      	str	r1, [r3, #0]
 800250c:	d1de      	bne.n	80024cc <_free_r+0x24>
 800250e:	6810      	ldr	r0, [r2, #0]
 8002510:	6852      	ldr	r2, [r2, #4]
 8002512:	4401      	add	r1, r0
 8002514:	6019      	str	r1, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	e7d8      	b.n	80024cc <_free_r+0x24>
 800251a:	d902      	bls.n	8002522 <_free_r+0x7a>
 800251c:	230c      	movs	r3, #12
 800251e:	602b      	str	r3, [r5, #0]
 8002520:	e7d4      	b.n	80024cc <_free_r+0x24>
 8002522:	6820      	ldr	r0, [r4, #0]
 8002524:	1821      	adds	r1, r4, r0
 8002526:	428a      	cmp	r2, r1
 8002528:	bf01      	itttt	eq
 800252a:	6811      	ldreq	r1, [r2, #0]
 800252c:	6852      	ldreq	r2, [r2, #4]
 800252e:	1809      	addeq	r1, r1, r0
 8002530:	6021      	streq	r1, [r4, #0]
 8002532:	6062      	str	r2, [r4, #4]
 8002534:	605c      	str	r4, [r3, #4]
 8002536:	e7c9      	b.n	80024cc <_free_r+0x24>
 8002538:	bd38      	pop	{r3, r4, r5, pc}
 800253a:	bf00      	nop
 800253c:	20000258 	.word	0x20000258

08002540 <__malloc_lock>:
 8002540:	4770      	bx	lr

08002542 <__malloc_unlock>:
 8002542:	4770      	bx	lr

08002544 <_init>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr

08002550 <_fini>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr
