/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
#include <UIPEthernet.h>
/******************************************************************************/
SPI_HandleTypeDef hspi1;
/******************************************************************************/
String buffer = "";
char c;
uint32_t count = 0;
/*** The configuration of the application ***/
// Change the configuration for your needs
const uint8_t mac[6] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
const IPAddress myIP(192, 168, 0, 105);
/****** a little bit of security *****/
// max request size, arduino cannot handle big requests so set the max you really plan to process
const int maxSize = 512; // that is enough for 8 relays + a bigger header
// the get requests the application is listening to
const char REQ_ABOUT[] = "/about";
// Request parameters
const char GET[]  = "GET";
const char POST[] = "POST";
// http codes
const int RC_ERR = 500;
const int RC_OK  = 200;
// supported relay status
const int R_OFF = 0;
const int R_ON  = 1;
const int R_INV = 2;
/* ************ internal constants *************/
// new line
const char NL = '\n';
// carriage return
const char CR = '\r';
// response of relay status, json start
const char RS_START[] = "{Relay Status:[";
// response of relay status, json end
const char RS_END[] = "]}";
// response of relay status, json array separator;
const char RS_SEP = ',';
// response of the error JSON start
const char RS_ERR_START[] = "{\"e\":";
// response of the error JSON end
const char RS_ERR_END = '}';
const char HD_START[] = "HTTP/1.1 ";
const char HD_END[] = " \nContent-Type: text/html\nConnection: close\n\n";
const char VERSION[] = "{\"version\":\"0.2\"}";
// start the server on port 80
EthernetServer server = EthernetServer(80);
// Number of relays on board, max 9 are supported!
const uint8_t numRelays = 16;
uint16_t dataStatus = 0x0000;
uint8_t relayDataStatus[numRelays]={1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
/******************************************************************************/
String getPostData(EthernetClient &client);
bool updateRelayDataStatus(uint8_t relay, uint8_t onOffStat);
void analyzePostData(EthernetClient &client);
void printRelayStatus(EthernetClient &client);
void returnErr(EthernetClient &client, int rc);
void returnHeader(EthernetClient &client, int httpCode);
String getNextLine(EthernetClient &client);
/******************************************************************************/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
void _cs(bool level)
{
	if(level)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
	else HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t spiWrite(uint8_t data)
{
	uint8_t rxData = 0;
	HAL_SPI_TransmitReceive(&hspi1, &data, &rxData, 1, 100);
	return rxData;
}
/******************************************************************************/
int main(void)
{
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_SPI1_Init();
	while (1)
	{

	}
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin|HC_DATA_Pin|HC_CLK_Pin
                          |HC_LAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin LED_Pin HC_DATA_Pin HC_CLK_Pin
                           HC_LAT_Pin */
  GPIO_InitStruct.Pin = CS_Pin|LED_Pin|HC_DATA_Pin|HC_CLK_Pin
                          |HC_LAT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

