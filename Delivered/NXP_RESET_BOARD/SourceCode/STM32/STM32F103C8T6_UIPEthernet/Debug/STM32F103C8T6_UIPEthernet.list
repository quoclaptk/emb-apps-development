
STM32F103C8T6_UIPEthernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08007574  08007574  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007574  08007574  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007594  08007594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800759c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000090  0800762c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800762c  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003175b  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000757f  00000000  00000000  00051814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009436  00000000  00000000  00058d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000621d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ce8  00000000  00000000  000633d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5d5  00000000  00000000  000650c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186e5  00000000  00000000  00084695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2fd  00000000  00000000  0009cd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012c077  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004624  00000000  00000000  0012c0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800720c 	.word	0x0800720c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800720c 	.word	0x0800720c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <_cs>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/******************************************************************************/
void _cs(bool level)
{
	if(level)HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000170:	4602      	mov	r2, r0
 8000172:	b100      	cbz	r0, 8000176 <_cs+0x6>
 8000174:	2201      	movs	r2, #1
	else HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017a:	4801      	ldr	r0, [pc, #4]	; (8000180 <_cs+0x10>)
 800017c:	f000 bf5c 	b.w	8001038 <HAL_GPIO_WritePin>
 8000180:	40010800 	.word	0x40010800

08000184 <spiWrite>:
}

uint8_t spiWrite(uint8_t data)
{
 8000184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t rxData = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_SPI_TransmitReceive(&hspi1, &data, &rxData, 1, 100);
 800018c:	2364      	movs	r3, #100	; 0x64
{
 800018e:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi1, &data, &rxData, 1, 100);
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	f10d 0217 	add.w	r2, sp, #23
 8000198:	2301      	movs	r3, #1
 800019a:	f10d 010f 	add.w	r1, sp, #15
 800019e:	4804      	ldr	r0, [pc, #16]	; (80001b0 <spiWrite+0x2c>)
 80001a0:	f001 fbe8 	bl	8001974 <HAL_SPI_TransmitReceive>
	return rxData;
}
 80001a4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80001a8:	b007      	add	sp, #28
 80001aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80001ae:	bf00      	nop
 80001b0:	200000d0 	.word	0x200000d0

080001b4 <_Z9dataWritev>:
	/* Update status data */
	for(uint8_t i=0; i<numRelays; i++)
	{
		if(relayDataStatus[i] == R_INV)
		{
			if(count>0)bitClear(dataStatus, i); /* Turn off relay and waiting by count variable is decreasing */
 80001b4:	2200      	movs	r2, #0
{
 80001b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if(count>0)bitClear(dataStatus, i); /* Turn off relay and waiting by count variable is decreasing */
 80001b8:	4611      	mov	r1, r2
				bitSet(dataStatus, i);
				relayDataStatus[i] = R_ON;
			}
		}
		else if(relayDataStatus[i] == R_ON)bitSet(dataStatus, i);
		else if(relayDataStatus[i] == R_OFF)bitClear(dataStatus, i);
 80001ba:	2601      	movs	r6, #1
			if(count>0)bitClear(dataStatus, i); /* Turn off relay and waiting by count variable is decreasing */
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <_Z9dataWritev+0xa4>)
 80001be:	4c27      	ldr	r4, [pc, #156]	; (800025c <_Z9dataWritev+0xa8>)
 80001c0:	681f      	ldr	r7, [r3, #0]
 80001c2:	4d27      	ldr	r5, [pc, #156]	; (8000260 <_Z9dataWritev+0xac>)
 80001c4:	6823      	ldr	r3, [r4, #0]
		if(relayDataStatus[i] == R_INV)
 80001c6:	f815 0b01 	ldrb.w	r0, [r5], #1
 80001ca:	2802      	cmp	r0, #2
 80001cc:	d138      	bne.n	8000240 <_Z9dataWritev+0x8c>
			if(count>0)bitClear(dataStatus, i); /* Turn off relay and waiting by count variable is decreasing */
 80001ce:	fa06 f102 	lsl.w	r1, r6, r2
 80001d2:	b117      	cbz	r7, 80001da <_Z9dataWritev+0x26>
		else if(relayDataStatus[i] == R_OFF)bitClear(dataStatus, i);
 80001d4:	ea23 0301 	bic.w	r3, r3, r1
 80001d8:	e002      	b.n	80001e0 <_Z9dataWritev+0x2c>
				bitSet(dataStatus, i);
 80001da:	430b      	orrs	r3, r1
				relayDataStatus[i] = R_ON;
 80001dc:	f805 6c01 	strb.w	r6, [r5, #-1]
 80001e0:	2101      	movs	r1, #1
	for(uint8_t i=0; i<numRelays; i++)
 80001e2:	3201      	adds	r2, #1
 80001e4:	2a20      	cmp	r2, #32
 80001e6:	d1ee      	bne.n	80001c6 <_Z9dataWritev+0x12>
 80001e8:	b101      	cbz	r1, 80001ec <_Z9dataWritev+0x38>
 80001ea:	6023      	str	r3, [r4, #0]
 80001ec:	2500      	movs	r5, #0
	}
	/* Write to relays */
	for(uint8_t i=0; i<numRelays; i++)
	{
		if(((dataStatus>>i)&0x01)==0x01)HAL_GPIO_WritePin(HC_DATA_GPIO_Port, HC_DATA_Pin, GPIO_PIN_SET);
		else HAL_GPIO_WritePin(HC_DATA_GPIO_Port, HC_DATA_Pin, GPIO_PIN_RESET);
 80001ee:	4e1d      	ldr	r6, [pc, #116]	; (8000264 <_Z9dataWritev+0xb0>)
		if(((dataStatus>>i)&0x01)==0x01)HAL_GPIO_WritePin(HC_DATA_GPIO_Port, HC_DATA_Pin, GPIO_PIN_SET);
 80001f0:	6822      	ldr	r2, [r4, #0]
		else HAL_GPIO_WritePin(HC_DATA_GPIO_Port, HC_DATA_Pin, GPIO_PIN_RESET);
 80001f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
		if(((dataStatus>>i)&0x01)==0x01)HAL_GPIO_WritePin(HC_DATA_GPIO_Port, HC_DATA_Pin, GPIO_PIN_SET);
 80001f6:	40ea      	lsrs	r2, r5
 80001f8:	f012 0201 	ands.w	r2, r2, #1
 80001fc:	bf18      	it	ne
 80001fe:	2201      	movne	r2, #1
		else HAL_GPIO_WritePin(HC_DATA_GPIO_Port, HC_DATA_Pin, GPIO_PIN_RESET);
 8000200:	4630      	mov	r0, r6
 8000202:	f000 ff19 	bl	8001038 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HC_CLK_GPIO_Port, HC_CLK_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020c:	4630      	mov	r0, r6
 800020e:	f000 ff13 	bl	8001038 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HC_CLK_GPIO_Port, HC_CLK_Pin, GPIO_PIN_RESET);
 8000212:	3501      	adds	r5, #1
 8000214:	2200      	movs	r2, #0
 8000216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800021a:	4630      	mov	r0, r6
 800021c:	f000 ff0c 	bl	8001038 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<numRelays; i++)
 8000220:	2d20      	cmp	r5, #32
 8000222:	d1e5      	bne.n	80001f0 <_Z9dataWritev+0x3c>
	}
	HAL_GPIO_WritePin(HC_LAT_GPIO_Port, HC_LAT_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022a:	480e      	ldr	r0, [pc, #56]	; (8000264 <_Z9dataWritev+0xb0>)
 800022c:	f000 ff04 	bl	8001038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC_LAT_GPIO_Port, HC_LAT_Pin, GPIO_PIN_RESET);
}
 8000230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(HC_LAT_GPIO_Port, HC_LAT_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023a:	480a      	ldr	r0, [pc, #40]	; (8000264 <_Z9dataWritev+0xb0>)
 800023c:	f000 befc 	b.w	8001038 <HAL_GPIO_WritePin>
		else if(relayDataStatus[i] == R_ON)bitSet(dataStatus, i);
 8000240:	2801      	cmp	r0, #1
 8000242:	d103      	bne.n	800024c <_Z9dataWritev+0x98>
 8000244:	fa00 f102 	lsl.w	r1, r0, r2
 8000248:	430b      	orrs	r3, r1
 800024a:	e7c9      	b.n	80001e0 <_Z9dataWritev+0x2c>
		else if(relayDataStatus[i] == R_OFF)bitClear(dataStatus, i);
 800024c:	2800      	cmp	r0, #0
 800024e:	d1c8      	bne.n	80001e2 <_Z9dataWritev+0x2e>
 8000250:	fa06 f102 	lsl.w	r1, r6, r2
 8000254:	e7be      	b.n	80001d4 <_Z9dataWritev+0x20>
 8000256:	bf00      	nop
 8000258:	200000c8 	.word	0x200000c8
 800025c:	200000cc 	.word	0x200000cc
 8000260:	20000000 	.word	0x20000000
 8000264:	40010800 	.word	0x40010800

08000268 <_Z21updateRelayDataStatushh>:
 * Performs the change on the relay itself.
 */

bool updateRelayDataStatus(uint8_t relay, uint8_t onOffStat)
{
	if(onOffStat == R_OFF)
 8000268:	b959      	cbnz	r1, 8000282 <_Z21updateRelayDataStatushh+0x1a>
	{
		relayDataStatus[relay] = R_OFF;
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <_Z21updateRelayDataStatushh+0x40>)
		bitClear(dataStatus, relay);
 800026c:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <_Z21updateRelayDataStatushh+0x44>)
		relayDataStatus[relay] = R_OFF;
 800026e:	5419      	strb	r1, [r3, r0]
		bitClear(dataStatus, relay);
 8000270:	2101      	movs	r1, #1
 8000272:	6813      	ldr	r3, [r2, #0]
 8000274:	fa01 f000 	lsl.w	r0, r1, r0
 8000278:	ea23 0000 	bic.w	r0, r3, r0
	}
	else if(onOffStat == R_ON)
	{
		relayDataStatus[relay] = R_ON;
		bitSet(dataStatus, relay);
 800027c:	6010      	str	r0, [r2, #0]
		relayDataStatus[relay] = R_INV;
		bitSet(dataStatus, relay);
	}
	else return false;
	return true;
}
 800027e:	4608      	mov	r0, r1
 8000280:	4770      	bx	lr
	else if(onOffStat == R_ON)
 8000282:	2901      	cmp	r1, #1
 8000284:	d107      	bne.n	8000296 <_Z21updateRelayDataStatushh+0x2e>
		relayDataStatus[relay] = R_ON;
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <_Z21updateRelayDataStatushh+0x40>)
		bitSet(dataStatus, relay);
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <_Z21updateRelayDataStatushh+0x44>)
		relayDataStatus[relay] = R_ON;
 800028a:	5419      	strb	r1, [r3, r0]
		bitSet(dataStatus, relay);
 800028c:	6813      	ldr	r3, [r2, #0]
 800028e:	fa01 f000 	lsl.w	r0, r1, r0
 8000292:	4318      	orrs	r0, r3
 8000294:	e7f2      	b.n	800027c <_Z21updateRelayDataStatushh+0x14>
	else if(onOffStat == R_INV)
 8000296:	2902      	cmp	r1, #2
 8000298:	d104      	bne.n	80002a4 <_Z21updateRelayDataStatushh+0x3c>
		relayDataStatus[relay] = R_INV;
 800029a:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <_Z21updateRelayDataStatushh+0x40>)
		bitSet(dataStatus, relay);
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <_Z21updateRelayDataStatushh+0x44>)
		relayDataStatus[relay] = R_INV;
 800029e:	5419      	strb	r1, [r3, r0]
		bitSet(dataStatus, relay);
 80002a0:	2101      	movs	r1, #1
 80002a2:	e7f3      	b.n	800028c <_Z21updateRelayDataStatushh+0x24>
	else return false;
 80002a4:	2100      	movs	r1, #0
 80002a6:	e7ea      	b.n	800027e <_Z21updateRelayDataStatushh+0x16>
 80002a8:	20000000 	.word	0x20000000
 80002ac:	200000cc 	.word	0x200000cc

080002b0 <_Z16printRelayStatusR9UIPClient>:
 * Returns a JSON with the current values of the relays to the client. The
 * JSON will look like: {"r":[0,0,0,0,0,0,0,0]}
 * This one means all releays are turned off.
 */
void printRelayStatus(EthernetClient &client)
{
 80002b0:	b570      	push	{r4, r5, r6, lr}
	client.print(RS_START);
 80002b2:	490b      	ldr	r1, [pc, #44]	; (80002e0 <_Z16printRelayStatusR9UIPClient+0x30>)
{
 80002b4:	4604      	mov	r4, r0
	client.print(RS_START);
 80002b6:	2500      	movs	r5, #0
 80002b8:	f003 fae8 	bl	800388c <_ZN5Print5printEPKc>
	for (uint8_t i = 0; i < numRelays; i++)
	{
		client.print(bitRead(dataStatus, i));
 80002bc:	4e09      	ldr	r6, [pc, #36]	; (80002e4 <_Z16printRelayStatusR9UIPClient+0x34>)
 80002be:	6831      	ldr	r1, [r6, #0]
 80002c0:	220a      	movs	r2, #10
 80002c2:	40e9      	lsrs	r1, r5
 80002c4:	4620      	mov	r0, r4
 80002c6:	f001 0101 	and.w	r1, r1, #1
 80002ca:	3501      	adds	r5, #1
 80002cc:	f003 fb43 	bl	8003956 <_ZN5Print5printEmi>
	for (uint8_t i = 0; i < numRelays; i++)
 80002d0:	2d20      	cmp	r5, #32
 80002d2:	d1f4      	bne.n	80002be <_Z16printRelayStatusR9UIPClient+0xe>
	}
	client.println(RS_END);
 80002d4:	4620      	mov	r0, r4
}
 80002d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	client.println(RS_END);
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <_Z16printRelayStatusR9UIPClient+0x38>)
 80002dc:	f003 bae6 	b.w	80038ac <_ZN5Print7printlnEPKc>
 80002e0:	08007296 	.word	0x08007296
 80002e4:	200000cc 	.word	0x200000cc
 80002e8:	08007277 	.word	0x08007277

080002ec <_Z9returnErrR9UIPClienti>:

/**
 * Returns a message to the client.
 */
void returnErr(EthernetClient &client, int rc)
{
 80002ec:	b538      	push	{r3, r4, r5, lr}
 80002ee:	4604      	mov	r4, r0
 80002f0:	460d      	mov	r5, r1
	client.print(RS_ERR_START);
 80002f2:	4907      	ldr	r1, [pc, #28]	; (8000310 <_Z9returnErrR9UIPClienti+0x24>)
 80002f4:	f003 faca 	bl	800388c <_ZN5Print5printEPKc>
	client.print(rc);
 80002f8:	4629      	mov	r1, r5
 80002fa:	4620      	mov	r0, r4
 80002fc:	220a      	movs	r2, #10
 80002fe:	f003 fb28 	bl	8003952 <_ZN5Print5printEii>
	client.println(RS_ERR_END);
 8000302:	4620      	mov	r0, r4
}
 8000304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	client.println(RS_ERR_END);
 8000308:	217d      	movs	r1, #125	; 0x7d
 800030a:	f003 bad9 	b.w	80038c0 <_ZN5Print7printlnEc>
 800030e:	bf00      	nop
 8000310:	08007234 	.word	0x08007234

08000314 <_Z12returnHeaderR9UIPClienti>:

/**
 * Returns a header with the given http code to the client.
 */
void returnHeader(EthernetClient &client, int httpCode)
{
 8000314:	b538      	push	{r3, r4, r5, lr}
 8000316:	4604      	mov	r4, r0
 8000318:	460d      	mov	r5, r1
	client.print(HD_START);
 800031a:	4907      	ldr	r1, [pc, #28]	; (8000338 <_Z12returnHeaderR9UIPClienti+0x24>)
 800031c:	f003 fab6 	bl	800388c <_ZN5Print5printEPKc>
	client.print(httpCode);
 8000320:	4629      	mov	r1, r5
 8000322:	4620      	mov	r0, r4
 8000324:	220a      	movs	r2, #10
 8000326:	f003 fb14 	bl	8003952 <_ZN5Print5printEii>
	client.print(HD_END);
 800032a:	4620      	mov	r0, r4
}
 800032c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	client.print(HD_END);
 8000330:	4902      	ldr	r1, [pc, #8]	; (800033c <_Z12returnHeaderR9UIPClienti+0x28>)
 8000332:	f003 baab 	b.w	800388c <_ZN5Print5printEPKc>
 8000336:	bf00      	nop
 8000338:	0800728c 	.word	0x0800728c
 800033c:	08007249 	.word	0x08007249

08000340 <_Z11getNextLineR9UIPClient>:

String getNextLine(EthernetClient &client)
{
 8000340:	b538      	push	{r3, r4, r5, lr}
 8000342:	460c      	mov	r4, r1
	char c;
	String buffer;
 8000344:	490e      	ldr	r1, [pc, #56]	; (8000380 <_Z11getNextLineR9UIPClient+0x40>)
{
 8000346:	4605      	mov	r5, r0
	String buffer;
 8000348:	f003 fb57 	bl	80039fa <_ZN6StringC1EPKc>
	while (client.connected() && client.available())
 800034c:	6823      	ldr	r3, [r4, #0]
 800034e:	4620      	mov	r0, r4
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4798      	blx	r3
 8000354:	b188      	cbz	r0, 800037a <_Z11getNextLineR9UIPClient+0x3a>
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	4620      	mov	r0, r4
 800035a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035c:	4798      	blx	r3
 800035e:	b160      	cbz	r0, 800037a <_Z11getNextLineR9UIPClient+0x3a>
	{
		c = client.read();
 8000360:	6823      	ldr	r3, [r4, #0]
 8000362:	4620      	mov	r0, r4
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4798      	blx	r3
 8000368:	b2c1      	uxtb	r1, r0
		// ignore all \r characters
		if (c != CR)
 800036a:	290d      	cmp	r1, #13
 800036c:	d0ee      	beq.n	800034c <_Z11getNextLineR9UIPClient+0xc>
		{
			// not read until you have a line break
			if (c == NL)
 800036e:	290a      	cmp	r1, #10
 8000370:	d003      	beq.n	800037a <_Z11getNextLineR9UIPClient+0x3a>

    // if there's not enough memory for the concatenated value, the string
    // will be left unchanged (but this isn't signalled in any way)
    String & operator += (const String &rhs)    {concat(rhs); return (*this);}
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
    String & operator += (char c)           {concat(c); return (*this);}
 8000372:	4628      	mov	r0, r5
 8000374:	f003 fba0 	bl	8003ab8 <_ZN6String6concatEc>
 8000378:	e7e8      	b.n	800034c <_Z11getNextLineR9UIPClient+0xc>
				buffer += c;
			}
		} // end c != CR
	} // end while
	return buffer;
}
 800037a:	4628      	mov	r0, r5
 800037c:	bd38      	pop	{r3, r4, r5, pc}
 800037e:	bf00      	nop
 8000380:	08007412 	.word	0x08007412

08000384 <_Z11getPostDataR9UIPClient>:
{
 8000384:	b538      	push	{r3, r4, r5, lr}
 8000386:	4605      	mov	r5, r0
 8000388:	460c      	mov	r4, r1
	while (client.connected() && client.available())
 800038a:	6823      	ldr	r3, [r4, #0]
 800038c:	4620      	mov	r0, r4
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4798      	blx	r3
 8000392:	b1f0      	cbz	r0, 80003d2 <_Z11getPostDataR9UIPClient+0x4e>
 8000394:	6823      	ldr	r3, [r4, #0]
 8000396:	4620      	mov	r0, r4
 8000398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039a:	4798      	blx	r3
 800039c:	b1c8      	cbz	r0, 80003d2 <_Z11getPostDataR9UIPClient+0x4e>
		c = client.read();
 800039e:	6823      	ldr	r3, [r4, #0]
 80003a0:	4620      	mov	r0, r4
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4798      	blx	r3
		if ((c != CR) && (c == NL))
 80003a6:	b2c0      	uxtb	r0, r0
 80003a8:	280a      	cmp	r0, #10
 80003aa:	d1ee      	bne.n	800038a <_Z11getPostDataR9UIPClient+0x6>
			c = client.read();
 80003ac:	6823      	ldr	r3, [r4, #0]
 80003ae:	4620      	mov	r0, r4
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4798      	blx	r3
 80003b4:	b2c3      	uxtb	r3, r0
			if (c == CR) c = client.read();
 80003b6:	2b0d      	cmp	r3, #13
 80003b8:	d104      	bne.n	80003c4 <_Z11getPostDataR9UIPClient+0x40>
 80003ba:	6823      	ldr	r3, [r4, #0]
 80003bc:	4620      	mov	r0, r4
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4798      	blx	r3
 80003c2:	b2c3      	uxtb	r3, r0
			if (c == NL) return getNextLine(client);
 80003c4:	2b0a      	cmp	r3, #10
 80003c6:	d1e0      	bne.n	800038a <_Z11getPostDataR9UIPClient+0x6>
 80003c8:	4621      	mov	r1, r4
 80003ca:	4628      	mov	r0, r5
 80003cc:	f7ff ffb8 	bl	8000340 <_Z11getNextLineR9UIPClient>
 80003d0:	e003      	b.n	80003da <_Z11getPostDataR9UIPClient+0x56>
	return "";
 80003d2:	4628      	mov	r0, r5
 80003d4:	4902      	ldr	r1, [pc, #8]	; (80003e0 <_Z11getPostDataR9UIPClient+0x5c>)
 80003d6:	f003 fb10 	bl	80039fa <_ZN6StringC1EPKc>
}
 80003da:	4628      	mov	r0, r5
 80003dc:	bd38      	pop	{r3, r4, r5, pc}
 80003de:	bf00      	nop
 80003e0:	08007412 	.word	0x08007412

080003e4 <_Z15analyzePostDataR9UIPClient>:
{
 80003e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003e8:	b086      	sub	sp, #24
	String command = getPostData(client);
 80003ea:	4601      	mov	r1, r0
{
 80003ec:	4605      	mov	r5, r0
	String command = getPostData(client);
 80003ee:	4668      	mov	r0, sp
 80003f0:	f7ff ffc8 	bl	8000384 <_Z11getPostDataR9UIPClient>
	uint8_t indexEnd = command.indexOf(']');
 80003f4:	215d      	movs	r1, #93	; 0x5d
 80003f6:	4668      	mov	r0, sp
 80003f8:	f003 fbb5 	bl	8003b66 <_ZNK6String7indexOfEc>
	uint8_t indexStart = command.indexOf('[');
 80003fc:	215b      	movs	r1, #91	; 0x5b
	uint8_t indexEnd = command.indexOf(']');
 80003fe:	b2c6      	uxtb	r6, r0
	uint8_t indexStart = command.indexOf('[');
 8000400:	4668      	mov	r0, sp
 8000402:	f003 fbb0 	bl	8003b66 <_ZNK6String7indexOfEc>
 8000406:	4604      	mov	r4, r0
	String param = command.substring(indexStart+1, indexEnd);
 8000408:	b2c2      	uxtb	r2, r0
 800040a:	4633      	mov	r3, r6
 800040c:	4669      	mov	r1, sp
 800040e:	3201      	adds	r2, #1
 8000410:	a803      	add	r0, sp, #12
 8000412:	f003 fbab 	bl	8003b6c <_ZNK6String9substringEjj>
	for(uint8_t i=indexStart+1; i<indexEnd; i++)
 8000416:	2700      	movs	r7, #0
 8000418:	3401      	adds	r4, #1
 800041a:	b2e4      	uxtb	r4, r4
 800041c:	fa5f f887 	uxtb.w	r8, r7
 8000420:	eb04 0308 	add.w	r3, r4, r8
 8000424:	b2db      	uxtb	r3, r3
 8000426:	429e      	cmp	r6, r3
 8000428:	d922      	bls.n	8000470 <_Z15analyzePostDataR9UIPClient+0x8c>
		if((relayIndex<numRelays) && (relayIndex>=0))
 800042a:	2f1f      	cmp	r7, #31
 800042c:	d81e      	bhi.n	800046c <_Z15analyzePostDataR9UIPClient+0x88>
			uint8_t onOff = param.charAt(relayIndex) - '0';
 800042e:	4639      	mov	r1, r7
 8000430:	a803      	add	r0, sp, #12
 8000432:	f003 fb88 	bl	8003b46 <_ZNK6String6charAtEj>
 8000436:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800043a:	b2c9      	uxtb	r1, r1
			if((onOff >= 0)&&(onOff < 3))
 800043c:	2902      	cmp	r1, #2
 800043e:	d815      	bhi.n	800046c <_Z15analyzePostDataR9UIPClient+0x88>
				bool ok = updateRelayDataStatus(relayIndex, onOff);
 8000440:	4640      	mov	r0, r8
 8000442:	f7ff ff11 	bl	8000268 <_Z21updateRelayDataStatushh>
				if(!ok)
 8000446:	b988      	cbnz	r0, 800046c <_Z15analyzePostDataR9UIPClient+0x88>
					returnHeader(client, RC_ERR);
 8000448:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800044c:	4628      	mov	r0, r5
 800044e:	f7ff ff61 	bl	8000314 <_Z12returnHeaderR9UIPClienti>
					returnErr(client, 5);
 8000452:	2105      	movs	r1, #5
 8000454:	4628      	mov	r0, r5
 8000456:	f7ff ff49 	bl	80002ec <_Z9returnErrR9UIPClienti>
	String param = command.substring(indexStart+1, indexEnd);
 800045a:	a803      	add	r0, sp, #12
 800045c:	f003 fa88 	bl	8003970 <_ZN6StringD1Ev>
	String command = getPostData(client);
 8000460:	4668      	mov	r0, sp
 8000462:	f003 fa85 	bl	8003970 <_ZN6StringD1Ev>
}
 8000466:	b006      	add	sp, #24
 8000468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(uint8_t i=indexStart+1; i<indexEnd; i++)
 800046c:	3701      	adds	r7, #1
 800046e:	e7d5      	b.n	800041c <_Z15analyzePostDataR9UIPClient+0x38>
	returnHeader(client, RC_OK);
 8000470:	4628      	mov	r0, r5
 8000472:	21c8      	movs	r1, #200	; 0xc8
 8000474:	f7ff ff4e 	bl	8000314 <_Z12returnHeaderR9UIPClienti>
	printRelayStatus(client);
 8000478:	4628      	mov	r0, r5
 800047a:	f7ff ff19 	bl	80002b0 <_Z16printRelayStatusR9UIPClient>
 800047e:	e7ec      	b.n	800045a <_Z15analyzePostDataR9UIPClient+0x76>

08000480 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b500      	push	{lr}
 8000482:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000484:	2224      	movs	r2, #36	; 0x24
 8000486:	2100      	movs	r1, #0
 8000488:	a807      	add	r0, sp, #28
 800048a:	f005 fe5d 	bl	8006148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048e:	2214      	movs	r2, #20
 8000490:	2100      	movs	r1, #0
 8000492:	a801      	add	r0, sp, #4
 8000494:	f005 fe58 	bl	8006148 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000498:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a2:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	f000 fdf9 	bl	800109c <HAL_RCC_OscConfig>
 80004aa:	4601      	mov	r1, r0
 80004ac:	b108      	cbz	r0, 80004b2 <_Z18SystemClock_Configv+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <_Z18SystemClock_Configv+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b8:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	a801      	add	r0, sp, #4
 80004c0:	f001 f86c 	bl	800159c <HAL_RCC_ClockConfig>
 80004c4:	b108      	cbz	r0, 80004ca <_Z18SystemClock_Configv+0x4a>
 80004c6:	b672      	cpsid	i
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <_Z18SystemClock_Configv+0x48>
}
 80004ca:	b011      	add	sp, #68	; 0x44
 80004cc:	f85d fb04 	ldr.w	pc, [sp], #4

080004d0 <_GLOBAL__sub_I_hspi1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80004d0:	b513      	push	{r0, r1, r4, lr}
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 80004d2:	2400      	movs	r4, #0
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <_GLOBAL__sub_I_hspi1+0x38>)
 80004d6:	4623      	mov	r3, r4
 80004d8:	4622      	mov	r2, r4
 80004da:	4621      	mov	r1, r4
 80004dc:	9400      	str	r4, [sp, #0]
 80004de:	f003 f9b1 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
String buffer = "";
 80004e2:	490a      	ldr	r1, [pc, #40]	; (800050c <_GLOBAL__sub_I_hspi1+0x3c>)
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <_GLOBAL__sub_I_hspi1+0x40>)
 80004e6:	f003 fa88 	bl	80039fa <_ZN6StringC1EPKc>
const IPAddress myIP(192, 168, 0, 105);
 80004ea:	2369      	movs	r3, #105	; 0x69
 80004ec:	22a8      	movs	r2, #168	; 0xa8
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	21c0      	movs	r1, #192	; 0xc0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <_GLOBAL__sub_I_hspi1+0x44>)
 80004f6:	f003 f9a5 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
EthernetServer server = EthernetServer(80);
 80004fa:	2150      	movs	r1, #80	; 0x50
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <_GLOBAL__sub_I_hspi1+0x48>)
}
 80004fe:	b002      	add	sp, #8
 8000500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
EthernetServer server = EthernetServer(80);
 8000504:	f002 befa 	b.w	80032fc <_ZN9UIPServerC1Et>
 8000508:	200000ac 	.word	0x200000ac
 800050c:	08007412 	.word	0x08007412
 8000510:	200000bc 	.word	0x200000bc
 8000514:	200000b4 	.word	0x200000b4
 8000518:	20000128 	.word	0x20000128

0800051c <_GLOBAL__sub_D_hspi1>:
String buffer = "";
 800051c:	4801      	ldr	r0, [pc, #4]	; (8000524 <_GLOBAL__sub_D_hspi1+0x8>)
 800051e:	f003 ba27 	b.w	8003970 <_ZN6StringD1Ev>
 8000522:	bf00      	nop
 8000524:	200000bc 	.word	0x200000bc

08000528 <main>:
{
 8000528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800052c:	b089      	sub	sp, #36	; 0x24
	HAL_Init();
 800052e:	f000 fa95 	bl	8000a5c <HAL_Init>
	SystemClock_Config();
 8000532:	f7ff ffa5 	bl	8000480 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	2210      	movs	r2, #16
 8000538:	2100      	movs	r1, #0
 800053a:	eb0d 0002 	add.w	r0, sp, r2
 800053e:	f005 fe03 	bl	8006148 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b66      	ldr	r3, [pc, #408]	; (80006dc <main+0x1b4>)
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin|HC_DATA_Pin|HC_CLK_Pin
 8000544:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin|HC_DATA_Pin|HC_CLK_Pin
 800054a:	4865      	ldr	r0, [pc, #404]	; (80006e0 <main+0x1b8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	f042 0204 	orr.w	r2, r2, #4
 8000550:	619a      	str	r2, [r3, #24]
 8000552:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin|HC_DATA_Pin|HC_CLK_Pin
 8000554:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin|HC_DATA_Pin|HC_CLK_Pin
 800055e:	f000 fd6b 	bl	8001038 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000566:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	485b      	ldr	r0, [pc, #364]	; (80006e0 <main+0x1b8>)
 8000572:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	e9cd 4306 	strd	r4, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f000 fbda 	bl	8000d30 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800057c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8000580:	4858      	ldr	r0, [pc, #352]	; (80006e4 <main+0x1bc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000582:	4959      	ldr	r1, [pc, #356]	; (80006e8 <main+0x1c0>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000584:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000588:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800058c:	2308      	movs	r3, #8
 800058e:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000592:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000594:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000598:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800059c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a4:	f001 f962 	bl	800186c <HAL_SPI_Init>
 80005a8:	b108      	cbz	r0, 80005ae <main+0x86>
 80005aa:	b672      	cpsid	i
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x84>
	Ethernet.begin(mac);/* Configure IP address via DHCP */
 80005ae:	494f      	ldr	r1, [pc, #316]	; (80006ec <main+0x1c4>)
 80005b0:	484f      	ldr	r0, [pc, #316]	; (80006f0 <main+0x1c8>)
 80005b2:	f002 fd93 	bl	80030dc <_ZN16UIPEthernetClass5beginEPKh>
	Ethernet.localIP();
 80005b6:	494e      	ldr	r1, [pc, #312]	; (80006f0 <main+0x1c8>)
 80005b8:	a804      	add	r0, sp, #16
 80005ba:	f002 fc3b 	bl	8002e34 <_ZN16UIPEthernetClass7localIPEv>
	server.begin();
 80005be:	484d      	ldr	r0, [pc, #308]	; (80006f4 <main+0x1cc>)
 80005c0:	f002 fe6c 	bl	800329c <_ZN9UIPServer5beginEv>
						buffer = getNextLine(client);
 80005c4:	4c4c      	ldr	r4, [pc, #304]	; (80006f8 <main+0x1d0>)
		if(EthernetClient client = server.available())
 80005c6:	4f4b      	ldr	r7, [pc, #300]	; (80006f4 <main+0x1cc>)
 80005c8:	4639      	mov	r1, r7
 80005ca:	a804      	add	r0, sp, #16
 80005cc:	f002 fea6 	bl	800331c <_ZN9UIPServer9availableEv>
 80005d0:	a804      	add	r0, sp, #16
 80005d2:	f002 f952 	bl	800287a <_ZN9UIPClientcvbEv>
 80005d6:	4d49      	ldr	r5, [pc, #292]	; (80006fc <main+0x1d4>)
 80005d8:	2800      	cmp	r0, #0
 80005da:	d058      	beq.n	800068e <main+0x166>
		{ 	count=0x1FF;
 80005dc:	f240 13ff 	movw	r3, #511	; 0x1ff
			if (client)
 80005e0:	a804      	add	r0, sp, #16
		{ 	count=0x1FF;
 80005e2:	602b      	str	r3, [r5, #0]
			if (client)
 80005e4:	f002 f949 	bl	800287a <_ZN9UIPClientcvbEv>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d050      	beq.n	800068e <main+0x166>
				if((size = client.available()) > 0)
 80005ec:	a804      	add	r0, sp, #16
 80005ee:	f002 fa04 	bl	80029fa <_ZN9UIPClient9availableEv>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d04b      	beq.n	800068e <main+0x166>
					if(size > maxSize)// check the the data is not too big
 80005f6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80005fa:	d908      	bls.n	800060e <main+0xe6>
						returnHeader(client, RC_ERR);
 80005fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000600:	a804      	add	r0, sp, #16
 8000602:	f7ff fe87 	bl	8000314 <_Z12returnHeaderR9UIPClienti>
						returnErr(client, 1);
 8000606:	2101      	movs	r1, #1
 8000608:	a804      	add	r0, sp, #16
 800060a:	f7ff fe6f 	bl	80002ec <_Z9returnErrR9UIPClienti>
						if (buffer.startsWith(GET))
 800060e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8000708 <main+0x1e0>
						else if (buffer.startsWith(POST))
 8000612:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800070c <main+0x1e4>
					while (client.connected() && client.available())
 8000616:	a804      	add	r0, sp, #16
 8000618:	f002 f900 	bl	800281c <_ZN9UIPClient9connectedEv>
 800061c:	2800      	cmp	r0, #0
 800061e:	d033      	beq.n	8000688 <main+0x160>
 8000620:	a804      	add	r0, sp, #16
 8000622:	f002 f9ea 	bl	80029fa <_ZN9UIPClient9availableEv>
 8000626:	b378      	cbz	r0, 8000688 <main+0x160>
						buffer = getNextLine(client);
 8000628:	a904      	add	r1, sp, #16
 800062a:	a801      	add	r0, sp, #4
 800062c:	f7ff fe88 	bl	8000340 <_Z11getNextLineR9UIPClient>
 8000630:	a901      	add	r1, sp, #4
 8000632:	4620      	mov	r0, r4
 8000634:	f003 fa10 	bl	8003a58 <_ZN6StringaSEOS_>
 8000638:	a801      	add	r0, sp, #4
 800063a:	f003 f999 	bl	8003970 <_ZN6StringD1Ev>
						if (buffer.startsWith(GET))
 800063e:	4641      	mov	r1, r8
 8000640:	a801      	add	r0, sp, #4
 8000642:	f003 f9da 	bl	80039fa <_ZN6StringC1EPKc>
 8000646:	4620      	mov	r0, r4
 8000648:	a901      	add	r1, sp, #4
 800064a:	f003 fa6a 	bl	8003b22 <_ZNK6String10startsWithERKS_>
 800064e:	4606      	mov	r6, r0
 8000650:	a801      	add	r0, sp, #4
 8000652:	f003 f98d 	bl	8003970 <_ZN6StringD1Ev>
 8000656:	b336      	cbz	r6, 80006a6 <main+0x17e>
							returnHeader(client, RC_OK);
 8000658:	21c8      	movs	r1, #200	; 0xc8
 800065a:	a804      	add	r0, sp, #16
 800065c:	f7ff fe5a 	bl	8000314 <_Z12returnHeaderR9UIPClienti>
							String getData = buffer.substring(4, buffer.length() - 9);
 8000660:	2204      	movs	r2, #4
 8000662:	68a3      	ldr	r3, [r4, #8]
 8000664:	4621      	mov	r1, r4
 8000666:	eb0d 0002 	add.w	r0, sp, r2
 800066a:	3b09      	subs	r3, #9
 800066c:	f003 fa7e 	bl	8003b6c <_ZNK6String9substringEjj>
							if (getData.equals(REQ_ABOUT))client.println(VERSION);
 8000670:	4923      	ldr	r1, [pc, #140]	; (8000700 <main+0x1d8>)
 8000672:	a801      	add	r0, sp, #4
 8000674:	f003 fa2d 	bl	8003ad2 <_ZNK6String6equalsEPKc>
 8000678:	b188      	cbz	r0, 800069e <main+0x176>
 800067a:	4922      	ldr	r1, [pc, #136]	; (8000704 <main+0x1dc>)
 800067c:	a804      	add	r0, sp, #16
 800067e:	f003 f915 	bl	80038ac <_ZN5Print7printlnEPKc>
							String getData = buffer.substring(4, buffer.length() - 9);
 8000682:	a801      	add	r0, sp, #4
 8000684:	f003 f974 	bl	8003970 <_ZN6StringD1Ev>
					client.stop();
 8000688:	a804      	add	r0, sp, #16
 800068a:	f002 fac5 	bl	8002c18 <_ZN9UIPClient4stopEv>
		dataWrite();
 800068e:	f7ff fd91 	bl	80001b4 <_Z9dataWritev>
		if(count>0)count--;
 8000692:	682b      	ldr	r3, [r5, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d097      	beq.n	80005c8 <main+0xa0>
 8000698:	3b01      	subs	r3, #1
 800069a:	602b      	str	r3, [r5, #0]
 800069c:	e793      	b.n	80005c6 <main+0x9e>
							else printRelayStatus(client);
 800069e:	a804      	add	r0, sp, #16
 80006a0:	f7ff fe06 	bl	80002b0 <_Z16printRelayStatusR9UIPClient>
 80006a4:	e7ed      	b.n	8000682 <main+0x15a>
						else if (buffer.startsWith(POST))
 80006a6:	4649      	mov	r1, r9
 80006a8:	a801      	add	r0, sp, #4
 80006aa:	f003 f9a6 	bl	80039fa <_ZN6StringC1EPKc>
 80006ae:	4620      	mov	r0, r4
 80006b0:	a901      	add	r1, sp, #4
 80006b2:	f003 fa36 	bl	8003b22 <_ZNK6String10startsWithERKS_>
 80006b6:	4606      	mov	r6, r0
 80006b8:	a801      	add	r0, sp, #4
 80006ba:	f003 f959 	bl	8003970 <_ZN6StringD1Ev>
 80006be:	b11e      	cbz	r6, 80006c8 <main+0x1a0>
							analyzePostData(client);
 80006c0:	a804      	add	r0, sp, #16
 80006c2:	f7ff fe8f 	bl	80003e4 <_Z15analyzePostDataR9UIPClient>
							break;
 80006c6:	e7df      	b.n	8000688 <main+0x160>
							returnHeader(client, RC_ERR);
 80006c8:	a804      	add	r0, sp, #16
 80006ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006ce:	f7ff fe21 	bl	8000314 <_Z12returnHeaderR9UIPClienti>
							returnErr(client, 2);
 80006d2:	2102      	movs	r1, #2
 80006d4:	a804      	add	r0, sp, #16
 80006d6:	f7ff fe09 	bl	80002ec <_Z9returnErrR9UIPClienti>
					while (client.connected() && client.available())
 80006da:	e79c      	b.n	8000616 <main+0xee>
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010800 	.word	0x40010800
 80006e4:	200000d0 	.word	0x200000d0
 80006e8:	40013000 	.word	0x40013000
 80006ec:	0800723e 	.word	0x0800723e
 80006f0:	200001a4 	.word	0x200001a4
 80006f4:	20000128 	.word	0x20000128
 80006f8:	200000bc 	.word	0x200000bc
 80006fc:	200000c8 	.word	0x200000c8
 8000700:	080072a6 	.word	0x080072a6
 8000704:	0800727a 	.word	0x0800727a
 8000708:	0800723a 	.word	0x0800723a
 800070c:	08007244 	.word	0x08007244

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_MspInit+0x60>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_MspInit+0x60>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000

08000774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <HAL_SPI_MspInit+0x88>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d12f      	bne.n	80007f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 800079a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <HAL_SPI_MspInit+0x90>)
 80007d8:	f000 faaa 	bl	8000d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <HAL_SPI_MspInit+0x90>)
 80007f0:	f000 fa9e 	bl	8000d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40013000 	.word	0x40013000
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
	...

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	mycount++;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <SysTick_Handler+0x30>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <SysTick_Handler+0x30>)
 8000858:	6013      	str	r3, [r2, #0]
	if(mycount>500)
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <SysTick_Handler+0x30>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000862:	d907      	bls.n	8000874 <SysTick_Handler+0x28>
	{
		mycount=0;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Handler+0x30>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <SysTick_Handler+0x34>)
 8000870:	f000 fbfa 	bl	8001068 <HAL_GPIO_TogglePin>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f000 f938 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000134 	.word	0x20000134
 8000880:	40010800 	.word	0x40010800

08000884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	return 1;
 8000888:	2301      	movs	r3, #1
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <_kill>:

int _kill(int pid, int sig)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800089c:	f005 fbfe 	bl	800609c <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2216      	movs	r2, #22
 80008a4:	601a      	str	r2, [r3, #0]
	return -1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_exit>:

void _exit (int status)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008ba:	f04f 31ff 	mov.w	r1, #4294967295
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffe7 	bl	8000892 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008c4:	e7fe      	b.n	80008c4 <_exit+0x12>

080008c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e00a      	b.n	80008ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008d8:	f3af 8000 	nop.w
 80008dc:	4601      	mov	r1, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	60ba      	str	r2, [r7, #8]
 80008e4:	b2ca      	uxtb	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbf0      	blt.n	80008d8 <_read+0x12>
	}

return len;
 80008f6:	687b      	ldr	r3, [r7, #4]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e009      	b.n	8000926 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	60ba      	str	r2, [r7, #8]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	429a      	cmp	r2, r3
 800092c:	dbf1      	blt.n	8000912 <_write+0x12>
	}
	return len;
 800092e:	687b      	ldr	r3, [r7, #4]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <_close>:

int _close(int file)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	return -1;
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095e:	605a      	str	r2, [r3, #4]
	return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <_isatty>:

int _isatty(int file)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f005 fb68 	bl	800609c <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20005000 	.word	0x20005000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	20000138 	.word	0x20000138
 8000a00:	20000570 	.word	0x20000570

08000a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a36:	f7ff ffe5 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f005 fb35 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fd73 	bl	8000528 <main>
  bx lr
 8000a42:	4770      	bx	lr
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a4c:	0800759c 	.word	0x0800759c
  ldr r2, =_sbss
 8000a50:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a54:	2000056c 	.word	0x2000056c

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f92b 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe4a 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f935 	bl	8000d16 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f90b 	bl	8000cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000020 	.word	0x20000020
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	20000024 	.word	0x20000024

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <HAL_IncTick+0x20>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000028 	.word	0x20000028
 8000b08:	20000400 	.word	0x20000400

08000b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000400 	.word	0x20000400

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fff0 	bl	8000b0c <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffe0 	bl	8000b0c <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000028 	.word	0x20000028

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f7ff ff90 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff49 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff5e 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff90 	bl	8000c20 <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5f 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb0 	bl	8000c84 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e169      	b.n	8001018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d44:	2201      	movs	r2, #1
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8158 	bne.w	8001012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4a9a      	ldr	r2, [pc, #616]	; (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d05e      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d6c:	4a98      	ldr	r2, [pc, #608]	; (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d875      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d72:	4a98      	ldr	r2, [pc, #608]	; (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d058      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d78:	4a96      	ldr	r2, [pc, #600]	; (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d86f      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d7e:	4a96      	ldr	r2, [pc, #600]	; (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d052      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d84:	4a94      	ldr	r2, [pc, #592]	; (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d869      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d8a:	4a94      	ldr	r2, [pc, #592]	; (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d04c      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d90:	4a92      	ldr	r2, [pc, #584]	; (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d863      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d96:	4a92      	ldr	r2, [pc, #584]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d046      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d9c:	4a90      	ldr	r2, [pc, #576]	; (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d85d      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d82a      	bhi.n	8000dfc <HAL_GPIO_Init+0xcc>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d859      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <HAL_GPIO_Init+0x80>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e05 	.word	0x08000e05
 8000db8:	08000e17 	.word	0x08000e17
 8000dbc:	08000e59 	.word	0x08000e59
 8000dc0:	08000e5f 	.word	0x08000e5f
 8000dc4:	08000e5f 	.word	0x08000e5f
 8000dc8:	08000e5f 	.word	0x08000e5f
 8000dcc:	08000e5f 	.word	0x08000e5f
 8000dd0:	08000e5f 	.word	0x08000e5f
 8000dd4:	08000e5f 	.word	0x08000e5f
 8000dd8:	08000e5f 	.word	0x08000e5f
 8000ddc:	08000e5f 	.word	0x08000e5f
 8000de0:	08000e5f 	.word	0x08000e5f
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e5f 	.word	0x08000e5f
 8000dec:	08000e5f 	.word	0x08000e5f
 8000df0:	08000e5f 	.word	0x08000e5f
 8000df4:	08000e0d 	.word	0x08000e0d
 8000df8:	08000e21 	.word	0x08000e21
 8000dfc:	4a79      	ldr	r2, [pc, #484]	; (8000fe4 <HAL_GPIO_Init+0x2b4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e02:	e02c      	b.n	8000e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e029      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	3304      	adds	r3, #4
 8000e12:	623b      	str	r3, [r7, #32]
          break;
 8000e14:	e024      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	3308      	adds	r3, #8
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e01f      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	330c      	adds	r3, #12
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e01a      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e32:	2304      	movs	r3, #4
 8000e34:	623b      	str	r3, [r7, #32]
          break;
 8000e36:	e013      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e40:	2308      	movs	r3, #8
 8000e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	611a      	str	r2, [r3, #16]
          break;
 8000e4a:	e009      	b.n	8000e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	615a      	str	r2, [r3, #20]
          break;
 8000e56:	e003      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          break;
 8000e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2bff      	cmp	r3, #255	; 0xff
 8000e64:	d801      	bhi.n	8000e6a <HAL_GPIO_Init+0x13a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	e001      	b.n	8000e6e <HAL_GPIO_Init+0x13e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d802      	bhi.n	8000e7c <HAL_GPIO_Init+0x14c>
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_Init+0x152>
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	3b08      	subs	r3, #8
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	210f      	movs	r1, #15
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	6a39      	ldr	r1, [r7, #32]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 80b1 	beq.w	8001012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a4c      	ldr	r2, [pc, #304]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec8:	4a48      	ldr	r2, [pc, #288]	; (8000fec <HAL_GPIO_Init+0x2bc>)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3f      	ldr	r2, [pc, #252]	; (8000ff4 <HAL_GPIO_Init+0x2c4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1e8>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <HAL_GPIO_Init+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1e4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <HAL_GPIO_Init+0x2cc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1e0>
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e004      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f20:	f002 0203 	and.w	r2, r2, #3
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f2e:	492f      	ldr	r1, [pc, #188]	; (8000fec <HAL_GPIO_Init+0x2bc>)
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	492c      	ldr	r1, [pc, #176]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4928      	ldr	r1, [pc, #160]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4922      	ldr	r1, [pc, #136]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	491e      	ldr	r1, [pc, #120]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	4918      	ldr	r1, [pc, #96]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	608b      	str	r3, [r1, #8]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4914      	ldr	r1, [pc, #80]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d021      	beq.n	8001004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	490e      	ldr	r1, [pc, #56]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60cb      	str	r3, [r1, #12]
 8000fcc:	e021      	b.n	8001012 <HAL_GPIO_Init+0x2e2>
 8000fce:	bf00      	nop
 8000fd0:	10320000 	.word	0x10320000
 8000fd4:	10310000 	.word	0x10310000
 8000fd8:	10220000 	.word	0x10220000
 8000fdc:	10210000 	.word	0x10210000
 8000fe0:	10120000 	.word	0x10120000
 8000fe4:	10110000 	.word	0x10110000
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_GPIO_Init+0x304>)
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	43db      	mvns	r3, r3
 800100c:	4909      	ldr	r1, [pc, #36]	; (8001034 <HAL_GPIO_Init+0x304>)
 800100e:	4013      	ands	r3, r2
 8001010:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	fa22 f303 	lsr.w	r3, r2, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	f47f ae8e 	bne.w	8000d44 <HAL_GPIO_Init+0x14>
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	372c      	adds	r7, #44	; 0x2c
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	611a      	str	r2, [r3, #16]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4013      	ands	r3, r2
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43d9      	mvns	r1, r3
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	400b      	ands	r3, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e26c      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010bc:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d00c      	beq.n	80010e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c8:	4b8f      	ldr	r3, [pc, #572]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d112      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
 80010d4:	4b8c      	ldr	r3, [pc, #560]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d10b      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	4b89      	ldr	r3, [pc, #548]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d06c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x12c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d168      	bne.n	80011c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e246      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x76>
 8001104:	4b80      	ldr	r3, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e02e      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a7a      	ldr	r2, [pc, #488]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b78      	ldr	r3, [pc, #480]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0xbc>
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a71      	ldr	r2, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001158:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b68      	ldr	r3, [pc, #416]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a67      	ldr	r2, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcc8 	bl	8000b0c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcc4 	bl	8000b0c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1fa      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xe4>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fcb4 	bl	8000b0c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcb0 	bl	8000b0c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1e6      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x10c>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d6:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e2:	4b49      	ldr	r3, [pc, #292]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x18c>
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x176>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1ba      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4939      	ldr	r1, [pc, #228]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x270>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fc69 	bl	8000b0c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fc65 	bl	8000b0c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e19b      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4927      	ldr	r1, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_RCC_OscConfig+0x270>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fc48 	bl	8000b0c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc44 	bl	8000b0c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e17a      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d03a      	beq.n	8001320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d019      	beq.n	80012e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc28 	bl	8000b0c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc24 	bl	8000b0c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e15a      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 faa6 	bl	8001830 <RCC_Delay>
 80012e4:	e01c      	b.n	8001320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fc0e 	bl	8000b0c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f2:	e00f      	b.n	8001314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc0a 	bl	8000b0c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d908      	bls.n	8001314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e140      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	42420000 	.word	0x42420000
 8001310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b9e      	ldr	r3, [pc, #632]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e9      	bne.n	80012f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a6 	beq.w	800147a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b97      	ldr	r3, [pc, #604]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10d      	bne.n	800135a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b94      	ldr	r3, [pc, #592]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a93      	ldr	r2, [pc, #588]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b91      	ldr	r3, [pc, #580]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a8a      	ldr	r2, [pc, #552]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fbcb 	bl	8000b0c <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fbc7 	bl	8000b0c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0fd      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x312>
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a7a      	ldr	r2, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e02d      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a75      	ldr	r2, [pc, #468]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4b73      	ldr	r3, [pc, #460]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a72      	ldr	r2, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	e01c      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x356>
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a6c      	ldr	r2, [pc, #432]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6213      	str	r3, [r2, #32]
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a69      	ldr	r2, [pc, #420]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a66      	ldr	r2, [pc, #408]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a63      	ldr	r2, [pc, #396]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fb7b 	bl	8000b0c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb77 	bl	8000b0c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0ab      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ee      	beq.n	800141a <HAL_RCC_OscConfig+0x37e>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb65 	bl	8000b0c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb61 	bl	8000b0c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e095      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ee      	bne.n	8001446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d105      	bne.n	800147a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8081 	beq.w	8001586 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d061      	beq.n	8001554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d146      	bne.n	8001526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_RCC_OscConfig+0x4fc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb35 	bl	8000b0c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb31 	bl	8000b0c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e067      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d108      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	492d      	ldr	r1, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a19      	ldr	r1, [r3, #32]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	430b      	orrs	r3, r1
 80014f2:	4927      	ldr	r1, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x4fc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb05 	bl	8000b0c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb01 	bl	8000b0c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e037      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x46a>
 8001524:	e02f      	b.n	8001586 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_RCC_OscConfig+0x4fc>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff faee 	bl	8000b0c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff faea 	bl	8000b0c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e020      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x498>
 8001552:	e018      	b.n	8001586 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	429a      	cmp	r2, r3
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	40007000 	.word	0x40007000
 8001598:	42420060 	.word	0x42420060

0800159c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0d0      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d910      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4965      	ldr	r1, [pc, #404]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800161a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d040      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e073      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06b      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4936      	ldr	r1, [pc, #216]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fa3e 	bl	8000b0c <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fa3a 	bl	8000b0c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e053      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d210      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0207 	bic.w	r2, r3, #7
 80016d2:	4922      	ldr	r1, [pc, #136]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1cc>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f99c 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	080072b0 	.word	0x080072b0
 8001768:	20000020 	.word	0x20000020
 800176c:	20000024 	.word	0x20000024

08001770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b490      	push	{r4, r7}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001778:	1d3c      	adds	r4, r7, #4
 800177a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001780:	f240 2301 	movw	r3, #513	; 0x201
 8001784:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x40>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x46>
 80017ae:	e02d      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b2:	623b      	str	r3, [r7, #32]
      break;
 80017b4:	e02d      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017c2:	4413      	add	r3, r2
 80017c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c5b      	lsrs	r3, r3, #17
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017e2:	4413      	add	r3, r2
 80017e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e004      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	623b      	str	r3, [r7, #32]
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800180e:	623b      	str	r3, [r7, #32]
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	6a3b      	ldr	r3, [r7, #32]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bc90      	pop	{r4, r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	08007224 	.word	0x08007224
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900

08001830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <RCC_Delay+0x34>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <RCC_Delay+0x38>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0a5b      	lsrs	r3, r3, #9
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800184c:	bf00      	nop
  }
  while (Delay --);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	60fa      	str	r2, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f9      	bne.n	800184c <RCC_Delay+0x1c>
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000020 	.word	0x20000020
 8001868:	10624dd3 	.word	0x10624dd3

0800186c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e076      	b.n	800196c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d108      	bne.n	8001898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800188e:	d009      	beq.n	80018a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
 8001896:	e005      	b.n	80018a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe ff58 	bl	8000774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	ea42 0103 	orr.w	r1, r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	0c1a      	lsrs	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f002 0204 	and.w	r2, r2, #4
 800194a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001982:	2301      	movs	r3, #1
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_SPI_TransmitReceive+0x26>
 8001996:	2302      	movs	r3, #2
 8001998:	e18a      	b.n	8001cb0 <HAL_SPI_TransmitReceive+0x33c>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019a2:	f7ff f8b3 	bl	8000b0c <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d00f      	beq.n	80019e4 <HAL_SPI_TransmitReceive+0x70>
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ca:	d107      	bne.n	80019dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <HAL_SPI_TransmitReceive+0x68>
 80019d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d003      	beq.n	80019e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80019dc:	2302      	movs	r3, #2
 80019de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80019e2:	e15b      	b.n	8001c9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_SPI_TransmitReceive+0x82>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_SPI_TransmitReceive+0x82>
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80019fc:	e14e      	b.n	8001c9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d007      	beq.n	8001a66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6e:	d178      	bne.n	8001b62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_SPI_TransmitReceive+0x10a>
 8001a78:	8b7b      	ldrh	r3, [r7, #26]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d166      	bne.n	8001b4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	1c9a      	adds	r2, r3, #2
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aa2:	e053      	b.n	8001b4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d11b      	bne.n	8001aea <HAL_SPI_TransmitReceive+0x176>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d016      	beq.n	8001aea <HAL_SPI_TransmitReceive+0x176>
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d113      	bne.n	8001aea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	1c9a      	adds	r2, r3, #2
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d119      	bne.n	8001b2c <HAL_SPI_TransmitReceive+0x1b8>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d014      	beq.n	8001b2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b14:	1c9a      	adds	r2, r3, #2
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b2c:	f7fe ffee 	bl	8000b0c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d807      	bhi.n	8001b4c <HAL_SPI_TransmitReceive+0x1d8>
 8001b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b42:	d003      	beq.n	8001b4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b4a:	e0a7      	b.n	8001c9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1a6      	bne.n	8001aa4 <HAL_SPI_TransmitReceive+0x130>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1a1      	bne.n	8001aa4 <HAL_SPI_TransmitReceive+0x130>
 8001b60:	e07c      	b.n	8001c5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_SPI_TransmitReceive+0x1fc>
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d16b      	bne.n	8001c48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	330c      	adds	r3, #12
 8001b7a:	7812      	ldrb	r2, [r2, #0]
 8001b7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b96:	e057      	b.n	8001c48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d11c      	bne.n	8001be0 <HAL_SPI_TransmitReceive+0x26c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d017      	beq.n	8001be0 <HAL_SPI_TransmitReceive+0x26c>
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d114      	bne.n	8001be0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	330c      	adds	r3, #12
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d119      	bne.n	8001c22 <HAL_SPI_TransmitReceive+0x2ae>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d014      	beq.n	8001c22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c22:	f7fe ff73 	bl	8000b0c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d803      	bhi.n	8001c3a <HAL_SPI_TransmitReceive+0x2c6>
 8001c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d102      	bne.n	8001c40 <HAL_SPI_TransmitReceive+0x2cc>
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c46:	e029      	b.n	8001c9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1a2      	bne.n	8001b98 <HAL_SPI_TransmitReceive+0x224>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d19d      	bne.n	8001b98 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f8b1 	bl	8001dc8 <SPI_EndRxTxTransaction>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c78:	e010      	b.n	8001c9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	e000      	b.n	8001c9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cc8:	f7fe ff20 	bl	8000b0c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cd8:	f7fe ff18 	bl	8000b0c <HAL_GetTick>
 8001cdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	015b      	lsls	r3, r3, #5
 8001ce4:	0d1b      	lsrs	r3, r3, #20
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cee:	e054      	b.n	8001d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d050      	beq.n	8001d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cf8:	f7fe ff08 	bl	8000b0c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d902      	bls.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d13d      	bne.n	8001d8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d26:	d111      	bne.n	8001d4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d30:	d004      	beq.n	8001d3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3a:	d107      	bne.n	8001d4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d54:	d10f      	bne.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e017      	b.n	8001dba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d19b      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000020 	.word	0x20000020

08001dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff ff6a 	bl	8001cb8 <SPI_WaitFlagStateUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e000      	b.n	8001dfc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN6UIPUDP4readEPcj>:
  virtual int       read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int       read(char* buffer, size_t len)
  {
    return read((unsigned char*) buffer, len);
 8001e04:	6803      	ldr	r3, [r0, #0]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	4718      	bx	r3

08001e0a <_ZThn8_N6UIPUDP4readEPcj>:
  virtual int       read(char* buffer, size_t len)
 8001e0a:	f1a0 0008 	sub.w	r0, r0, #8
 8001e0e:	e7f9      	b.n	8001e04 <_ZN6UIPUDP4readEPcj>

08001e10 <_ZN9DhcpClass16reset_DHCP_leaseEv>:
void DhcpClass::reset_DHCP_lease(void){
    #if ACTLOGLEVEL>=LOG_DEBUG_V1
      LogObject.uart_send_strln(F("DhcpClass::reset_DHCP_lease(void) DEBUG_V1:Function started"));
    #endif
    // zero out _dhcpipv4struct.SubnetMask, _dhcpipv4struct.GatewayIp, _dhcpipv4struct.LocalIp, _dhcpipv4struct.DhcpServerIp, _dhcpipv4struct.DnsServerIp
    memset(&_dhcpipv4struct, 0, sizeof(_dhcpipv4struct));
 8001e10:	2214      	movs	r2, #20
 8001e12:	2100      	movs	r1, #0
 8001e14:	300e      	adds	r0, #14
 8001e16:	f004 b997 	b.w	8006148 <memset>

08001e1a <_ZN9DhcpClass10getLocalIpEv>:
    _lastCheck = now;
    return rc;
}

IPAddress DhcpClass::getLocalIp(void)
{
 8001e1a:	b510      	push	{r4, lr}
 8001e1c:	4604      	mov	r4, r0
    #if ACTLOGLEVEL>=LOG_DEBUG_V1
      LogObject.uart_send_strln(F("DhcpClass::getLocalIp(void) DEBUG_V1:Function started"));
    #endif
    return IPAddress(_dhcpipv4struct.LocalIp);
 8001e1e:	310e      	adds	r1, #14
 8001e20:	f001 fd1c 	bl	800385c <_ZN9IPAddressC1EPKh>
}
 8001e24:	4620      	mov	r0, r4
 8001e26:	bd10      	pop	{r4, pc}

08001e28 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask(void)
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	4604      	mov	r4, r0
    #if ACTLOGLEVEL>=LOG_DEBUG_V1
      LogObject.uart_send_strln(F("DhcpClass::getSubnetMask(void) DEBUG_V1:Function started"));
    #endif
    return IPAddress(_dhcpipv4struct.SubnetMask);
 8001e2c:	3112      	adds	r1, #18
 8001e2e:	f001 fd15 	bl	800385c <_ZN9IPAddressC1EPKh>
}
 8001e32:	4620      	mov	r0, r4
 8001e34:	bd10      	pop	{r4, pc}

08001e36 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp(void)
{
 8001e36:	b510      	push	{r4, lr}
 8001e38:	4604      	mov	r4, r0
    #if ACTLOGLEVEL>=LOG_DEBUG_V1
      LogObject.uart_send_strln(F("DhcpClass::getGatewayIp(void) DEBUG_V1:Function started"));
    #endif
    return IPAddress(_dhcpipv4struct.GatewayIp);
 8001e3a:	3116      	adds	r1, #22
 8001e3c:	f001 fd0e 	bl	800385c <_ZN9IPAddressC1EPKh>
}
 8001e40:	4620      	mov	r0, r4
 8001e42:	bd10      	pop	{r4, pc}

08001e44 <_ZN9DhcpClass14getDnsServerIpEv>:
    #endif
    return IPAddress(_dhcpipv4struct.DhcpServerIp);
}

IPAddress DhcpClass::getDnsServerIp(void)
{
 8001e44:	b510      	push	{r4, lr}
 8001e46:	4604      	mov	r4, r0
    #if ACTLOGLEVEL>=LOG_DEBUG_V1
      LogObject.uart_send_strln(F("DhcpClass::getDnsServerIp(void) DEBUG_V1:Function started"));
    #endif
    return IPAddress(_dhcpipv4struct.DnsServerIp);
 8001e48:	311e      	adds	r1, #30
 8001e4a:	f001 fd07 	bl	800385c <_ZN9IPAddressC1EPKh>
}
 8001e4e:	4620      	mov	r0, r4
 8001e50:	bd10      	pop	{r4, pc}

08001e52 <_ZN9DhcpClass9printByteEPch>:
void DhcpClass::printByte(char * buf, uint8_t n ) {
    #if ACTLOGLEVEL>=LOG_DEBUG_V1
      LogObject.uart_send_strln(F("DhcpClass::printByte(char * buf, uint8_t n ) DEBUG_V1:Function started"));
    #endif
  char *str = &buf[1];
  buf[0]='0';
 8001e52:	2330      	movs	r3, #48	; 0x30
 8001e54:	f801 3b01 	strb.w	r3, [r1], #1
  do {
    unsigned long m = n;
    n /= 16;
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f000 030f 	and.w	r3, r0, #15
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	bf94      	ite	ls
 8001e62:	3330      	addls	r3, #48	; 0x30
 8001e64:	3337      	addhi	r3, #55	; 0x37
  } while(n);
 8001e66:	280f      	cmp	r0, #15
    n /= 16;
 8001e68:	ea4f 1212 	mov.w	r2, r2, lsr #4
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
 8001e6c:	f801 3901 	strb.w	r3, [r1], #-1
  } while(n);
 8001e70:	d8f2      	bhi.n	8001e58 <_ZN9DhcpClass9printByteEPch+0x6>
}
 8001e72:	4770      	bx	lr

08001e74 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPh>:
 8001e74:	2300      	movs	r3, #0
 8001e76:	b507      	push	{r0, r1, r2, lr}
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPh+0x18>)
 8001e80:	f001 fce0 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
 8001e84:	b003      	add	sp, #12
 8001e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e8a:	bf00      	nop
 8001e8c:	2000013c 	.word	0x2000013c

08001e90 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>:
{
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e94:	b08e      	sub	sp, #56	; 0x38
 8001e96:	4604      	mov	r4, r0
 8001e98:	4688      	mov	r8, r1
 8001e9a:	4616      	mov	r6, r2
    memset(buffer, 0, 32);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	a806      	add	r0, sp, #24
 8001ea2:	f004 f951 	bl	8006148 <memset>
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address
 8001ea6:	23ff      	movs	r3, #255	; 0xff
 8001ea8:	a802      	add	r0, sp, #8
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4619      	mov	r1, r3
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f001 fcc8 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
class IPAddress : public Printable {
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x168>)
    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
 8001eb6:	f104 0544 	add.w	r5, r4, #68	; 0x44
 8001eba:	9304      	str	r3, [sp, #16]
 8001ebc:	9b03      	ldr	r3, [sp, #12]
 8001ebe:	2243      	movs	r2, #67	; 0x43
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	a904      	add	r1, sp, #16
 8001ec4:	9305      	str	r3, [sp, #20]
 8001ec6:	f001 fad1 	bl	800346c <_ZN6UIPUDP11beginPacketE9IPAddresst>
 8001eca:	3001      	adds	r0, #1
 8001ecc:	f000 8090 	beq.w	8001ff0 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x160>
    buffer[0] = DHCP_BOOTREQUEST;   // op
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x16c>)
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
 8001ed2:	ba76      	rev16	r6, r6
    buffer[0] = DHCP_BOOTREQUEST;   // op
 8001ed4:	9306      	str	r3, [sp, #24]
    unsigned long xid = htonl(_dhcpTransactionId);
 8001ed6:	6863      	ldr	r3, [r4, #4]
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
 8001ed8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001edc:	ba1b      	rev	r3, r3
    memcpy(buffer + 4, &(xid), 4);
 8001ede:	9307      	str	r3, [sp, #28]
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
 8001ee0:	f8ad 6020 	strh.w	r6, [sp, #32]
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
 8001ee4:	f003 fd90 	bl	8005a08 <htons>
    _dhcpUdpSocket.write(buffer, 28);
 8001ee8:	221c      	movs	r2, #28
    memcpy(buffer + 10, &(flags), 2);
 8001eea:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    _dhcpUdpSocket.write(buffer, 28);
 8001eee:	a906      	add	r1, sp, #24
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f001 fb07 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    memset(buffer, 0, 32); // clear local buffer
 8001ef6:	221c      	movs	r2, #28
    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 8001ef8:	4626      	mov	r6, r4
    memset(buffer, 0, 32); // clear local buffer
 8001efa:	2100      	movs	r1, #0
 8001efc:	eb0d 0002 	add.w	r0, sp, r2
 8001f00:	f004 f922 	bl	8006148 <memset>
    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 8001f04:	f856 0f08 	ldr.w	r0, [r6, #8]!
    _dhcpUdpSocket.write(buffer, 16);
 8001f08:	2210      	movs	r2, #16
    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 8001f0a:	88b3      	ldrh	r3, [r6, #4]
 8001f0c:	9006      	str	r0, [sp, #24]
    _dhcpUdpSocket.write(buffer, 16);
 8001f0e:	a906      	add	r1, sp, #24
 8001f10:	4628      	mov	r0, r5
    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 8001f12:	f8ad 301c 	strh.w	r3, [sp, #28]
    _dhcpUdpSocket.write(buffer, 16);
 8001f16:	f001 faf5 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    memset(buffer, 0, 32); // clear local buffer
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	a806      	add	r0, sp, #24
 8001f20:	f004 f912 	bl	8006148 <memset>
 8001f24:	2706      	movs	r7, #6
        _dhcpUdpSocket.write(buffer, 32);
 8001f26:	2220      	movs	r2, #32
 8001f28:	4628      	mov	r0, r5
 8001f2a:	a906      	add	r1, sp, #24
 8001f2c:	f001 faea 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    for(int i = 0; i < 6; i++) {
 8001f30:	3f01      	subs	r7, #1
 8001f32:	d1f8      	bne.n	8001f26 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x96>
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x170>)
    strcpy((char*)&(buffer[18]), HOST_NAME);
 8001f36:	4933      	ldr	r1, [pc, #204]	; (8002004 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x174>)
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
 8001f38:	9306      	str	r3, [sp, #24]
    buffer[4] = dhcpMessageType;
 8001f3a:	f240 1335 	movw	r3, #309	; 0x135
 8001f3e:	f8ad 301c 	strh.w	r3, [sp, #28]
    buffer[7] = dhcpClientIdentifier;
 8001f42:	233d      	movs	r3, #61	; 0x3d
 8001f44:	f88d 301f 	strb.w	r3, [sp, #31]
    buffer[8] = 0x07;
 8001f48:	f240 1307 	movw	r3, #263	; 0x107
 8001f4c:	f8ad 3020 	strh.w	r3, [sp, #32]
    memcpy(buffer + 10, _dhcpMacAddr, 6);
 8001f50:	6833      	ldr	r3, [r6, #0]
    strcpy((char*)&(buffer[18]), HOST_NAME);
 8001f52:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
    memcpy(buffer + 10, _dhcpMacAddr, 6);
 8001f56:	f8cd 3022 	str.w	r3, [sp, #34]	; 0x22
 8001f5a:	88b3      	ldrh	r3, [r6, #4]
    buffer[6] = messageType; //DHCP_REQUEST;
 8001f5c:	f88d 801e 	strb.w	r8, [sp, #30]
    memcpy(buffer + 10, _dhcpMacAddr, 6);
 8001f60:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    buffer[16] = hostName;
 8001f64:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001f68:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    strcpy((char*)&(buffer[18]), HOST_NAME);
 8001f6c:	f004 fa43 	bl	80063f6 <strcpy>
    printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
 8001f70:	4620      	mov	r0, r4
 8001f72:	7ae2      	ldrb	r2, [r4, #11]
 8001f74:	a90c      	add	r1, sp, #48	; 0x30
 8001f76:	f7ff ff6c 	bl	8001e52 <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	7b22      	ldrb	r2, [r4, #12]
 8001f7e:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8001f82:	f7ff ff66 	bl	8001e52 <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
 8001f86:	4620      	mov	r0, r4
 8001f88:	7b62      	ldrb	r2, [r4, #13]
 8001f8a:	a90d      	add	r1, sp, #52	; 0x34
 8001f8c:	f7ff ff61 	bl	8001e52 <_ZN9DhcpClass9printByteEPch>
    _dhcpUdpSocket.write(buffer, 30);
 8001f90:	221e      	movs	r2, #30
 8001f92:	4628      	mov	r0, r5
 8001f94:	a906      	add	r1, sp, #24
 8001f96:	f001 fab5 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    if(messageType == DHCP_REQUEST)
 8001f9a:	f1b8 0f03 	cmp.w	r8, #3
 8001f9e:	d118      	bne.n	8001fd2 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x142>
        buffer[0] = dhcpRequestedIPaddr;
 8001fa0:	f240 4332 	movw	r3, #1074	; 0x432
 8001fa4:	f8ad 3018 	strh.w	r3, [sp, #24]
        buffer[2] = _dhcpipv4struct.LocalIp[0];
 8001fa8:	89e3      	ldrh	r3, [r4, #14]
        _dhcpUdpSocket.write(buffer, 12);
 8001faa:	220c      	movs	r2, #12
        buffer[2] = _dhcpipv4struct.LocalIp[0];
 8001fac:	f8ad 301a 	strh.w	r3, [sp, #26]
        buffer[4] = _dhcpipv4struct.LocalIp[2];
 8001fb0:	8a23      	ldrh	r3, [r4, #16]
        _dhcpUdpSocket.write(buffer, 12);
 8001fb2:	4628      	mov	r0, r5
        buffer[4] = _dhcpipv4struct.LocalIp[2];
 8001fb4:	f8ad 301c 	strh.w	r3, [sp, #28]
        buffer[6] = dhcpServerIdentifier;
 8001fb8:	f240 4336 	movw	r3, #1078	; 0x436
 8001fbc:	f8ad 301e 	strh.w	r3, [sp, #30]
        buffer[8] = _dhcpipv4struct.DhcpServerIp[0];
 8001fc0:	8b63      	ldrh	r3, [r4, #26]
        _dhcpUdpSocket.write(buffer, 12);
 8001fc2:	a906      	add	r1, sp, #24
        buffer[8] = _dhcpipv4struct.DhcpServerIp[0];
 8001fc4:	f8ad 3020 	strh.w	r3, [sp, #32]
        buffer[10] = _dhcpipv4struct.DhcpServerIp[2];
 8001fc8:	8ba3      	ldrh	r3, [r4, #28]
 8001fca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        _dhcpUdpSocket.write(buffer, 12);
 8001fce:	f001 fa99 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    buffer[4] = dns;
 8001fd2:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x178>)
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x17c>)
    _dhcpUdpSocket.write(buffer, 9);
 8001fd6:	4628      	mov	r0, r5
    buffer[4] = dns;
 8001fd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    buffer[8] = endOption;
 8001fdc:	23ff      	movs	r3, #255	; 0xff
    _dhcpUdpSocket.write(buffer, 9);
 8001fde:	2209      	movs	r2, #9
 8001fe0:	a906      	add	r1, sp, #24
    buffer[8] = endOption;
 8001fe2:	f88d 3020 	strb.w	r3, [sp, #32]
    _dhcpUdpSocket.write(buffer, 9);
 8001fe6:	f001 fa8d 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    _dhcpUdpSocket.endPacket();
 8001fea:	4628      	mov	r0, r5
 8001fec:	f001 fbc2 	bl	8003774 <_ZN6UIPUDP9endPacketEv>
}
 8001ff0:	b00e      	add	sp, #56	; 0x38
 8001ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08007404 	.word	0x08007404
 8001ffc:	00060101 	.word	0x00060101
 8002000:	63538263 	.word	0x63538263
 8002004:	080072c0 	.word	0x080072c0
 8002008:	03010637 	.word	0x03010637
 800200c:	3b3a0f06 	.word	0x3b3a0f06

08002010 <_ZN9DhcpClass17parseDHCPResponseERm>:
{
 8002010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002014:	b094      	sub	sp, #80	; 0x50
 8002016:	4605      	mov	r5, r0
 8002018:	460f      	mov	r7, r1
    unsigned long startTime = millis();
 800201a:	f001 fdcf 	bl	8003bbc <millis>
 800201e:	4606      	mov	r6, r0
    while(_dhcpUdpSocket.parsePacket() <= 0)
 8002020:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8002024:	4620      	mov	r0, r4
 8002026:	f001 fa7e 	bl	8003526 <_ZN6UIPUDP11parsePacketEv>
 800202a:	2800      	cmp	r0, #0
 800202c:	dc0a      	bgt.n	8002044 <_ZN9DhcpClass17parseDHCPResponseERm+0x34>
        if((millis() - startTime) > DHCP_RESPONSE_TIMEOUT)
 800202e:	f001 fdc5 	bl	8003bbc <millis>
 8002032:	1b80      	subs	r0, r0, r6
 8002034:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8002038:	f200 8127 	bhi.w	800228a <_ZN9DhcpClass17parseDHCPResponseERm+0x27a>
        delay(50);
 800203c:	2032      	movs	r0, #50	; 0x32
 800203e:	f7fe fd6f 	bl	8000b20 <HAL_Delay>
    while(_dhcpUdpSocket.parsePacket() <= 0)
 8002042:	e7ef      	b.n	8002024 <_ZN9DhcpClass17parseDHCPResponseERm+0x14>
    _dhcpUdpSocket.read((char*)&fixedMsg, sizeof(RIP_MSG_FIXED));
 8002044:	2224      	movs	r2, #36	; 0x24
 8002046:	4620      	mov	r0, r4
 8002048:	a90b      	add	r1, sp, #44	; 0x2c
 800204a:	f7ff fedb 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
 800204e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002052:	2b02      	cmp	r3, #2
 8002054:	f040 8114 	bne.w	8002280 <_ZN9DhcpClass17parseDHCPResponseERm+0x270>
 8002058:	4620      	mov	r0, r4
 800205a:	f001 f9d7 	bl	800340c <_ZN6UIPUDP10remotePortEv>
 800205e:	2843      	cmp	r0, #67	; 0x43
 8002060:	f040 810e 	bne.w	8002280 <_ZN9DhcpClass17parseDHCPResponseERm+0x270>
        transactionId = ntohl(fixedMsg.xid);
 8002064:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
 8002066:	2206      	movs	r2, #6
 8002068:	ba36      	rev	r6, r6
        transactionId = ntohl(fixedMsg.xid);
 800206a:	603e      	str	r6, [r7, #0]
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
 800206c:	f105 0108 	add.w	r1, r5, #8
 8002070:	a812      	add	r0, sp, #72	; 0x48
 8002072:	f004 f84d 	bl	8006110 <memcmp>
 8002076:	b928      	cbnz	r0, 8002084 <_ZN9DhcpClass17parseDHCPResponseERm+0x74>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	429e      	cmp	r6, r3
 800207c:	d302      	bcc.n	8002084 <_ZN9DhcpClass17parseDHCPResponseERm+0x74>
 800207e:	686b      	ldr	r3, [r5, #4]
 8002080:	429e      	cmp	r6, r3
 8002082:	d907      	bls.n	8002094 <_ZN9DhcpClass17parseDHCPResponseERm+0x84>
            _dhcpUdpSocket.flush();
 8002084:	4620      	mov	r0, r4
 8002086:	f001 f9e3 	bl	8003450 <_ZN6UIPUDP5flushEv>
            return 0;
 800208a:	2600      	movs	r6, #0
}
 800208c:	4630      	mov	r0, r6
 800208e:	b014      	add	sp, #80	; 0x50
 8002090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(_dhcpipv4struct.LocalIp, fixedMsg.yiaddr, 4);
 8002094:	26cc      	movs	r6, #204	; 0xcc
 8002096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002098:	f8c5 300e 	str.w	r3, [r5, #14]
            _dhcpUdpSocket.read(); // we don't care about the returned byte
 800209c:	4620      	mov	r0, r4
 800209e:	f001 f987 	bl	80033b0 <_ZN6UIPUDP4readEv>
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
 80020a2:	3e01      	subs	r6, #1
 80020a4:	d1fa      	bne.n	800209c <_ZN9DhcpClass17parseDHCPResponseERm+0x8c>
                    _dhcpUdpSocket.read((char*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
 80020a6:	f105 0724 	add.w	r7, r5, #36	; 0x24
                    _dhcpUdpSocket.read((char*)&_dhcpT2, sizeof(_dhcpT2));
 80020aa:	f105 082c 	add.w	r8, r5, #44	; 0x2c
        while (_dhcpUdpSocket.available() > 0) 
 80020ae:	4620      	mov	r0, r4
 80020b0:	f001 fa4c 	bl	800354c <_ZN6UIPUDP9availableEv>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	f340 80e4 	ble.w	8002282 <_ZN9DhcpClass17parseDHCPResponseERm+0x272>
            switch (_dhcpUdpSocket.read()) 
 80020ba:	4620      	mov	r0, r4
 80020bc:	f001 f978 	bl	80033b0 <_ZN6UIPUDP4readEv>
 80020c0:	283b      	cmp	r0, #59	; 0x3b
 80020c2:	dc3f      	bgt.n	8002144 <_ZN9DhcpClass17parseDHCPResponseERm+0x134>
 80020c4:	2832      	cmp	r0, #50	; 0x32
 80020c6:	dc11      	bgt.n	80020ec <_ZN9DhcpClass17parseDHCPResponseERm+0xdc>
 80020c8:	2806      	cmp	r0, #6
 80020ca:	d927      	bls.n	800211c <_ZN9DhcpClass17parseDHCPResponseERm+0x10c>
                    opt_len = _dhcpUdpSocket.read();
 80020cc:	4620      	mov	r0, r4
 80020ce:	f001 f96f 	bl	80033b0 <_ZN6UIPUDP4readEv>
 80020d2:	fa5f f980 	uxtb.w	r9, r0
                    while (opt_len--)
 80020d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80020da:	fa5f f989 	uxtb.w	r9, r9
 80020de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80020e2:	d0e4      	beq.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                        _dhcpUdpSocket.read();
 80020e4:	4620      	mov	r0, r4
 80020e6:	f001 f963 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    while (opt_len--)
 80020ea:	e7f4      	b.n	80020d6 <_ZN9DhcpClass17parseDHCPResponseERm+0xc6>
 80020ec:	3833      	subs	r0, #51	; 0x33
 80020ee:	2808      	cmp	r0, #8
 80020f0:	d8ec      	bhi.n	80020cc <_ZN9DhcpClass17parseDHCPResponseERm+0xbc>
 80020f2:	a301      	add	r3, pc, #4	; (adr r3, 80020f8 <_ZN9DhcpClass17parseDHCPResponseERm+0xe8>)
 80020f4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80020f8:	08002267 	.word	0x08002267
 80020fc:	080020cd 	.word	0x080020cd
 8002100:	0800214b 	.word	0x0800214b
 8002104:	080021d1 	.word	0x080021d1
 8002108:	080020cd 	.word	0x080020cd
 800210c:	080020cd 	.word	0x080020cd
 8002110:	080020cd 	.word	0x080020cd
 8002114:	08002235 	.word	0x08002235
 8002118:	0800224f 	.word	0x0800224f
 800211c:	2806      	cmp	r0, #6
 800211e:	d8d5      	bhi.n	80020cc <_ZN9DhcpClass17parseDHCPResponseERm+0xbc>
 8002120:	a301      	add	r3, pc, #4	; (adr r3, 8002128 <_ZN9DhcpClass17parseDHCPResponseERm+0x118>)
 8002122:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8002126:	bf00      	nop
 8002128:	080020af 	.word	0x080020af
 800212c:	0800215b 	.word	0x0800215b
 8002130:	080020cd 	.word	0x080020cd
 8002134:	0800216f 	.word	0x0800216f
 8002138:	080020cd 	.word	0x080020cd
 800213c:	080020cd 	.word	0x080020cd
 8002140:	0800219f 	.word	0x0800219f
            switch (_dhcpUdpSocket.read()) 
 8002144:	28ff      	cmp	r0, #255	; 0xff
 8002146:	d0b2      	beq.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
 8002148:	e7c0      	b.n	80020cc <_ZN9DhcpClass17parseDHCPResponseERm+0xbc>
                    opt_len = _dhcpUdpSocket.read();
 800214a:	4620      	mov	r0, r4
 800214c:	f001 f930 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    type = _dhcpUdpSocket.read();
 8002150:	4620      	mov	r0, r4
 8002152:	f001 f92d 	bl	80033b0 <_ZN6UIPUDP4readEv>
 8002156:	b2c6      	uxtb	r6, r0
                    break;
 8002158:	e7a9      	b.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                    opt_len = _dhcpUdpSocket.read();
 800215a:	4620      	mov	r0, r4
 800215c:	f001 f928 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    _dhcpUdpSocket.read((char*)_dhcpipv4struct.SubnetMask, 4);
 8002160:	2204      	movs	r2, #4
 8002162:	f105 0112 	add.w	r1, r5, #18
                        _dhcpUdpSocket.read((char*)_dhcpipv4struct.DhcpServerIp, sizeof(_dhcpipv4struct.DhcpServerIp));
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff fe4c 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
 800216c:	e79f      	b.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                    opt_len = _dhcpUdpSocket.read();
 800216e:	4620      	mov	r0, r4
 8002170:	f001 f91e 	bl	80033b0 <_ZN6UIPUDP4readEv>
 8002174:	4681      	mov	r9, r0
                    _dhcpUdpSocket.read((char*)_dhcpipv4struct.GatewayIp, 4);
 8002176:	2204      	movs	r2, #4
 8002178:	4620      	mov	r0, r4
 800217a:	f105 0116 	add.w	r1, r5, #22
 800217e:	f7ff fe41 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
                    for (int i = 0; i < opt_len-4; i++)
 8002182:	f04f 0a00 	mov.w	sl, #0
 8002186:	fa5f f989 	uxtb.w	r9, r9
 800218a:	f1a9 0904 	sub.w	r9, r9, #4
 800218e:	45d1      	cmp	r9, sl
 8002190:	dd8d      	ble.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                        _dhcpUdpSocket.read();
 8002192:	4620      	mov	r0, r4
 8002194:	f001 f90c 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    for (int i = 0; i < opt_len-4; i++)
 8002198:	f10a 0a01 	add.w	sl, sl, #1
 800219c:	e7f7      	b.n	800218e <_ZN9DhcpClass17parseDHCPResponseERm+0x17e>
                    opt_len = _dhcpUdpSocket.read();
 800219e:	4620      	mov	r0, r4
 80021a0:	f001 f906 	bl	80033b0 <_ZN6UIPUDP4readEv>
 80021a4:	4681      	mov	r9, r0
                    _dhcpUdpSocket.read((char*)_dhcpipv4struct.DnsServerIp, 4);
 80021a6:	2204      	movs	r2, #4
 80021a8:	4620      	mov	r0, r4
 80021aa:	f105 011e 	add.w	r1, r5, #30
 80021ae:	f7ff fe29 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
                    for (int i = 0; i < opt_len-4; i++)
 80021b2:	f04f 0a00 	mov.w	sl, #0
 80021b6:	fa5f f989 	uxtb.w	r9, r9
 80021ba:	f1a9 0904 	sub.w	r9, r9, #4
 80021be:	45d1      	cmp	r9, sl
 80021c0:	f77f af75 	ble.w	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                        _dhcpUdpSocket.read();
 80021c4:	4620      	mov	r0, r4
 80021c6:	f001 f8f3 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    for (int i = 0; i < opt_len-4; i++)
 80021ca:	f10a 0a01 	add.w	sl, sl, #1
 80021ce:	e7f6      	b.n	80021be <_ZN9DhcpClass17parseDHCPResponseERm+0x1ae>
                    opt_len = _dhcpUdpSocket.read();
 80021d0:	4620      	mov	r0, r4
 80021d2:	f001 f8ed 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    if( IPAddress(_dhcpipv4struct.DhcpServerIp) == IPAddress(0,0,0,0) ||
 80021d6:	f105 0a1a 	add.w	sl, r5, #26
 80021da:	4651      	mov	r1, sl
                    opt_len = _dhcpUdpSocket.read();
 80021dc:	4681      	mov	r9, r0
                    if( IPAddress(_dhcpipv4struct.DhcpServerIp) == IPAddress(0,0,0,0) ||
 80021de:	a803      	add	r0, sp, #12
 80021e0:	f001 fb3c 	bl	800385c <_ZN9IPAddressC1EPKh>
 80021e4:	2300      	movs	r3, #0
 80021e6:	a805      	add	r0, sp, #20
 80021e8:	461a      	mov	r2, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f001 fb29 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
 80021f2:	9a04      	ldr	r2, [sp, #16]
 80021f4:	9b06      	ldr	r3, [sp, #24]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d00b      	beq.n	8002212 <_ZN9DhcpClass17parseDHCPResponseERm+0x202>
                        IPAddress(_dhcpipv4struct.DhcpServerIp) == _dhcpUdpSocket.remoteIP() )
 80021fa:	4651      	mov	r1, sl
 80021fc:	a807      	add	r0, sp, #28
 80021fe:	f001 fb2d 	bl	800385c <_ZN9IPAddressC1EPKh>
 8002202:	4621      	mov	r1, r4
 8002204:	a809      	add	r0, sp, #36	; 0x24
 8002206:	f001 f9e8 	bl	80035da <_ZN6UIPUDP8remoteIPEv>
                    if( IPAddress(_dhcpipv4struct.DhcpServerIp) == IPAddress(0,0,0,0) ||
 800220a:	9a08      	ldr	r2, [sp, #32]
 800220c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800220e:	429a      	cmp	r2, r3
 8002210:	d102      	bne.n	8002218 <_ZN9DhcpClass17parseDHCPResponseERm+0x208>
                        _dhcpUdpSocket.read((char*)_dhcpipv4struct.DhcpServerIp, sizeof(_dhcpipv4struct.DhcpServerIp));
 8002212:	2204      	movs	r2, #4
 8002214:	4651      	mov	r1, sl
 8002216:	e7a6      	b.n	8002166 <_ZN9DhcpClass17parseDHCPResponseERm+0x156>
                    opt_len = _dhcpUdpSocket.read();
 8002218:	fa5f f989 	uxtb.w	r9, r9
                        while (opt_len--)
 800221c:	f109 39ff 	add.w	r9, r9, #4294967295
 8002220:	fa5f f989 	uxtb.w	r9, r9
 8002224:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8002228:	f43f af41 	beq.w	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                            _dhcpUdpSocket.read();
 800222c:	4620      	mov	r0, r4
 800222e:	f001 f8bf 	bl	80033b0 <_ZN6UIPUDP4readEv>
                        while (opt_len--)
 8002232:	e7f3      	b.n	800221c <_ZN9DhcpClass17parseDHCPResponseERm+0x20c>
                    opt_len = _dhcpUdpSocket.read();
 8002234:	4620      	mov	r0, r4
 8002236:	f001 f8bb 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    _dhcpUdpSocket.read((char*)&_dhcpT1, sizeof(_dhcpT1));
 800223a:	2204      	movs	r2, #4
 800223c:	4620      	mov	r0, r4
 800223e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002242:	f7ff fddf 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
                    _dhcpT1 = ntohl(_dhcpT1);
 8002246:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002248:	ba1b      	rev	r3, r3
 800224a:	62ab      	str	r3, [r5, #40]	; 0x28
                    break;
 800224c:	e72f      	b.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                    opt_len = _dhcpUdpSocket.read();
 800224e:	4620      	mov	r0, r4
 8002250:	f001 f8ae 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    _dhcpUdpSocket.read((char*)&_dhcpT2, sizeof(_dhcpT2));
 8002254:	2204      	movs	r2, #4
 8002256:	4641      	mov	r1, r8
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff fdd3 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
                    _dhcpT2 = ntohl(_dhcpT2);
 800225e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002260:	ba1b      	rev	r3, r3
 8002262:	62eb      	str	r3, [r5, #44]	; 0x2c
                    break;
 8002264:	e723      	b.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
                    opt_len = _dhcpUdpSocket.read();
 8002266:	4620      	mov	r0, r4
 8002268:	f001 f8a2 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    _dhcpUdpSocket.read((char*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
 800226c:	2204      	movs	r2, #4
 800226e:	4639      	mov	r1, r7
 8002270:	4620      	mov	r0, r4
 8002272:	f7ff fdc7 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
                    _dhcpLeaseTime = ntohl(_dhcpLeaseTime);
 8002276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002278:	ba1b      	rev	r3, r3
 800227a:	626b      	str	r3, [r5, #36]	; 0x24
                    _renewInSec = _dhcpLeaseTime;
 800227c:	632b      	str	r3, [r5, #48]	; 0x30
                    break;
 800227e:	e716      	b.n	80020ae <_ZN9DhcpClass17parseDHCPResponseERm+0x9e>
    uint8_t type = 0;
 8002280:	2600      	movs	r6, #0
    _dhcpUdpSocket.flush();
 8002282:	4620      	mov	r0, r4
 8002284:	f001 f8e4 	bl	8003450 <_ZN6UIPUDP5flushEv>
    return type;
 8002288:	e700      	b.n	800208c <_ZN9DhcpClass17parseDHCPResponseERm+0x7c>
            return 255;
 800228a:	26ff      	movs	r6, #255	; 0xff
 800228c:	e6fe      	b.n	800208c <_ZN9DhcpClass17parseDHCPResponseERm+0x7c>
 800228e:	bf00      	nop

08002290 <_ZN9DhcpClass18request_DHCP_leaseEv>:
int DhcpClass::request_DHCP_lease(void){
 8002290:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002294:	4604      	mov	r4, r0
       _dhcpTransactionId = (rand() % 2000UL) + 1;
 8002296:	f004 f805 	bl	80062a4 <rand>
 800229a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800229e:	fbb0 f2f3 	udiv	r2, r0, r3
    _dhcpInitialTransactionId = _dhcpTransactionId;
 80022a2:	46a0      	mov	r8, r4
       _dhcpTransactionId = (rand() % 2000UL) + 1;
 80022a4:	fb02 0313 	mls	r3, r2, r3, r0
 80022a8:	3301      	adds	r3, #1
 80022aa:	6063      	str	r3, [r4, #4]
    _dhcpInitialTransactionId = _dhcpTransactionId;
 80022ac:	f848 3b44 	str.w	r3, [r8], #68
    _dhcpUdpSocket.stop();
 80022b0:	4640      	mov	r0, r8
 80022b2:	f001 f8b5 	bl	8003420 <_ZN6UIPUDP4stopEv>
    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
 80022b6:	2144      	movs	r1, #68	; 0x44
 80022b8:	4640      	mov	r0, r8
 80022ba:	f001 f88d 	bl	80033d8 <_ZN6UIPUDP5beginEt>
 80022be:	4606      	mov	r6, r0
 80022c0:	b368      	cbz	r0, 800231e <_ZN9DhcpClass18request_DHCP_leaseEv+0x8e>
    unsigned long startTime = millis();
 80022c2:	f001 fc7b 	bl	8003bbc <millis>
int DhcpClass::request_DHCP_lease(void){
 80022c6:	f04f 0900 	mov.w	r9, #0
    unsigned long startTime = millis();
 80022ca:	4607      	mov	r7, r0
int DhcpClass::request_DHCP_lease(void){
 80022cc:	2600      	movs	r6, #0
                _dhcp_state = STATE_DHCP_LEASED;
 80022ce:	f04f 0a03 	mov.w	sl, #3
    while(_dhcp_state != STATE_DHCP_LEASED)
 80022d2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d01b      	beq.n	8002312 <_ZN9DhcpClass18request_DHCP_leaseEv+0x82>
        if(_dhcp_state == STATE_DHCP_START)
 80022da:	bb23      	cbnz	r3, 8002326 <_ZN9DhcpClass18request_DHCP_leaseEv+0x96>
            _dhcpTransactionId++;
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	6063      	str	r3, [r4, #4]
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
 80022e2:	f001 fc6b 	bl	8003bbc <millis>
 80022e6:	1bc2      	subs	r2, r0, r7
 80022e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ec:	fbb2 f2f0 	udiv	r2, r2, r0
 80022f0:	2101      	movs	r1, #1
 80022f2:	4620      	mov	r0, r4
 80022f4:	b292      	uxth	r2, r2
 80022f6:	f7ff fdcb 	bl	8001e90 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
            _dhcp_state = STATE_DHCP_DISCOVER;
 80022fa:	2301      	movs	r3, #1
            _dhcp_state = STATE_DHCP_REQUEST;
 80022fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        if(result != 1 && ((millis() - startTime) > DHCP_TIMEOUT))
 8002300:	2e00      	cmp	r6, #0
 8002302:	d1e6      	bne.n	80022d2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x42>
 8002304:	f001 fc5a 	bl	8003bbc <millis>
 8002308:	f64e 2360 	movw	r3, #60000	; 0xea60
 800230c:	1bc0      	subs	r0, r0, r7
 800230e:	4298      	cmp	r0, r3
 8002310:	d9dc      	bls.n	80022cc <_ZN9DhcpClass18request_DHCP_leaseEv+0x3c>
    _dhcpUdpSocket.stop();
 8002312:	4640      	mov	r0, r8
 8002314:	f001 f884 	bl	8003420 <_ZN6UIPUDP4stopEv>
    _dhcpTransactionId++;
 8002318:	6863      	ldr	r3, [r4, #4]
 800231a:	3301      	adds	r3, #1
 800231c:	6063      	str	r3, [r4, #4]
}
 800231e:	4630      	mov	r0, r6
 8002320:	b002      	add	sp, #8
 8002322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(_dhcp_state == STATE_DHCP_REREQUEST){
 8002326:	2b04      	cmp	r3, #4
 8002328:	d110      	bne.n	800234c <_ZN9DhcpClass18request_DHCP_leaseEv+0xbc>
            _dhcpTransactionId++;
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	3301      	adds	r3, #1
 800232e:	6063      	str	r3, [r4, #4]
            send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
 8002330:	f001 fc44 	bl	8003bbc <millis>
 8002334:	1bc2      	subs	r2, r0, r7
 8002336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233a:	fbb2 f2f0 	udiv	r2, r2, r0
 800233e:	2103      	movs	r1, #3
 8002340:	4620      	mov	r0, r4
 8002342:	b292      	uxth	r2, r2
 8002344:	f7ff fda4 	bl	8001e90 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
            _dhcp_state = STATE_DHCP_REQUEST;
 8002348:	2302      	movs	r3, #2
 800234a:	e7d7      	b.n	80022fc <_ZN9DhcpClass18request_DHCP_leaseEv+0x6c>
        else if(_dhcp_state == STATE_DHCP_DISCOVER)
 800234c:	2b01      	cmp	r3, #1
 800234e:	d117      	bne.n	8002380 <_ZN9DhcpClass18request_DHCP_leaseEv+0xf0>
            messageType = parseDHCPResponse(respId);
 8002350:	4620      	mov	r0, r4
 8002352:	a901      	add	r1, sp, #4
 8002354:	f7ff fe5c 	bl	8002010 <_ZN9DhcpClass17parseDHCPResponseERm>
            if(messageType == DHCP_OFFER)
 8002358:	2802      	cmp	r0, #2
            messageType = parseDHCPResponse(respId);
 800235a:	4605      	mov	r5, r0
            if(messageType == DHCP_OFFER)
 800235c:	d134      	bne.n	80023c8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x138>
                _dhcpTransactionId = respId;
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	6063      	str	r3, [r4, #4]
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
 8002362:	f001 fc2b 	bl	8003bbc <millis>
 8002366:	1bc2      	subs	r2, r0, r7
 8002368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236c:	fbb2 f2f0 	udiv	r2, r2, r0
 8002370:	2103      	movs	r1, #3
 8002372:	4620      	mov	r0, r4
 8002374:	b292      	uxth	r2, r2
 8002376:	f7ff fd8b 	bl	8001e90 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
                _dhcp_state = STATE_DHCP_REQUEST;
 800237a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 800237e:	e7bf      	b.n	8002300 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
        else if(_dhcp_state == STATE_DHCP_REQUEST)
 8002380:	2b02      	cmp	r3, #2
 8002382:	d1bd      	bne.n	8002300 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
            messageType = parseDHCPResponse(respId);
 8002384:	4620      	mov	r0, r4
 8002386:	a901      	add	r1, sp, #4
 8002388:	f7ff fe42 	bl	8002010 <_ZN9DhcpClass17parseDHCPResponseERm>
            if(messageType == DHCP_ACK)
 800238c:	2805      	cmp	r0, #5
            messageType = parseDHCPResponse(respId);
 800238e:	4605      	mov	r5, r0
            if(messageType == DHCP_ACK)
 8002390:	d115      	bne.n	80023be <_ZN9DhcpClass18request_DHCP_leaseEv+0x12e>
                if(_dhcpLeaseTime == 0){
 8002392:	6a63      	ldr	r3, [r4, #36]	; 0x24
                _dhcp_state = STATE_DHCP_LEASED;
 8002394:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
                if(_dhcpLeaseTime == 0){
 8002398:	b913      	cbnz	r3, 80023a0 <_ZN9DhcpClass18request_DHCP_leaseEv+0x110>
                    _dhcpLeaseTime = DEFAULT_LEASE;
 800239a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800239e:	6263      	str	r3, [r4, #36]	; 0x24
                if(_dhcpT1 == 0){
 80023a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023a2:	b913      	cbnz	r3, 80023aa <_ZN9DhcpClass18request_DHCP_leaseEv+0x11a>
                    _dhcpT1 = _dhcpLeaseTime >> 1;
 80023a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	62a3      	str	r3, [r4, #40]	; 0x28
                if(_dhcpT2 == 0){
 80023aa:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 80023ae:	b90a      	cbnz	r2, 80023b4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x124>
                    _dhcpT2 = _dhcpT1 << 1;
 80023b0:	005a      	lsls	r2, r3, #1
 80023b2:	62e2      	str	r2, [r4, #44]	; 0x2c
                _renewInSec = _dhcpT1;
 80023b4:	6323      	str	r3, [r4, #48]	; 0x30
                _rebindInSec = _dhcpT2;
 80023b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                result = 1;
 80023b8:	2601      	movs	r6, #1
                _rebindInSec = _dhcpT2;
 80023ba:	6363      	str	r3, [r4, #52]	; 0x34
 80023bc:	e789      	b.n	80022d2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x42>
            else if(messageType == DHCP_NAK)
 80023be:	2806      	cmp	r0, #6
 80023c0:	d102      	bne.n	80023c8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x138>
            _dhcp_state = STATE_DHCP_START;
 80023c2:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80023c6:	e79b      	b.n	8002300 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
        if(messageType == 255)
 80023c8:	2dff      	cmp	r5, #255	; 0xff
 80023ca:	d0fa      	beq.n	80023c2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x132>
 80023cc:	e798      	b.n	8002300 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>

080023ce <_ZN9DhcpClass13beginWithDHCPEPh>:
{
 80023ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _dhcpLeaseTime=0;
 80023d0:	2500      	movs	r5, #0
{
 80023d2:	460e      	mov	r6, r1
 80023d4:	4604      	mov	r4, r0
    _dhcpT1=0;
 80023d6:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
    _dhcpT2=0;
 80023da:	62c5      	str	r5, [r0, #44]	; 0x2c
    _lastCheck=0;
 80023dc:	6385      	str	r5, [r0, #56]	; 0x38
    memset(_dhcpMacAddr, 0, 6); 
 80023de:	6085      	str	r5, [r0, #8]
 80023e0:	8185      	strh	r5, [r0, #12]
    reset_DHCP_lease();
 80023e2:	f7ff fd15 	bl	8001e10 <_ZN9DhcpClass16reset_DHCP_leaseEv>
    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 80023e6:	6833      	ldr	r3, [r6, #0]
    return request_DHCP_lease();
 80023e8:	4620      	mov	r0, r4
    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 80023ea:	60a3      	str	r3, [r4, #8]
 80023ec:	88b3      	ldrh	r3, [r6, #4]
    _dhcp_state = STATE_DHCP_START;
 80023ee:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 80023f2:	81a3      	strh	r3, [r4, #12]
}
 80023f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return request_DHCP_lease();
 80023f8:	f7ff bf4a 	b.w	8002290 <_ZN9DhcpClass18request_DHCP_leaseEv>

080023fc <_ZN9DNSClient5beginERK9IPAddress>:
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
 80023fc:	684b      	ldr	r3, [r1, #4]
 80023fe:	6043      	str	r3, [r0, #4]
    iRequestId = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	8103      	strh	r3, [r0, #8]
}
 8002404:	4770      	bx	lr

08002406 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
 8002406:	3901      	subs	r1, #1
{
 8002408:	4608      	mov	r0, r1
 800240a:	b530      	push	{r4, r5, lr}
    while (*p && ( (*p == '.') || ((*p >= '0') && (*p <= '9')) ))
 800240c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002410:	b133      	cbz	r3, 8002420 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
 8002412:	2b2e      	cmp	r3, #46	; 0x2e
 8002414:	d0fa      	beq.n	800240c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x6>
 8002416:	3b30      	subs	r3, #48	; 0x30
 8002418:	2b09      	cmp	r3, #9
 800241a:	d9f7      	bls.n	800240c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x6>
            return 1;
        }
    }
    else
    {
        return 0;
 800241c:	2000      	movs	r0, #0
    }
}
 800241e:	bd30      	pop	{r4, r5, pc}
 8002420:	4618      	mov	r0, r3
                segmentValue = (segmentValue*10)+(*p - '0');
 8002422:	250a      	movs	r5, #10
        while (*p && (segment < 4))
 8002424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002428:	b174      	cbz	r4, 8002448 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x42>
 800242a:	2803      	cmp	r0, #3
 800242c:	dcf6      	bgt.n	800241c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
            if (*p == '.')
 800242e:	2c2e      	cmp	r4, #46	; 0x2e
 8002430:	d106      	bne.n	8002440 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x3a>
                if (segmentValue > 255)
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	dcf2      	bgt.n	800241c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
                    aResult[segment] = (uint8_t)segmentValue;
 8002436:	1814      	adds	r4, r2, r0
 8002438:	7123      	strb	r3, [r4, #4]
                    segment++;
 800243a:	3001      	adds	r0, #1
                    segmentValue = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	e7f1      	b.n	8002424 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1e>
                segmentValue = (segmentValue*10)+(*p - '0');
 8002440:	3c30      	subs	r4, #48	; 0x30
 8002442:	fb05 4303 	mla	r3, r5, r3, r4
        while (*p && (segment < 4))
 8002446:	e7ed      	b.n	8002424 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1e>
        if ((segmentValue > 255) || (segment > 3))
 8002448:	2bff      	cmp	r3, #255	; 0xff
 800244a:	dce7      	bgt.n	800241c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
 800244c:	2803      	cmp	r0, #3
 800244e:	dce5      	bgt.n	800241c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
            aResult[segment] = (uint8_t)segmentValue;
 8002450:	4402      	add	r2, r0
 8002452:	7113      	strb	r3, [r2, #4]
            return 1;
 8002454:	2001      	movs	r0, #1
 8002456:	e7e2      	b.n	800241e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x18>

08002458 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
const IPAddress INADDR_NONE(0,0,0,0);
 8002458:	2300      	movs	r3, #0
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
 800245a:	b507      	push	{r0, r1, r2, lr}
 800245c:	461a      	mov	r2, r3
 800245e:	4619      	mov	r1, r3
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress+0x18>)
 8002464:	f001 f9ee 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
 8002468:	b003      	add	sp, #12
 800246a:	f85d fb04 	ldr.w	pc, [sp], #4
 800246e:	bf00      	nop
 8002470:	20000144 	.word	0x20000144

08002474 <_ZN9DNSClient12BuildRequestEPKc>:
{
 8002474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002478:	4606      	mov	r6, r0
 800247a:	460d      	mov	r5, r1
    iRequestId = millis(); // generate a random ID
 800247c:	f001 fb9e 	bl	8003bbc <millis>
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
 8002480:	f106 040c 	add.w	r4, r6, #12
 8002484:	2202      	movs	r2, #2
 8002486:	f106 0108 	add.w	r1, r6, #8
    iRequestId = millis(); // generate a random ID
 800248a:	8130      	strh	r0, [r6, #8]
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
 800248c:	4620      	mov	r0, r4
 800248e:	f001 f839 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
 8002492:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002496:	f003 fab7 	bl	8005a08 <htons>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 800249a:	2202      	movs	r2, #2
 800249c:	f10d 0106 	add.w	r1, sp, #6
    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
 80024a0:	f8ad 0006 	strh.w	r0, [sp, #6]
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024a4:	4620      	mov	r0, r4
 80024a6:	f001 f82d 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    twoByteBuffer = htons(1);  // One question record
 80024aa:	2001      	movs	r0, #1
 80024ac:	f003 faac 	bl	8005a08 <htons>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024b0:	2202      	movs	r2, #2
    twoByteBuffer = htons(1);  // One question record
 80024b2:	f8ad 0006 	strh.w	r0, [sp, #6]
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024b6:	f10d 0106 	add.w	r1, sp, #6
 80024ba:	4620      	mov	r0, r4
 80024bc:	f001 f822 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    twoByteBuffer = 0;  // Zero answer records
 80024c0:	2300      	movs	r3, #0
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024c2:	2202      	movs	r2, #2
 80024c4:	f10d 0106 	add.w	r1, sp, #6
 80024c8:	4620      	mov	r0, r4
    twoByteBuffer = 0;  // Zero answer records
 80024ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024ce:	f001 f819 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024d2:	2202      	movs	r2, #2
 80024d4:	f10d 0106 	add.w	r1, sp, #6
 80024d8:	4620      	mov	r0, r4
 80024da:	f001 f813 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 80024de:	2202      	movs	r2, #2
 80024e0:	4620      	mov	r0, r4
 80024e2:	f10d 0106 	add.w	r1, sp, #6
 80024e6:	f001 f80d 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    const char* start =aName;
 80024ea:	462f      	mov	r7, r5
    while (*end)
 80024ec:	782b      	ldrb	r3, [r5, #0]
 80024ee:	b1d3      	cbz	r3, 8002526 <_ZN9DNSClient12BuildRequestEPKc+0xb2>
        end = start;
 80024f0:	463e      	mov	r6, r7
        while (*end && (*end != '.') )
 80024f2:	7833      	ldrb	r3, [r6, #0]
 80024f4:	4635      	mov	r5, r6
 80024f6:	3601      	adds	r6, #1
 80024f8:	b10b      	cbz	r3, 80024fe <_ZN9DNSClient12BuildRequestEPKc+0x8a>
 80024fa:	2b2e      	cmp	r3, #46	; 0x2e
 80024fc:	d1f9      	bne.n	80024f2 <_ZN9DNSClient12BuildRequestEPKc+0x7e>
        if (end-start > 0)
 80024fe:	eba5 0807 	sub.w	r8, r5, r7
 8002502:	f1b8 0f00 	cmp.w	r8, #0
 8002506:	dd0c      	ble.n	8002522 <_ZN9DNSClient12BuildRequestEPKc+0xae>
            iUdp.write(&len, sizeof(len));
 8002508:	2201      	movs	r2, #1
 800250a:	f10d 0105 	add.w	r1, sp, #5
 800250e:	4620      	mov	r0, r4
            len = end-start;
 8002510:	f88d 8005 	strb.w	r8, [sp, #5]
            iUdp.write(&len, sizeof(len));
 8002514:	f000 fff6 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
            iUdp.write((uint8_t*)start, end-start);
 8002518:	4642      	mov	r2, r8
 800251a:	4639      	mov	r1, r7
 800251c:	4620      	mov	r0, r4
 800251e:	f000 fff1 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    while (*end)
 8002522:	4637      	mov	r7, r6
 8002524:	e7e2      	b.n	80024ec <_ZN9DNSClient12BuildRequestEPKc+0x78>
    iUdp.write(&len, sizeof(len));
 8002526:	f10d 0105 	add.w	r1, sp, #5
 800252a:	2201      	movs	r2, #1
 800252c:	4620      	mov	r0, r4
    len = 0;
 800252e:	f88d 3005 	strb.w	r3, [sp, #5]
    iUdp.write(&len, sizeof(len));
 8002532:	f000 ffe7 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    twoByteBuffer = htons(TYPE_A);
 8002536:	2001      	movs	r0, #1
 8002538:	f003 fa66 	bl	8005a08 <htons>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 800253c:	f10d 0106 	add.w	r1, sp, #6
 8002540:	2202      	movs	r2, #2
    twoByteBuffer = htons(TYPE_A);
 8002542:	f8ad 0006 	strh.w	r0, [sp, #6]
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 8002546:	4620      	mov	r0, r4
 8002548:	f000 ffdc 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
 800254c:	2001      	movs	r0, #1
 800254e:	f003 fa5b 	bl	8005a08 <htons>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 8002552:	2202      	movs	r2, #2
    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
 8002554:	f8ad 0006 	strh.w	r0, [sp, #6]
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 8002558:	f10d 0106 	add.w	r1, sp, #6
 800255c:	4620      	mov	r0, r4
 800255e:	f000 ffd1 	bl	8003504 <_ZN6UIPUDP5writeEPKhj>
}
 8002562:	2001      	movs	r0, #1
 8002564:	b002      	add	sp, #8
 8002566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800256a <_ZN9DNSClient15ProcessResponseEtR9IPAddress>:
{
 800256a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	4605      	mov	r5, r0
 8002572:	4688      	mov	r8, r1
 8002574:	4616      	mov	r6, r2
    uint32_t startTime = millis();
 8002576:	f001 fb21 	bl	8003bbc <millis>
 800257a:	4607      	mov	r7, r0
    while(iUdp.parsePacket() <= 0)
 800257c:	f105 040c 	add.w	r4, r5, #12
 8002580:	4620      	mov	r0, r4
 8002582:	f000 ffd0 	bl	8003526 <_ZN6UIPUDP11parsePacketEv>
 8002586:	2800      	cmp	r0, #0
 8002588:	dc09      	bgt.n	800259e <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x34>
        if((millis() - startTime) > aTimeout)
 800258a:	f001 fb17 	bl	8003bbc <millis>
 800258e:	1bc0      	subs	r0, r0, r7
 8002590:	4540      	cmp	r0, r8
 8002592:	f200 80e7 	bhi.w	8002764 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1fa>
        delay(50);
 8002596:	2032      	movs	r0, #50	; 0x32
 8002598:	f7fe fac2 	bl	8000b20 <HAL_Delay>
    while(iUdp.parsePacket() <= 0)
 800259c:	e7f0      	b.n	8002580 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x16>
    if ( (iDNSServer != iUdp.remoteIP()) || 
 800259e:	4621      	mov	r1, r4
 80025a0:	a803      	add	r0, sp, #12
 80025a2:	686f      	ldr	r7, [r5, #4]
 80025a4:	f001 f819 	bl	80035da <_ZN6UIPUDP8remoteIPEv>
 80025a8:	9b04      	ldr	r3, [sp, #16]
 80025aa:	429f      	cmp	r7, r3
 80025ac:	d004      	beq.n	80025b8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e>
        return INVALID_SERVER;
 80025ae:	f06f 0001 	mvn.w	r0, #1
}
 80025b2:	b007      	add	sp, #28
 80025b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        (iUdp.remotePort() != DNS_PORT) )
 80025b8:	4620      	mov	r0, r4
 80025ba:	f000 ff27 	bl	800340c <_ZN6UIPUDP10remotePortEv>
    if ( (iDNSServer != iUdp.remoteIP()) || 
 80025be:	2835      	cmp	r0, #53	; 0x35
 80025c0:	d1f5      	bne.n	80025ae <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x44>
    if (iUdp.available() < DNS_HEADER_SIZE)
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 ffc2 	bl	800354c <_ZN6UIPUDP9availableEv>
 80025c8:	280b      	cmp	r0, #11
 80025ca:	f340 80ce 	ble.w	800276a <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x200>
    iUdp.read((char*)header, DNS_HEADER_SIZE);
 80025ce:	220c      	movs	r2, #12
 80025d0:	4620      	mov	r0, r4
 80025d2:	eb0d 0102 	add.w	r1, sp, r2
 80025d6:	f7ff fc15 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
 80025da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80025de:	f003 fa13 	bl	8005a08 <htons>
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
 80025e2:	892a      	ldrh	r2, [r5, #8]
 80025e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
 80025e8:	f8ad 0006 	strh.w	r0, [sp, #6]
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d101      	bne.n	80025f4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x8a>
 80025f0:	0403      	lsls	r3, r0, #16
 80025f2:	d405      	bmi.n	8002600 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x96>
        iUdp.flush();
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 ff2b 	bl	8003450 <_ZN6UIPUDP5flushEv>
        return INVALID_RESPONSE;
 80025fa:	f06f 0003 	mvn.w	r0, #3
 80025fe:	e7d8      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
 8002600:	f240 250f 	movw	r5, #527	; 0x20f
 8002604:	4005      	ands	r5, r0
 8002606:	d005      	beq.n	8002614 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xaa>
        iUdp.flush();
 8002608:	4620      	mov	r0, r4
 800260a:	f000 ff21 	bl	8003450 <_ZN6UIPUDP5flushEv>
        return -5; //INVALID_RESPONSE;
 800260e:	f06f 0004 	mvn.w	r0, #4
 8002612:	e7ce      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
 8002614:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8002618:	f003 f9f6 	bl	8005a08 <htons>
    if (answerCount == 0 )
 800261c:	4680      	mov	r8, r0
 800261e:	b928      	cbnz	r0, 800262c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xc2>
        iUdp.flush();
 8002620:	4620      	mov	r0, r4
 8002622:	f000 ff15 	bl	8003450 <_ZN6UIPUDP5flushEv>
        return -6; //INVALID_RESPONSE;
 8002626:	f06f 0005 	mvn.w	r0, #5
 800262a:	e7c2      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
 800262c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8002630:	f003 f9ea 	bl	8005a08 <htons>
 8002634:	b2ab      	uxth	r3, r5
 8002636:	4298      	cmp	r0, r3
 8002638:	d921      	bls.n	800267e <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x114>
            iUdp.read((char*)&len, sizeof(len));
 800263a:	2201      	movs	r2, #1
 800263c:	4620      	mov	r0, r4
 800263e:	f10d 010a 	add.w	r1, sp, #10
 8002642:	f7ff fbdf 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
            if (len > 0)
 8002646:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800264a:	b96b      	cbnz	r3, 8002668 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xfe>
            iUdp.read(); // we don't care about the returned byte
 800264c:	4620      	mov	r0, r4
 800264e:	f000 feaf 	bl	80033b0 <_ZN6UIPUDP4readEv>
 8002652:	4620      	mov	r0, r4
 8002654:	f000 feac 	bl	80033b0 <_ZN6UIPUDP4readEv>
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fea9 	bl	80033b0 <_ZN6UIPUDP4readEv>
 800265e:	4620      	mov	r0, r4
 8002660:	f000 fea6 	bl	80033b0 <_ZN6UIPUDP4readEv>
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
 8002664:	3501      	adds	r5, #1
 8002666:	e7e1      	b.n	800262c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xc2>
                while(len--)
 8002668:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	f88d 200a 	strb.w	r2, [sp, #10]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0e1      	beq.n	800263a <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd0>
                    iUdp.read(); // we don't care about the returned byte
 8002676:	4620      	mov	r0, r4
 8002678:	f000 fe9a 	bl	80033b0 <_ZN6UIPUDP4readEv>
                while(len--)
 800267c:	e7f4      	b.n	8002668 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xfe>
 800267e:	2700      	movs	r7, #0
                len = 0;
 8002680:	46b9      	mov	r9, r7
    for (uint16_t i =0; i < answerCount; i++)
 8002682:	b2bb      	uxth	r3, r7
 8002684:	4543      	cmp	r3, r8
 8002686:	d267      	bcs.n	8002758 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1ee>
            iUdp.read((char*)&len, sizeof(len));
 8002688:	2201      	movs	r2, #1
 800268a:	4620      	mov	r0, r4
 800268c:	f10d 0105 	add.w	r1, sp, #5
 8002690:	f7ff fbb8 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
 8002694:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002698:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800269c:	d10b      	bne.n	80026b6 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x14c>
                if (len > 0)
 800269e:	b17b      	cbz	r3, 80026c0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x156>
                    while(len--)
 80026a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	f88d 2005 	strb.w	r2, [sp, #5]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ec      	beq.n	8002688 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x11e>
                        iUdp.read(); // we don't care about the returned byte
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 fe7e 	bl	80033b0 <_ZN6UIPUDP4readEv>
                    while(len--)
 80026b4:	e7f4      	b.n	80026a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x136>
                iUdp.read(); // we don't care about the returned byte
 80026b6:	4620      	mov	r0, r4
 80026b8:	f000 fe7a 	bl	80033b0 <_ZN6UIPUDP4readEv>
                len = 0;
 80026bc:	f88d 9005 	strb.w	r9, [sp, #5]
        iUdp.read((char*)&answerType, sizeof(answerType));
 80026c0:	2202      	movs	r2, #2
 80026c2:	a902      	add	r1, sp, #8
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff fb9d 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
        iUdp.read((char*)&answerClass, sizeof(answerClass));
 80026ca:	2202      	movs	r2, #2
 80026cc:	f10d 010a 	add.w	r1, sp, #10
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fb97 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
            iUdp.read(); // we don't care about the returned byte
 80026d6:	4620      	mov	r0, r4
 80026d8:	f000 fe6a 	bl	80033b0 <_ZN6UIPUDP4readEv>
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 fe67 	bl	80033b0 <_ZN6UIPUDP4readEv>
 80026e2:	4620      	mov	r0, r4
 80026e4:	f000 fe64 	bl	80033b0 <_ZN6UIPUDP4readEv>
 80026e8:	4620      	mov	r0, r4
 80026ea:	f000 fe61 	bl	80033b0 <_ZN6UIPUDP4readEv>
        iUdp.read((char*)&header_flags, sizeof(header_flags));
 80026ee:	2202      	movs	r2, #2
 80026f0:	f10d 0106 	add.w	r1, sp, #6
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff fb85 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
 80026fa:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80026fe:	f003 f983 	bl	8005a08 <htons>
 8002702:	2801      	cmp	r0, #1
 8002704:	d113      	bne.n	800272e <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c4>
 8002706:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800270a:	f003 f97d 	bl	8005a08 <htons>
 800270e:	2801      	cmp	r0, #1
 8002710:	4605      	mov	r5, r0
 8002712:	d10c      	bne.n	800272e <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c4>
            if (htons(header_flags) != 4)
 8002714:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002718:	f003 f976 	bl	8005a08 <htons>
 800271c:	2804      	cmp	r0, #4
 800271e:	4602      	mov	r2, r0
 8002720:	d012      	beq.n	8002748 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1de>
                iUdp.flush();
 8002722:	4620      	mov	r0, r4
 8002724:	f000 fe94 	bl	8003450 <_ZN6UIPUDP5flushEv>
                return -9;//INVALID_RESPONSE;
 8002728:	f06f 0008 	mvn.w	r0, #8
 800272c:	e741      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
 800272e:	2500      	movs	r5, #0
            for (uint16_t i =0; i < htons(header_flags); i++)
 8002730:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002734:	f003 f968 	bl	8005a08 <htons>
 8002738:	b2ab      	uxth	r3, r5
 800273a:	4298      	cmp	r0, r3
 800273c:	d90a      	bls.n	8002754 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1ea>
                iUdp.read(); // we don't care about the returned byte
 800273e:	4620      	mov	r0, r4
 8002740:	f000 fe36 	bl	80033b0 <_ZN6UIPUDP4readEv>
            for (uint16_t i =0; i < htons(header_flags); i++)
 8002744:	3501      	adds	r5, #1
 8002746:	e7f3      	b.n	8002730 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c6>
            iUdp.read((char*)aAddress.raw_address(), 4);
 8002748:	4620      	mov	r0, r4
 800274a:	1d31      	adds	r1, r6, #4
 800274c:	f7ff fb5a 	bl	8001e04 <_ZN6UIPUDP4readEPcj>
            return SUCCESS;
 8002750:	4628      	mov	r0, r5
 8002752:	e72e      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
    for (uint16_t i =0; i < answerCount; i++)
 8002754:	3701      	adds	r7, #1
 8002756:	e794      	b.n	8002682 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x118>
    iUdp.flush();
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fe79 	bl	8003450 <_ZN6UIPUDP5flushEv>
    return -10;//INVALID_RESPONSE;
 800275e:	f06f 0009 	mvn.w	r0, #9
 8002762:	e726      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
            return TIMED_OUT;
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	e723      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>
        return TRUNCATED;
 800276a:	f06f 0002 	mvn.w	r0, #2
 800276e:	e720      	b.n	80025b2 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x48>

08002770 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
{
 8002770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002774:	4605      	mov	r5, r0
 8002776:	460f      	mov	r7, r1
 8002778:	4690      	mov	r8, r2
    if (inet_aton(aHostname, aResult))
 800277a:	f7ff fe44 	bl	8002406 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
 800277e:	4604      	mov	r4, r0
 8002780:	2800      	cmp	r0, #0
 8002782:	d139      	bne.n	80027f8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x88>
    if (iDNSServer == INADDR_NONE)
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x94>)
 8002786:	686a      	ldr	r2, [r5, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d036      	beq.n	80027fc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x8c>
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
 800278e:	f001 fa15 	bl	8003bbc <millis>
 8002792:	f105 060c 	add.w	r6, r5, #12
 8002796:	f000 010f 	and.w	r1, r0, #15
 800279a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800279e:	4630      	mov	r0, r6
 80027a0:	f000 fe1a 	bl	80033d8 <_ZN6UIPUDP5beginEt>
 80027a4:	2801      	cmp	r0, #1
 80027a6:	d115      	bne.n	80027d4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x64>
class IPAddress : public Printable {
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x98>)
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
 80027aa:	2235      	movs	r2, #53	; 0x35
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	686b      	ldr	r3, [r5, #4]
 80027b0:	4669      	mov	r1, sp
 80027b2:	4630      	mov	r0, r6
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	f000 fe59 	bl	800346c <_ZN6UIPUDP11beginPacketE9IPAddresst>
            if (ret != 0)
 80027ba:	b140      	cbz	r0, 80027ce <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x5e>
                ret = BuildRequest(aHostname);
 80027bc:	4639      	mov	r1, r7
 80027be:	4628      	mov	r0, r5
 80027c0:	f7ff fe58 	bl	8002474 <_ZN9DNSClient12BuildRequestEPKc>
                if (ret != 0)
 80027c4:	b118      	cbz	r0, 80027ce <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x5e>
                    ret = iUdp.endPacket();
 80027c6:	4630      	mov	r0, r6
 80027c8:	f000 ffd4 	bl	8003774 <_ZN6UIPUDP9endPacketEv>
                    if (ret != 0)
 80027cc:	b990      	cbnz	r0, 80027f4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x84>
        iUdp.stop();
 80027ce:	4630      	mov	r0, r6
 80027d0:	f000 fe26 	bl	8003420 <_ZN6UIPUDP4stopEv>
}
 80027d4:	4620      	mov	r0, r4
 80027d6:	b002      	add	sp, #8
 80027d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
 80027dc:	1c63      	adds	r3, r4, #1
 80027de:	d1f6      	bne.n	80027ce <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x5e>
                            ret = ProcessResponse(5000, aResult);
 80027e0:	4642      	mov	r2, r8
 80027e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80027e6:	4628      	mov	r0, r5
 80027e8:	f7ff febf 	bl	800256a <_ZN9DNSClient15ProcessResponseEtR9IPAddress>
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
 80027ec:	3f01      	subs	r7, #1
                            ret = ProcessResponse(5000, aResult);
 80027ee:	4604      	mov	r4, r0
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
 80027f0:	d1f4      	bne.n	80027dc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x6c>
 80027f2:	e7ec      	b.n	80027ce <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x5e>
 80027f4:	2703      	movs	r7, #3
 80027f6:	e7f3      	b.n	80027e0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x70>
        return 1;
 80027f8:	2401      	movs	r4, #1
 80027fa:	e7eb      	b.n	80027d4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x64>
        return INVALID_SERVER;
 80027fc:	f06f 0401 	mvn.w	r4, #1
 8002800:	e7e8      	b.n	80027d4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x64>
 8002802:	bf00      	nop
 8002804:	20000144 	.word	0x20000144
 8002808:	08007404 	.word	0x08007404

0800280c <_ZN9UIPClientneERKS_>:
  virtual int read(uint8_t *buf, size_t size);
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
 800280c:	b508      	push	{r3, lr}
 800280e:	6803      	ldr	r3, [r0, #0]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4798      	blx	r3
 8002814:	f080 0001 	eor.w	r0, r0, #1
 8002818:	b2c0      	uxtb	r0, r0
 800281a:	bd08      	pop	{r3, pc}

0800281c <_ZN9UIPClient9connectedEv>:
UIPClient::connected()
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPClient::connected() DEBUG_V3:Function started"));
  #endif
  return (data && (data->packets_in[0] != NOBLOCK || (data->state & UIP_CLIENT_CONNECTED))) ? 1 : 0;
 800281c:	68c0      	ldr	r0, [r0, #12]
 800281e:	b130      	cbz	r0, 800282e <_ZN9UIPClient9connectedEv+0x12>
 8002820:	7883      	ldrb	r3, [r0, #2]
 8002822:	b91b      	cbnz	r3, 800282c <_ZN9UIPClient9connectedEv+0x10>
 8002824:	7840      	ldrb	r0, [r0, #1]
 8002826:	f000 0001 	and.w	r0, r0, #1
 800282a:	4770      	bx	lr
 800282c:	2001      	movs	r0, #1
}
 800282e:	4770      	bx	lr

08002830 <_ZThn8_N9UIPClient9connectedEv>:
  virtual uint8_t connected();
 8002830:	f1a0 0008 	sub.w	r0, r0, #8
 8002834:	f7ff bff2 	b.w	800281c <_ZN9UIPClient9connectedEv>

08002838 <_ZN9UIPClienteqERKS_>:
UIPClient::operator==(const UIPClient& rhs)
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPClient::operator==(const UIPClient& rhs) DEBUG_V3:Function started"));
  #endif
  return data && rhs.data && (data == rhs.data);
 8002838:	68c3      	ldr	r3, [r0, #12]
 800283a:	b12b      	cbz	r3, 8002848 <_ZN9UIPClienteqERKS_+0x10>
 800283c:	68c8      	ldr	r0, [r1, #12]
 800283e:	b120      	cbz	r0, 800284a <_ZN9UIPClienteqERKS_+0x12>
 8002840:	1a1b      	subs	r3, r3, r0
 8002842:	4258      	negs	r0, r3
 8002844:	4158      	adcs	r0, r3
 8002846:	4770      	bx	lr
 8002848:	4618      	mov	r0, r3
}
 800284a:	4770      	bx	lr

0800284c <_ZN9UIPClient4readEv>:
  return -1;
}

int
UIPClient::read()
{
 800284c:	b507      	push	{r0, r1, r2, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPClient::read() DEBUG_V3:Function started"));
  #endif
  uint8_t c;
  if (read(&c,1) <= 0)
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f10d 0107 	add.w	r1, sp, #7
 8002858:	4798      	blx	r3
 800285a:	2800      	cmp	r0, #0
    return -1;
 800285c:	bfd4      	ite	le
 800285e:	f04f 30ff 	movle.w	r0, #4294967295
  return c;
 8002862:	f89d 0007 	ldrbgt.w	r0, [sp, #7]
}
 8002866:	b003      	add	sp, #12
 8002868:	f85d fb04 	ldr.w	pc, [sp], #4

0800286c <_ZThn8_N9UIPClient4readEv>:
  virtual size_t write(uint8_t);
  virtual size_t write(const uint8_t *buf, size_t size);
  virtual int availableForWrite();

  virtual int available();
  virtual int read();
 800286c:	f1a0 0008 	sub.w	r0, r0, #8
 8002870:	f7ff bfec 	b.w	800284c <_ZN9UIPClient4readEv>

08002874 <_ZN9UIPClientD1Ev>:
  class UIPClient : public Print, public Client {
 8002874:	4770      	bx	lr

08002876 <_ZThn8_N9UIPClientD1Ev>:
 8002876:	3808      	subs	r0, #8
 8002878:	4770      	bx	lr

0800287a <_ZN9UIPClientcvbEv>:
{
 800287a:	b510      	push	{r4, lr}
 800287c:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 800287e:	f000 fb31 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  return data && (!(data->state & UIP_CLIENT_REMOTECLOSED) || data->packets_in[0] != NOBLOCK);
 8002882:	68e0      	ldr	r0, [r4, #12]
 8002884:	b130      	cbz	r0, 8002894 <_ZN9UIPClientcvbEv+0x1a>
 8002886:	7843      	ldrb	r3, [r0, #1]
 8002888:	075b      	lsls	r3, r3, #29
 800288a:	d504      	bpl.n	8002896 <_ZN9UIPClientcvbEv+0x1c>
 800288c:	7880      	ldrb	r0, [r0, #2]
 800288e:	3800      	subs	r0, #0
 8002890:	bf18      	it	ne
 8002892:	2001      	movne	r0, #1
}
 8002894:	bd10      	pop	{r4, pc}
  return data && (!(data->state & UIP_CLIENT_REMOTECLOSED) || data->packets_in[0] != NOBLOCK);
 8002896:	2001      	movs	r0, #1
 8002898:	e7fc      	b.n	8002894 <_ZN9UIPClientcvbEv+0x1a>

0800289a <_ZThn8_N9UIPClientcvbEv>:
  virtual operator bool();
 800289a:	f1a0 0008 	sub.w	r0, r0, #8
 800289e:	f7ff bfec 	b.w	800287a <_ZN9UIPClientcvbEv>

080028a2 <_ZN9UIPClient7connectE9IPAddresst>:
{
 80028a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028a4:	460c      	mov	r4, r1
 80028a6:	4616      	mov	r6, r2
  stop();
 80028a8:	6803      	ldr	r3, [r0, #0]
{
 80028aa:	4605      	mov	r5, r0
  stop();
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4798      	blx	r3
  uip_ip_addr(ipaddr, ip);
 80028b0:	7922      	ldrb	r2, [r4, #4]
 80028b2:	7963      	ldrb	r3, [r4, #5]
  struct uip_conn* conn = uip_connect(&ipaddr, htons(port));
 80028b4:	4630      	mov	r0, r6
  uip_ip_addr(ipaddr, ip);
 80028b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028ba:	ba5b      	rev16	r3, r3
 80028bc:	79a2      	ldrb	r2, [r4, #6]
 80028be:	f8ad 3004 	strh.w	r3, [sp, #4]
 80028c2:	79e3      	ldrb	r3, [r4, #7]
 80028c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028c8:	ba5b      	rev16	r3, r3
 80028ca:	f8ad 3006 	strh.w	r3, [sp, #6]
  struct uip_conn* conn = uip_connect(&ipaddr, htons(port));
 80028ce:	f003 f89b 	bl	8005a08 <htons>
 80028d2:	4601      	mov	r1, r0
 80028d4:	a801      	add	r0, sp, #4
 80028d6:	f001 fe0f 	bl	80044f8 <uip_connect>
  if (conn)
 80028da:	4604      	mov	r4, r0
 80028dc:	b910      	cbnz	r0, 80028e4 <_ZN9UIPClient7connectE9IPAddresst+0x42>
  return 0;
 80028de:	2000      	movs	r0, #0
}
 80028e0:	b002      	add	sp, #8
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
      while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED)
 80028e4:	7e63      	ldrb	r3, [r4, #25]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	d0f9      	beq.n	80028de <_ZN9UIPClient7connectE9IPAddresst+0x3c>
          UIPEthernetClass::tick();
 80028ea:	f000 fafb 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
          if ((conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED)
 80028ee:	7e63      	ldrb	r3, [r4, #25]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d1f5      	bne.n	80028e4 <_ZN9UIPClient7connectE9IPAddresst+0x42>
            data = (uip_userdata_t*) conn->appstate;
 80028f8:	69e3      	ldr	r3, [r4, #28]
            return 1;
 80028fa:	2001      	movs	r0, #1
            data = (uip_userdata_t*) conn->appstate;
 80028fc:	60eb      	str	r3, [r5, #12]
            return 1;
 80028fe:	e7ef      	b.n	80028e0 <_ZN9UIPClient7connectE9IPAddresst+0x3e>

08002900 <_ZThn8_N9UIPClient7connectE9IPAddresst>:
  virtual int connect(IPAddress ip, uint16_t port);
 8002900:	f1a0 0008 	sub.w	r0, r0, #8
 8002904:	f7ff bfcd 	b.w	80028a2 <_ZN9UIPClient7connectE9IPAddresst>

08002908 <_ZN9UIPClient7connectEPKct>:
{
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	460e      	mov	r6, r1
 800290c:	b08e      	sub	sp, #56	; 0x38
 800290e:	4604      	mov	r4, r0

#include "utility/uipopt.h"
#if UIP_UDP
#include "UIPUdp.h"

class DNSClient
 8002910:	a805      	add	r0, sp, #20
 8002912:	4615      	mov	r5, r2
 8002914:	f000 ff8e 	bl	8003834 <_ZN9IPAddressC1Ev>
 8002918:	a808      	add	r0, sp, #32
 800291a:	f000 fe75 	bl	8003608 <_ZN6UIPUDPC1Ev>
  IPAddress remote_addr;
 800291e:	a801      	add	r0, sp, #4
 8002920:	f000 ff88 	bl	8003834 <_ZN9IPAddressC1Ev>
  dns.begin(UIPEthernetClass::_dnsServerAddress);
 8002924:	490b      	ldr	r1, [pc, #44]	; (8002954 <_ZN9UIPClient7connectEPKct+0x4c>)
 8002926:	a805      	add	r0, sp, #20
 8002928:	f7ff fd68 	bl	80023fc <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
 800292c:	4631      	mov	r1, r6
 800292e:	aa01      	add	r2, sp, #4
 8002930:	a805      	add	r0, sp, #20
 8002932:	f7ff ff1d 	bl	8002770 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
 8002936:	2801      	cmp	r0, #1
 8002938:	d109      	bne.n	800294e <_ZN9UIPClient7connectEPKct+0x46>
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <_ZN9UIPClient7connectEPKct+0x50>)
    return connect(remote_addr, port);
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	9203      	str	r2, [sp, #12]
 8002940:	9a02      	ldr	r2, [sp, #8]
 8002942:	4620      	mov	r0, r4
 8002944:	9204      	str	r2, [sp, #16]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	462a      	mov	r2, r5
 800294a:	a903      	add	r1, sp, #12
 800294c:	4798      	blx	r3
}
 800294e:	b00e      	add	sp, #56	; 0x38
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	bf00      	nop
 8002954:	20000214 	.word	0x20000214
 8002958:	08007404 	.word	0x08007404

0800295c <_ZThn8_N9UIPClient7connectEPKct>:
  virtual int connect(const char *host, uint16_t port);
 800295c:	f1a0 0008 	sub.w	r0, r0, #8
 8002960:	f7ff bfd2 	b.w	8002908 <_ZN9UIPClient7connectEPKct>

08002964 <_ZN9UIPClientD0Ev>:
  class UIPClient : public Print, public Client {
 8002964:	b510      	push	{r4, lr}
 8002966:	4604      	mov	r4, r0
 8002968:	2110      	movs	r1, #16
 800296a:	f003 fb8b 	bl	8006084 <_ZdlPvj>
 800296e:	4620      	mov	r0, r4
 8002970:	bd10      	pop	{r4, pc}

08002972 <_ZThn8_N9UIPClientD0Ev>:
 8002972:	f1a0 0008 	sub.w	r0, r0, #8
 8002976:	e7f5      	b.n	8002964 <_ZN9UIPClientD0Ev>

08002978 <_ZN9UIPClient4peekEv>:
UIPClient::peek()
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPClient::peek() DEBUG_V3:Function started"));
  #endif
  if (data)
 8002978:	68c3      	ldr	r3, [r0, #12]
{
 800297a:	b507      	push	{r0, r1, r2, lr}
  if (data)
 800297c:	b163      	cbz	r3, 8002998 <_ZN9UIPClient4peekEv+0x20>
    {
      if (data->packets_in[0] != NOBLOCK)
 800297e:	7898      	ldrb	r0, [r3, #2]
 8002980:	b150      	cbz	r0, 8002998 <_ZN9UIPClient4peekEv+0x20>
        {
          uint8_t c;
          Enc28J60Network::readPacket(data->packets_in[0],0,&c,1);
 8002982:	2301      	movs	r3, #1
 8002984:	2100      	movs	r1, #0
 8002986:	f10d 0207 	add.w	r2, sp, #7
 800298a:	f001 fa6f 	bl	8003e6c <_ZN15Enc28J60Network10readPacketEhtPht>
          return c;
 800298e:	f89d 0007 	ldrb.w	r0, [sp, #7]
        }
    }
  return -1;
}
 8002992:	b003      	add	sp, #12
 8002994:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	e7f9      	b.n	8002992 <_ZN9UIPClient4peekEv+0x1a>

0800299e <_ZThn8_N9UIPClient4peekEv>:
  virtual int peek();
 800299e:	f1a0 0008 	sub.w	r0, r0, #8
 80029a2:	f7ff bfe9 	b.w	8002978 <_ZN9UIPClient4peekEv>
	...

080029a8 <_ZN9UIPClientC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80029a8:	2100      	movs	r1, #0
UIPClient::UIPClient() :
 80029aa:	b510      	push	{r4, lr}
    data(NULL)
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <_ZN9UIPClientC1Ev+0x18>)
 80029ae:	6041      	str	r1, [r0, #4]
 80029b0:	f102 0408 	add.w	r4, r2, #8
 80029b4:	3254      	adds	r2, #84	; 0x54
 80029b6:	e9c0 2102 	strd	r2, r1, [r0, #8]
 80029ba:	6004      	str	r4, [r0, #0]
}
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	bf00      	nop
 80029c0:	080072c8 	.word	0x080072c8

080029c4 <_ZN9UIPClientC1EP14uip_userdata_t>:
 80029c4:	2200      	movs	r2, #0
UIPClient::UIPClient(uip_userdata_t* conn_data) :
 80029c6:	b510      	push	{r4, lr}
 80029c8:	6042      	str	r2, [r0, #4]
    data(conn_data)
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <_ZN9UIPClientC1EP14uip_userdata_t+0x18>)
 80029cc:	f102 0408 	add.w	r4, r2, #8
 80029d0:	3254      	adds	r2, #84	; 0x54
 80029d2:	e9c0 2102 	strd	r2, r1, [r0, #8]
 80029d6:	6004      	str	r4, [r0, #0]
}
 80029d8:	bd10      	pop	{r4, pc}
 80029da:	bf00      	nop
 80029dc:	080072c8 	.word	0x080072c8

080029e0 <_ZN9UIPClient10_availableEP14uip_userdata_t>:
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
  int len = 0;
 80029e2:	2500      	movs	r5, #0
 80029e4:	1c86      	adds	r6, r0, #2
 80029e6:	1dc4      	adds	r4, r0, #7
      len += Enc28J60Network::blockSize(u->packets_in[i]);
 80029e8:	f816 0b01 	ldrb.w	r0, [r6], #1
 80029ec:	f001 f8ec 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS; i++)
 80029f0:	42a6      	cmp	r6, r4
      len += Enc28J60Network::blockSize(u->packets_in[i]);
 80029f2:	4405      	add	r5, r0
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS; i++)
 80029f4:	d1f8      	bne.n	80029e8 <_ZN9UIPClient10_availableEP14uip_userdata_t+0x8>
}
 80029f6:	4628      	mov	r0, r5
 80029f8:	bd70      	pop	{r4, r5, r6, pc}

080029fa <_ZN9UIPClient9availableEv>:
  if (data)
 80029fa:	68c0      	ldr	r0, [r0, #12]
 80029fc:	b108      	cbz	r0, 8002a02 <_ZN9UIPClient9availableEv+0x8>
    return _available(data);
 80029fe:	f7ff bfef 	b.w	80029e0 <_ZN9UIPClient10_availableEP14uip_userdata_t>
}
 8002a02:	4770      	bx	lr

08002a04 <_ZThn8_N9UIPClient9availableEv>:
  virtual int available();
 8002a04:	f1a0 0008 	sub.w	r0, r0, #8
 8002a08:	f7ff bff7 	b.w	80029fa <_ZN9UIPClient9availableEv>

08002a0c <_ZN9UIPClient13_allocateDataEv>:
UIPClient::_allocateData()
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPClient::_allocateData() DEBUG_V3:Function started"));
  #endif
  for ( uint8_t sock = 0; sock < UIP_CONNS; sock++ )
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <_ZN9UIPClient13_allocateDataEv+0x3c>)
{
 8002a0e:	b570      	push	{r4, r5, r6, lr}
 8002a10:	2300      	movs	r3, #0
 8002a12:	4616      	mov	r6, r2
    {
      uip_userdata_t* data = &UIPClient::all_data[sock];
      if (!data->state)
 8002a14:	7851      	ldrb	r1, [r2, #1]
 8002a16:	b981      	cbnz	r1, 8002a3a <_ZN9UIPClient13_allocateDataEv+0x2e>
      uip_userdata_t* data = &UIPClient::all_data[sock];
 8002a18:	2214      	movs	r2, #20
 8002a1a:	fb02 f403 	mul.w	r4, r2, r3
 8002a1e:	1935      	adds	r5, r6, r4
        {
          memset(data, 0, sizeof(uip_userdata_t));
 8002a20:	4628      	mov	r0, r5
 8002a22:	f003 fb91 	bl	8006148 <memset>
          data->conn_index = uip_conn - uip_conns;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <_ZN9UIPClient13_allocateDataEv+0x40>)
 8002a28:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <_ZN9UIPClient13_allocateDataEv+0x44>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	115b      	asrs	r3, r3, #5
 8002a30:	5533      	strb	r3, [r6, r4]
          data->state = UIP_CLIENT_CONNECTED;
 8002a32:	2301      	movs	r3, #1
 8002a34:	706b      	strb	r3, [r5, #1]
          return data;
        }
    }
  return NULL;
}
 8002a36:	4628      	mov	r0, r5
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
  for ( uint8_t sock = 0; sock < UIP_CONNS; sock++ )
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	f102 0214 	add.w	r2, r2, #20
 8002a42:	d1e7      	bne.n	8002a14 <_ZN9UIPClient13_allocateDataEv+0x8>
  return NULL;
 8002a44:	2500      	movs	r5, #0
 8002a46:	e7f6      	b.n	8002a36 <_ZN9UIPClient13_allocateDataEv+0x2a>
 8002a48:	20000154 	.word	0x20000154
 8002a4c:	2000041c 	.word	0x2000041c
 8002a50:	20000420 	.word	0x20000420

08002a54 <_ZN9UIPClient13_currentBlockEPh>:

uint8_t
UIPClient::_currentBlock(memhandle* block)
{
 8002a54:	4602      	mov	r2, r0
 8002a56:	2301      	movs	r3, #1
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPClient::_currentBlock(memhandle* block) DEBUG_V3:Function started"));
  #endif
  for (uint8_t i = 1; i < UIP_SOCKET_NUMPACKETS; i++)
    {
      if (block[i] == NOBLOCK)
 8002a58:	5cd1      	ldrb	r1, [r2, r3]
 8002a5a:	b2d8      	uxtb	r0, r3
 8002a5c:	b911      	cbnz	r1, 8002a64 <_ZN9UIPClient13_currentBlockEPh+0x10>
        return i-1;
 8002a5e:	3801      	subs	r0, #1
 8002a60:	b2c0      	uxtb	r0, r0
 8002a62:	4770      	bx	lr
  for (uint8_t i = 1; i < UIP_SOCKET_NUMPACKETS; i++)
 8002a64:	3301      	adds	r3, #1
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d1f6      	bne.n	8002a58 <_ZN9UIPClient13_currentBlockEPh+0x4>
    }
  return UIP_SOCKET_NUMPACKETS-1;
 8002a6a:	2004      	movs	r0, #4
}
 8002a6c:	4770      	bx	lr

08002a6e <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj>:
{
 8002a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a72:	4604      	mov	r4, r0
 8002a74:	4688      	mov	r8, r1
 8002a76:	4616      	mov	r6, r2
  int remain = size;
 8002a78:	4617      	mov	r7, r2
          u->out_pos = 0;
 8002a7a:	f04f 0a00 	mov.w	sl, #0
      uint8_t p = _currentBlock(&u->packets_out[0]);
 8002a7e:	f100 0907 	add.w	r9, r0, #7
  UIPEthernetClass::tick();
 8002a82:	f000 fa2f 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  if (u && u->state && !(u->state & (UIP_CLIENT_CLOSE | UIP_CLIENT_REMOTECLOSED)))
 8002a86:	b384      	cbz	r4, 8002aea <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x7c>
 8002a88:	7860      	ldrb	r0, [r4, #1]
 8002a8a:	b360      	cbz	r0, 8002ae6 <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x78>
 8002a8c:	f010 0f06 	tst.w	r0, #6
 8002a90:	d12b      	bne.n	8002aea <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x7c>
      uint8_t p = _currentBlock(&u->packets_out[0]);
 8002a92:	4648      	mov	r0, r9
 8002a94:	f7ff ffde 	bl	8002a54 <_ZN9UIPClient13_currentBlockEPh>
      if (u->packets_out[p] == NOBLOCK)
 8002a98:	1823      	adds	r3, r4, r0
 8002a9a:	79db      	ldrb	r3, [r3, #7]
      uint8_t p = _currentBlock(&u->packets_out[0]);
 8002a9c:	4605      	mov	r5, r0
      if (u->packets_out[p] == NOBLOCK)
 8002a9e:	b94b      	cbnz	r3, 8002ab4 <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x46>
          u->packets_out[p] = Enc28J60Network::allocBlock(UIP_SOCKET_DATALEN);
 8002aa0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002aa4:	f001 fbd0 	bl	8004248 <_ZN10MemoryPool10allocBlockEt>
 8002aa8:	1963      	adds	r3, r4, r5
 8002aaa:	71d8      	strb	r0, [r3, #7]
          if (u->packets_out[p] == NOBLOCK)
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d0e8      	beq.n	8002a82 <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x14>
          u->out_pos = 0;
 8002ab0:	f8a4 a00c 	strh.w	sl, [r4, #12]
      written = Enc28J60Network::writePacket(u->packets_out[p],u->out_pos,(uint8_t*)buf+size-remain,remain);
 8002ab4:	1bf2      	subs	r2, r6, r7
 8002ab6:	1960      	adds	r0, r4, r5
 8002ab8:	b2bb      	uxth	r3, r7
 8002aba:	89a1      	ldrh	r1, [r4, #12]
 8002abc:	79c0      	ldrb	r0, [r0, #7]
 8002abe:	4442      	add	r2, r8
 8002ac0:	f001 f9e0 	bl	8003e84 <_ZN15Enc28J60Network11writePacketEhtPht>
      u->out_pos+=written;
 8002ac4:	89a3      	ldrh	r3, [r4, #12]
      remain -= written;
 8002ac6:	1a3f      	subs	r7, r7, r0
      if (remain > 0)
 8002ac8:	2f00      	cmp	r7, #0
      u->out_pos+=written;
 8002aca:	4418      	add	r0, r3
 8002acc:	81a0      	strh	r0, [r4, #12]
      if (remain > 0)
 8002ace:	dd04      	ble.n	8002ada <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x6c>
          if (p == UIP_SOCKET_NUMPACKETS-1)
 8002ad0:	2d04      	cmp	r5, #4
 8002ad2:	d0d6      	beq.n	8002a82 <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x14>
          p++;
 8002ad4:	3501      	adds	r5, #1
 8002ad6:	b2ed      	uxtb	r5, r5
          goto newpacket;
 8002ad8:	e7e2      	b.n	8002aa0 <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x32>
      u->timer = millis()+UIP_CLIENT_TIMER;
 8002ada:	f001 f86f 	bl	8003bbc <millis>
 8002ade:	300a      	adds	r0, #10
 8002ae0:	6120      	str	r0, [r4, #16]
      return size-remain;
 8002ae2:	1bf0      	subs	r0, r6, r7
 8002ae4:	b280      	uxth	r0, r0
}
 8002ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return 0;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e7fb      	b.n	8002ae6 <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj+0x78>

08002aee <_ZN9UIPClient5writeEh>:
{
 8002aee:	b507      	push	{r0, r1, r2, lr}
  return _write(data, &c, 1);
 8002af0:	2201      	movs	r2, #1
{
 8002af2:	f88d 1007 	strb.w	r1, [sp, #7]
  return _write(data, &c, 1);
 8002af6:	68c0      	ldr	r0, [r0, #12]
 8002af8:	f10d 0107 	add.w	r1, sp, #7
 8002afc:	f7ff ffb7 	bl	8002a6e <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj>
}
 8002b00:	b003      	add	sp, #12
 8002b02:	f85d fb04 	ldr.w	pc, [sp], #4

08002b06 <_ZThn8_N9UIPClient5writeEh>:
  virtual size_t write(uint8_t);
 8002b06:	f1a0 0008 	sub.w	r0, r0, #8
 8002b0a:	f7ff bff0 	b.w	8002aee <_ZN9UIPClient5writeEh>

08002b0e <_ZN9UIPClient5writeEPKhj>:
{
 8002b0e:	b508      	push	{r3, lr}
  return _write(data, buf, size);
 8002b10:	68c0      	ldr	r0, [r0, #12]
 8002b12:	f7ff ffac 	bl	8002a6e <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj>
}
 8002b16:	bd08      	pop	{r3, pc}

08002b18 <_ZThn8_N9UIPClient5writeEPKhj>:
  virtual size_t write(const uint8_t *buf, size_t size);
 8002b18:	f1a0 0008 	sub.w	r0, r0, #8
 8002b1c:	f7ff bff7 	b.w	8002b0e <_ZN9UIPClient5writeEPKhj>

08002b20 <_ZN9UIPClient17availableForWriteEv>:
{
 8002b20:	b510      	push	{r4, lr}
 8002b22:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 8002b24:	f000 f9de 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  if (data->packets_out[0] == NOBLOCK)
 8002b28:	68e4      	ldr	r4, [r4, #12]
 8002b2a:	79e3      	ldrb	r3, [r4, #7]
 8002b2c:	b143      	cbz	r3, 8002b40 <_ZN9UIPClient17availableForWriteEv+0x20>
  uint8_t p = _currentBlock(data->packets_out);
 8002b2e:	1de0      	adds	r0, r4, #7
 8002b30:	f7ff ff90 	bl	8002a54 <_ZN9UIPClient13_currentBlockEPh>
  int used = UIP_SOCKET_DATALEN * p + data->out_pos;
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	eb03 2040 	add.w	r0, r3, r0, lsl #9
  return MAX_AVAILABLE - used;
 8002b3a:	f5c0 6020 	rsb	r0, r0, #2560	; 0xa00
}
 8002b3e:	bd10      	pop	{r4, pc}
    return MAX_AVAILABLE;
 8002b40:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 8002b44:	e7fb      	b.n	8002b3e <_ZN9UIPClient17availableForWriteEv+0x1e>

08002b46 <_ZN9UIPClient9_eatBlockEPh>:

void
UIPClient::_eatBlock(memhandle* block)
{
 8002b46:	b510      	push	{r4, lr}
 8002b48:	4604      	mov	r4, r0
      LogObject.uart_send_dec(start[i]);
      LogObject.uart_send_str(F(" "));
    }
  LogObject.uart_send_str(F("-> "));
#endif
  Enc28J60Network::freeBlock(block[0]);
 8002b4a:	7800      	ldrb	r0, [r0, #0]
 8002b4c:	f001 fbea 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS-1; i++)
 8002b50:	4623      	mov	r3, r4
 8002b52:	1d22      	adds	r2, r4, #4
    {
      block[i] = block[i+1];
 8002b54:	7859      	ldrb	r1, [r3, #1]
 8002b56:	f803 1b01 	strb.w	r1, [r3], #1
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS-1; i++)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d1fa      	bne.n	8002b54 <_ZN9UIPClient9_eatBlockEPh+0xe>
    }
  block[UIP_SOCKET_NUMPACKETS-1] = NOBLOCK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	7123      	strb	r3, [r4, #4]
      LogObject.uart_send_dec(start[i]);
      LogObject.uart_send_str(F(" "));
    }
  LogObject.uart_send_strln(F(""));
#endif
}
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <_ZN9UIPClient4readEPhj>:
{
 8002b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (data)
 8002b68:	68c3      	ldr	r3, [r0, #12]
{
 8002b6a:	4605      	mov	r5, r0
 8002b6c:	460f      	mov	r7, r1
 8002b6e:	4616      	mov	r6, r2
  if (data)
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d03c      	beq.n	8002bee <_ZN9UIPClient4readEPhj+0x8a>
      if (data->packets_in[0] == NOBLOCK)
 8002b74:	7898      	ldrb	r0, [r3, #2]
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d02e      	beq.n	8002bd8 <_ZN9UIPClient4readEPhj+0x74>
              if (uip_stopped(&uip_conns[data->conn_index]) && !(data->state & (UIP_CLIENT_CLOSE | UIP_CLIENT_REMOTECLOSED)))
 8002b7a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002bf4 <_ZN9UIPClient4readEPhj+0x90>
      uint16_t remain = size;
 8002b7e:	b294      	uxth	r4, r2
          read = Enc28J60Network::readPacket(data->packets_in[0],0,buf+size-remain,remain);
 8002b80:	68e8      	ldr	r0, [r5, #12]
 8002b82:	1b32      	subs	r2, r6, r4
 8002b84:	4623      	mov	r3, r4
 8002b86:	2100      	movs	r1, #0
 8002b88:	443a      	add	r2, r7
 8002b8a:	7880      	ldrb	r0, [r0, #2]
 8002b8c:	f001 f96e 	bl	8003e6c <_ZN15Enc28J60Network10readPacketEhtPht>
          if (read == Enc28J60Network::blockSize(data->packets_in[0]))
 8002b90:	68eb      	ldr	r3, [r5, #12]
          read = Enc28J60Network::readPacket(data->packets_in[0],0,buf+size-remain,remain);
 8002b92:	4681      	mov	r9, r0
          if (read == Enc28J60Network::blockSize(data->packets_in[0]))
 8002b94:	7898      	ldrb	r0, [r3, #2]
 8002b96:	f001 f817 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
 8002b9a:	4548      	cmp	r0, r9
 8002b9c:	68eb      	ldr	r3, [r5, #12]
 8002b9e:	d11d      	bne.n	8002bdc <_ZN9UIPClient4readEPhj+0x78>
              remain -= read;
 8002ba0:	1a24      	subs	r4, r4, r0
              _eatBlock(&data->packets_in[0]);
 8002ba2:	1c98      	adds	r0, r3, #2
 8002ba4:	f7ff ffcf 	bl	8002b46 <_ZN9UIPClient9_eatBlockEPh>
              if (uip_stopped(&uip_conns[data->conn_index]) && !(data->state & (UIP_CLIENT_CLOSE | UIP_CLIENT_REMOTECLOSED)))
 8002ba8:	68ea      	ldr	r2, [r5, #12]
              remain -= read;
 8002baa:	b2a4      	uxth	r4, r4
              if (uip_stopped(&uip_conns[data->conn_index]) && !(data->state & (UIP_CLIENT_CLOSE | UIP_CLIENT_REMOTECLOSED)))
 8002bac:	7813      	ldrb	r3, [r2, #0]
 8002bae:	eb08 1343 	add.w	r3, r8, r3, lsl #5
 8002bb2:	7e5b      	ldrb	r3, [r3, #25]
 8002bb4:	06d8      	lsls	r0, r3, #27
 8002bb6:	d506      	bpl.n	8002bc6 <_ZN9UIPClient4readEPhj+0x62>
 8002bb8:	7853      	ldrb	r3, [r2, #1]
 8002bba:	f013 0f06 	tst.w	r3, #6
                data->state |= UIP_CLIENT_RESTART;
 8002bbe:	bf04      	itt	eq
 8002bc0:	f043 0308 	orreq.w	r3, r3, #8
 8002bc4:	7053      	strbeq	r3, [r2, #1]
              if (data->packets_in[0] == NOBLOCK)
 8002bc6:	68ea      	ldr	r2, [r5, #12]
 8002bc8:	7893      	ldrb	r3, [r2, #2]
 8002bca:	b96b      	cbnz	r3, 8002be8 <_ZN9UIPClient4readEPhj+0x84>
                  if (data->state & UIP_CLIENT_REMOTECLOSED)
 8002bcc:	7851      	ldrb	r1, [r2, #1]
                  return size-remain;
 8002bce:	1b30      	subs	r0, r6, r4
                  if (data->state & UIP_CLIENT_REMOTECLOSED)
 8002bd0:	0749      	lsls	r1, r1, #29
                      data->state = 0;
 8002bd2:	bf44      	itt	mi
 8002bd4:	7053      	strbmi	r3, [r2, #1]
                      data = NULL;
 8002bd6:	60eb      	strmi	r3, [r5, #12]
}
 8002bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              Enc28J60Network::resizeBlock(data->packets_in[0],read);
 8002bdc:	4649      	mov	r1, r9
 8002bde:	7898      	ldrb	r0, [r3, #2]
 8002be0:	f001 fbb8 	bl	8004354 <_ZN10MemoryPool11resizeBlockEht>
      return size;
 8002be4:	4630      	mov	r0, r6
 8002be6:	e7f7      	b.n	8002bd8 <_ZN9UIPClient4readEPhj+0x74>
      while(remain > 0);
 8002be8:	2c00      	cmp	r4, #0
 8002bea:	d1c9      	bne.n	8002b80 <_ZN9UIPClient4readEPhj+0x1c>
 8002bec:	e7fa      	b.n	8002be4 <_ZN9UIPClient4readEPhj+0x80>
  return -1;
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	e7f1      	b.n	8002bd8 <_ZN9UIPClient4readEPhj+0x74>
 8002bf4:	20000420 	.word	0x20000420

08002bf8 <_ZThn8_N9UIPClient4readEPhj>:
  virtual int read(uint8_t *buf, size_t size);
 8002bf8:	f1a0 0008 	sub.w	r0, r0, #8
 8002bfc:	f7ff bfb2 	b.w	8002b64 <_ZN9UIPClient4readEPhj>

08002c00 <_ZN9UIPClient12_flushBlocksEPh>:

void
UIPClient::_flushBlocks(memhandle* block)
{
 8002c00:	b570      	push	{r4, r5, r6, lr}
  LogObject.uart_send_strln(F("UIPClient::_flushBlocks(memhandle* block) DEBUG_V3:Function started"));
#endif
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS; i++)
    {
      Enc28J60Network::freeBlock(block[i]);
      block[i] = NOBLOCK;
 8002c02:	2600      	movs	r6, #0
 8002c04:	1e45      	subs	r5, r0, #1
 8002c06:	1d04      	adds	r4, r0, #4
      Enc28J60Network::freeBlock(block[i]);
 8002c08:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002c0c:	f001 fb8a 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS; i++)
 8002c10:	42a5      	cmp	r5, r4
      block[i] = NOBLOCK;
 8002c12:	702e      	strb	r6, [r5, #0]
  for (uint8_t i = 0; i < UIP_SOCKET_NUMPACKETS; i++)
 8002c14:	d1f8      	bne.n	8002c08 <_ZN9UIPClient12_flushBlocksEPh+0x8>
    }
}
 8002c16:	bd70      	pop	{r4, r5, r6, pc}

08002c18 <_ZN9UIPClient4stopEv>:
{
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	4604      	mov	r4, r0
  if (data && data->state)
 8002c1c:	68c0      	ldr	r0, [r0, #12]
 8002c1e:	b160      	cbz	r0, 8002c3a <_ZN9UIPClient4stopEv+0x22>
 8002c20:	7843      	ldrb	r3, [r0, #1]
 8002c22:	b153      	cbz	r3, 8002c3a <_ZN9UIPClient4stopEv+0x22>
      _flushBlocks(&data->packets_in[0]);
 8002c24:	3002      	adds	r0, #2
 8002c26:	f7ff ffeb 	bl	8002c00 <_ZN9UIPClient12_flushBlocksEPh>
      if (data->state & UIP_CLIENT_REMOTECLOSED)
 8002c2a:	68e2      	ldr	r2, [r4, #12]
 8002c2c:	7853      	ldrb	r3, [r2, #1]
 8002c2e:	0759      	lsls	r1, r3, #29
          data->state = 0;
 8002c30:	bf4c      	ite	mi
 8002c32:	2300      	movmi	r3, #0
          data->state |= UIP_CLIENT_CLOSE;
 8002c34:	f043 0302 	orrpl.w	r3, r3, #2
 8002c38:	7053      	strb	r3, [r2, #1]
  data = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60e3      	str	r3, [r4, #12]
}
 8002c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UIPEthernetClass::tick();
 8002c42:	f000 b94f 	b.w	8002ee4 <_ZN16UIPEthernetClass4tickEv>

08002c46 <_ZThn8_N9UIPClient4stopEv>:
  virtual void stop();
 8002c46:	f1a0 0008 	sub.w	r0, r0, #8
 8002c4a:	f7ff bfe5 	b.w	8002c18 <_ZN9UIPClient4stopEv>

08002c4e <_ZN9UIPClient5flushEv>:
  if (data)
 8002c4e:	68c0      	ldr	r0, [r0, #12]
 8002c50:	b110      	cbz	r0, 8002c58 <_ZN9UIPClient5flushEv+0xa>
      _flushBlocks(&data->packets_in[0]);
 8002c52:	3002      	adds	r0, #2
 8002c54:	f7ff bfd4 	b.w	8002c00 <_ZN9UIPClient12_flushBlocksEPh>
}
 8002c58:	4770      	bx	lr

08002c5a <_ZThn8_N9UIPClient5flushEv>:
  virtual void flush();
 8002c5a:	f1a0 0008 	sub.w	r0, r0, #8
 8002c5e:	f7ff bff6 	b.w	8002c4e <_ZN9UIPClient5flushEv>
	...

08002c64 <uipclient_appcall>:
{
 8002c64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uip_userdata_t *u = (uip_userdata_t*)uip_conn->appstate;
 8002c68:	4e62      	ldr	r6, [pc, #392]	; (8002df4 <uipclient_appcall+0x190>)
 8002c6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e14 <uipclient_appcall+0x1b0>
 8002c6e:	6833      	ldr	r3, [r6, #0]
 8002c70:	4f61      	ldr	r7, [pc, #388]	; (8002df8 <uipclient_appcall+0x194>)
 8002c72:	69dc      	ldr	r4, [r3, #28]
  if (!u && uip_connected())
 8002c74:	b964      	cbnz	r4, 8002c90 <uipclient_appcall+0x2c>
 8002c76:	f898 3000 	ldrb.w	r3, [r8]
 8002c7a:	065c      	lsls	r4, r3, #25
 8002c7c:	d401      	bmi.n	8002c82 <uipclient_appcall+0x1e>
  uint16_t send_len = 0;
 8002c7e:	2500      	movs	r5, #0
 8002c80:	e05a      	b.n	8002d38 <uipclient_appcall+0xd4>
      u = (uip_userdata_t*) UIPClient::_allocateData();
 8002c82:	f7ff fec3 	bl	8002a0c <_ZN9UIPClient13_allocateDataEv>
      if (u)
 8002c86:	4604      	mov	r4, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d0f8      	beq.n	8002c7e <uipclient_appcall+0x1a>
          uip_conn->appstate = u;
 8002c8c:	6833      	ldr	r3, [r6, #0]
 8002c8e:	61d8      	str	r0, [r3, #28]
      if (uip_newdata())
 8002c90:	f898 3000 	ldrb.w	r3, [r8]
 8002c94:	079b      	lsls	r3, r3, #30
 8002c96:	d526      	bpl.n	8002ce6 <uipclient_appcall+0x82>
          if (uip_len && !(u->state & (UIP_CLIENT_CLOSE | UIP_CLIENT_REMOTECLOSED)))
 8002c98:	883b      	ldrh	r3, [r7, #0]
 8002c9a:	b323      	cbz	r3, 8002ce6 <uipclient_appcall+0x82>
 8002c9c:	7865      	ldrb	r5, [r4, #1]
 8002c9e:	f015 0506 	ands.w	r5, r5, #6
 8002ca2:	d120      	bne.n	8002ce6 <uipclient_appcall+0x82>
 8002ca4:	f104 0902 	add.w	r9, r4, #2
                  if (u->packets_in[i] == NOBLOCK)
 8002ca8:	f819 ab01 	ldrb.w	sl, [r9], #1
 8002cac:	f1ba 0f00 	cmp.w	sl, #0
 8002cb0:	d14b      	bne.n	8002d4a <uipclient_appcall+0xe6>
                      u->packets_in[i] = Enc28J60Network::allocBlock(uip_len);
 8002cb2:	8838      	ldrh	r0, [r7, #0]
 8002cb4:	f001 fac8 	bl	8004248 <_ZN10MemoryPool10allocBlockEt>
 8002cb8:	f809 0c01 	strb.w	r0, [r9, #-1]
                      if (u->packets_in[i] != NOBLOCK)
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d044      	beq.n	8002d4a <uipclient_appcall+0xe6>
                          Enc28J60Network::copyPacket(u->packets_in[i],0,UIPEthernetClass::in_packet,((uint8_t*)uip_appdata)-uip_buf,uip_len);
 8002cc0:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <uipclient_appcall+0x198>)
 8002cc2:	4a4f      	ldr	r2, [pc, #316]	; (8002e00 <uipclient_appcall+0x19c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	883a      	ldrh	r2, [r7, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <uipclient_appcall+0x1a0>)
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	f001 f9a6 	bl	8004024 <_ZN15Enc28J60Network10copyPacketEhthtt>
                          if (i == UIP_SOCKET_NUMPACKETS-1)
 8002cd8:	2d04      	cmp	r5, #4
 8002cda:	d104      	bne.n	8002ce6 <uipclient_appcall+0x82>
              uip_stop();
 8002cdc:	6832      	ldr	r2, [r6, #0]
 8002cde:	7e53      	ldrb	r3, [r2, #25]
 8002ce0:	f043 0310 	orr.w	r3, r3, #16
 8002ce4:	7653      	strb	r3, [r2, #25]
      if (u->state & UIP_CLIENT_RESTART)
 8002ce6:	7863      	ldrb	r3, [r4, #1]
 8002ce8:	0718      	lsls	r0, r3, #28
 8002cea:	d50d      	bpl.n	8002d08 <uipclient_appcall+0xa4>
 8002cec:	f898 2000 	ldrb.w	r2, [r8]
          u->state &= ~UIP_CLIENT_RESTART;
 8002cf0:	f023 0308 	bic.w	r3, r3, #8
 8002cf4:	7063      	strb	r3, [r4, #1]
          uip_restart();
 8002cf6:	f042 0302 	orr.w	r3, r2, #2
 8002cfa:	6832      	ldr	r2, [r6, #0]
 8002cfc:	f888 3000 	strb.w	r3, [r8]
 8002d00:	7e53      	ldrb	r3, [r2, #25]
 8002d02:	f023 0310 	bic.w	r3, r3, #16
 8002d06:	7653      	strb	r3, [r2, #25]
      if (uip_closed() || uip_timedout() || uip_aborted())
 8002d08:	f998 2000 	ldrsb.w	r2, [r8]
 8002d0c:	f898 3000 	ldrb.w	r3, [r8]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	db02      	blt.n	8002d1a <uipclient_appcall+0xb6>
 8002d14:	f013 0f30 	tst.w	r3, #48	; 0x30
 8002d18:	d021      	beq.n	8002d5e <uipclient_appcall+0xfa>
          UIPClient::_flushBlocks(&u->packets_out[0]);
 8002d1a:	1de0      	adds	r0, r4, #7
 8002d1c:	f7ff ff70 	bl	8002c00 <_ZN9UIPClient12_flushBlocksEPh>
          if (u->packets_in[0] != NOBLOCK)
 8002d20:	78a3      	ldrb	r3, [r4, #2]
 8002d22:	b12b      	cbz	r3, 8002d30 <uipclient_appcall+0xcc>
              ((uip_userdata_closed_t *)u)->lport = uip_conn->lport;
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	889b      	ldrh	r3, [r3, #4]
 8002d28:	8123      	strh	r3, [r4, #8]
              u->state |= UIP_CLIENT_REMOTECLOSED;
 8002d2a:	7863      	ldrb	r3, [r4, #1]
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
          uip_conn->appstate = NULL;
 8002d30:	2500      	movs	r5, #0
            u->state = 0;
 8002d32:	7063      	strb	r3, [r4, #1]
          uip_conn->appstate = NULL;
 8002d34:	6833      	ldr	r3, [r6, #0]
 8002d36:	61dd      	str	r5, [r3, #28]
  uip_send(uip_appdata,send_len);
 8002d38:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <uipclient_appcall+0x198>)
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	f002 fe77 	bl	8005a30 <uip_send>
  uip_len = send_len;
 8002d42:	803d      	strh	r5, [r7, #0]
}
 8002d44:	b002      	add	sp, #8
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
              for (uint8_t i=0; i < UIP_SOCKET_NUMPACKETS; i++)
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	b2ed      	uxtb	r5, r5
 8002d4e:	2d05      	cmp	r5, #5
 8002d50:	d1aa      	bne.n	8002ca8 <uipclient_appcall+0x44>
              UIPEthernetClass::packetstate &= ~UIPETHERNET_FREEPACKET;
 8002d52:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <uipclient_appcall+0x1a4>)
 8002d54:	7813      	ldrb	r3, [r2, #0]
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	7013      	strb	r3, [r2, #0]
 8002d5c:	e7be      	b.n	8002cdc <uipclient_appcall+0x78>
      if (uip_acked())
 8002d5e:	07d9      	lsls	r1, r3, #31
 8002d60:	d52a      	bpl.n	8002db8 <uipclient_appcall+0x154>
          UIPClient::_eatBlock(&u->packets_out[0]);
 8002d62:	1de0      	adds	r0, r4, #7
 8002d64:	f7ff feef 	bl	8002b46 <_ZN9UIPClient9_eatBlockEPh>
          if (u->packets_out[0] != NOBLOCK)
 8002d68:	79e0      	ldrb	r0, [r4, #7]
 8002d6a:	b340      	cbz	r0, 8002dbe <uipclient_appcall+0x15a>
              if (u->packets_out[1] == NOBLOCK)
 8002d6c:	7a21      	ldrb	r1, [r4, #8]
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	d132      	bne.n	8002dd8 <uipclient_appcall+0x174>
                  send_len = u->out_pos;
 8002d72:	89a5      	ldrh	r5, [r4, #12]
                  if (send_len > 0)
 8002d74:	2d00      	cmp	r5, #0
 8002d76:	d082      	beq.n	8002c7e <uipclient_appcall+0x1a>
                      Enc28J60Network::resizeBlock(u->packets_out[0],0,send_len);
 8002d78:	462a      	mov	r2, r5
 8002d7a:	f001 faf9 	bl	8004370 <_ZN10MemoryPool11resizeBlockEhtt>
                  UIPEthernetClass::uip_hdrlen = ((uint8_t*)uip_appdata)-uip_buf;
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <uipclient_appcall+0x198>)
 8002d80:	4e22      	ldr	r6, [pc, #136]	; (8002e0c <uipclient_appcall+0x1a8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <uipclient_appcall+0x19c>)
 8002d86:	1ac0      	subs	r0, r0, r3
 8002d88:	b2c0      	uxtb	r0, r0
 8002d8a:	7030      	strb	r0, [r6, #0]
                  UIPEthernetClass::uip_packet = Enc28J60Network::allocBlock(UIPEthernetClass::uip_hdrlen+send_len + UIP_SENDBUFFER_OFFSET + UIP_SENDBUFFER_PADDING);
 8002d8c:	3008      	adds	r0, #8
 8002d8e:	4428      	add	r0, r5
 8002d90:	b280      	uxth	r0, r0
 8002d92:	f001 fa59 	bl	8004248 <_ZN10MemoryPool10allocBlockEt>
 8002d96:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <uipclient_appcall+0x1ac>)
 8002d98:	7010      	strb	r0, [r2, #0]
                  if (UIPEthernetClass::uip_packet != NOBLOCK)
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d0cc      	beq.n	8002d38 <uipclient_appcall+0xd4>
                      Enc28J60Network::copyPacket(UIPEthernetClass::uip_packet,UIPEthernetClass::uip_hdrlen + UIP_SENDBUFFER_OFFSET,u->packets_out[0],0,send_len);
 8002d9e:	7831      	ldrb	r1, [r6, #0]
 8002da0:	79e2      	ldrb	r2, [r4, #7]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9500      	str	r5, [sp, #0]
 8002da6:	3101      	adds	r1, #1
 8002da8:	f001 f93c 	bl	8004024 <_ZN15Enc28J60Network10copyPacketEhthtt>
                      UIPEthernetClass::packetstate |= UIPETHERNET_SENDPACKET;
 8002dac:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <uipclient_appcall+0x1a4>)
 8002dae:	7813      	ldrb	r3, [r2, #0]
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	7013      	strb	r3, [r2, #0]
 8002db6:	e7bf      	b.n	8002d38 <uipclient_appcall+0xd4>
      if (uip_poll() || uip_rexmit())
 8002db8:	f013 0f0c 	tst.w	r3, #12
 8002dbc:	d1d4      	bne.n	8002d68 <uipclient_appcall+0x104>
      if (u->state & UIP_CLIENT_CLOSE)
 8002dbe:	7863      	ldrb	r3, [r4, #1]
 8002dc0:	079a      	lsls	r2, r3, #30
 8002dc2:	f57f af5c 	bpl.w	8002c7e <uipclient_appcall+0x1a>
          if (u->packets_out[0] == NOBLOCK)
 8002dc6:	79e5      	ldrb	r5, [r4, #7]
 8002dc8:	b96d      	cbnz	r5, 8002de6 <uipclient_appcall+0x182>
              u->state = 0;
 8002dca:	7065      	strb	r5, [r4, #1]
              uip_conn->appstate = NULL;
 8002dcc:	6833      	ldr	r3, [r6, #0]
 8002dce:	61dd      	str	r5, [r3, #28]
              uip_close();
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f888 3000 	strb.w	r3, [r8]
 8002dd6:	e7af      	b.n	8002d38 <uipclient_appcall+0xd4>
                send_len = Enc28J60Network::blockSize(u->packets_out[0]);
 8002dd8:	f000 fef6 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
              if (send_len > 0)
 8002ddc:	4605      	mov	r5, r0
 8002dde:	2800      	cmp	r0, #0
 8002de0:	f43f af4d 	beq.w	8002c7e <uipclient_appcall+0x1a>
 8002de4:	e7cb      	b.n	8002d7e <uipclient_appcall+0x11a>
              uip_stop();
 8002de6:	6832      	ldr	r2, [r6, #0]
 8002de8:	7e53      	ldrb	r3, [r2, #25]
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	7653      	strb	r3, [r2, #25]
 8002df0:	e745      	b.n	8002c7e <uipclient_appcall+0x1a>
 8002df2:	bf00      	nop
 8002df4:	2000041c 	.word	0x2000041c
 8002df8:	20000404 	.word	0x20000404
 8002dfc:	20000418 	.word	0x20000418
 8002e00:	200004b4 	.word	0x200004b4
 8002e04:	20000220 	.word	0x20000220
 8002e08:	2000020e 	.word	0x2000020e
 8002e0c:	2000020c 	.word	0x2000020c
 8002e10:	2000020d 	.word	0x2000020d
 8002e14:	20000410 	.word	0x20000410

08002e18 <_GLOBAL__sub_I__ZN9UIPClient8all_dataE>:
const IPAddress INADDR_NONE(0,0,0,0);
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	b507      	push	{r0, r1, r2, lr}
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	4803      	ldr	r0, [pc, #12]	; (8002e30 <_GLOBAL__sub_I__ZN9UIPClient8all_dataE+0x18>)
 8002e24:	f000 fd0e 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
 8002e28:	b003      	add	sp, #12
 8002e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e2e:	bf00      	nop
 8002e30:	2000014c 	.word	0x2000014c

08002e34 <_ZN16UIPEthernetClass7localIPEv>:
    return EthernetNoHardware;
  return EthernetENC28J60;
}

IPAddress UIPEthernetClass::localIP()
{
 8002e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e36:	4604      	mov	r4, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPEthernetClass::localIP() DEBUG_V3:Function started"));
  #endif
  IPAddress ret;
 8002e38:	a802      	add	r0, sp, #8
 8002e3a:	f000 fcfb 	bl	8003834 <_ZN9IPAddressC1Ev>
  uip_ipaddr_t a;
  uip_gethostaddr(a);
 8002e3e:	4907      	ldr	r1, [pc, #28]	; (8002e5c <_ZN16UIPEthernetClass7localIPEv+0x28>)
  return ip_addr_uip(a);
 8002e40:	4620      	mov	r0, r4
  uip_gethostaddr(a);
 8002e42:	884b      	ldrh	r3, [r1, #2]
 8002e44:	880a      	ldrh	r2, [r1, #0]
  return ip_addr_uip(a);
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	788b      	ldrb	r3, [r1, #2]
 8002e4c:	0a12      	lsrs	r2, r2, #8
 8002e4e:	7809      	ldrb	r1, [r1, #0]
 8002e50:	f000 fcf8 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
}
 8002e54:	4620      	mov	r0, r4
 8002e56:	b004      	add	sp, #16
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200004b0 	.word	0x200004b0

08002e60 <_ZN16UIPEthernetClass11dnsServerIPEv>:
class IPAddress : public Printable {
 8002e60:	4a02      	ldr	r2, [pc, #8]	; (8002e6c <_ZN16UIPEthernetClass11dnsServerIPEv+0xc>)
 8002e62:	6002      	str	r2, [r0, #0]
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <_ZN16UIPEthernetClass11dnsServerIPEv+0x10>)
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	6042      	str	r2, [r0, #4]
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPEthernetClass::dnsServerIP() DEBUG_V3:Function started"));
  #endif
  return _dnsServerAddress;
}
 8002e6a:	4770      	bx	lr
 8002e6c:	08007404 	.word	0x08007404
 8002e70:	20000214 	.word	0x20000214

08002e74 <_ZN16UIPEthernetClass12network_sendEv>:
#endif /* UIP_UDP */
    }
}

bool UIPEthernetClass::network_send()
{
 8002e74:	b538      	push	{r3, r4, r5, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPEthernetClass::network_send() DEBUG_V3:Function started"));
  #endif
  if (packetstate & UIPETHERNET_SENDPACKET)
 8002e76:	4c16      	ldr	r4, [pc, #88]	; (8002ed0 <_ZN16UIPEthernetClass12network_sendEv+0x5c>)
 8002e78:	4d16      	ldr	r5, [pc, #88]	; (8002ed4 <_ZN16UIPEthernetClass12network_sendEv+0x60>)
 8002e7a:	7823      	ldrb	r3, [r4, #0]
 8002e7c:	f013 0f02 	tst.w	r3, #2
 8002e80:	d015      	beq.n	8002eae <_ZN16UIPEthernetClass12network_sendEv+0x3a>
      LogObject.uart_send_str(F("UIPEthernetClass::network_send() DEBUG:uip_packet: "));
      LogObject.uart_send_dec(uip_packet);
      LogObject.uart_send_str(F(", hdrlen: "));
      LogObject.uart_send_decln(uip_hdrlen);
#endif
      Enc28J60Network::writePacket(uip_packet, UIP_SENDBUFFER_OFFSET,uip_buf,uip_hdrlen);
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <_ZN16UIPEthernetClass12network_sendEv+0x64>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <_ZN16UIPEthernetClass12network_sendEv+0x68>)
 8002e8a:	7828      	ldrb	r0, [r5, #0]
 8002e8c:	f000 fffa 	bl	8003e84 <_ZN15Enc28J60Network11writePacketEhtPht>
      packetstate &= ~ UIPETHERNET_SENDPACKET;
 8002e90:	7823      	ldrb	r3, [r4, #0]
 8002e92:	f023 0302 	bic.w	r3, r3, #2
 8002e96:	7023      	strb	r3, [r4, #0]
      Enc28J60Network::writePacket(uip_packet, UIP_SENDBUFFER_OFFSET,uip_buf,uip_len);
      goto sendandfree;
    }
  return false;
sendandfree:
  bool success = Enc28J60Network::sendPacket(uip_packet);
 8002e98:	7828      	ldrb	r0, [r5, #0]
 8002e9a:	f001 f837 	bl	8003f0c <_ZN15Enc28J60Network10sendPacketEh>
 8002e9e:	4604      	mov	r4, r0
  Enc28J60Network::freeBlock(uip_packet);
 8002ea0:	7828      	ldrb	r0, [r5, #0]
 8002ea2:	f001 fa3f 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
  uip_packet = NOBLOCK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	702b      	strb	r3, [r5, #0]
  return success;
}
 8002eaa:	4620      	mov	r0, r4
 8002eac:	bd38      	pop	{r3, r4, r5, pc}
  uip_packet = Enc28J60Network::allocBlock(uip_len + UIP_SENDBUFFER_OFFSET + UIP_SENDBUFFER_PADDING);
 8002eae:	4c0c      	ldr	r4, [pc, #48]	; (8002ee0 <_ZN16UIPEthernetClass12network_sendEv+0x6c>)
 8002eb0:	8820      	ldrh	r0, [r4, #0]
 8002eb2:	3008      	adds	r0, #8
 8002eb4:	b280      	uxth	r0, r0
 8002eb6:	f001 f9c7 	bl	8004248 <_ZN10MemoryPool10allocBlockEt>
 8002eba:	7028      	strb	r0, [r5, #0]
  if (uip_packet != NOBLOCK)
 8002ebc:	b128      	cbz	r0, 8002eca <_ZN16UIPEthernetClass12network_sendEv+0x56>
      Enc28J60Network::writePacket(uip_packet, UIP_SENDBUFFER_OFFSET,uip_buf,uip_len);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	8823      	ldrh	r3, [r4, #0]
 8002ec2:	4a06      	ldr	r2, [pc, #24]	; (8002edc <_ZN16UIPEthernetClass12network_sendEv+0x68>)
 8002ec4:	f000 ffde 	bl	8003e84 <_ZN15Enc28J60Network11writePacketEhtPht>
      goto sendandfree;
 8002ec8:	e7e6      	b.n	8002e98 <_ZN16UIPEthernetClass12network_sendEv+0x24>
  return false;
 8002eca:	4604      	mov	r4, r0
 8002ecc:	e7ed      	b.n	8002eaa <_ZN16UIPEthernetClass12network_sendEv+0x36>
 8002ece:	bf00      	nop
 8002ed0:	2000020e 	.word	0x2000020e
 8002ed4:	2000020d 	.word	0x2000020d
 8002ed8:	2000020c 	.word	0x2000020c
 8002edc:	200004b4 	.word	0x200004b4
 8002ee0:	20000404 	.word	0x20000404

08002ee4 <_ZN16UIPEthernetClass4tickEv>:
{
 8002ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
if (Enc28J60Network::geterevid()==0)
 8002ee8:	f001 f996 	bl	8004218 <_ZN15Enc28J60Network9geterevidEv>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d074      	beq.n	8002fda <_ZN16UIPEthernetClass4tickEv+0xf6>
  if (in_packet == NOBLOCK)
 8002ef0:	4c44      	ldr	r4, [pc, #272]	; (8003004 <_ZN16UIPEthernetClass4tickEv+0x120>)
 8002ef2:	7823      	ldrb	r3, [r4, #0]
 8002ef4:	b913      	cbnz	r3, 8002efc <_ZN16UIPEthernetClass4tickEv+0x18>
    in_packet = Enc28J60Network::receivePacket();
 8002ef6:	f000 ff3f 	bl	8003d78 <_ZN15Enc28J60Network13receivePacketEv>
 8002efa:	7020      	strb	r0, [r4, #0]
  if (in_packet != NOBLOCK)
 8002efc:	7820      	ldrb	r0, [r4, #0]
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d033      	beq.n	8002f6a <_ZN16UIPEthernetClass4tickEv+0x86>
    packetstate = UIPETHERNET_FREEPACKET;
 8002f02:	2701      	movs	r7, #1
 8002f04:	4e40      	ldr	r6, [pc, #256]	; (8003008 <_ZN16UIPEthernetClass4tickEv+0x124>)
    uip_len = Enc28J60Network::blockSize(in_packet);
 8002f06:	4d41      	ldr	r5, [pc, #260]	; (800300c <_ZN16UIPEthernetClass4tickEv+0x128>)
    packetstate = UIPETHERNET_FREEPACKET;
 8002f08:	7037      	strb	r7, [r6, #0]
    uip_len = Enc28J60Network::blockSize(in_packet);
 8002f0a:	f000 fe5d 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
 8002f0e:	46b0      	mov	r8, r6
 8002f10:	8028      	strh	r0, [r5, #0]
    if (uip_len > 0)
 8002f12:	b300      	cbz	r0, 8002f56 <_ZN16UIPEthernetClass4tickEv+0x72>
      Enc28J60Network::readPacket(in_packet,0,(uint8_t*)uip_buf,UIP_BUFSIZE);
 8002f14:	4e3e      	ldr	r6, [pc, #248]	; (8003010 <_ZN16UIPEthernetClass4tickEv+0x12c>)
 8002f16:	2362      	movs	r3, #98	; 0x62
 8002f18:	4632      	mov	r2, r6
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	7820      	ldrb	r0, [r4, #0]
 8002f1e:	f000 ffa5 	bl	8003e6c <_ZN15Enc28J60Network10readPacketEhtPht>
      if (ETH_HDR ->type == HTONS(UIP_ETHTYPE_IP))
 8002f22:	89b3      	ldrh	r3, [r6, #12]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d10e      	bne.n	8002f46 <_ZN16UIPEthernetClass4tickEv+0x62>
        uip_packet = in_packet; //required for upper_layer_checksum of in_packet!
 8002f28:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <_ZN16UIPEthernetClass4tickEv+0x130>)
 8002f2a:	7822      	ldrb	r2, [r4, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
        uip_arp_ipin();
 8002f2e:	f002 fe79 	bl	8005c24 <uip_arp_ipin>
        uip_input();
 8002f32:	4638      	mov	r0, r7
 8002f34:	f001 fc50 	bl	80047d8 <uip_process>
        if (uip_len > 0)
 8002f38:	882b      	ldrh	r3, [r5, #0]
 8002f3a:	b163      	cbz	r3, 8002f56 <_ZN16UIPEthernetClass4tickEv+0x72>
          uip_arp_out();
 8002f3c:	f002 ff78 	bl	8005e30 <uip_arp_out>
               network_send();
 8002f40:	f7ff ff98 	bl	8002e74 <_ZN16UIPEthernetClass12network_sendEv>
 8002f44:	e007      	b.n	8002f56 <_ZN16UIPEthernetClass4tickEv+0x72>
      else if (ETH_HDR ->type == HTONS(UIP_ETHTYPE_ARP))
 8002f46:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8002f4a:	d104      	bne.n	8002f56 <_ZN16UIPEthernetClass4tickEv+0x72>
             uip_arp_arpin();
 8002f4c:	f002 fee8 	bl	8005d20 <uip_arp_arpin>
             if (uip_len > 0)
 8002f50:	882b      	ldrh	r3, [r5, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f4      	bne.n	8002f40 <_ZN16UIPEthernetClass4tickEv+0x5c>
    if (in_packet != NOBLOCK && (packetstate & UIPETHERNET_FREEPACKET))
 8002f56:	7823      	ldrb	r3, [r4, #0]
 8002f58:	b13b      	cbz	r3, 8002f6a <_ZN16UIPEthernetClass4tickEv+0x86>
 8002f5a:	f898 3000 	ldrb.w	r3, [r8]
 8002f5e:	07db      	lsls	r3, r3, #31
 8002f60:	d503      	bpl.n	8002f6a <_ZN16UIPEthernetClass4tickEv+0x86>
      Enc28J60Network::freePacket();
 8002f62:	f000 ff07 	bl	8003d74 <_ZN15Enc28J60Network10freePacketEv>
      in_packet = NOBLOCK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	7023      	strb	r3, [r4, #0]
  unsigned long now = millis();
 8002f6a:	f000 fe27 	bl	8003bbc <millis>
  for (int i = 0; i < UIP_CONNS; i++)
 8002f6e:	f04f 0800 	mov.w	r8, #0
  unsigned long now = millis();
 8002f72:	4604      	mov	r4, r0
  bool periodic = (long)( now - periodic_timer ) >= 0;
 8002f74:	4d28      	ldr	r5, [pc, #160]	; (8003018 <_ZN16UIPEthernetClass4tickEv+0x134>)
 8002f76:	4f29      	ldr	r7, [pc, #164]	; (800301c <_ZN16UIPEthernetClass4tickEv+0x138>)
 8002f78:	682e      	ldr	r6, [r5, #0]
      uip_conn = &uip_conns[i];
 8002f7a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003028 <_ZN16UIPEthernetClass4tickEv+0x144>
      if (uip_len > 0)
 8002f7e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800300c <_ZN16UIPEthernetClass4tickEv+0x128>
  bool periodic = (long)( now - periodic_timer ) >= 0;
 8002f82:	1b86      	subs	r6, r0, r6
      if (periodic)
 8002f84:	2e00      	cmp	r6, #0
      uip_conn = &uip_conns[i];
 8002f86:	f8c9 7000 	str.w	r7, [r9]
      if (periodic)
 8002f8a:	db28      	blt.n	8002fde <_ZN16UIPEthernetClass4tickEv+0xfa>
          uip_process(UIP_TIMER);
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f001 fc23 	bl	80047d8 <uip_process>
      if (uip_len > 0)
 8002f92:	f8ba 3000 	ldrh.w	r3, [sl]
 8002f96:	b11b      	cbz	r3, 8002fa0 <_ZN16UIPEthernetClass4tickEv+0xbc>
          uip_arp_out();
 8002f98:	f002 ff4a 	bl	8005e30 <uip_arp_out>
          network_send();
 8002f9c:	f7ff ff6a 	bl	8002e74 <_ZN16UIPEthernetClass12network_sendEv>
  for (int i = 0; i < UIP_CONNS; i++)
 8002fa0:	f108 0801 	add.w	r8, r8, #1
 8002fa4:	f1b8 0f04 	cmp.w	r8, #4
 8002fa8:	f107 0720 	add.w	r7, r7, #32
 8002fac:	d1ea      	bne.n	8002f84 <_ZN16UIPEthernetClass4tickEv+0xa0>
  if (periodic)
 8002fae:	2e00      	cmp	r6, #0
 8002fb0:	db13      	blt.n	8002fda <_ZN16UIPEthernetClass4tickEv+0xf6>
      periodic_timer = now + UIP_PERIODIC_TIMER;
 8002fb2:	34fa      	adds	r4, #250	; 0xfa
 8002fb4:	602c      	str	r4, [r5, #0]
      for (int i = 0; i < UIP_UDP_CONNS; i++)
 8002fb6:	2500      	movs	r5, #0
 8002fb8:	4c19      	ldr	r4, [pc, #100]	; (8003020 <_ZN16UIPEthernetClass4tickEv+0x13c>)
          uip_udp_periodic(i);
 8002fba:	4e1a      	ldr	r6, [pc, #104]	; (8003024 <_ZN16UIPEthernetClass4tickEv+0x140>)
          if (uip_len > 0)
 8002fbc:	4f13      	ldr	r7, [pc, #76]	; (800300c <_ZN16UIPEthernetClass4tickEv+0x128>)
          uip_udp_periodic(i);
 8002fbe:	2005      	movs	r0, #5
 8002fc0:	6034      	str	r4, [r6, #0]
 8002fc2:	f001 fc09 	bl	80047d8 <uip_process>
          if (uip_len > 0)
 8002fc6:	883b      	ldrh	r3, [r7, #0]
 8002fc8:	b113      	cbz	r3, 8002fd0 <_ZN16UIPEthernetClass4tickEv+0xec>
              UIPUDP::_send((uip_udp_userdata_t *)(uip_udp_conns[i].appstate));
 8002fca:	68e0      	ldr	r0, [r4, #12]
 8002fcc:	f000 fbb4 	bl	8003738 <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t>
      for (int i = 0; i < UIP_UDP_CONNS; i++)
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	2d04      	cmp	r5, #4
 8002fd4:	f104 0410 	add.w	r4, r4, #16
 8002fd8:	d1f1      	bne.n	8002fbe <_ZN16UIPEthernetClass4tickEv+0xda>
}
 8002fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
           if (((uip_userdata_t*)uip_conn->appstate)!=NULL)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0dd      	beq.n	8002fa0 <_ZN16UIPEthernetClass4tickEv+0xbc>
              if ((long)( now - ((uip_userdata_t*)uip_conn->appstate)->timer) >= 0)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	1ae3      	subs	r3, r4, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	dbd9      	blt.n	8002fa0 <_ZN16UIPEthernetClass4tickEv+0xbc>
                 uip_process(UIP_POLL_REQUEST);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f001 fbf3 	bl	80047d8 <uip_process>
                 ((uip_userdata_t*)uip_conn->appstate)->timer = millis() + UIP_CLIENT_TIMER;
 8002ff2:	f000 fde3 	bl	8003bbc <millis>
 8002ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8002ffa:	300a      	adds	r0, #10
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	6118      	str	r0, [r3, #16]
 8003000:	e7c7      	b.n	8002f92 <_ZN16UIPEthernetClass4tickEv+0xae>
 8003002:	bf00      	nop
 8003004:	20000220 	.word	0x20000220
 8003008:	2000020e 	.word	0x2000020e
 800300c:	20000404 	.word	0x20000404
 8003010:	200004b4 	.word	0x200004b4
 8003014:	2000020d 	.word	0x2000020d
 8003018:	20000210 	.word	0x20000210
 800301c:	20000420 	.word	0x20000420
 8003020:	2000051c 	.word	0x2000051c
 8003024:	20000414 	.word	0x20000414
 8003028:	2000041c 	.word	0x2000041c

0800302c <_ZN16UIPEthernetClass7netInitEPKh>:

void UIPEthernetClass::netInit(const uint8_t* mac) {
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPEthernetClass::netInit(const uint8_t* mac) DEBUG_V3:Function started"));
  #endif
  periodic_timer = millis() + UIP_PERIODIC_TIMER;
 8003030:	f000 fdc4 	bl	8003bbc <millis>
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <_ZN16UIPEthernetClass7netInitEPKh+0x40>)
 8003036:	30fa      	adds	r0, #250	; 0xfa
 8003038:	6018      	str	r0, [r3, #0]

  Enc28J60Network::initSPI();
 800303a:	f000 fe5b 	bl	8003cf4 <_ZN15Enc28J60Network7initSPIEv>
  Enc28J60Network::init((uint8_t*)mac);
 800303e:	4620      	mov	r0, r4
 8003040:	f001 f82a 	bl	8004098 <_ZN15Enc28J60Network4initEPh>
  uip_seteth_addr(mac);
 8003044:	7822      	ldrb	r2, [r4, #0]
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <_ZN16UIPEthernetClass7netInitEPKh+0x44>)
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	7862      	ldrb	r2, [r4, #1]
 800304c:	705a      	strb	r2, [r3, #1]
 800304e:	78a2      	ldrb	r2, [r4, #2]
 8003050:	709a      	strb	r2, [r3, #2]
 8003052:	78e2      	ldrb	r2, [r4, #3]
 8003054:	70da      	strb	r2, [r3, #3]
 8003056:	7922      	ldrb	r2, [r4, #4]
 8003058:	711a      	strb	r2, [r3, #4]
 800305a:	7962      	ldrb	r2, [r4, #5]
 800305c:	715a      	strb	r2, [r3, #5]

  uip_init();
 800305e:	f001 f9f5 	bl	800444c <uip_init>
  uip_arp_init();
}
 8003062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  uip_arp_init();
 8003066:	f002 bd05 	b.w	8005a74 <uip_arp_init>
 800306a:	bf00      	nop
 800306c:	20000210 	.word	0x20000210
 8003070:	2000037c 	.word	0x2000037c

08003074 <_ZN16UIPEthernetClass9configureE9IPAddressS0_S0_S0_>:

void UIPEthernetClass::configure(IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet) {
 8003074:	b570      	push	{r4, r5, r6, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPEthernetClass::configure(IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet) DEBUG_V3:Function started"));
  #endif
  uip_ipaddr_t ipaddr;

  uip_ip_addr(ipaddr, ip);
 8003076:	7985      	ldrb	r5, [r0, #6]
 8003078:	79c4      	ldrb	r4, [r0, #7]
 800307a:	7906      	ldrb	r6, [r0, #4]
 800307c:	7940      	ldrb	r0, [r0, #5]
 800307e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003082:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  uip_sethostaddr(ipaddr);
 8003086:	4d11      	ldr	r5, [pc, #68]	; (80030cc <_ZN16UIPEthernetClass9configureE9IPAddressS0_S0_S0_+0x58>)
 8003088:	ba64      	rev16	r4, r4
 800308a:	ba40      	rev16	r0, r0
 800308c:	8028      	strh	r0, [r5, #0]
 800308e:	806c      	strh	r4, [r5, #2]

  uip_ip_addr(ipaddr, gateway);
 8003090:	79d0      	ldrb	r0, [r2, #7]
 8003092:	7994      	ldrb	r4, [r2, #6]
 8003094:	7915      	ldrb	r5, [r2, #4]
 8003096:	7952      	ldrb	r2, [r2, #5]
 8003098:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800309c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  uip_setdraddr(ipaddr);
 80030a0:	4c0b      	ldr	r4, [pc, #44]	; (80030d0 <_ZN16UIPEthernetClass9configureE9IPAddressS0_S0_S0_+0x5c>)
 80030a2:	ba40      	rev16	r0, r0
 80030a4:	ba52      	rev16	r2, r2
 80030a6:	8022      	strh	r2, [r4, #0]
 80030a8:	8060      	strh	r0, [r4, #2]

  uip_ip_addr(ipaddr, subnet);
 80030aa:	79da      	ldrb	r2, [r3, #7]
 80030ac:	7998      	ldrb	r0, [r3, #6]
 80030ae:	791c      	ldrb	r4, [r3, #4]
 80030b0:	795b      	ldrb	r3, [r3, #5]
 80030b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80030b6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  uip_setnetmask(ipaddr);
 80030ba:	4806      	ldr	r0, [pc, #24]	; (80030d4 <_ZN16UIPEthernetClass9configureE9IPAddressS0_S0_S0_+0x60>)
 80030bc:	ba52      	rev16	r2, r2
 80030be:	ba5b      	rev16	r3, r3
 80030c0:	8003      	strh	r3, [r0, #0]
 80030c2:	8042      	strh	r2, [r0, #2]
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <_ZN16UIPEthernetClass9configureE9IPAddressS0_S0_S0_+0x64>)
 80030c6:	684a      	ldr	r2, [r1, #4]
 80030c8:	605a      	str	r2, [r3, #4]

  _dnsServerAddress = dns;
}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	200004b0 	.word	0x200004b0
 80030d0:	200004a8 	.word	0x200004a8
 80030d4:	200004ac 	.word	0x200004ac
 80030d8:	20000214 	.word	0x20000214

080030dc <_ZN16UIPEthernetClass5beginEPKh>:
{
 80030dc:	b530      	push	{r4, r5, lr}
 80030de:	460d      	mov	r5, r1
  _dhcp = &s_dhcp;
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <_ZN16UIPEthernetClass5beginEPKh+0x54>)
 80030e2:	4c14      	ldr	r4, [pc, #80]	; (8003134 <_ZN16UIPEthernetClass5beginEPKh+0x58>)
  netInit(mac);
 80030e4:	4608      	mov	r0, r1
{
 80030e6:	b089      	sub	sp, #36	; 0x24
  _dhcp = &s_dhcp;
 80030e8:	6023      	str	r3, [r4, #0]
  netInit(mac);
 80030ea:	f7ff ff9f 	bl	800302c <_ZN16UIPEthernetClass7netInitEPKh>
  int ret = _dhcp->beginWithDHCP((uint8_t*)mac);
 80030ee:	4629      	mov	r1, r5
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	f7ff f96c 	bl	80023ce <_ZN9DhcpClass13beginWithDHCPEPh>
  if(ret == 1)
 80030f6:	2801      	cmp	r0, #1
  int ret = _dhcp->beginWithDHCP((uint8_t*)mac);
 80030f8:	4605      	mov	r5, r0
  if(ret == 1)
 80030fa:	d115      	bne.n	8003128 <_ZN16UIPEthernetClass5beginEPKh+0x4c>
    configure(_dhcp->getLocalIp(),_dhcp->getDnsServerIp(),_dhcp->getGatewayIp(),_dhcp->getSubnetMask());
 80030fc:	4668      	mov	r0, sp
 80030fe:	6821      	ldr	r1, [r4, #0]
 8003100:	f7fe fe8b 	bl	8001e1a <_ZN9DhcpClass10getLocalIpEv>
 8003104:	6821      	ldr	r1, [r4, #0]
 8003106:	a802      	add	r0, sp, #8
 8003108:	f7fe fe9c 	bl	8001e44 <_ZN9DhcpClass14getDnsServerIpEv>
 800310c:	6821      	ldr	r1, [r4, #0]
 800310e:	a804      	add	r0, sp, #16
 8003110:	f7fe fe91 	bl	8001e36 <_ZN9DhcpClass12getGatewayIpEv>
 8003114:	6821      	ldr	r1, [r4, #0]
 8003116:	a806      	add	r0, sp, #24
 8003118:	f7fe fe86 	bl	8001e28 <_ZN9DhcpClass13getSubnetMaskEv>
 800311c:	4668      	mov	r0, sp
 800311e:	ab06      	add	r3, sp, #24
 8003120:	aa04      	add	r2, sp, #16
 8003122:	a902      	add	r1, sp, #8
 8003124:	f7ff ffa6 	bl	8003074 <_ZN16UIPEthernetClass9configureE9IPAddressS0_S0_S0_>
}
 8003128:	4628      	mov	r0, r5
 800312a:	b009      	add	sp, #36	; 0x24
 800312c:	bd30      	pop	{r4, r5, pc}
 800312e:	bf00      	nop
 8003130:	200001b0 	.word	0x200001b0
 8003134:	2000021c 	.word	0x2000021c

08003138 <_ZN16UIPEthernetClass6chksumEtPKht>:
UIPEthernetClass UIPEthernet;

/*---------------------------------------------------------------------------*/
uint16_t
UIPEthernetClass::chksum(uint16_t sum, const uint8_t *data, uint16_t len)
{
 8003138:	b570      	push	{r4, r5, r6, lr}
  #endif
  uint16_t t;
  const uint8_t *dataptr;
  const uint8_t *last_byte;

  dataptr = data;
 800313a:	460c      	mov	r4, r1
  last_byte = data + len - 1;
 800313c:	3a01      	subs	r2, #1
 800313e:	188d      	adds	r5, r1, r2

  while(dataptr < last_byte) {  /* At least two more bytes */
 8003140:	42ac      	cmp	r4, r5
 8003142:	d20c      	bcs.n	800315e <_ZN16UIPEthernetClass6chksumEtPKht+0x26>
    t = (dataptr[0] << 8) + dataptr[1];
 8003144:	7826      	ldrb	r6, [r4, #0]
 8003146:	7863      	ldrb	r3, [r4, #1]
    sum += t;
    if(sum < t) {
      sum++;            /* carry */
    }
    dataptr += 2;
 8003148:	3402      	adds	r4, #2
    t = (dataptr[0] << 8) + dataptr[1];
 800314a:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800314e:	b29b      	uxth	r3, r3
    sum += t;
 8003150:	4418      	add	r0, r3
 8003152:	b280      	uxth	r0, r0
    if(sum < t) {
 8003154:	4283      	cmp	r3, r0
      sum++;            /* carry */
 8003156:	bf84      	itt	hi
 8003158:	3001      	addhi	r0, #1
 800315a:	b280      	uxthhi	r0, r0
  while(dataptr < last_byte) {  /* At least two more bytes */
 800315c:	e7f0      	b.n	8003140 <_ZN16UIPEthernetClass6chksumEtPKht+0x8>
 800315e:	f1c1 0301 	rsb	r3, r1, #1
 8003162:	442b      	add	r3, r5
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	1e4c      	subs	r4, r1, #1
 800316a:	42a5      	cmp	r5, r4
 800316c:	bf38      	it	cc
 800316e:	2300      	movcc	r3, #0
 8003170:	440b      	add	r3, r1
  }

  if(dataptr == last_byte) {
 8003172:	42ab      	cmp	r3, r5
 8003174:	d108      	bne.n	8003188 <_ZN16UIPEthernetClass6chksumEtPKht+0x50>
    t = (dataptr[0] << 8) + 0;
 8003176:	5c8b      	ldrb	r3, [r1, r2]
    sum += t;
 8003178:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800317c:	b280      	uxth	r0, r0
    if(sum < t) {
 800317e:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
      sum++;            /* carry */
 8003182:	bf3c      	itt	cc
 8003184:	3001      	addcc	r0, #1
 8003186:	b280      	uxthcc	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 8003188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800318c <_ZN16UIPEthernetClass8ipchksumEv>:

/*---------------------------------------------------------------------------*/

uint16_t
UIPEthernetClass::ipchksum(void)
{
 800318c:	b508      	push	{r3, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPEthernetClass::ipchksum(void) DEBUG_V3:Function started"));
  #endif
  uint16_t sum;

  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 800318e:	2214      	movs	r2, #20
 8003190:	2000      	movs	r0, #0
 8003192:	4905      	ldr	r1, [pc, #20]	; (80031a8 <_ZN16UIPEthernetClass8ipchksumEv+0x1c>)
 8003194:	f7ff ffd0 	bl	8003138 <_ZN16UIPEthernetClass6chksumEtPKht>
  return (sum == 0) ? 0xffff : htons(sum);
 8003198:	b118      	cbz	r0, 80031a2 <_ZN16UIPEthernetClass8ipchksumEv+0x16>
}
 800319a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (sum == 0) ? 0xffff : htons(sum);
 800319e:	f002 bc33 	b.w	8005a08 <htons>
}
 80031a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031a6:	bd08      	pop	{r3, pc}
 80031a8:	200004c2 	.word	0x200004c2

080031ac <_ZN16UIPEthernetClass18upper_layer_chksumEh>:
#if UIP_UDP
UIPEthernetClass::upper_layer_chksum(uint8_t proto)
#else
uip_tcpchksum(void)
#endif
{
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4606      	mov	r6, r0
  uint16_t sum;

#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 80031b0:	4d1a      	ldr	r5, [pc, #104]	; (800321c <_ZN16UIPEthernetClass18upper_layer_chksumEh+0x70>)
  sum = upper_layer_len + proto;
#else
  sum = upper_layer_len + UIP_PROTO_TCP;
#endif
  /* Sum IP source and destination addresses. */
  sum = UIPEthernetClass::chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 80031b2:	2208      	movs	r2, #8
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 80031b4:	7c6c      	ldrb	r4, [r5, #17]
 80031b6:	7c2b      	ldrb	r3, [r5, #16]
 80031b8:	3c14      	subs	r4, #20
 80031ba:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80031be:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
 80031c0:	1820      	adds	r0, r4, r0
  sum = UIPEthernetClass::chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 80031c2:	f105 011a 	add.w	r1, r5, #26
 80031c6:	b280      	uxth	r0, r0
 80031c8:	f7ff ffb6 	bl	8003138 <_ZN16UIPEthernetClass6chksumEtPKht>

  uint8_t upper_layer_memlen;
#if UIP_UDP
  switch(proto)
 80031cc:	2e11      	cmp	r6, #17
//    case UIP_PROTO_ICMP:
//    case UIP_PROTO_ICMP6:
//      upper_layer_memlen = upper_layer_len;
//      break;
  case UIP_PROTO_UDP:
    upper_layer_memlen = UIP_UDPH_LEN;
 80031ce:	bf0c      	ite	eq
 80031d0:	2508      	moveq	r5, #8
    break;
  default:
//  case UIP_PROTO_TCP:
#endif
    upper_layer_memlen = (BUF->tcpoffset >> 4) << 2;
 80031d2:	f895 502e 	ldrbne.w	r5, [r5, #46]	; 0x2e
#if UIP_UDP
    break;
  }
#endif
  sum = UIPEthernetClass::chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_memlen);
 80031d6:	4912      	ldr	r1, [pc, #72]	; (8003220 <_ZN16UIPEthernetClass18upper_layer_chksumEh+0x74>)
    upper_layer_memlen = (BUF->tcpoffset >> 4) << 2;
 80031d8:	bf1c      	itt	ne
 80031da:	112d      	asrne	r5, r5, #4
 80031dc:	00ad      	lslne	r5, r5, #2
  sum = UIPEthernetClass::chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_memlen);
 80031de:	b2ae      	uxth	r6, r5
 80031e0:	4632      	mov	r2, r6
 80031e2:	f7ff ffa9 	bl	8003138 <_ZN16UIPEthernetClass6chksumEtPKht>
  LogObject.uart_send_str(F("-"));
  LogObject.uart_send_dec(UIP_IPH_LEN + UIP_LLH_LEN + upper_layer_memlen);
  LogObject.uart_send_str(F("]: "));
  LogObject.uart_send_hexln(htons(sum));
#endif
  if (upper_layer_memlen < upper_layer_len)
 80031e6:	42a5      	cmp	r5, r4
  sum = UIPEthernetClass::chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_memlen);
 80031e8:	4603      	mov	r3, r0
  if (upper_layer_memlen < upper_layer_len)
 80031ea:	da0e      	bge.n	800320a <_ZN16UIPEthernetClass18upper_layer_chksumEh+0x5e>
    {
      sum = Enc28J60Network::chksum(
          sum,
          UIPEthernetClass::uip_packet,
          (UIPEthernetClass::packetstate & UIPETHERNET_SENDPACKET ? UIP_IPH_LEN + UIP_LLH_LEN + UIP_SENDBUFFER_OFFSET : UIP_IPH_LEN + UIP_LLH_LEN) + upper_layer_memlen,
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <_ZN16UIPEthernetClass18upper_layer_chksumEh+0x78>)
      sum = Enc28J60Network::chksum(
 80031ee:	490e      	ldr	r1, [pc, #56]	; (8003228 <_ZN16UIPEthernetClass18upper_layer_chksumEh+0x7c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	7809      	ldrb	r1, [r1, #0]
 80031f4:	f013 0f02 	tst.w	r3, #2
 80031f8:	bf14      	ite	ne
 80031fa:	2223      	movne	r2, #35	; 0x23
 80031fc:	2222      	moveq	r2, #34	; 0x22
 80031fe:	1ba3      	subs	r3, r4, r6
 8003200:	b29b      	uxth	r3, r3
 8003202:	4432      	add	r2, r6
 8003204:	f000 ffd0 	bl	80041a8 <_ZN15Enc28J60Network6chksumEthtt>
 8003208:	4603      	mov	r3, r0
      LogObject.uart_send_dec(UIP_IPH_LEN + UIP_LLH_LEN + upper_layer_len);
      LogObject.uart_send_str(F("]: "));
      LogObject.uart_send_hexln(htons(sum));
#endif
    }
  return (sum == 0) ? 0xffff : htons(sum);
 800320a:	b123      	cbz	r3, 8003216 <_ZN16UIPEthernetClass18upper_layer_chksumEh+0x6a>
}
 800320c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (sum == 0) ? 0xffff : htons(sum);
 8003210:	4618      	mov	r0, r3
 8003212:	f002 bbf9 	b.w	8005a08 <htons>
}
 8003216:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	200004b4 	.word	0x200004b4
 8003220:	200004d6 	.word	0x200004d6
 8003224:	2000020e 	.word	0x2000020e
 8003228:	2000020d 	.word	0x2000020d

0800322c <uip_ipchksum>:

uint16_t
uip_ipchksum(void)
{
  return UIPEthernet.ipchksum();
 800322c:	f7ff bfae 	b.w	800318c <_ZN16UIPEthernetClass8ipchksumEv>

08003230 <uip_tcpchksum>:

#if UIP_UDP
uint16_t
uip_tcpchksum(void)
{
  uint16_t sum = UIPEthernet.upper_layer_chksum(UIP_PROTO_TCP);
 8003230:	2006      	movs	r0, #6
 8003232:	f7ff bfbb 	b.w	80031ac <_ZN16UIPEthernetClass18upper_layer_chksumEh>

08003236 <uip_udpchksum>:
}

uint16_t
uip_udpchksum(void)
{
  uint16_t sum = UIPEthernet.upper_layer_chksum(UIP_PROTO_UDP);
 8003236:	2011      	movs	r0, #17
 8003238:	f7ff bfb8 	b.w	80031ac <_ZN16UIPEthernetClass18upper_layer_chksumEh>

0800323c <_GLOBAL__sub_I__ZN16UIPEthernetClass9in_packetE>:
const IPAddress INADDR_NONE(0,0,0,0);
 800323c:	2300      	movs	r3, #0
  return sum;
}
 800323e:	b507      	push	{r0, r1, r2, lr}
 8003240:	461a      	mov	r2, r3
 8003242:	4619      	mov	r1, r3
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	4806      	ldr	r0, [pc, #24]	; (8003260 <_GLOBAL__sub_I__ZN16UIPEthernetClass9in_packetE+0x24>)
 8003248:	f000 fafc 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
IPAddress UIPEthernetClass::_dnsServerAddress;
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <_GLOBAL__sub_I__ZN16UIPEthernetClass9in_packetE+0x28>)
 800324e:	f000 faf1 	bl	8003834 <_ZN9IPAddressC1Ev>
  uint8_t  GatewayIp[4];
  uint8_t  DhcpServerIp[4];
  uint8_t  DnsServerIp[4];
} TIPV4Struct;

class DhcpClass {
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <_GLOBAL__sub_I__ZN16UIPEthernetClass9in_packetE+0x2c>)
}
 8003254:	b003      	add	sp, #12
 8003256:	f85d eb04 	ldr.w	lr, [sp], #4
 800325a:	f000 b9d5 	b.w	8003608 <_ZN6UIPUDPC1Ev>
 800325e:	bf00      	nop
 8003260:	200001a8 	.word	0x200001a8
 8003264:	20000214 	.word	0x20000214
 8003268:	200001f4 	.word	0x200001f4

0800326c <_ZN9UIPServer5writeEh>:
UIPServer::operator bool() {
  return listening;
}

size_t UIPServer::write(uint8_t c)
{
 800326c:	b507      	push	{r0, r1, r2, lr}
  return write(&c,1);
 800326e:	6803      	ldr	r3, [r0, #0]
{
 8003270:	f88d 1007 	strb.w	r1, [sp, #7]
  return write(&c,1);
 8003274:	2201      	movs	r2, #1
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f10d 0107 	add.w	r1, sp, #7
 800327c:	4798      	blx	r3
}
 800327e:	b003      	add	sp, #12
 8003280:	f85d fb04 	ldr.w	pc, [sp], #4

08003284 <_ZN9UIPServer5beginEt>:
void UIPServer::begin(uint16_t port) {
 8003284:	b510      	push	{r4, lr}
 8003286:	4604      	mov	r4, r0
  _port = htons(port);
 8003288:	4608      	mov	r0, r1
 800328a:	f002 fbbd 	bl	8005a08 <htons>
  begin();
 800328e:	6823      	ldr	r3, [r4, #0]
  _port = htons(port);
 8003290:	8120      	strh	r0, [r4, #8]
  begin();
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4620      	mov	r0, r4
}
 8003296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  begin();
 800329a:	4718      	bx	r3

0800329c <_ZN9UIPServer5beginEv>:
{
 800329c:	b510      	push	{r4, lr}
 800329e:	4604      	mov	r4, r0
  uip_listen(_port);
 80032a0:	8900      	ldrh	r0, [r0, #8]
 80032a2:	f001 fa43 	bl	800472c <uip_listen>
  UIPEthernetClass::tick();
 80032a6:	f7ff fe1d 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  listening = true;
 80032aa:	2301      	movs	r3, #1
 80032ac:	72a3      	strb	r3, [r4, #10]
}
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <_ZN9UIPServer5writeEPKhj>:

size_t UIPServer::write(const uint8_t *buf, size_t size)
{
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4606      	mov	r6, r0
 80032b6:	460f      	mov	r7, r1
 80032b8:	4690      	mov	r8, r2
  size_t ret = 0;
 80032ba:	2500      	movs	r5, #0
  for ( uip_userdata_t* data = &UIPClient::all_data[0]; data < &UIPClient::all_data[UIP_CONNS]; data++ )
 80032bc:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <_ZN9UIPServer5writeEPKhj+0x44>)
    {
      if ((data->state & UIP_CLIENT_CONNECTED) && uip_conns[data->conn_index].lport ==_port)
 80032be:	f8df a038 	ldr.w	sl, [pc, #56]	; 80032f8 <_ZN9UIPServer5writeEPKhj+0x48>
  for ( uip_userdata_t* data = &UIPClient::all_data[0]; data < &UIPClient::all_data[UIP_CONNS]; data++ )
 80032c2:	f104 0950 	add.w	r9, r4, #80	; 0x50
      if ((data->state & UIP_CLIENT_CONNECTED) && uip_conns[data->conn_index].lport ==_port)
 80032c6:	7863      	ldrb	r3, [r4, #1]
 80032c8:	07db      	lsls	r3, r3, #31
 80032ca:	d50c      	bpl.n	80032e6 <_ZN9UIPServer5writeEPKhj+0x36>
 80032cc:	7823      	ldrb	r3, [r4, #0]
 80032ce:	eb0a 1343 	add.w	r3, sl, r3, lsl #5
 80032d2:	889a      	ldrh	r2, [r3, #4]
 80032d4:	8933      	ldrh	r3, [r6, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d105      	bne.n	80032e6 <_ZN9UIPServer5writeEPKhj+0x36>
        ret += UIPClient::_write(data,buf,size);
 80032da:	4642      	mov	r2, r8
 80032dc:	4639      	mov	r1, r7
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff fbc5 	bl	8002a6e <_ZN9UIPClient6_writeEP14uip_userdata_tPKhj>
 80032e4:	4405      	add	r5, r0
  for ( uip_userdata_t* data = &UIPClient::all_data[0]; data < &UIPClient::all_data[UIP_CONNS]; data++ )
 80032e6:	3414      	adds	r4, #20
 80032e8:	454c      	cmp	r4, r9
 80032ea:	d1ec      	bne.n	80032c6 <_ZN9UIPServer5writeEPKhj+0x16>
    }
  return ret;
}
 80032ec:	4628      	mov	r0, r5
 80032ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f2:	bf00      	nop
 80032f4:	20000154 	.word	0x20000154
 80032f8:	20000420 	.word	0x20000420

080032fc <_ZN9UIPServerC1Et>:
UIPServer::UIPServer(uint16_t port) : _port(htons(port))
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	2500      	movs	r5, #0
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <_ZN9UIPServerC1Et+0x1c>)
 8003302:	4604      	mov	r4, r0
 8003304:	6045      	str	r5, [r0, #4]
 8003306:	6003      	str	r3, [r0, #0]
 8003308:	4608      	mov	r0, r1
 800330a:	f002 fb7d 	bl	8005a08 <htons>
 800330e:	72a5      	strb	r5, [r4, #10]
 8003310:	8120      	strh	r0, [r4, #8]
}
 8003312:	4620      	mov	r0, r4
 8003314:	bd38      	pop	{r3, r4, r5, pc}
 8003316:	bf00      	nop
 8003318:	0800735c 	.word	0x0800735c

0800331c <_ZN9UIPServer9availableEv>:
{
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	460d      	mov	r5, r1
 8003320:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 8003322:	f7ff fddf 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
 8003326:	2304      	movs	r3, #4
  for ( uip_userdata_t* data = &UIPClient::all_data[0]; data < &UIPClient::all_data[UIP_CONNS]; data++ )
 8003328:	4910      	ldr	r1, [pc, #64]	; (800336c <_ZN9UIPServer9availableEv+0x50>)
          && (((data->state & UIP_CLIENT_CONNECTED) && uip_conns[data->conn_index].lport ==_port)
 800332a:	4e11      	ldr	r6, [pc, #68]	; (8003370 <_ZN9UIPServer9availableEv+0x54>)
      if (data->packets_in[0] != NOBLOCK
 800332c:	788a      	ldrb	r2, [r1, #2]
 800332e:	b1a2      	cbz	r2, 800335a <_ZN9UIPServer9availableEv+0x3e>
          && (((data->state & UIP_CLIENT_CONNECTED) && uip_conns[data->conn_index].lport ==_port)
 8003330:	7848      	ldrb	r0, [r1, #1]
 8003332:	07c7      	lsls	r7, r0, #31
 8003334:	d50b      	bpl.n	800334e <_ZN9UIPServer9availableEv+0x32>
 8003336:	780a      	ldrb	r2, [r1, #0]
 8003338:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 800333c:	8897      	ldrh	r7, [r2, #4]
 800333e:	892a      	ldrh	r2, [r5, #8]
 8003340:	4297      	cmp	r7, r2
 8003342:	d104      	bne.n	800334e <_ZN9UIPServer9availableEv+0x32>
        return UIPClient(data);
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff fb3d 	bl	80029c4 <_ZN9UIPClientC1EP14uip_userdata_t>
}
 800334a:	4620      	mov	r0, r4
 800334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              || ((data->state & UIP_CLIENT_REMOTECLOSED) && ((uip_userdata_closed_t *)data)->lport == _port)))
 800334e:	0742      	lsls	r2, r0, #29
 8003350:	d503      	bpl.n	800335a <_ZN9UIPServer9availableEv+0x3e>
 8003352:	8908      	ldrh	r0, [r1, #8]
 8003354:	892a      	ldrh	r2, [r5, #8]
 8003356:	4290      	cmp	r0, r2
 8003358:	d0f4      	beq.n	8003344 <_ZN9UIPServer9availableEv+0x28>
  for ( uip_userdata_t* data = &UIPClient::all_data[0]; data < &UIPClient::all_data[UIP_CONNS]; data++ )
 800335a:	3b01      	subs	r3, #1
 800335c:	f101 0114 	add.w	r1, r1, #20
 8003360:	d1e4      	bne.n	800332c <_ZN9UIPServer9availableEv+0x10>
  return UIPClient();
 8003362:	4620      	mov	r0, r4
 8003364:	f7ff fb20 	bl	80029a8 <_ZN9UIPClientC1Ev>
 8003368:	e7ef      	b.n	800334a <_ZN9UIPServer9availableEv+0x2e>
 800336a:	bf00      	nop
 800336c:	20000154 	.word	0x20000154
 8003370:	20000420 	.word	0x20000420

08003374 <_GLOBAL__sub_I__ZN9UIPServerC2Et>:
 8003374:	2300      	movs	r3, #0
}
 8003376:	b507      	push	{r0, r1, r2, lr}
 8003378:	461a      	mov	r2, r3
 800337a:	4619      	mov	r1, r3
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <_GLOBAL__sub_I__ZN9UIPServerC2Et+0x18>)
 8003380:	f000 fa60 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
 8003384:	b003      	add	sp, #12
 8003386:	f85d fb04 	ldr.w	pc, [sp], #4
 800338a:	bf00      	nop
 800338c:	20000224 	.word	0x20000224

08003390 <_ZN6UIPUDP5writeEh>:
}

// Write a single byte into the packet
size_t
UIPUDP::write(uint8_t c)
{
 8003390:	b507      	push	{r0, r1, r2, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPUDP::write(uint8_t c) DEBUG_V3:Function started"));
  #endif
  return write(&c,1);
 8003392:	6803      	ldr	r3, [r0, #0]
{
 8003394:	f88d 1007 	strb.w	r1, [sp, #7]
  return write(&c,1);
 8003398:	2201      	movs	r2, #1
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f10d 0107 	add.w	r1, sp, #7
 80033a0:	4798      	blx	r3
}
 80033a2:	b003      	add	sp, #12
 80033a4:	f85d fb04 	ldr.w	pc, [sp], #4

080033a8 <_ZThn8_N6UIPUDP5writeEh>:
  virtual size_t    write(uint8_t);
 80033a8:	f1a0 0008 	sub.w	r0, r0, #8
 80033ac:	f7ff bff0 	b.w	8003390 <_ZN6UIPUDP5writeEh>

080033b0 <_ZN6UIPUDP4readEv>:
}

// Read a single byte from the current packet
int
UIPUDP::read(void)
{
 80033b0:	b507      	push	{r0, r1, r2, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPUDP::read(void) DEBUG_V3:Function started"));
  #endif
  unsigned char c;
  if (read(&c,1) > 0)
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f10d 0107 	add.w	r1, sp, #7
 80033bc:	4798      	blx	r3
 80033be:	2800      	cmp	r0, #0
    {
      return c;
    }
  return -1;
 80033c0:	bfd4      	ite	le
 80033c2:	f04f 30ff 	movle.w	r0, #4294967295
      return c;
 80033c6:	f89d 0007 	ldrbgt.w	r0, [sp, #7]
}
 80033ca:	b003      	add	sp, #12
 80033cc:	f85d fb04 	ldr.w	pc, [sp], #4

080033d0 <_ZThn8_N6UIPUDP4readEv>:
  virtual int       read(void);
 80033d0:	f1a0 0008 	sub.w	r0, r0, #8
 80033d4:	f7ff bfec 	b.w	80033b0 <_ZN6UIPUDP4readEv>

080033d8 <_ZN6UIPUDP5beginEt>:
{
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	460e      	mov	r6, r1
  if (!_uip_udp_conn)
 80033dc:	68c1      	ldr	r1, [r0, #12]
{
 80033de:	4604      	mov	r4, r0
  if (!_uip_udp_conn)
 80033e0:	b919      	cbnz	r1, 80033ea <_ZN6UIPUDP5beginEt+0x12>
      _uip_udp_conn = uip_udp_new(NULL, 0);
 80033e2:	4608      	mov	r0, r1
 80033e4:	f001 f920 	bl	8004628 <uip_udp_new>
 80033e8:	60e0      	str	r0, [r4, #12]
  if (_uip_udp_conn)
 80033ea:	68e5      	ldr	r5, [r4, #12]
 80033ec:	b145      	cbz	r5, 8003400 <_ZN6UIPUDP5beginEt+0x28>
      uip_udp_bind(_uip_udp_conn,htons(port));
 80033ee:	4630      	mov	r0, r6
 80033f0:	f002 fb0a 	bl	8005a08 <htons>
 80033f4:	80a8      	strh	r0, [r5, #4]
      return 1;
 80033f6:	2001      	movs	r0, #1
      _uip_udp_conn->appstate = &appdata;
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	3410      	adds	r4, #16
 80033fc:	60dc      	str	r4, [r3, #12]
}
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 8003400:	4628      	mov	r0, r5
 8003402:	e7fc      	b.n	80033fe <_ZN6UIPUDP5beginEt+0x26>

08003404 <_ZThn8_N6UIPUDP5beginEt>:
  virtual uint8_t   begin(uint16_t);// initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
 8003404:	f1a0 0008 	sub.w	r0, r0, #8
 8003408:	f7ff bfe6 	b.w	80033d8 <_ZN6UIPUDP5beginEt>

0800340c <_ZN6UIPUDP10remotePortEv>:
UIPUDP::remotePort(void)
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPUDP::remotePort(void) DEBUG_V3:Function started"));
  #endif
  return _uip_udp_conn ? ntohs(_uip_udp_conn->rport) : 0;
 800340c:	68c0      	ldr	r0, [r0, #12]
 800340e:	b110      	cbz	r0, 8003416 <_ZN6UIPUDP10remotePortEv+0xa>
 8003410:	88c0      	ldrh	r0, [r0, #6]
 8003412:	f002 baf9 	b.w	8005a08 <htons>
}
 8003416:	4770      	bx	lr

08003418 <_ZThn8_N6UIPUDP10remotePortEv>:
 
  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP(void);
 
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t  remotePort(void);
 8003418:	f1a0 0008 	sub.w	r0, r0, #8
 800341c:	f7ff bff6 	b.w	800340c <_ZN6UIPUDP10remotePortEv>

08003420 <_ZN6UIPUDP4stopEv>:
{
 8003420:	b538      	push	{r3, r4, r5, lr}
  if (_uip_udp_conn)
 8003422:	68c3      	ldr	r3, [r0, #12]
{
 8003424:	4604      	mov	r4, r0
  if (_uip_udp_conn)
 8003426:	b173      	cbz	r3, 8003446 <_ZN6UIPUDP4stopEv+0x26>
      uip_udp_remove(_uip_udp_conn);
 8003428:	2500      	movs	r5, #0
 800342a:	809d      	strh	r5, [r3, #4]
      _uip_udp_conn->appstate = NULL;
 800342c:	60dd      	str	r5, [r3, #12]
      _uip_udp_conn=NULL;
 800342e:	60c5      	str	r5, [r0, #12]
      Enc28J60Network::freeBlock(appdata.packet_in);
 8003430:	7cc0      	ldrb	r0, [r0, #19]
 8003432:	f000 ff77 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
      Enc28J60Network::freeBlock(appdata.packet_next);
 8003436:	7ca0      	ldrb	r0, [r4, #18]
 8003438:	f000 ff74 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
      Enc28J60Network::freeBlock(appdata.packet_out);
 800343c:	7d20      	ldrb	r0, [r4, #20]
 800343e:	f000 ff71 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
      memset(&appdata,0,sizeof(appdata));
 8003442:	6125      	str	r5, [r4, #16]
 8003444:	82a5      	strh	r5, [r4, #20]
}
 8003446:	bd38      	pop	{r3, r4, r5, pc}

08003448 <_ZThn8_N6UIPUDP4stopEv>:
  virtual void      stop(void);  // Finish with the UDP socket
 8003448:	f1a0 0008 	sub.w	r0, r0, #8
 800344c:	f7ff bfe8 	b.w	8003420 <_ZN6UIPUDP4stopEv>

08003450 <_ZN6UIPUDP5flushEv>:
{
 8003450:	b510      	push	{r4, lr}
 8003452:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 8003454:	f7ff fd46 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  Enc28J60Network::freeBlock(appdata.packet_in);
 8003458:	7ce0      	ldrb	r0, [r4, #19]
 800345a:	f000 ff63 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
  appdata.packet_in = NOBLOCK;
 800345e:	2300      	movs	r3, #0
 8003460:	74e3      	strb	r3, [r4, #19]
}
 8003462:	bd10      	pop	{r4, pc}

08003464 <_ZThn8_N6UIPUDP5flushEv>:
  virtual void      flush(void);    // Finish reading the current packet
 8003464:	f1a0 0008 	sub.w	r0, r0, #8
 8003468:	f7ff bff2 	b.w	8003450 <_ZN6UIPUDP5flushEv>

0800346c <_ZN6UIPUDP11beginPacketE9IPAddresst>:
{
 800346c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800346e:	460d      	mov	r5, r1
 8003470:	4616      	mov	r6, r2
 8003472:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 8003474:	f7ff fd36 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  if ((ip[0] || ip[1] || ip[2] || ip[3]) && port)
 8003478:	792a      	ldrb	r2, [r5, #4]
 800347a:	b92a      	cbnz	r2, 8003488 <_ZN6UIPUDP11beginPacketE9IPAddresst+0x1c>
 800347c:	796b      	ldrb	r3, [r5, #5]
 800347e:	b91b      	cbnz	r3, 8003488 <_ZN6UIPUDP11beginPacketE9IPAddresst+0x1c>
 8003480:	79ab      	ldrb	r3, [r5, #6]
 8003482:	b90b      	cbnz	r3, 8003488 <_ZN6UIPUDP11beginPacketE9IPAddresst+0x1c>
 8003484:	79eb      	ldrb	r3, [r5, #7]
 8003486:	b1d3      	cbz	r3, 80034be <_ZN6UIPUDP11beginPacketE9IPAddresst+0x52>
 8003488:	b1ce      	cbz	r6, 80034be <_ZN6UIPUDP11beginPacketE9IPAddresst+0x52>
      uip_ip_addr(&ripaddr, ip);
 800348a:	796b      	ldrb	r3, [r5, #5]
 800348c:	68e7      	ldr	r7, [r4, #12]
 800348e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003492:	ba5b      	rev16	r3, r3
 8003494:	79aa      	ldrb	r2, [r5, #6]
 8003496:	f8ad 3004 	strh.w	r3, [sp, #4]
 800349a:	79eb      	ldrb	r3, [r5, #7]
          _uip_udp_conn->rport = htons(port);
 800349c:	4630      	mov	r0, r6
      uip_ip_addr(&ripaddr, ip);
 800349e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034a2:	ba5b      	rev16	r3, r3
 80034a4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if (_uip_udp_conn)
 80034a8:	b1cf      	cbz	r7, 80034de <_ZN6UIPUDP11beginPacketE9IPAddresst+0x72>
          _uip_udp_conn->rport = htons(port);
 80034aa:	f002 faad 	bl	8005a08 <htons>
          uip_ipaddr_copy(_uip_udp_conn->ripaddr, &ripaddr);
 80034ae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80034b2:	68e3      	ldr	r3, [r4, #12]
          _uip_udp_conn->rport = htons(port);
 80034b4:	80f8      	strh	r0, [r7, #6]
          uip_ipaddr_copy(_uip_udp_conn->ripaddr, &ripaddr);
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80034bc:	805a      	strh	r2, [r3, #2]
  if (_uip_udp_conn)
 80034be:	68e0      	ldr	r0, [r4, #12]
 80034c0:	b158      	cbz	r0, 80034da <_ZN6UIPUDP11beginPacketE9IPAddresst+0x6e>
      if (appdata.packet_out == NOBLOCK)
 80034c2:	7d23      	ldrb	r3, [r4, #20]
 80034c4:	b9c3      	cbnz	r3, 80034f8 <_ZN6UIPUDP11beginPacketE9IPAddresst+0x8c>
          appdata.packet_out = Enc28J60Network::allocBlock(UIP_UDP_MAXPACKETSIZE + UIP_SENDBUFFER_OFFSET + UIP_SENDBUFFER_PADDING);
 80034c6:	f240 600e 	movw	r0, #1550	; 0x60e
 80034ca:	f000 febd 	bl	8004248 <_ZN10MemoryPool10allocBlockEt>
          appdata.out_pos = UIP_UDP_PHYH_LEN + UIP_SENDBUFFER_OFFSET;
 80034ce:	232b      	movs	r3, #43	; 0x2b
          appdata.packet_out = Enc28J60Network::allocBlock(UIP_UDP_MAXPACKETSIZE + UIP_SENDBUFFER_OFFSET + UIP_SENDBUFFER_PADDING);
 80034d0:	7520      	strb	r0, [r4, #20]
          if (appdata.packet_out != NOBLOCK)
 80034d2:	3800      	subs	r0, #0
 80034d4:	bf18      	it	ne
 80034d6:	2001      	movne	r0, #1
          appdata.out_pos = UIP_UDP_PHYH_LEN + UIP_SENDBUFFER_OFFSET;
 80034d8:	8223      	strh	r3, [r4, #16]
}
 80034da:	b003      	add	sp, #12
 80034dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          _uip_udp_conn = uip_udp_new(&ripaddr,htons(port));
 80034de:	f002 fa93 	bl	8005a08 <htons>
 80034e2:	4601      	mov	r1, r0
 80034e4:	a801      	add	r0, sp, #4
 80034e6:	f001 f89f 	bl	8004628 <uip_udp_new>
 80034ea:	60e0      	str	r0, [r4, #12]
          if (_uip_udp_conn)
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d0f4      	beq.n	80034da <_ZN6UIPUDP11beginPacketE9IPAddresst+0x6e>
              _uip_udp_conn->appstate = &appdata;
 80034f0:	f104 0310 	add.w	r3, r4, #16
 80034f4:	60c3      	str	r3, [r0, #12]
 80034f6:	e7e2      	b.n	80034be <_ZN6UIPUDP11beginPacketE9IPAddresst+0x52>
  return 0;
 80034f8:	2000      	movs	r0, #0
 80034fa:	e7ee      	b.n	80034da <_ZN6UIPUDP11beginPacketE9IPAddresst+0x6e>

080034fc <_ZThn8_N6UIPUDP11beginPacketE9IPAddresst>:
  virtual int       beginPacket(IPAddress ip, uint16_t port);
 80034fc:	f1a0 0008 	sub.w	r0, r0, #8
 8003500:	f7ff bfb4 	b.w	800346c <_ZN6UIPUDP11beginPacketE9IPAddresst>

08003504 <_ZN6UIPUDP5writeEPKhj>:
{
 8003504:	b510      	push	{r4, lr}
 8003506:	4604      	mov	r4, r0
  if (appdata.packet_out != NOBLOCK)
 8003508:	7d00      	ldrb	r0, [r0, #20]
 800350a:	b138      	cbz	r0, 800351c <_ZN6UIPUDP5writeEPKhj+0x18>
      size_t ret = Enc28J60Network::writePacket(appdata.packet_out,appdata.out_pos,(uint8_t*)buffer,size);
 800350c:	b293      	uxth	r3, r2
 800350e:	460a      	mov	r2, r1
 8003510:	8a21      	ldrh	r1, [r4, #16]
 8003512:	f000 fcb7 	bl	8003e84 <_ZN15Enc28J60Network11writePacketEhtPht>
      appdata.out_pos += ret;
 8003516:	8a23      	ldrh	r3, [r4, #16]
 8003518:	4403      	add	r3, r0
 800351a:	8223      	strh	r3, [r4, #16]
}
 800351c:	bd10      	pop	{r4, pc}

0800351e <_ZThn8_N6UIPUDP5writeEPKhj>:
  virtual size_t    write(const uint8_t *buffer, size_t size);
 800351e:	f1a0 0008 	sub.w	r0, r0, #8
 8003522:	f7ff bfef 	b.w	8003504 <_ZN6UIPUDP5writeEPKhj>

08003526 <_ZN6UIPUDP11parsePacketEv>:
{
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 800352a:	f7ff fcdb 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  if (appdata.packet_in != NOBLOCK)
 800352e:	7ce0      	ldrb	r0, [r4, #19]
 8003530:	b108      	cbz	r0, 8003536 <_ZN6UIPUDP11parsePacketEv+0x10>
    Enc28J60Network::freeBlock(appdata.packet_in);
 8003532:	f000 fef7 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
  appdata.packet_next = NOBLOCK;
 8003536:	2300      	movs	r3, #0
  appdata.packet_in = appdata.packet_next;
 8003538:	7ca0      	ldrb	r0, [r4, #18]
  appdata.packet_next = NOBLOCK;
 800353a:	74a3      	strb	r3, [r4, #18]
  appdata.packet_in = appdata.packet_next;
 800353c:	74e0      	strb	r0, [r4, #19]
  int size = Enc28J60Network::blockSize(appdata.packet_in);
 800353e:	f000 fb43 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
}
 8003542:	bd10      	pop	{r4, pc}

08003544 <_ZThn8_N6UIPUDP11parsePacketEv>:
  virtual int       parsePacket(void);
 8003544:	f1a0 0008 	sub.w	r0, r0, #8
 8003548:	f7ff bfed 	b.w	8003526 <_ZN6UIPUDP11parsePacketEv>

0800354c <_ZN6UIPUDP9availableEv>:
{
 800354c:	b510      	push	{r4, lr}
 800354e:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 8003550:	f7ff fcc8 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  return Enc28J60Network::blockSize(appdata.packet_in);
 8003554:	7ce0      	ldrb	r0, [r4, #19]
 8003556:	f000 fb37 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
}
 800355a:	bd10      	pop	{r4, pc}

0800355c <_ZThn8_N6UIPUDP9availableEv>:
  virtual int       available(void);
 800355c:	f1a0 0008 	sub.w	r0, r0, #8
 8003560:	f7ff bff4 	b.w	800354c <_ZN6UIPUDP9availableEv>

08003564 <_ZN6UIPUDP4peekEv>:
{
 8003564:	b513      	push	{r0, r1, r4, lr}
 8003566:	4604      	mov	r4, r0
  UIPEthernetClass::tick();
 8003568:	f7ff fcbc 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  if (appdata.packet_in != NOBLOCK)
 800356c:	7ce0      	ldrb	r0, [r4, #19]
 800356e:	b158      	cbz	r0, 8003588 <_ZN6UIPUDP4peekEv+0x24>
      if (Enc28J60Network::readPacket(appdata.packet_in,0,(uint8_t*)&c,1) == 1)
 8003570:	2301      	movs	r3, #1
 8003572:	2100      	movs	r1, #0
 8003574:	f10d 0207 	add.w	r2, sp, #7
 8003578:	f000 fc78 	bl	8003e6c <_ZN15Enc28J60Network10readPacketEhtPht>
 800357c:	2801      	cmp	r0, #1
 800357e:	d103      	bne.n	8003588 <_ZN6UIPUDP4peekEv+0x24>
        return c;
 8003580:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003584:	b002      	add	sp, #8
 8003586:	bd10      	pop	{r4, pc}
  return -1;
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	e7fa      	b.n	8003584 <_ZN6UIPUDP4peekEv+0x20>

0800358e <_ZThn8_N6UIPUDP4peekEv>:
  virtual int       peek(void);
 800358e:	f1a0 0008 	sub.w	r0, r0, #8
 8003592:	f7ff bfe7 	b.w	8003564 <_ZN6UIPUDP4peekEv>

08003596 <_ZN6UIPUDP4readEPhj>:
{
 8003596:	b570      	push	{r4, r5, r6, lr}
 8003598:	4605      	mov	r5, r0
 800359a:	460c      	mov	r4, r1
 800359c:	4616      	mov	r6, r2
  UIPEthernetClass::tick();
 800359e:	f7ff fca1 	bl	8002ee4 <_ZN16UIPEthernetClass4tickEv>
  if (appdata.packet_in != NOBLOCK)
 80035a2:	7ce8      	ldrb	r0, [r5, #19]
 80035a4:	b180      	cbz	r0, 80035c8 <_ZN6UIPUDP4readEPhj+0x32>
      memaddress read = Enc28J60Network::readPacket(appdata.packet_in,0,(uint8_t*)buffer,(uint16_t)len);
 80035a6:	4622      	mov	r2, r4
 80035a8:	2100      	movs	r1, #0
 80035aa:	b2b3      	uxth	r3, r6
 80035ac:	f000 fc5e 	bl	8003e6c <_ZN15Enc28J60Network10readPacketEhtPht>
 80035b0:	4604      	mov	r4, r0
      if (read == Enc28J60Network::blockSize(appdata.packet_in))
 80035b2:	7ce8      	ldrb	r0, [r5, #19]
 80035b4:	f000 fb08 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	7ce8      	ldrb	r0, [r5, #19]
 80035bc:	d105      	bne.n	80035ca <_ZN6UIPUDP4readEPhj+0x34>
          Enc28J60Network::freeBlock(appdata.packet_in);
 80035be:	f000 feb1 	bl	8004324 <_ZN10MemoryPool9freeBlockEh>
          appdata.packet_in = NOBLOCK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	74eb      	strb	r3, [r5, #19]
      return read;
 80035c6:	4620      	mov	r0, r4
}
 80035c8:	bd70      	pop	{r4, r5, r6, pc}
        Enc28J60Network::resizeBlock(appdata.packet_in,read);
 80035ca:	4621      	mov	r1, r4
 80035cc:	f000 fec2 	bl	8004354 <_ZN10MemoryPool11resizeBlockEht>
 80035d0:	e7f9      	b.n	80035c6 <_ZN6UIPUDP4readEPhj+0x30>

080035d2 <_ZThn8_N6UIPUDP4readEPhj>:
  virtual int       read(unsigned char* buffer, size_t len);
 80035d2:	f1a0 0008 	sub.w	r0, r0, #8
 80035d6:	f7ff bfde 	b.w	8003596 <_ZN6UIPUDP4readEPhj>

080035da <_ZN6UIPUDP8remoteIPEv>:
{
 80035da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return _uip_udp_conn ? ip_addr_uip(_uip_udp_conn->ripaddr) : IPAddress();
 80035dc:	68c9      	ldr	r1, [r1, #12]
{
 80035de:	4604      	mov	r4, r0
  return _uip_udp_conn ? ip_addr_uip(_uip_udp_conn->ripaddr) : IPAddress();
 80035e0:	b159      	cbz	r1, 80035fa <_ZN6UIPUDP8remoteIPEv+0x20>
 80035e2:	884d      	ldrh	r5, [r1, #2]
 80035e4:	880a      	ldrh	r2, [r1, #0]
 80035e6:	0a2d      	lsrs	r5, r5, #8
 80035e8:	788b      	ldrb	r3, [r1, #2]
 80035ea:	0a12      	lsrs	r2, r2, #8
 80035ec:	7809      	ldrb	r1, [r1, #0]
 80035ee:	9500      	str	r5, [sp, #0]
 80035f0:	f000 f928 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
}
 80035f4:	4620      	mov	r0, r4
 80035f6:	b003      	add	sp, #12
 80035f8:	bd30      	pop	{r4, r5, pc}
  return _uip_udp_conn ? ip_addr_uip(_uip_udp_conn->ripaddr) : IPAddress();
 80035fa:	f000 f91b 	bl	8003834 <_ZN9IPAddressC1Ev>
 80035fe:	e7f9      	b.n	80035f4 <_ZN6UIPUDP8remoteIPEv+0x1a>

08003600 <_ZThn8_N6UIPUDP8remoteIPEv>:
  virtual IPAddress remoteIP(void);
 8003600:	f1a1 0108 	sub.w	r1, r1, #8
 8003604:	f7ff bfe9 	b.w	80035da <_ZN6UIPUDP8remoteIPEv>

08003608 <_ZN6UIPUDPC1Ev>:
 8003608:	2200      	movs	r2, #0
UIPUDP::UIPUDP(void) :
 800360a:	b510      	push	{r4, lr}
    _uip_udp_conn(NULL)
 800360c:	4905      	ldr	r1, [pc, #20]	; (8003624 <_ZN6UIPUDPC1Ev+0x1c>)
 800360e:	6042      	str	r2, [r0, #4]
 8003610:	f101 0408 	add.w	r4, r1, #8
 8003614:	3150      	adds	r1, #80	; 0x50
 8003616:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800361a:	6004      	str	r4, [r0, #0]
  memset(&appdata,0,sizeof(appdata));
 800361c:	6102      	str	r2, [r0, #16]
 800361e:	8282      	strh	r2, [r0, #20]
}
 8003620:	bd10      	pop	{r4, pc}
 8003622:	bf00      	nop
 8003624:	0800736c 	.word	0x0800736c

08003628 <_ZN6UIPUDP11beginPacketEPKct>:
{
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	460e      	mov	r6, r1
 800362c:	b08e      	sub	sp, #56	; 0x38
 800362e:	4604      	mov	r4, r0
 8003630:	a805      	add	r0, sp, #20
 8003632:	4615      	mov	r5, r2
 8003634:	f000 f8fe 	bl	8003834 <_ZN9IPAddressC1Ev>
 8003638:	a808      	add	r0, sp, #32
 800363a:	f7ff ffe5 	bl	8003608 <_ZN6UIPUDPC1Ev>
  IPAddress remote_addr;
 800363e:	a801      	add	r0, sp, #4
 8003640:	f000 f8f8 	bl	8003834 <_ZN9IPAddressC1Ev>
  dns.begin(UIPEthernet.dnsServerIP());
 8003644:	490d      	ldr	r1, [pc, #52]	; (800367c <_ZN6UIPUDP11beginPacketEPKct+0x54>)
 8003646:	a803      	add	r0, sp, #12
 8003648:	f7ff fc0a 	bl	8002e60 <_ZN16UIPEthernetClass11dnsServerIPEv>
 800364c:	a903      	add	r1, sp, #12
 800364e:	a805      	add	r0, sp, #20
 8003650:	f7fe fed4 	bl	80023fc <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
 8003654:	4631      	mov	r1, r6
 8003656:	aa01      	add	r2, sp, #4
 8003658:	a805      	add	r0, sp, #20
 800365a:	f7ff f889 	bl	8002770 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
 800365e:	2801      	cmp	r0, #1
 8003660:	d109      	bne.n	8003676 <_ZN6UIPUDP11beginPacketEPKct+0x4e>
class IPAddress : public Printable {
 8003662:	4a07      	ldr	r2, [pc, #28]	; (8003680 <_ZN6UIPUDP11beginPacketEPKct+0x58>)
    return beginPacket(remote_addr, port);
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	4620      	mov	r0, r4
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	9203      	str	r2, [sp, #12]
 800366c:	9a02      	ldr	r2, [sp, #8]
 800366e:	a903      	add	r1, sp, #12
 8003670:	9204      	str	r2, [sp, #16]
 8003672:	462a      	mov	r2, r5
 8003674:	4798      	blx	r3
}
 8003676:	b00e      	add	sp, #56	; 0x38
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	bf00      	nop
 800367c:	200001a4 	.word	0x200001a4
 8003680:	08007404 	.word	0x08007404

08003684 <_ZThn8_N6UIPUDP11beginPacketEPKct>:
  virtual int       beginPacket(const char *host, uint16_t port);
 8003684:	f1a0 0008 	sub.w	r0, r0, #8
 8003688:	f7ff bfce 	b.w	8003628 <_ZN6UIPUDP11beginPacketEPKct>

0800368c <uipudp_appcall>:
void
uipudp_appcall(void) {
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("uipudp_appcall(void) DEBUG_V3:Function started"));
  #endif
  if (uip_udp_userdata_t *data = (uip_udp_userdata_t *)(uip_udp_conn->appstate))
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <uipudp_appcall+0x8c>)
uipudp_appcall(void) {
 800368e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (uip_udp_userdata_t *data = (uip_udp_userdata_t *)(uip_udp_conn->appstate))
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68d4      	ldr	r4, [r2, #12]
 8003696:	2c00      	cmp	r4, #0
 8003698:	d03b      	beq.n	8003712 <uipudp_appcall+0x86>
    {
      if (uip_newdata())
 800369a:	4e20      	ldr	r6, [pc, #128]	; (800371c <uipudp_appcall+0x90>)
 800369c:	7833      	ldrb	r3, [r6, #0]
 800369e:	0799      	lsls	r1, r3, #30
 80036a0:	d51e      	bpl.n	80036e0 <uipudp_appcall+0x54>
        {
          if (data->packet_next == NOBLOCK)
 80036a2:	78a7      	ldrb	r7, [r4, #2]
 80036a4:	b9e7      	cbnz	r7, 80036e0 <uipudp_appcall+0x54>
            {
              uip_udp_conn->rport = UDPBUF->srcport;
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <uipudp_appcall+0x94>)
 80036a8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80036aa:	80d1      	strh	r1, [r2, #6]
              uip_ipaddr_copy(uip_udp_conn->ripaddr,UDPBUF->srcipaddr);
 80036ac:	8b59      	ldrh	r1, [r3, #26]
 80036ae:	8011      	strh	r1, [r2, #0]
 80036b0:	8b99      	ldrh	r1, [r3, #28]
 80036b2:	8051      	strh	r1, [r2, #2]
              data->packet_next = Enc28J60Network::allocBlock(ntohs(UDPBUF->udplen)-UIP_UDPH_LEN);
 80036b4:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 80036b6:	f002 f9a7 	bl	8005a08 <htons>
 80036ba:	3808      	subs	r0, #8
 80036bc:	b280      	uxth	r0, r0
 80036be:	f000 fdc3 	bl	8004248 <_ZN10MemoryPool10allocBlockEt>
 80036c2:	4605      	mov	r5, r0
 80036c4:	70a0      	strb	r0, [r4, #2]
                  //if we are unable to allocate memory the packet is dropped. udp doesn't guarantee packet delivery
              if (data->packet_next != NOBLOCK)
 80036c6:	b158      	cbz	r0, 80036e0 <uipudp_appcall+0x54>
                {
                  //discard Linklevel and IP and udp-header and any trailing bytes:
                  Enc28J60Network::copyPacket(data->packet_next,0,UIPEthernetClass::in_packet,UIP_UDP_PHYH_LEN,Enc28J60Network::blockSize(data->packet_next));
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <uipudp_appcall+0x98>)
 80036ca:	f893 8000 	ldrb.w	r8, [r3]
 80036ce:	f000 fa7b 	bl	8003bc8 <_ZN15Enc28J60Network9blockSizeEh>
 80036d2:	232a      	movs	r3, #42	; 0x2a
 80036d4:	9000      	str	r0, [sp, #0]
 80036d6:	4642      	mov	r2, r8
 80036d8:	4639      	mov	r1, r7
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 fca2 	bl	8004024 <_ZN15Enc28J60Network10copyPacketEhthtt>
                  LogObject.uart_send_decln(Enc28J60Network::blockSize(data->packet_next));
    #endif
                }
            }
        }
      if (uip_poll() && data->send)
 80036e0:	7833      	ldrb	r3, [r6, #0]
 80036e2:	071b      	lsls	r3, r3, #28
 80036e4:	d515      	bpl.n	8003712 <uipudp_appcall+0x86>
 80036e6:	7963      	ldrb	r3, [r4, #5]
 80036e8:	b19b      	cbz	r3, 8003712 <uipudp_appcall+0x86>
          LogObject.uart_send_str(F("uipudp_appcall(void) DEBUG:udp, uip_poll preparing packet to send: "));
          LogObject.uart_send_dec(data->packet_out);
          LogObject.uart_send_str(F(", size: "));
          LogObject.uart_send_decln(Enc28J60Network::blockSize(data->packet_out));
#endif
          UIPEthernetClass::uip_packet = data->packet_out;
 80036ea:	7922      	ldrb	r2, [r4, #4]
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <uipudp_appcall+0x9c>)
 80036ee:	701a      	strb	r2, [r3, #0]
          UIPEthernetClass::packetstate |= UIPETHERNET_SENDPACKET;
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <uipudp_appcall+0xa0>)
 80036f2:	7813      	ldrb	r3, [r2, #0]
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	7013      	strb	r3, [r2, #0]
          UIPEthernetClass::uip_hdrlen = UIP_UDP_PHYH_LEN;
 80036fa:	222a      	movs	r2, #42	; 0x2a
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <uipudp_appcall+0xa4>)
 80036fe:	701a      	strb	r2, [r3, #0]
          uip_udp_send(data->out_pos - (UIP_UDP_PHYH_LEN + UIP_SENDBUFFER_OFFSET));
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <uipudp_appcall+0xa8>)
 8003702:	8821      	ldrh	r1, [r4, #0]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	392b      	subs	r1, #43	; 0x2b
        }
    }
}
 8003708:	b002      	add	sp, #8
 800370a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          uip_udp_send(data->out_pos - (UIP_UDP_PHYH_LEN + UIP_SENDBUFFER_OFFSET));
 800370e:	f002 b98f 	b.w	8005a30 <uip_send>
}
 8003712:	b002      	add	sp, #8
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003718:	20000414 	.word	0x20000414
 800371c:	20000410 	.word	0x20000410
 8003720:	200004b4 	.word	0x200004b4
 8003724:	20000220 	.word	0x20000220
 8003728:	2000020d 	.word	0x2000020d
 800372c:	2000020e 	.word	0x2000020e
 8003730:	2000020c 	.word	0x2000020c
 8003734:	20000418 	.word	0x20000418

08003738 <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t>:

void
UIPUDP::_send(uip_udp_userdata_t *data) {
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4604      	mov	r4, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("UIPUDP::_send(uip_udp_userdata_t *data) DEBUG_V3:Function started"));
  #endif
  uip_arp_out(); //add arp
 800373c:	f002 fb78 	bl	8005e30 <uip_arp_out>
  if (uip_len == UIP_ARPHDRSIZE)
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t+0x30>)
 8003742:	2500      	movs	r5, #0
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2b2a      	cmp	r3, #42	; 0x2a
 8003748:	d10a      	bne.n	8003760 <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t+0x28>
    {
      UIPEthernetClass::uip_packet = NOBLOCK;
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t+0x34>)
      UIPEthernetClass::packetstate &= ~UIPETHERNET_SENDPACKET;
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t+0x38>)
      UIPEthernetClass::uip_packet = NOBLOCK;
 800374e:	701d      	strb	r5, [r3, #0]
      UIPEthernetClass::packetstate &= ~UIPETHERNET_SENDPACKET;
 8003750:	7813      	ldrb	r3, [r2, #0]
 8003752:	f023 0302 	bic.w	r3, r3, #2
 8003756:	7013      	strb	r3, [r2, #0]
#if ACTLOGLEVEL>=LOG_DEBUG
      LogObject.uart_send_str(F("UIPUDP::_send() DEBUG:udp, uip_packet to send: "));
      LogObject.uart_send_decln(UIPEthernetClass::uip_packet);
#endif
    }
}
 8003758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      UIPEthernetClass::network_send();
 800375c:	f7ff bb8a 	b.w	8002e74 <_ZN16UIPEthernetClass12network_sendEv>
      UIPEthernetClass::network_send();
 8003760:	f7ff fb88 	bl	8002e74 <_ZN16UIPEthernetClass12network_sendEv>
      data->packet_out = NOBLOCK;
 8003764:	80a5      	strh	r5, [r4, #4]
}
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	20000404 	.word	0x20000404
 800376c:	2000020d 	.word	0x2000020d
 8003770:	2000020e 	.word	0x2000020e

08003774 <_ZN6UIPUDP9endPacketEv>:
{
 8003774:	b538      	push	{r3, r4, r5, lr}
  if (_uip_udp_conn && appdata.packet_out != NOBLOCK)
 8003776:	68c3      	ldr	r3, [r0, #12]
{
 8003778:	4604      	mov	r4, r0
  if (_uip_udp_conn && appdata.packet_out != NOBLOCK)
 800377a:	b90b      	cbnz	r3, 8003780 <_ZN6UIPUDP9endPacketEv+0xc>
  return 0;
 800377c:	2000      	movs	r0, #0
}
 800377e:	bd38      	pop	{r3, r4, r5, pc}
  if (_uip_udp_conn && appdata.packet_out != NOBLOCK)
 8003780:	7d00      	ldrb	r0, [r0, #20]
 8003782:	2800      	cmp	r0, #0
 8003784:	d0fa      	beq.n	800377c <_ZN6UIPUDP9endPacketEv+0x8>
      appdata.send = true;
 8003786:	2501      	movs	r5, #1
      Enc28J60Network::resizeBlock(appdata.packet_out,0,appdata.out_pos + UIP_SENDBUFFER_PADDING);
 8003788:	8a22      	ldrh	r2, [r4, #16]
 800378a:	2100      	movs	r1, #0
 800378c:	3207      	adds	r2, #7
 800378e:	b292      	uxth	r2, r2
      appdata.send = true;
 8003790:	7565      	strb	r5, [r4, #21]
      Enc28J60Network::resizeBlock(appdata.packet_out,0,appdata.out_pos + UIP_SENDBUFFER_PADDING);
 8003792:	f000 fded 	bl	8004370 <_ZN10MemoryPool11resizeBlockEhtt>
      uip_udp_periodic_conn(_uip_udp_conn);
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <_ZN6UIPUDP9endPacketEv+0x44>)
 8003798:	68e2      	ldr	r2, [r4, #12]
 800379a:	2005      	movs	r0, #5
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f001 f81b 	bl	80047d8 <uip_process>
      if (uip_len > 0)
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <_ZN6UIPUDP9endPacketEv+0x48>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0e8      	beq.n	800377c <_ZN6UIPUDP9endPacketEv+0x8>
    	  _send(&appdata);
 80037aa:	f104 0010 	add.w	r0, r4, #16
 80037ae:	f7ff ffc3 	bl	8003738 <_ZN6UIPUDP5_sendEP18uip_udp_userdata_t>
          return 1;
 80037b2:	4628      	mov	r0, r5
 80037b4:	e7e3      	b.n	800377e <_ZN6UIPUDP9endPacketEv+0xa>
 80037b6:	bf00      	nop
 80037b8:	20000414 	.word	0x20000414
 80037bc:	20000404 	.word	0x20000404

080037c0 <_ZThn8_N6UIPUDP9endPacketEv>:
  virtual int       endPacket(void);
 80037c0:	f1a0 0008 	sub.w	r0, r0, #8
 80037c4:	f7ff bfd6 	b.w	8003774 <_ZN6UIPUDP9endPacketEv>

080037c8 <_GLOBAL__sub_I__ZN6UIPUDPC2Ev>:
const IPAddress INADDR_NONE(0,0,0,0);
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	b507      	push	{r0, r1, r2, lr}
 80037cc:	461a      	mov	r2, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	4803      	ldr	r0, [pc, #12]	; (80037e0 <_GLOBAL__sub_I__ZN6UIPUDPC2Ev+0x18>)
 80037d4:	f000 f836 	bl	8003844 <_ZN9IPAddressC1Ehhhh>
 80037d8:	b003      	add	sp, #12
 80037da:	f85d fb04 	ldr.w	pc, [sp], #4
 80037de:	bf00      	nop
 80037e0:	2000022c 	.word	0x2000022c

080037e4 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress(){};
 80037e4:	4770      	bx	lr

080037e6 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
 80037e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ea:	4605      	mov	r5, r0
 80037ec:	460c      	mov	r4, r1
    size_t n = 0;
 80037ee:	2700      	movs	r7, #0
 80037f0:	f100 0804 	add.w	r8, r0, #4
 80037f4:	f100 0907 	add.w	r9, r0, #7
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
 80037f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80037fc:	220a      	movs	r2, #10
 80037fe:	4620      	mov	r0, r4
 8003800:	f000 f8b4 	bl	800396c <_ZN5Print5printEhi>
        n += p.print('.');
 8003804:	212e      	movs	r1, #46	; 0x2e
        n += p.print(_address.bytes[i], DEC);
 8003806:	4606      	mov	r6, r0
        n += p.print('.');
 8003808:	4620      	mov	r0, r4
 800380a:	f000 f843 	bl	8003894 <_ZN5Print5printEc>
    for (int i =0; i < 3; i++)
 800380e:	45c8      	cmp	r8, r9
        n += p.print('.');
 8003810:	4406      	add	r6, r0
 8003812:	4437      	add	r7, r6
    for (int i =0; i < 3; i++)
 8003814:	d1f0      	bne.n	80037f8 <_ZNK9IPAddress7printToER5Print+0x12>
    }
    n += p.print(_address.bytes[3], DEC);
 8003816:	220a      	movs	r2, #10
 8003818:	4620      	mov	r0, r4
 800381a:	79e9      	ldrb	r1, [r5, #7]
 800381c:	f000 f8a6 	bl	800396c <_ZN5Print5printEhi>
    return n;
}
 8003820:	4438      	add	r0, r7
 8003822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003826 <_ZN9IPAddressD0Ev>:
 8003826:	b510      	push	{r4, lr}
 8003828:	4604      	mov	r4, r0
 800382a:	2108      	movs	r1, #8
 800382c:	f002 fc2a 	bl	8006084 <_ZdlPvj>
 8003830:	4620      	mov	r0, r4
 8003832:	bd10      	pop	{r4, pc}

08003834 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8003834:	4a02      	ldr	r2, [pc, #8]	; (8003840 <_ZN9IPAddressC1Ev+0xc>)
 8003836:	6002      	str	r2, [r0, #0]
    _address.dword = 0;
 8003838:	2200      	movs	r2, #0
 800383a:	6042      	str	r2, [r0, #4]
}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	08007404 	.word	0x08007404

08003844 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8003844:	b530      	push	{r4, r5, lr}
    _address.bytes[2] = third_octet;
 8003846:	7183      	strb	r3, [r0, #6]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8003848:	4d03      	ldr	r5, [pc, #12]	; (8003858 <_ZN9IPAddressC1Ehhhh+0x14>)
    _address.bytes[3] = fourth_octet;
 800384a:	f89d 300c 	ldrb.w	r3, [sp, #12]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 800384e:	6005      	str	r5, [r0, #0]
    _address.bytes[0] = first_octet;
 8003850:	7101      	strb	r1, [r0, #4]
    _address.bytes[1] = second_octet;
 8003852:	7142      	strb	r2, [r0, #5]
    _address.bytes[3] = fourth_octet;
 8003854:	71c3      	strb	r3, [r0, #7]
}
 8003856:	bd30      	pop	{r4, r5, pc}
 8003858:	08007404 	.word	0x08007404

0800385c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t *address)
 800385c:	4a02      	ldr	r2, [pc, #8]	; (8003868 <_ZN9IPAddressC1EPKh+0xc>)
 800385e:	6002      	str	r2, [r0, #0]
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 8003860:	680a      	ldr	r2, [r1, #0]
 8003862:	6042      	str	r2, [r0, #4]
}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	08007404 	.word	0x08007404

0800386c <_ZN5Print5writeEPKc>:
    
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t)= 0;
    size_t write(const char *str) {
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8003870:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8003872:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8003874:	b149      	cbz	r1, 800388a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8003876:	f7fc fc73 	bl	8000160 <strlen>
 800387a:	682b      	ldr	r3, [r5, #0]
 800387c:	4602      	mov	r2, r0
 800387e:	4621      	mov	r1, r4
 8003880:	4628      	mov	r0, r5
    }
 8003882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4718      	bx	r3
    }
 800388a:	bd70      	pop	{r4, r5, r6, pc}

0800388c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 800388c:	b508      	push	{r3, lr}
  return write(str);
 800388e:	f7ff ffed 	bl	800386c <_ZN5Print5writeEPKc>
}
 8003892:	bd08      	pop	{r3, pc}

08003894 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8003894:	6803      	ldr	r3, [r0, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4718      	bx	r3
	...

0800389c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
 800389c:	b508      	push	{r3, lr}
  return write("\r\n");
 800389e:	4902      	ldr	r1, [pc, #8]	; (80038a8 <_ZN5Print7printlnEv+0xc>)
 80038a0:	f7ff ffe4 	bl	800386c <_ZN5Print5writeEPKc>
}
 80038a4:	bd08      	pop	{r3, pc}
 80038a6:	bf00      	nop
 80038a8:	08007410 	.word	0x08007410

080038ac <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4605      	mov	r5, r0
  return write(str);
 80038b0:	f7ff ffdc 	bl	800386c <_ZN5Print5writeEPKc>
 80038b4:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80038b6:	4628      	mov	r0, r5
 80038b8:	f7ff fff0 	bl	800389c <_ZN5Print7printlnEv>
  return n;
}
 80038bc:	4420      	add	r0, r4
 80038be:	bd38      	pop	{r3, r4, r5, pc}

080038c0 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4605      	mov	r5, r0
  size_t n = print(c);
 80038c4:	f7ff ffe6 	bl	8003894 <_ZN5Print5printEc>
 80038c8:	4604      	mov	r4, r0
  n += println();
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7ff ffe6 	bl	800389c <_ZN5Print7printlnEv>
  return n;
}
 80038d0:	4420      	add	r0, r4
 80038d2:	bd38      	pop	{r3, r4, r5, pc}

080038d4 <_ZN5Print11printNumberEmh>:
size_t Print::printNumber(unsigned long n, uint8_t base)
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80038d4:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80038d6:	2a01      	cmp	r2, #1
 80038d8:	bf98      	it	ls
 80038da:	220a      	movls	r2, #10
{
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	b08b      	sub	sp, #44	; 0x2c
 80038e0:	460c      	mov	r4, r1
  *str = '\0';
 80038e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80038e6:	a909      	add	r1, sp, #36	; 0x24

  do {
    char c = n % base;
 80038e8:	fbb4 f6f2 	udiv	r6, r4, r2
 80038ec:	4627      	mov	r7, r4
 80038ee:	fb02 4516 	mls	r5, r2, r6, r4
 80038f2:	b2eb      	uxtb	r3, r5
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80038f4:	2d09      	cmp	r5, #9
 80038f6:	bf94      	ite	ls
 80038f8:	3330      	addls	r3, #48	; 0x30
 80038fa:	3337      	addhi	r3, #55	; 0x37
 80038fc:	b2db      	uxtb	r3, r3
  } while(n);
 80038fe:	42ba      	cmp	r2, r7
    n /= base;
 8003900:	4634      	mov	r4, r6
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8003902:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8003906:	d9ef      	bls.n	80038e8 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8003908:	f7ff ffb0 	bl	800386c <_ZN5Print5writeEPKc>
}
 800390c:	b00b      	add	sp, #44	; 0x2c
 800390e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003910 <_ZN5Print5printEli>:
{
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	4607      	mov	r7, r0
 8003916:	460e      	mov	r6, r1
  if (base == 0) {
 8003918:	4614      	mov	r4, r2
 800391a:	b92a      	cbnz	r2, 8003928 <_ZN5Print5printEli+0x18>
}
 800391c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return write(n);
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	b2c9      	uxtb	r1, r1
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4718      	bx	r3
  } else if (base == 10) {
 8003928:	2a0a      	cmp	r2, #10
 800392a:	d10d      	bne.n	8003948 <_ZN5Print5printEli+0x38>
    if (n < 0) {
 800392c:	2900      	cmp	r1, #0
 800392e:	da0c      	bge.n	800394a <_ZN5Print5printEli+0x3a>
      int t = print('-');
 8003930:	212d      	movs	r1, #45	; 0x2d
 8003932:	f7ff ffaf 	bl	8003894 <_ZN5Print5printEc>
      return printNumber(n, 10) + t;
 8003936:	4622      	mov	r2, r4
      int t = print('-');
 8003938:	4605      	mov	r5, r0
      return printNumber(n, 10) + t;
 800393a:	4271      	negs	r1, r6
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff ffc9 	bl	80038d4 <_ZN5Print11printNumberEmh>
 8003942:	4428      	add	r0, r5
}
 8003944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return printNumber(n, base);
 8003948:	b2d2      	uxtb	r2, r2
}
 800394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return printNumber(n, base);
 800394e:	f7ff bfc1 	b.w	80038d4 <_ZN5Print11printNumberEmh>

08003952 <_ZN5Print5printEii>:
  return print((long) n, base);
 8003952:	f7ff bfdd 	b.w	8003910 <_ZN5Print5printEli>

08003956 <_ZN5Print5printEmi>:
{
 8003956:	b410      	push	{r4}
  if (base == 0) return write(n);
 8003958:	b922      	cbnz	r2, 8003964 <_ZN5Print5printEmi+0xe>
 800395a:	6802      	ldr	r2, [r0, #0]
}
 800395c:	bc10      	pop	{r4}
  if (base == 0) return write(n);
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	4710      	bx	r2
}
 8003964:	bc10      	pop	{r4}
  else return printNumber(n, base);
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f7ff bfb4 	b.w	80038d4 <_ZN5Print11printNumberEmh>

0800396c <_ZN5Print5printEhi>:
  return print((unsigned long) b, base);
 800396c:	f7ff bff3 	b.w	8003956 <_ZN5Print5printEmi>

08003970 <_ZN6StringD1Ev>:
    init();
    char buf[33];
    *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
 8003970:	b510      	push	{r4, lr}
 8003972:	4604      	mov	r4, r0
{
    free(buffer);
 8003974:	6800      	ldr	r0, [r0, #0]
 8003976:	f002 fbc3 	bl	8006100 <free>
}
 800397a:	4620      	mov	r0, r4
 800397c:	bd10      	pop	{r4, pc}

0800397e <_ZN6String10invalidateEv>:
    capacity = 0;
    len = 0;
}

void String::invalidate(void)
{
 800397e:	b510      	push	{r4, lr}
 8003980:	4604      	mov	r4, r0
    if (buffer) free(buffer);
 8003982:	6800      	ldr	r0, [r0, #0]
 8003984:	b108      	cbz	r0, 800398a <_ZN6String10invalidateEv+0xc>
 8003986:	f002 fbbb 	bl	8006100 <free>
    buffer = NULL;
 800398a:	2300      	movs	r3, #0
    capacity = len = 0;
 800398c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = NULL;
 8003990:	6023      	str	r3, [r4, #0]
}
 8003992:	bd10      	pop	{r4, pc}

08003994 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4604      	mov	r4, r0
 8003998:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	3101      	adds	r1, #1
 800399e:	f002 fcc1 	bl	8006324 <realloc>
    if (newbuffer) {
 80039a2:	b110      	cbz	r0, 80039aa <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
 80039a4:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 80039a8:	2001      	movs	r0, #1
    }
    return 0;
}
 80039aa:	bd38      	pop	{r3, r4, r5, pc}

080039ac <_ZN6String7reserveEj>:
    if (buffer && capacity >= size) return 1;
 80039ac:	6803      	ldr	r3, [r0, #0]
{
 80039ae:	b510      	push	{r4, lr}
 80039b0:	4604      	mov	r4, r0
    if (buffer && capacity >= size) return 1;
 80039b2:	b123      	cbz	r3, 80039be <_ZN6String7reserveEj+0x12>
 80039b4:	6843      	ldr	r3, [r0, #4]
 80039b6:	428b      	cmp	r3, r1
 80039b8:	d301      	bcc.n	80039be <_ZN6String7reserveEj+0x12>
 80039ba:	2001      	movs	r0, #1
}
 80039bc:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff ffe8 	bl	8003994 <_ZN6String12changeBufferEj>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d0f9      	beq.n	80039bc <_ZN6String7reserveEj+0x10>
        if (len == 0) buffer[0] = 0;
 80039c8:	68a3      	ldr	r3, [r4, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f5      	bne.n	80039ba <_ZN6String7reserveEj+0xe>
 80039ce:	6822      	ldr	r2, [r4, #0]
 80039d0:	7013      	strb	r3, [r2, #0]
 80039d2:	e7f2      	b.n	80039ba <_ZN6String7reserveEj+0xe>

080039d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	460e      	mov	r6, r1
    if (!reserve(length)) {
 80039d8:	4611      	mov	r1, r2
{
 80039da:	4604      	mov	r4, r0
 80039dc:	4615      	mov	r5, r2
    if (!reserve(length)) {
 80039de:	f7ff ffe5 	bl	80039ac <_ZN6String7reserveEj>
 80039e2:	b920      	cbnz	r0, 80039ee <_ZN6String4copyEPKcj+0x1a>
        invalidate();
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7ff ffca 	bl	800397e <_ZN6String10invalidateEv>
        return *this;
    }
    len = length;
    strcpy(buffer, cstr);
    return *this;
}
 80039ea:	4620      	mov	r0, r4
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
    strcpy(buffer, cstr);
 80039ee:	4631      	mov	r1, r6
 80039f0:	6820      	ldr	r0, [r4, #0]
    len = length;
 80039f2:	60a5      	str	r5, [r4, #8]
    strcpy(buffer, cstr);
 80039f4:	f002 fcff 	bl	80063f6 <strcpy>
    return *this;
 80039f8:	e7f7      	b.n	80039ea <_ZN6String4copyEPKcj+0x16>

080039fa <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80039fa:	b538      	push	{r3, r4, r5, lr}
    buffer = NULL;
 80039fc:	2300      	movs	r3, #0
String::String(const char *cstr)
 80039fe:	4604      	mov	r4, r0
    if (cstr) copy(cstr, strlen(cstr));
 8003a00:	460d      	mov	r5, r1
    capacity = 0;
 8003a02:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 8003a06:	6083      	str	r3, [r0, #8]
    if (cstr) copy(cstr, strlen(cstr));
 8003a08:	b139      	cbz	r1, 8003a1a <_ZN6StringC1EPKc+0x20>
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	f7fc fba8 	bl	8000160 <strlen>
 8003a10:	4629      	mov	r1, r5
 8003a12:	4602      	mov	r2, r0
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7ff ffdd 	bl	80039d4 <_ZN6String4copyEPKcj>
}
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}

08003a1e <_ZN6String4moveERS_>:
    return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
 8003a1e:	b538      	push	{r3, r4, r5, lr}
 8003a20:	4605      	mov	r5, r0
    if (buffer) {
 8003a22:	6800      	ldr	r0, [r0, #0]
{
 8003a24:	460c      	mov	r4, r1
    if (buffer) {
 8003a26:	b168      	cbz	r0, 8003a44 <_ZN6String4moveERS_+0x26>
        if (capacity >= rhs.len) {
 8003a28:	686a      	ldr	r2, [r5, #4]
 8003a2a:	688b      	ldr	r3, [r1, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d307      	bcc.n	8003a40 <_ZN6String4moveERS_+0x22>
            strcpy(buffer, rhs.buffer);
 8003a30:	6809      	ldr	r1, [r1, #0]
 8003a32:	f002 fce0 	bl	80063f6 <strcpy>
            len = rhs.len;
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 8003a3a:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = NULL;
    rhs.capacity = 0;
    rhs.len = 0;
 8003a3c:	60a3      	str	r3, [r4, #8]
}
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 8003a40:	f002 fb5e 	bl	8006100 <free>
    buffer = rhs.buffer;
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 8003a4c:	68a3      	ldr	r3, [r4, #8]
 8003a4e:	60ab      	str	r3, [r5, #8]
    rhs.buffer = NULL;
 8003a50:	2300      	movs	r3, #0
    rhs.capacity = 0;
 8003a52:	e9c4 3300 	strd	r3, r3, [r4]
 8003a56:	e7f1      	b.n	8003a3c <_ZN6String4moveERS_+0x1e>

08003a58 <_ZN6StringaSEOS_>:
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    if (this != &rval) move(rval);
 8003a58:	4288      	cmp	r0, r1
{
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	4604      	mov	r4, r0
    if (this != &rval) move(rval);
 8003a5e:	d001      	beq.n	8003a64 <_ZN6StringaSEOS_+0xc>
 8003a60:	f7ff ffdd 	bl	8003a1e <_ZN6String4moveERS_>
    return *this;
}
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4605      	mov	r5, r0
    if (cstr) copy(cstr, strlen(cstr));
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	b149      	cbz	r1, 8003a84 <_ZN6StringaSEPKc+0x1c>
 8003a70:	4608      	mov	r0, r1
 8003a72:	f7fc fb75 	bl	8000160 <strlen>
 8003a76:	4621      	mov	r1, r4
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff ffaa 	bl	80039d4 <_ZN6String4copyEPKcj>
    else invalidate();

    return *this;
}
 8003a80:	4628      	mov	r0, r5
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
    else invalidate();
 8003a84:	f7ff ff7b 	bl	800397e <_ZN6String10invalidateEv>
 8003a88:	e7fa      	b.n	8003a80 <_ZN6StringaSEPKc+0x18>

08003a8a <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8003a8a:	b570      	push	{r4, r5, r6, lr}
 8003a8c:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) return 0;
 8003a8e:	460e      	mov	r6, r1
 8003a90:	b909      	cbnz	r1, 8003a96 <_ZN6String6concatEPKcj+0xc>
 8003a92:	2000      	movs	r0, #0
    if (length == 0) return 1;
    if (!reserve(newlen)) return 0;
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) return 1;
 8003a96:	b16a      	cbz	r2, 8003ab4 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
 8003a98:	6884      	ldr	r4, [r0, #8]
 8003a9a:	4414      	add	r4, r2
    if (!reserve(newlen)) return 0;
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	f7ff ff85 	bl	80039ac <_ZN6String7reserveEj>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0f5      	beq.n	8003a92 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
 8003aa6:	6828      	ldr	r0, [r5, #0]
 8003aa8:	68ab      	ldr	r3, [r5, #8]
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4418      	add	r0, r3
 8003aae:	f002 fca2 	bl	80063f6 <strcpy>
    len = newlen;
 8003ab2:	60ac      	str	r4, [r5, #8]
    if (length == 0) return 1;
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	e7ed      	b.n	8003a94 <_ZN6String6concatEPKcj+0xa>

08003ab8 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    char buf[2];
    buf[0] = c;
    buf[1] = 0;
 8003ab8:	2300      	movs	r3, #0
{
 8003aba:	b507      	push	{r0, r1, r2, lr}
    return concat(buf, 1);
 8003abc:	2201      	movs	r2, #1
    buf[0] = c;
 8003abe:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
 8003ac2:	a901      	add	r1, sp, #4
    buf[1] = 0;
 8003ac4:	f88d 3005 	strb.w	r3, [sp, #5]
    return concat(buf, 1);
 8003ac8:	f7ff ffdf 	bl	8003a8a <_ZN6String6concatEPKcj>
}
 8003acc:	b003      	add	sp, #12
 8003ace:	f85d fb04 	ldr.w	pc, [sp], #4

08003ad2 <_ZNK6String6equalsEPKc>:
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    if (len == 0) return (cstr == NULL || *cstr == 0);
 8003ad2:	6882      	ldr	r2, [r0, #8]
{
 8003ad4:	b508      	push	{r3, lr}
    if (len == 0) return (cstr == NULL || *cstr == 0);
 8003ad6:	b93a      	cbnz	r2, 8003ae8 <_ZNK6String6equalsEPKc+0x16>
 8003ad8:	b121      	cbz	r1, 8003ae4 <_ZNK6String6equalsEPKc+0x12>
 8003ada:	7808      	ldrb	r0, [r1, #0]
    if (cstr == NULL) return buffer[0] == 0;
    return strcmp(buffer, cstr) == 0;
 8003adc:	fab0 f080 	clz	r0, r0
 8003ae0:	0940      	lsrs	r0, r0, #5
 8003ae2:	e000      	b.n	8003ae6 <_ZNK6String6equalsEPKc+0x14>
    if (len == 0) return (cstr == NULL || *cstr == 0);
 8003ae4:	2001      	movs	r0, #1
}
 8003ae6:	bd08      	pop	{r3, pc}
    if (cstr == NULL) return buffer[0] == 0;
 8003ae8:	6800      	ldr	r0, [r0, #0]
 8003aea:	b909      	cbnz	r1, 8003af0 <_ZNK6String6equalsEPKc+0x1e>
 8003aec:	7800      	ldrb	r0, [r0, #0]
 8003aee:	e7f5      	b.n	8003adc <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 8003af0:	f7fc fb2c 	bl	800014c <strcmp>
 8003af4:	e7f2      	b.n	8003adc <_ZNK6String6equalsEPKc+0xa>

08003af6 <_ZNK6String10startsWithERKS_j>:
    if (len < s2.len) return 0;
    return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 8003af6:	4613      	mov	r3, r2
 8003af8:	b510      	push	{r4, lr}
    if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8003afa:	688a      	ldr	r2, [r1, #8]
 8003afc:	6884      	ldr	r4, [r0, #8]
 8003afe:	1aa4      	subs	r4, r4, r2
 8003b00:	429c      	cmp	r4, r3
 8003b02:	d30a      	bcc.n	8003b1a <_ZNK6String10startsWithERKS_j+0x24>
 8003b04:	6800      	ldr	r0, [r0, #0]
 8003b06:	b138      	cbz	r0, 8003b18 <_ZNK6String10startsWithERKS_j+0x22>
 8003b08:	6809      	ldr	r1, [r1, #0]
 8003b0a:	b141      	cbz	r1, 8003b1e <_ZNK6String10startsWithERKS_j+0x28>
    return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 8003b0c:	4418      	add	r0, r3
 8003b0e:	f002 fc7a 	bl	8006406 <strncmp>
 8003b12:	fab0 f080 	clz	r0, r0
 8003b16:	0940      	lsrs	r0, r0, #5
}
 8003b18:	bd10      	pop	{r4, pc}
    if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	e7fc      	b.n	8003b18 <_ZNK6String10startsWithERKS_j+0x22>
 8003b1e:	4608      	mov	r0, r1
 8003b20:	e7fa      	b.n	8003b18 <_ZNK6String10startsWithERKS_j+0x22>

08003b22 <_ZNK6String10startsWithERKS_>:
    if (len < s2.len) return 0;
 8003b22:	6882      	ldr	r2, [r0, #8]
 8003b24:	688b      	ldr	r3, [r1, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <_ZNK6String10startsWithERKS_+0xe>
    return startsWith(s2, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f7ff bfe3 	b.w	8003af6 <_ZNK6String10startsWithERKS_j>
}
 8003b30:	2000      	movs	r0, #0
 8003b32:	4770      	bx	lr

08003b34 <_ZNK6StringixEj>:
    return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    if (index >= len || !buffer) return 0;
 8003b34:	6883      	ldr	r3, [r0, #8]
 8003b36:	428b      	cmp	r3, r1
 8003b38:	d903      	bls.n	8003b42 <_ZNK6StringixEj+0xe>
 8003b3a:	6800      	ldr	r0, [r0, #0]
 8003b3c:	b110      	cbz	r0, 8003b44 <_ZNK6StringixEj+0x10>
    return buffer[index];
 8003b3e:	5c40      	ldrb	r0, [r0, r1]
 8003b40:	4770      	bx	lr
    if (index >= len || !buffer) return 0;
 8003b42:	2000      	movs	r0, #0
}
 8003b44:	4770      	bx	lr

08003b46 <_ZNK6String6charAtEj>:
    return operator[](loc);
 8003b46:	f7ff bff5 	b.w	8003b34 <_ZNK6StringixEj>

08003b4a <_ZNK6String7indexOfEcj>:
    return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    if (fromIndex >= len) return -1;
 8003b4a:	6883      	ldr	r3, [r0, #8]
{
 8003b4c:	b510      	push	{r4, lr}
    if (fromIndex >= len) return -1;
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d906      	bls.n	8003b60 <_ZNK6String7indexOfEcj+0x16>
    const char* temp = strchr(buffer + fromIndex, ch);
 8003b52:	6804      	ldr	r4, [r0, #0]
 8003b54:	18a0      	adds	r0, r4, r2
 8003b56:	f002 fc41 	bl	80063dc <strchr>
    if (temp == NULL) return -1;
 8003b5a:	b108      	cbz	r0, 8003b60 <_ZNK6String7indexOfEcj+0x16>
    return temp - buffer;
 8003b5c:	1b00      	subs	r0, r0, r4
}
 8003b5e:	bd10      	pop	{r4, pc}
    if (fromIndex >= len) return -1;
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	e7fb      	b.n	8003b5e <_ZNK6String7indexOfEcj+0x14>

08003b66 <_ZNK6String7indexOfEc>:
    return indexOf(c, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	f7ff bfef 	b.w	8003b4a <_ZNK6String7indexOfEcj>

08003b6c <_ZNK6String9substringEjj>:
    }
    return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
 8003b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b70:	461f      	mov	r7, r3
    if (left > right) {
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf88      	it	hi
 8003b76:	4613      	movhi	r3, r2
{
 8003b78:	460e      	mov	r6, r1
 8003b7a:	4614      	mov	r4, r2
    if (left > right) {
 8003b7c:	bf88      	it	hi
 8003b7e:	463c      	movhi	r4, r7
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <_ZNK6String9substringEjj+0x48>)
    if (left > right) {
 8003b82:	bf88      	it	hi
 8003b84:	461f      	movhi	r7, r3
{
 8003b86:	4680      	mov	r8, r0
    String out;
 8003b88:	f7ff ff37 	bl	80039fa <_ZN6StringC1EPKc>
    if (left >= len) return out;
 8003b8c:	68b5      	ldr	r5, [r6, #8]
 8003b8e:	42a5      	cmp	r5, r4
 8003b90:	d90d      	bls.n	8003bae <_ZNK6String9substringEjj+0x42>
    if (right > len) right = len;
 8003b92:	42bd      	cmp	r5, r7
 8003b94:	bf28      	it	cs
 8003b96:	463d      	movcs	r5, r7
    char temp = buffer[right];  // save the replaced character
    buffer[right] = '\0';
 8003b98:	2200      	movs	r2, #0
    char temp = buffer[right];  // save the replaced character
 8003b9a:	6833      	ldr	r3, [r6, #0]
    out = buffer + left;  // pointer arithmetic
 8003b9c:	4640      	mov	r0, r8
    char temp = buffer[right];  // save the replaced character
 8003b9e:	5d5f      	ldrb	r7, [r3, r5]
    buffer[right] = '\0';
 8003ba0:	555a      	strb	r2, [r3, r5]
    out = buffer + left;  // pointer arithmetic
 8003ba2:	6831      	ldr	r1, [r6, #0]
 8003ba4:	4421      	add	r1, r4
 8003ba6:	f7ff ff5f 	bl	8003a68 <_ZN6StringaSEPKc>
    buffer[right] = temp;  //restore character
 8003baa:	6833      	ldr	r3, [r6, #0]
 8003bac:	555f      	strb	r7, [r3, r5]
    return out;
}
 8003bae:	4640      	mov	r0, r8
 8003bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb4:	08007412 	.word	0x08007412

08003bb8 <millis_start>:
 * @param
 * @retval
 */
void millis_start(void) {
//    SysTick_Config(SystemCoreClock / 1000);
}
 8003bb8:	4770      	bx	lr
	...

08003bbc <millis>:
 * @note
 * @param
 * @retval
 */
extern "C" unsigned long millis(void) {
    return uwTick;
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <millis+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000400 	.word	0x20000400

08003bc8 <_ZN15Enc28J60Network9blockSizeEh>:
Enc28J60Network::blockSize(memhandle handle)
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::blockSize(memhandle handle) DEBUG_V3:Function started"));
  #endif
  return ((handle == NOBLOCK) || (erevid==0)) ? 0 : handle == UIP_RECEIVEBUFFERHANDLE ? receivePkt.size : blocks[handle].size;
 8003bc8:	b170      	cbz	r0, 8003be8 <_ZN15Enc28J60Network9blockSizeEh+0x20>
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <_ZN15Enc28J60Network9blockSizeEh+0x24>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b153      	cbz	r3, 8003be6 <_ZN15Enc28J60Network9blockSizeEh+0x1e>
 8003bd0:	28ff      	cmp	r0, #255	; 0xff
 8003bd2:	bf15      	itete	ne
 8003bd4:	2206      	movne	r2, #6
 8003bd6:	4b06      	ldreq	r3, [pc, #24]	; (8003bf0 <_ZN15Enc28J60Network9blockSizeEh+0x28>)
 8003bd8:	4b06      	ldrne	r3, [pc, #24]	; (8003bf4 <_ZN15Enc28J60Network9blockSizeEh+0x2c>)
 8003bda:	8858      	ldrheq	r0, [r3, #2]
 8003bdc:	bf1c      	itt	ne
 8003bde:	fb02 3000 	mlane	r0, r2, r0, r3
 8003be2:	8840      	ldrhne	r0, [r0, #2]
 8003be4:	4770      	bx	lr
 8003be6:	4618      	mov	r0, r3
}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2000023c 	.word	0x2000023c
 8003bf0:	20000234 	.word	0x20000234
 8003bf4:	2000023e 	.word	0x2000023e

08003bf8 <_ZN15Enc28J60Network6readOpEhh>:
    setERXRDPT();
}

uint8_t
Enc28J60Network::readOp(uint8_t op, uint8_t address)
{
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	4605      	mov	r5, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::readOp(uint8_t op, uint8_t address) DEBUG_V3:Function started"));
  #endif
  CSACTIVE;
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fc fab6 	bl	8000170 <_cs>
        SPI.transfer(0x00);
        }
      uint8_t c = SPI.transfer(0x00);
    #endif
    #if defined(__MBED__)
      spiWrite(op | (address & ADDR_MASK));
 8003c04:	f004 001f 	and.w	r0, r4, #31
 8003c08:	4328      	orrs	r0, r5
 8003c0a:	f7fc fabb 	bl	8000184 <spiWrite>
      // read data
      if(address & 0x80)
 8003c0e:	0623      	lsls	r3, r4, #24
 8003c10:	d502      	bpl.n	8003c18 <_ZN15Enc28J60Network6readOpEhh+0x20>
        {
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        spiWrite(0x00);
 8003c12:	2000      	movs	r0, #0
 8003c14:	f7fc fab6 	bl	8000184 <spiWrite>
        }
      uint8_t c = spiWrite(0x00);
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7fc fab3 	bl	8000184 <spiWrite>
 8003c1e:	4604      	mov	r4, r0
    #endif
    // release CS
    CSPASSIVE;
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7fc faa5 	bl	8000170 <_cs>
    return(SPDR);
  #endif
  #if defined(ESP8266)
     yield();
  #endif
}
 8003c26:	4620      	mov	r0, r4
 8003c28:	bd38      	pop	{r3, r4, r5, pc}

08003c2a <_ZN15Enc28J60Network7writeOpEhhh>:

void
Enc28J60Network::writeOp(uint8_t op, uint8_t address, uint8_t data)
{
 8003c2a:	b570      	push	{r4, r5, r6, lr}
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	4606      	mov	r6, r0
 8003c30:	4615      	mov	r5, r2
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::writeOp(uint8_t op, uint8_t address, uint8_t data) DEBUG_V3:Function started"));
  #endif
  CSACTIVE;
 8003c32:	2000      	movs	r0, #0
      SPI.transfer(op | (address & ADDR_MASK));
      // write data
      SPI.transfer(data);
    #endif
    #if defined(__MBED__)
      spiWrite(op | (address & ADDR_MASK));
 8003c34:	f004 041f 	and.w	r4, r4, #31
  CSACTIVE;
 8003c38:	f7fc fa9a 	bl	8000170 <_cs>
      spiWrite(op | (address & ADDR_MASK));
 8003c3c:	ea46 0004 	orr.w	r0, r6, r4
 8003c40:	f7fc faa0 	bl	8000184 <spiWrite>
      // write data
      spiWrite(data);
 8003c44:	4628      	mov	r0, r5
 8003c46:	f7fc fa9d 	bl	8000184 <spiWrite>
  #endif
  CSPASSIVE;
  #if defined(ESP8266)
     yield();
  #endif
}
 8003c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CSPASSIVE;
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f7fc ba8e 	b.w	8000170 <_cs>

08003c54 <_ZN15Enc28J60Network10readBufferEtPh>:

void
Enc28J60Network::readBuffer(uint16_t len, uint8_t* data)
{
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4605      	mov	r5, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::readBuffer(uint16_t len, uint8_t* data) DEBUG_V3:Function started"));
  #endif
  CSACTIVE;
 8003c58:	2000      	movs	r0, #0
{
 8003c5a:	460c      	mov	r4, r1
  CSACTIVE;
 8003c5c:	f7fc fa88 	bl	8000170 <_cs>
  #if ENC28J60_USE_SPILIB
    #if defined(ARDUINO)
      SPI.transfer(ENC28J60_READ_BUF_MEM);
    #endif
    #if defined(__MBED__)
      spiWrite(ENC28J60_READ_BUF_MEM);
 8003c60:	203a      	movs	r0, #58	; 0x3a
 8003c62:	f7fc fa8f 	bl	8000184 <spiWrite>
 8003c66:	4425      	add	r5, r4
    #endif
  #else
    SPDR = ENC28J60_READ_BUF_MEM;
    waitspi();
  #endif
  while(len)
 8003c68:	42ac      	cmp	r4, r5
 8003c6a:	d005      	beq.n	8003c78 <_ZN15Enc28J60Network10readBufferEtPh+0x24>
    #if ENC28J60_USE_SPILIB
      #if defined(ARDUINO)
        *data = SPI.transfer(0x00);
      #endif
      #if defined(__MBED__)
        *data = spiWrite(0x00);
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f7fc fa89 	bl	8000184 <spiWrite>
 8003c72:	f804 0b01 	strb.w	r0, [r4], #1
  while(len)
 8003c76:	e7f7      	b.n	8003c68 <_ZN15Enc28J60Network10readBufferEtPh+0x14>
      *data = SPDR;
    #endif
    data++;
    }
  //*data='\0';
  CSPASSIVE;
 8003c78:	2001      	movs	r0, #1
}
 8003c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CSPASSIVE;
 8003c7e:	f7fc ba77 	b.w	8000170 <_cs>

08003c82 <_ZN15Enc28J60Network11writeBufferEtPh>:

void
Enc28J60Network::writeBuffer(uint16_t len, uint8_t* data)
{
 8003c82:	b538      	push	{r3, r4, r5, lr}
 8003c84:	4605      	mov	r5, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::writeBuffer(uint16_t len, uint8_t* data) DEBUG_V3:Function started"));
  #endif
  CSACTIVE;
 8003c86:	2000      	movs	r0, #0
{
 8003c88:	460c      	mov	r4, r1
  CSACTIVE;
 8003c8a:	f7fc fa71 	bl	8000170 <_cs>
  #if ENC28J60_USE_SPILIB
    #if defined(ARDUINO)
      SPI.transfer(ENC28J60_WRITE_BUF_MEM);
    #endif
    #if defined(__MBED__)
      spiWrite(ENC28J60_WRITE_BUF_MEM);
 8003c8e:	207a      	movs	r0, #122	; 0x7a
 8003c90:	f7fc fa78 	bl	8000184 <spiWrite>
 8003c94:	4425      	add	r5, r4
    #endif
  #else
    SPDR = ENC28J60_WRITE_BUF_MEM;
    waitspi();
  #endif
  while(len)
 8003c96:	42ac      	cmp	r4, r5
 8003c98:	d004      	beq.n	8003ca4 <_ZN15Enc28J60Network11writeBufferEtPh+0x22>
    #if ENC28J60_USE_SPILIB
      #if defined(ARDUINO)
        SPI.transfer(*data);
      #endif
      #if defined(__MBED__)
        spiWrite(*data);
 8003c9a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003c9e:	f7fc fa71 	bl	8000184 <spiWrite>
  while(len)
 8003ca2:	e7f8      	b.n	8003c96 <_ZN15Enc28J60Network11writeBufferEtPh+0x14>
      SPDR = *data;
      data++;
      waitspi();
    #endif
    }
  CSPASSIVE;
 8003ca4:	2001      	movs	r0, #1
}
 8003ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CSPASSIVE;
 8003caa:	f7fc ba61 	b.w	8000170 <_cs>
	...

08003cb0 <_ZN15Enc28J60Network7setBankEh>:

void
Enc28J60Network::setBank(uint8_t address)
{
 8003cb0:	b570      	push	{r4, r5, r6, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::setBank(uint8_t address) DEBUG_V3:Function started"));
  #endif
  // set the bank (if needed)
  if((address & BANK_MASK) != bank)
 8003cb2:	4d0a      	ldr	r5, [pc, #40]	; (8003cdc <_ZN15Enc28J60Network7setBankEh+0x2c>)
 8003cb4:	f000 0660 	and.w	r6, r0, #96	; 0x60
 8003cb8:	782b      	ldrb	r3, [r5, #0]
{
 8003cba:	4604      	mov	r4, r0
  if((address & BANK_MASK) != bank)
 8003cbc:	42b3      	cmp	r3, r6
 8003cbe:	d00b      	beq.n	8003cd8 <_ZN15Enc28J60Network7setBankEh+0x28>
  {
    // set the bank
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	211f      	movs	r1, #31
 8003cc4:	20a0      	movs	r0, #160	; 0xa0
 8003cc6:	f7ff ffb0 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 8003cca:	211f      	movs	r1, #31
 8003ccc:	2080      	movs	r0, #128	; 0x80
 8003cce:	f3c4 1241 	ubfx	r2, r4, #5, #2
 8003cd2:	f7ff ffaa 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    bank = (address & BANK_MASK);
 8003cd6:	702e      	strb	r6, [r5, #0]
  }
}
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000029 	.word	0x20000029

08003ce0 <_ZN15Enc28J60Network7readRegEh>:

uint8_t
Enc28J60Network::readReg(uint8_t address)

{
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::readReg(uint8_t address) DEBUG_V3:Function started"));
  #endif
  // set the bank
  setBank(address);
 8003ce4:	f7ff ffe4 	bl	8003cb0 <_ZN15Enc28J60Network7setBankEh>
  // do the read
  return readOp(ENC28J60_READ_CTRL_REG, address);
 8003ce8:	4621      	mov	r1, r4
}
 8003cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return readOp(ENC28J60_READ_CTRL_REG, address);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7ff bf82 	b.w	8003bf8 <_ZN15Enc28J60Network6readOpEhh>

08003cf4 <_ZN15Enc28J60Network7initSPIEv>:
void Enc28J60Network::initSPI() {
 8003cf4:	b538      	push	{r3, r4, r5, lr}
  if (erevid != 0)
 8003cf6:	4c08      	ldr	r4, [pc, #32]	; (8003d18 <_ZN15Enc28J60Network7initSPIEv+0x24>)
 8003cf8:	7825      	ldrb	r5, [r4, #0]
 8003cfa:	b95d      	cbnz	r5, 8003d14 <_ZN15Enc28J60Network7initSPIEv+0x20>
  	 millis_start();
 8003cfc:	f7ff ff5c 	bl	8003bb8 <millis_start>
  CSPASSIVE; // ss=0
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7fc fa35 	bl	8000170 <_cs>
  erevid=readReg(EREVID);
 8003d06:	2072      	movs	r0, #114	; 0x72
 8003d08:	f7ff ffea 	bl	8003ce0 <_ZN15Enc28J60Network7readRegEh>
  if (erevid==0xFF) {erevid=0;}
 8003d0c:	28ff      	cmp	r0, #255	; 0xff
  erevid=readReg(EREVID);
 8003d0e:	bf14      	ite	ne
 8003d10:	7020      	strbne	r0, [r4, #0]
  if (erevid==0xFF) {erevid=0;}
 8003d12:	7025      	strbeq	r5, [r4, #0]
}
 8003d14:	bd38      	pop	{r3, r4, r5, pc}
 8003d16:	bf00      	nop
 8003d18:	2000023c 	.word	0x2000023c

08003d1c <_ZN15Enc28J60Network8writeRegEhh>:

void
Enc28J60Network::writeReg(uint8_t address, uint8_t data)
{
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4604      	mov	r4, r0
 8003d20:	460d      	mov	r5, r1
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::writeReg(uint8_t address, uint8_t data) DEBUG_V3:Function started"));
  #endif
  // set the bank
  setBank(address);
 8003d22:	f7ff ffc5 	bl	8003cb0 <_ZN15Enc28J60Network7setBankEh>
  // do the write
  writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8003d26:	462a      	mov	r2, r5
 8003d28:	4621      	mov	r1, r4
}
 8003d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8003d2e:	2040      	movs	r0, #64	; 0x40
 8003d30:	f7ff bf7b 	b.w	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>

08003d34 <_ZN15Enc28J60Network12writeRegPairEht>:

void
Enc28J60Network::writeRegPair(uint8_t address, uint16_t data)
{
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	460d      	mov	r5, r1
 8003d38:	4604      	mov	r4, r0
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::writeRegPair(uint8_t address, uint16_t data) DEBUG_V3:Function started"));
  #endif
  // set the bank
  setBank(address);
 8003d3a:	f7ff ffb9 	bl	8003cb0 <_ZN15Enc28J60Network7setBankEh>
  // do the write
  writeOp(ENC28J60_WRITE_CTRL_REG, address, (data&0xFF));
 8003d3e:	4621      	mov	r1, r4
 8003d40:	b2ea      	uxtb	r2, r5
 8003d42:	2040      	movs	r0, #64	; 0x40
  writeOp(ENC28J60_WRITE_CTRL_REG, address+1, (data) >> 8);
 8003d44:	3401      	adds	r4, #1
  writeOp(ENC28J60_WRITE_CTRL_REG, address, (data&0xFF));
 8003d46:	f7ff ff70 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
  writeOp(ENC28J60_WRITE_CTRL_REG, address+1, (data) >> 8);
 8003d4a:	0a2a      	lsrs	r2, r5, #8
 8003d4c:	b2e1      	uxtb	r1, r4
 8003d4e:	2040      	movs	r0, #64	; 0x40
}
 8003d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeOp(ENC28J60_WRITE_CTRL_REG, address+1, (data) >> 8);
 8003d54:	f7ff bf69 	b.w	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>

08003d58 <_ZN15Enc28J60Network10setERXRDPTEv>:
  uint16_t actnextPacketPtr = nextPacketPtr == RXSTART_INIT ? RXSTOP_INIT : nextPacketPtr-1;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <_ZN15Enc28J60Network10setERXRDPTEv+0x18>)
 8003d5a:	8819      	ldrh	r1, [r3, #0]
 8003d5c:	b121      	cbz	r1, 8003d68 <_ZN15Enc28J60Network10setERXRDPTEv+0x10>
 8003d5e:	3901      	subs	r1, #1
 8003d60:	b289      	uxth	r1, r1
  writeRegPair(ERXRDPTL, actnextPacketPtr);
 8003d62:	200c      	movs	r0, #12
 8003d64:	f7ff bfe6 	b.w	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  uint16_t actnextPacketPtr = nextPacketPtr == RXSTART_INIT ? RXSTOP_INIT : nextPacketPtr-1;
 8003d68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003d6c:	e7f9      	b.n	8003d62 <_ZN15Enc28J60Network10setERXRDPTEv+0xa>
 8003d6e:	bf00      	nop
 8003d70:	2000023a 	.word	0x2000023a

08003d74 <_ZN15Enc28J60Network10freePacketEv>:
    setERXRDPT();
 8003d74:	f7ff bff0 	b.w	8003d58 <_ZN15Enc28J60Network10setERXRDPTEv>

08003d78 <_ZN15Enc28J60Network13receivePacketEv>:
  uint8_t epktcnt=readReg(EPKTCNT);
 8003d78:	2039      	movs	r0, #57	; 0x39
{
 8003d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t epktcnt=readReg(EPKTCNT);
 8003d7e:	f7ff ffaf 	bl	8003ce0 <_ZN15Enc28J60Network7readRegEh>
  if ((erevid!=0) && (epktcnt!=0))
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <_ZN15Enc28J60Network13receivePacketEv+0xa0>)
  uint8_t epktcnt=readReg(EPKTCNT);
 8003d84:	4603      	mov	r3, r0
  if ((erevid!=0) && (epktcnt!=0))
 8003d86:	7810      	ldrb	r0, [r2, #0]
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d03d      	beq.n	8003e08 <_ZN15Enc28J60Network13receivePacketEv+0x90>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d041      	beq.n	8003e14 <_ZN15Enc28J60Network13receivePacketEv+0x9c>
      uint16_t readPtr = nextPacketPtr+6 > RXSTOP_INIT ? nextPacketPtr+6-((RXSTOP_INIT + 1)-RXSTART_INIT) : nextPacketPtr+6;
 8003d90:	f240 73f9 	movw	r3, #2041	; 0x7f9
 8003d94:	4d21      	ldr	r5, [pc, #132]	; (8003e1c <_ZN15Enc28J60Network13receivePacketEv+0xa4>)
      writeRegPair(ERDPTL, nextPacketPtr);
 8003d96:	2000      	movs	r0, #0
      uint16_t readPtr = nextPacketPtr+6 > RXSTOP_INIT ? nextPacketPtr+6-((RXSTOP_INIT + 1)-RXSTART_INIT) : nextPacketPtr+6;
 8003d98:	8829      	ldrh	r1, [r5, #0]
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	bf8c      	ite	hi
 8003d9e:	f2a1 76fa 	subwhi	r6, r1, #2042	; 0x7fa
 8003da2:	1d8e      	addls	r6, r1, #6
      writeRegPair(ERDPTL, nextPacketPtr);
 8003da4:	f7ff ffc6 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
      nextPacketPtr = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003da8:	2100      	movs	r1, #0
 8003daa:	203a      	movs	r0, #58	; 0x3a
 8003dac:	f7ff ff24 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
      nextPacketPtr |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003db0:	2100      	movs	r1, #0
      nextPacketPtr = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003db2:	8028      	strh	r0, [r5, #0]
      nextPacketPtr |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003db4:	203a      	movs	r0, #58	; 0x3a
 8003db6:	f7ff ff1f 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
 8003dba:	882b      	ldrh	r3, [r5, #0]
      len = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003dbc:	2100      	movs	r1, #0
      nextPacketPtr |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003dbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      len = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003dc2:	203a      	movs	r0, #58	; 0x3a
      nextPacketPtr |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003dc4:	802b      	strh	r3, [r5, #0]
      len = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003dc6:	f7ff ff17 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
      len |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003dca:	2100      	movs	r1, #0
      len = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003dcc:	4604      	mov	r4, r0
      len |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003dce:	203a      	movs	r0, #58	; 0x3a
 8003dd0:	f7ff ff12 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
      rxstat = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003dd4:	2100      	movs	r1, #0
      len |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003dd6:	4607      	mov	r7, r0
      rxstat = readOp(ENC28J60_READ_BUF_MEM, 0);
 8003dd8:	203a      	movs	r0, #58	; 0x3a
 8003dda:	f7ff ff0d 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
 8003dde:	4680      	mov	r8, r0
      writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	211e      	movs	r1, #30
 8003de4:	2080      	movs	r0, #128	; 0x80
 8003de6:	f7ff ff20 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
      if (((rxstat & 0x80) != 0) && (nextPacketPtr<=RXSTOP_INIT))
 8003dea:	f018 0f80 	tst.w	r8, #128	; 0x80
      uint16_t readPtr = nextPacketPtr+6 > RXSTOP_INIT ? nextPacketPtr+6-((RXSTOP_INIT + 1)-RXSTART_INIT) : nextPacketPtr+6;
 8003dee:	b2b6      	uxth	r6, r6
      if (((rxstat & 0x80) != 0) && (nextPacketPtr<=RXSTOP_INIT))
 8003df0:	d00c      	beq.n	8003e0c <_ZN15Enc28J60Network13receivePacketEv+0x94>
 8003df2:	882b      	ldrh	r3, [r5, #0]
 8003df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df8:	d208      	bcs.n	8003e0c <_ZN15Enc28J60Network13receivePacketEv+0x94>
          return UIP_RECEIVEBUFFERHANDLE;
 8003dfa:	20ff      	movs	r0, #255	; 0xff
          receivePkt.begin = readPtr;
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <_ZN15Enc28J60Network13receivePacketEv+0xa8>)
      len |= readOp(ENC28J60_READ_BUF_MEM, 0) << 8;
 8003dfe:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
      len -= 4; //remove the CRC count
 8003e02:	3c04      	subs	r4, #4
          receivePkt.begin = readPtr;
 8003e04:	801e      	strh	r6, [r3, #0]
          receivePkt.size = len;
 8003e06:	805c      	strh	r4, [r3, #2]
}
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      setERXRDPT();
 8003e0c:	f7ff ffa4 	bl	8003d58 <_ZN15Enc28J60Network10setERXRDPTEv>
  return (NOBLOCK);
 8003e10:	2000      	movs	r0, #0
 8003e12:	e7f9      	b.n	8003e08 <_ZN15Enc28J60Network13receivePacketEv+0x90>
 8003e14:	4618      	mov	r0, r3
 8003e16:	e7f7      	b.n	8003e08 <_ZN15Enc28J60Network13receivePacketEv+0x90>
 8003e18:	2000023c 	.word	0x2000023c
 8003e1c:	2000023a 	.word	0x2000023a
 8003e20:	20000234 	.word	0x20000234

08003e24 <_ZN15Enc28J60Network10setReadPtrEhtt>:
  memblock *packet = handle == UIP_RECEIVEBUFFERHANDLE ? &receivePkt : &blocks[handle];
 8003e24:	28ff      	cmp	r0, #255	; 0xff
{
 8003e26:	b570      	push	{r4, r5, r6, lr}
 8003e28:	460d      	mov	r5, r1
 8003e2a:	4616      	mov	r6, r2
  memblock *packet = handle == UIP_RECEIVEBUFFERHANDLE ? &receivePkt : &blocks[handle];
 8003e2c:	d005      	beq.n	8003e3a <_ZN15Enc28J60Network10setReadPtrEhtt+0x16>
 8003e2e:	2306      	movs	r3, #6
 8003e30:	4c0c      	ldr	r4, [pc, #48]	; (8003e64 <_ZN15Enc28J60Network10setReadPtrEhtt+0x40>)
 8003e32:	fb03 4400 	mla	r4, r3, r0, r4
  memaddress start = handle == UIP_RECEIVEBUFFERHANDLE && packet->begin + position > RXSTOP_INIT ? packet->begin + position-((RXSTOP_INIT + 1)-RXSTART_INIT) : packet->begin + position;
 8003e36:	8823      	ldrh	r3, [r4, #0]
 8003e38:	e007      	b.n	8003e4a <_ZN15Enc28J60Network10setReadPtrEhtt+0x26>
 8003e3a:	4c0b      	ldr	r4, [pc, #44]	; (8003e68 <_ZN15Enc28J60Network10setReadPtrEhtt+0x44>)
 8003e3c:	8823      	ldrh	r3, [r4, #0]
 8003e3e:	185a      	adds	r2, r3, r1
 8003e40:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003e44:	dbf7      	blt.n	8003e36 <_ZN15Enc28J60Network10setReadPtrEhtt+0x12>
 8003e46:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003e4a:	442b      	add	r3, r5
 8003e4c:	b299      	uxth	r1, r3
  writeRegPair(ERDPTL, start);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7ff ff70 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  if (len > packet->size - position)
 8003e54:	8861      	ldrh	r1, [r4, #2]
 8003e56:	1b4d      	subs	r5, r1, r5
 8003e58:	42ae      	cmp	r6, r5
 8003e5a:	dd00      	ble.n	8003e5e <_ZN15Enc28J60Network10setReadPtrEhtt+0x3a>
    len = packet->size - position;
 8003e5c:	b2ae      	uxth	r6, r5
}
 8003e5e:	4630      	mov	r0, r6
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
 8003e62:	bf00      	nop
 8003e64:	2000023e 	.word	0x2000023e
 8003e68:	20000234 	.word	0x20000234

08003e6c <_ZN15Enc28J60Network10readPacketEhtPht>:
{
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4615      	mov	r5, r2
  len = setReadPtr(handle, position, len);
 8003e70:	461a      	mov	r2, r3
 8003e72:	f7ff ffd7 	bl	8003e24 <_ZN15Enc28J60Network10setReadPtrEhtt>
 8003e76:	4604      	mov	r4, r0
  readBuffer(len, buffer);
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7ff feeb 	bl	8003c54 <_ZN15Enc28J60Network10readBufferEtPh>
}
 8003e7e:	4620      	mov	r0, r4
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
	...

08003e84 <_ZN15Enc28J60Network11writePacketEhtPht>:
{
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	461c      	mov	r4, r3
  uint16_t start = packet->begin + position;
 8003e88:	2306      	movs	r3, #6
{
 8003e8a:	460d      	mov	r5, r1
 8003e8c:	4616      	mov	r6, r2
  uint16_t start = packet->begin + position;
 8003e8e:	4358      	muls	r0, r3
 8003e90:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <_ZN15Enc28J60Network11writePacketEhtPht+0x34>)
 8003e92:	5a11      	ldrh	r1, [r2, r0]
 8003e94:	1817      	adds	r7, r2, r0
 8003e96:	4429      	add	r1, r5
  writeRegPair(EWRPTL, start);
 8003e98:	2002      	movs	r0, #2
 8003e9a:	b289      	uxth	r1, r1
 8003e9c:	f7ff ff4a 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  if (len > packet->size - position)
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	1b59      	subs	r1, r3, r5
 8003ea4:	428c      	cmp	r4, r1
    len = packet->size - position;
 8003ea6:	bfc8      	it	gt
 8003ea8:	b28c      	uxthgt	r4, r1
  writeBuffer(len, buffer);
 8003eaa:	4620      	mov	r0, r4
 8003eac:	4631      	mov	r1, r6
 8003eae:	f7ff fee8 	bl	8003c82 <_ZN15Enc28J60Network11writeBufferEtPh>
}
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000023e 	.word	0x2000023e

08003ebc <_ZN15Enc28J60Network8readByteEt>:
{
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	b510      	push	{r4, lr}
  writeRegPair(ERDPTL, addr);
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7ff ff37 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  CSACTIVE;
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7fc f952 	bl	8000170 <_cs>
      spiWrite(ENC28J60_READ_BUF_MEM);
 8003ecc:	203a      	movs	r0, #58	; 0x3a
 8003ece:	f7fc f959 	bl	8000184 <spiWrite>
      uint8_t c = spiWrite(0x00);
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fc f956 	bl	8000184 <spiWrite>
 8003ed8:	4604      	mov	r4, r0
    CSPASSIVE;
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7fc f948 	bl	8000170 <_cs>
}
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <_ZN15Enc28J60Network9writeByteEth>:
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	460c      	mov	r4, r1
  writeRegPair(EWRPTL, addr);
 8003ee8:	4601      	mov	r1, r0
 8003eea:	2002      	movs	r0, #2
 8003eec:	f7ff ff22 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  CSACTIVE;
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f7fc f93d 	bl	8000170 <_cs>
      spiWrite(ENC28J60_WRITE_BUF_MEM);
 8003ef6:	207a      	movs	r0, #122	; 0x7a
 8003ef8:	f7fc f944 	bl	8000184 <spiWrite>
      spiWrite(data);
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7fc f941 	bl	8000184 <spiWrite>
}
 8003f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CSPASSIVE;
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7fc b932 	b.w	8000170 <_cs>

08003f0c <_ZN15Enc28J60Network10sendPacketEh>:
{
 8003f0c:	b570      	push	{r4, r5, r6, lr}
  if (erevid==0)
 8003f0e:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <_ZN15Enc28J60Network10sendPacketEh+0x98>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d042      	beq.n	8003f9c <_ZN15Enc28J60Network10sendPacketEh+0x90>
  uint16_t start = packet->begin; // includes the UIP_SENDBUFFER_OFFSET for control byte
 8003f16:	2606      	movs	r6, #6
 8003f18:	4370      	muls	r0, r6
 8003f1a:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <_ZN15Enc28J60Network10sendPacketEh+0x9c>)
    writeByte(start, 0);
 8003f1c:	2100      	movs	r1, #0
  uint16_t start = packet->begin; // includes the UIP_SENDBUFFER_OFFSET for control byte
 8003f1e:	181a      	adds	r2, r3, r0
 8003f20:	5a1d      	ldrh	r5, [r3, r0]
  uint16_t end = start + packet->size - 1 - UIP_SENDBUFFER_PADDING; // end = start + size - 1 and padding for TSV is no included
 8003f22:	8854      	ldrh	r4, [r2, #2]
    writeByte(start, 0);
 8003f24:	4628      	mov	r0, r5
  uint16_t end = start + packet->size - 1 - UIP_SENDBUFFER_PADDING; // end = start + size - 1 and padding for TSV is no included
 8003f26:	442c      	add	r4, r5
    writeByte(start, 0);
 8003f28:	f7ff ffdc 	bl	8003ee4 <_ZN15Enc28J60Network9writeByteEth>
  uint16_t end = start + packet->size - 1 - UIP_SENDBUFFER_PADDING; // end = start + size - 1 and padding for TSV is no included
 8003f2c:	b2a4      	uxth	r4, r4
  writeRegPair(ETXSTL, start);
 8003f2e:	4629      	mov	r1, r5
 8003f30:	2004      	movs	r0, #4
 8003f32:	f7ff feff 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  uint16_t end = start + packet->size - 1 - UIP_SENDBUFFER_PADDING; // end = start + size - 1 and padding for TSV is no included
 8003f36:	f1a4 0108 	sub.w	r1, r4, #8
  writeRegPair(ETXNDL, end);
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	b289      	uxth	r1, r1
 8003f3e:	f7ff fef9 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
 8003f42:	250a      	movs	r5, #10
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	211f      	movs	r1, #31
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7ff fe6e 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	211f      	movs	r1, #31
 8003f52:	20a0      	movs	r0, #160	; 0xa0
 8003f54:	f7ff fe69 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF | EIR_TXIF);
 8003f58:	220a      	movs	r2, #10
 8003f5a:	211c      	movs	r1, #28
 8003f5c:	20a0      	movs	r0, #160	; 0xa0
 8003f5e:	f7ff fe64 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8003f62:	2208      	movs	r2, #8
 8003f64:	211f      	movs	r1, #31
 8003f66:	2080      	movs	r0, #128	; 0x80
 8003f68:	f7ff fe5f 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    while (((eir = readReg(EIR)) & (EIR_TXIF | EIR_TXERIF)) == 0);
 8003f6c:	201c      	movs	r0, #28
 8003f6e:	f7ff feb7 	bl	8003ce0 <_ZN15Enc28J60Network7readRegEh>
 8003f72:	f010 0f0a 	tst.w	r0, #10
 8003f76:	4606      	mov	r6, r0
 8003f78:	d0f8      	beq.n	8003f6c <_ZN15Enc28J60Network10sendPacketEh+0x60>
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	211f      	movs	r1, #31
 8003f7e:	20a0      	movs	r0, #160	; 0xa0
 8003f80:	f7ff fe53 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
    if (success)
 8003f84:	07b2      	lsls	r2, r6, #30
 8003f86:	d50b      	bpl.n	8003fa0 <_ZN15Enc28J60Network10sendPacketEh+0x94>
    uint8_t tsv4 = readByte(end + 4);
 8003f88:	1f20      	subs	r0, r4, #4
 8003f8a:	b280      	uxth	r0, r0
 8003f8c:	f7ff ff96 	bl	8003ebc <_ZN15Enc28J60Network8readByteEt>
    if (!(tsv4 & 0b00100000)) // is it "late collision" indicated in bit 29 of TSV?
 8003f90:	0683      	lsls	r3, r0, #26
 8003f92:	d503      	bpl.n	8003f9c <_ZN15Enc28J60Network10sendPacketEh+0x90>
  for (uint8_t retry = 0; retry < TX_COLLISION_RETRY_COUNT; retry++)
 8003f94:	3d01      	subs	r5, #1
 8003f96:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003f9a:	d1d3      	bne.n	8003f44 <_ZN15Enc28J60Network10sendPacketEh+0x38>
    return false;
 8003f9c:	2000      	movs	r0, #0
}
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
    success = ((eir & EIR_TXERIF) == 0);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	e7fc      	b.n	8003f9e <_ZN15Enc28J60Network10sendPacketEh+0x92>
 8003fa4:	2000023c 	.word	0x2000023c
 8003fa8:	2000023e 	.word	0x2000023e

08003fac <_Z36enc28J60_mempool_block_move_callbackttt>:
  if (len == 1)
 8003fac:	2a01      	cmp	r2, #1
{
 8003fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	460e      	mov	r6, r1
  if (len == 1)
 8003fb4:	d108      	bne.n	8003fc8 <_Z36enc28J60_mempool_block_move_callbackttt+0x1c>
      Enc28J60Network::writeByte(dest,Enc28J60Network::readByte(src));
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	f7ff ff80 	bl	8003ebc <_ZN15Enc28J60Network8readByteEt>
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	4638      	mov	r0, r7
}
 8003fc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Enc28J60Network::writeByte(dest,Enc28J60Network::readByte(src));
 8003fc4:	f7ff bf8e 	b.w	8003ee4 <_ZN15Enc28J60Network9writeByteEth>
      len += src - 1;
 8003fc8:	440a      	add	r2, r1
      Enc28J60Network::writeRegPair(EDMASTL, src);
 8003fca:	2010      	movs	r0, #16
      len += src - 1;
 8003fcc:	b294      	uxth	r4, r2
      Enc28J60Network::writeRegPair(EDMASTL, src);
 8003fce:	f7ff feb1 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
      Enc28J60Network::writeRegPair(EDMADSTL, dest);
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	2014      	movs	r0, #20
 8003fd6:	f7ff fead 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
      len += src - 1;
 8003fda:	1e65      	subs	r5, r4, #1
      if ((src <= RXSTOP_INIT)&& (len > RXSTOP_INIT))len -= ((RXSTOP_INIT + 1)-RXSTART_INIT);
 8003fdc:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
      len += src - 1;
 8003fe0:	b2ad      	uxth	r5, r5
      if ((src <= RXSTOP_INIT)&& (len > RXSTOP_INIT))len -= ((RXSTOP_INIT + 1)-RXSTART_INIT);
 8003fe2:	d206      	bcs.n	8003ff2 <_Z36enc28J60_mempool_block_move_callbackttt+0x46>
 8003fe4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003fe8:	bf22      	ittt	cs
 8003fea:	f46f 6200 	mvncs.w	r2, #2048	; 0x800
 8003fee:	18a4      	addcs	r4, r4, r2
 8003ff0:	b2a5      	uxthcs	r5, r4
      Enc28J60Network::writeRegPair(EDMANDL, len);
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	2012      	movs	r0, #18
 8003ff6:	f7ff fe9d 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
      Enc28J60Network::writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_CSUMEN);
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	211f      	movs	r1, #31
 8003ffe:	20a0      	movs	r0, #160	; 0xa0
 8004000:	f7ff fe13 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
      Enc28J60Network::writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_DMAST);
 8004004:	2220      	movs	r2, #32
 8004006:	211f      	movs	r1, #31
 8004008:	2080      	movs	r0, #128	; 0x80
 800400a:	f7ff fe0e 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
      while (Enc28J60Network::readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_DMAST)
 800400e:	211f      	movs	r1, #31
 8004010:	2000      	movs	r0, #0
 8004012:	f7ff fdf1 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
 8004016:	0683      	lsls	r3, r0, #26
 8004018:	d503      	bpl.n	8004022 <_Z36enc28J60_mempool_block_move_callbackttt+0x76>
         delay(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f7fc fd80 	bl	8000b20 <HAL_Delay>
      while (Enc28J60Network::readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_DMAST)
 8004020:	e7f5      	b.n	800400e <_Z36enc28J60_mempool_block_move_callbackttt+0x62>
}
 8004022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004024 <_ZN15Enc28J60Network10copyPacketEhthtt>:
{
 8004024:	b470      	push	{r4, r5, r6}
 8004026:	4614      	mov	r4, r2
  memblock *src = src_pkt == UIP_RECEIVEBUFFERHANDLE ? &receivePkt : &blocks[src_pkt];
 8004028:	2cff      	cmp	r4, #255	; 0xff
{
 800402a:	460e      	mov	r6, r1
 800402c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  memblock *src = src_pkt == UIP_RECEIVEBUFFERHANDLE ? &receivePkt : &blocks[src_pkt];
 8004030:	d005      	beq.n	800403e <_ZN15Enc28J60Network10copyPacketEhthtt+0x1a>
 8004032:	2506      	movs	r5, #6
 8004034:	490b      	ldr	r1, [pc, #44]	; (8004064 <_ZN15Enc28J60Network10copyPacketEhthtt+0x40>)
 8004036:	fb05 1404 	mla	r4, r5, r4, r1
  memaddress start = src_pkt == UIP_RECEIVEBUFFERHANDLE && src->begin + src_pos > RXSTOP_INIT ? src->begin + src_pos-((RXSTOP_INIT + 1)-RXSTART_INIT) : src->begin + src_pos;
 800403a:	8821      	ldrh	r1, [r4, #0]
 800403c:	e007      	b.n	800404e <_ZN15Enc28J60Network10copyPacketEhthtt+0x2a>
 800403e:	4c0a      	ldr	r4, [pc, #40]	; (8004068 <_ZN15Enc28J60Network10copyPacketEhthtt+0x44>)
 8004040:	8825      	ldrh	r5, [r4, #0]
 8004042:	18e9      	adds	r1, r5, r3
 8004044:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004048:	dbf7      	blt.n	800403a <_ZN15Enc28J60Network10copyPacketEhthtt+0x16>
 800404a:	f5a5 6100 	sub.w	r1, r5, #2048	; 0x800
 800404e:	440b      	add	r3, r1
 8004050:	b299      	uxth	r1, r3
  enc28J60_mempool_block_move_callback(dest->begin+dest_pos,start,len);
 8004052:	2306      	movs	r3, #6
 8004054:	4358      	muls	r0, r3
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <_ZN15Enc28J60Network10copyPacketEhthtt+0x40>)
 8004058:	5a18      	ldrh	r0, [r3, r0]
 800405a:	4430      	add	r0, r6
 800405c:	b280      	uxth	r0, r0
}
 800405e:	bc70      	pop	{r4, r5, r6}
  enc28J60_mempool_block_move_callback(dest->begin+dest_pos,start,len);
 8004060:	f7ff bfa4 	b.w	8003fac <_Z36enc28J60_mempool_block_move_callbackttt>
 8004064:	2000023e 	.word	0x2000023e
 8004068:	20000234 	.word	0x20000234

0800406c <_ZN15Enc28J60Network8phyWriteEht>:

void
Enc28J60Network::phyWrite(uint8_t address, uint16_t data)
{
 800406c:	b510      	push	{r4, lr}
 800406e:	460c      	mov	r4, r1
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::phyWrite(uint8_t address, uint16_t data) DEBUG_V3:Function started"));
  #endif
  unsigned int timeout = 15;
  // set the PHY register address
  writeReg(MIREGADR, address);
 8004070:	4601      	mov	r1, r0
 8004072:	20d4      	movs	r0, #212	; 0xd4
 8004074:	f7ff fe52 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  // write the PHY data
  writeRegPair(MIWRL, data);
 8004078:	4621      	mov	r1, r4
 800407a:	20d6      	movs	r0, #214	; 0xd6
 800407c:	f7ff fe5a 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
 8004080:	240f      	movs	r4, #15
  // wait until the PHY write completes
  while (readReg(MISTAT) & MISTAT_BUSY)
 8004082:	20ea      	movs	r0, #234	; 0xea
 8004084:	f7ff fe2c 	bl	8003ce0 <_ZN15Enc28J60Network7readRegEh>
 8004088:	07c3      	lsls	r3, r0, #31
 800408a:	d504      	bpl.n	8004096 <_ZN15Enc28J60Network8phyWriteEht+0x2a>
    {
    delay(10);
 800408c:	200a      	movs	r0, #10
 800408e:	f7fc fd47 	bl	8000b20 <HAL_Delay>
    #if defined(ESP8266)
       wdt_reset();
    #endif
    if (--timeout == 0)
 8004092:	3c01      	subs	r4, #1
 8004094:	d1f5      	bne.n	8004082 <_ZN15Enc28J60Network8phyWriteEht+0x16>
         LogObject.uart_send_strln(F("Enc28J60Network::phyWrite ERROR:TIMEOUT !!"));
      #endif
      return;
      }
    }
}
 8004096:	bd10      	pop	{r4, pc}

08004098 <_ZN15Enc28J60Network4initEPh>:
{
 8004098:	b538      	push	{r3, r4, r5, lr}
  receivePkt.begin = 0;
 800409a:	2500      	movs	r5, #0
 800409c:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <_ZN15Enc28J60Network4initEPh+0x108>)
{
 800409e:	4604      	mov	r4, r0
  receivePkt.begin = 0;
 80040a0:	801d      	strh	r5, [r3, #0]
  receivePkt.size = 0;
 80040a2:	805d      	strh	r5, [r3, #2]
  MemoryPool::init(); // 1 byte in between RX_STOP_INIT and pool to allow prepending of controlbyte
 80040a4:	f000 f8be 	bl	8004224 <_ZN10MemoryPool4initEv>
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 80040a8:	22ff      	movs	r2, #255	; 0xff
 80040aa:	4629      	mov	r1, r5
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7ff fdbc 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
  delay(2); // errata B7/2
 80040b2:	2002      	movs	r0, #2
 80040b4:	f7fc fd34 	bl	8000b20 <HAL_Delay>
  delay(50);
 80040b8:	2032      	movs	r0, #50	; 0x32
 80040ba:	f7fc fd31 	bl	8000b20 <HAL_Delay>
  nextPacketPtr = RXSTART_INIT;
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <_ZN15Enc28J60Network4initEPh+0x10c>)
 80040c0:	801d      	strh	r5, [r3, #0]
 80040c2:	2510      	movs	r5, #16
  while ((!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) && (timeout>0))
 80040c4:	211d      	movs	r1, #29
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff fd96 	bl	8003bf8 <_ZN15Enc28J60Network6readOpEhh>
 80040cc:	b928      	cbnz	r0, 80040da <_ZN15Enc28J60Network4initEPh+0x42>
 80040ce:	3d01      	subs	r5, #1
 80040d0:	d003      	beq.n	80040da <_ZN15Enc28J60Network4initEPh+0x42>
    delay(10);
 80040d2:	200a      	movs	r0, #10
 80040d4:	f7fc fd24 	bl	8000b20 <HAL_Delay>
  while ((!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) && (timeout>0))
 80040d8:	e7f4      	b.n	80040c4 <_ZN15Enc28J60Network4initEPh+0x2c>
  writeRegPair(ERXSTL, RXSTART_INIT);
 80040da:	2100      	movs	r1, #0
 80040dc:	2008      	movs	r0, #8
 80040de:	f7ff fe29 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeRegPair(ERXRDPTL, RXSTART_INIT);
 80040e2:	2100      	movs	r1, #0
 80040e4:	200c      	movs	r0, #12
 80040e6:	f7ff fe25 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeRegPair(ERXNDL, RXSTOP_INIT);
 80040ea:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80040ee:	200a      	movs	r0, #10
 80040f0:	f7ff fe20 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeReg(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
 80040f4:	21b1      	movs	r1, #177	; 0xb1
 80040f6:	2038      	movs	r0, #56	; 0x38
 80040f8:	f7ff fe10 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeRegPair(EPMM0, 0x303f);
 80040fc:	f243 013f 	movw	r1, #12351	; 0x303f
 8004100:	2028      	movs	r0, #40	; 0x28
 8004102:	f7ff fe17 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeRegPair(EPMCSL, 0xf7f9);
 8004106:	f24f 71f9 	movw	r1, #63481	; 0xf7f9
 800410a:	2030      	movs	r0, #48	; 0x30
 800410c:	f7ff fe12 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeRegPair(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8004110:	210d      	movs	r1, #13
 8004112:	20c0      	movs	r0, #192	; 0xc0
 8004114:	f7ff fe0e 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 8004118:	2232      	movs	r2, #50	; 0x32
 800411a:	21c2      	movs	r1, #194	; 0xc2
 800411c:	2080      	movs	r0, #128	; 0x80
 800411e:	f7ff fd84 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
  writeRegPair(MAIPGL, 0x0C12);
 8004122:	f640 4112 	movw	r1, #3090	; 0xc12
 8004126:	20c6      	movs	r0, #198	; 0xc6
 8004128:	f7ff fe04 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeReg(MABBIPG, 0x12);
 800412c:	2112      	movs	r1, #18
 800412e:	20c4      	movs	r0, #196	; 0xc4
 8004130:	f7ff fdf4 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeRegPair(MAMXFLL, MAX_FRAMELEN);
 8004134:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8004138:	20ca      	movs	r0, #202	; 0xca
 800413a:	f7ff fdfb 	bl	8003d34 <_ZN15Enc28J60Network12writeRegPairEht>
  writeReg(MAADR5, macaddr[0]);
 800413e:	7821      	ldrb	r1, [r4, #0]
 8004140:	20e4      	movs	r0, #228	; 0xe4
 8004142:	f7ff fdeb 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeReg(MAADR4, macaddr[1]);
 8004146:	7861      	ldrb	r1, [r4, #1]
 8004148:	20e5      	movs	r0, #229	; 0xe5
 800414a:	f7ff fde7 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeReg(MAADR3, macaddr[2]);
 800414e:	78a1      	ldrb	r1, [r4, #2]
 8004150:	20e2      	movs	r0, #226	; 0xe2
 8004152:	f7ff fde3 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeReg(MAADR2, macaddr[3]);
 8004156:	78e1      	ldrb	r1, [r4, #3]
 8004158:	20e3      	movs	r0, #227	; 0xe3
 800415a:	f7ff fddf 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeReg(MAADR1, macaddr[4]);
 800415e:	7921      	ldrb	r1, [r4, #4]
 8004160:	20e0      	movs	r0, #224	; 0xe0
 8004162:	f7ff fddb 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  writeReg(MAADR0, macaddr[5]);
 8004166:	7961      	ldrb	r1, [r4, #5]
 8004168:	20e1      	movs	r0, #225	; 0xe1
 800416a:	f7ff fdd7 	bl	8003d1c <_ZN15Enc28J60Network8writeRegEhh>
  phyWrite(PHCON2, PHCON2_HDLDIS);
 800416e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004172:	2010      	movs	r0, #16
 8004174:	f7ff ff7a 	bl	800406c <_ZN15Enc28J60Network8phyWriteEht>
  setBank(ECON1);
 8004178:	201f      	movs	r0, #31
 800417a:	f7ff fd99 	bl	8003cb0 <_ZN15Enc28J60Network7setBankEh>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 800417e:	22c0      	movs	r2, #192	; 0xc0
 8004180:	211b      	movs	r1, #27
 8004182:	2080      	movs	r0, #128	; 0x80
 8004184:	f7ff fd51 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 8004188:	211f      	movs	r1, #31
 800418a:	2080      	movs	r0, #128	; 0x80
 800418c:	2204      	movs	r2, #4
 800418e:	f7ff fd4c 	bl	8003c2a <_ZN15Enc28J60Network7writeOpEhhh>
}
 8004192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  phyWrite(PHLCON,0x476);
 8004196:	f240 4176 	movw	r1, #1142	; 0x476
 800419a:	2014      	movs	r0, #20
 800419c:	f7ff bf66 	b.w	800406c <_ZN15Enc28J60Network8phyWriteEht>
 80041a0:	20000234 	.word	0x20000234
 80041a4:	2000023a 	.word	0x2000023a

080041a8 <_ZN15Enc28J60Network6chksumEthtt>:
  writeReg(ECOCON, clk & 0x7);
}

uint16_t
Enc28J60Network::chksum(uint16_t sum, memhandle handle, memaddress pos, uint16_t len)
{
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	4604      	mov	r4, r0
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("Enc28J60Network::chksum(uint16_t sum, memhandle handle, memaddress pos, uint16_t len) DEBUG_V3:Function started"));
  #endif
  uint16_t t;
  len = setReadPtr(handle, pos, len)-1;
 80041b0:	461a      	mov	r2, r3
 80041b2:	f7ff fe37 	bl	8003e24 <_ZN15Enc28J60Network10setReadPtrEhtt>
 80041b6:	1e47      	subs	r7, r0, #1
  CSACTIVE;
 80041b8:	2000      	movs	r0, #0
 80041ba:	f7fb ffd9 	bl	8000170 <_cs>
  #if ENC28J60_USE_SPILIB
    #if defined(ARDUINO)
    SPI.transfer(ENC28J60_READ_BUF_MEM);
    #endif
    #if defined(__MBED__)
    spiWrite(ENC28J60_READ_BUF_MEM);
 80041be:	203a      	movs	r0, #58	; 0x3a
 80041c0:	f7fb ffe0 	bl	8000184 <spiWrite>
  #else
    SPDR = ENC28J60_READ_BUF_MEM;
    waitspi();
  #endif
  uint16_t i;
  for (i = 0; i < len; i+=2)
 80041c4:	2600      	movs	r6, #0
  len = setReadPtr(handle, pos, len)-1;
 80041c6:	b2bf      	uxth	r7, r7
  for (i = 0; i < len; i+=2)
 80041c8:	42be      	cmp	r6, r7
 80041ca:	d214      	bcs.n	80041f6 <_ZN15Enc28J60Network6chksumEthtt+0x4e>
      #if defined(ARDUINO)
        t = SPI.transfer(0x00) << 8;
        t += SPI.transfer(0x00);
      #endif
      #if defined(__MBED__)
        t = spiWrite(0x00) << 8;
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7fb ffd9 	bl	8000184 <spiWrite>
 80041d2:	0205      	lsls	r5, r0, #8
        t += spiWrite(0x00);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fb ffd5 	bl	8000184 <spiWrite>
        t = spiWrite(0x00) << 8;
 80041da:	b2ad      	uxth	r5, r5
        t += spiWrite(0x00);
 80041dc:	182b      	adds	r3, r5, r0
 80041de:	b29b      	uxth	r3, r3
      t = SPDR << 8;
      SPDR = 0x00;
      waitspi();
      t += SPDR;
    #endif
    sum += t;
 80041e0:	441c      	add	r4, r3
 80041e2:	b2a4      	uxth	r4, r4
    if(sum < t)
 80041e4:	42a3      	cmp	r3, r4
      {
      sum++;            /* carry */
 80041e6:	bf88      	it	hi
 80041e8:	3401      	addhi	r4, #1
  for (i = 0; i < len; i+=2)
 80041ea:	f106 0602 	add.w	r6, r6, #2
      sum++;            /* carry */
 80041ee:	bf88      	it	hi
 80041f0:	b2a4      	uxthhi	r4, r4
  for (i = 0; i < len; i+=2)
 80041f2:	b2b6      	uxth	r6, r6
 80041f4:	e7e8      	b.n	80041c8 <_ZN15Enc28J60Network6chksumEthtt+0x20>
      }
    }
  if(i == len)
 80041f6:	d10a      	bne.n	800420e <_ZN15Enc28J60Network6chksumEthtt+0x66>
    #if ENC28J60_USE_SPILIB
      #if defined(ARDUINO)
        t = (SPI.transfer(0x00) << 8) + 0;
      #endif
      #if defined(__MBED__)
        t = (spiWrite(0x00) << 8) + 0;
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7fb ffc3 	bl	8000184 <spiWrite>
 80041fe:	0203      	lsls	r3, r0, #8
 8004200:	b29b      	uxth	r3, r3
    #else
      SPDR = 0x00;
      waitspi();
      t = (SPDR << 8) + 0;
    #endif
    sum += t;
 8004202:	441c      	add	r4, r3
 8004204:	b2a4      	uxth	r4, r4
    if(sum < t)
 8004206:	42a3      	cmp	r3, r4
      {
      sum++;            /* carry */
 8004208:	bf84      	itt	hi
 800420a:	3401      	addhi	r4, #1
 800420c:	b2a4      	uxthhi	r4, r4
      }
    }
  CSPASSIVE;
 800420e:	2001      	movs	r0, #1
 8004210:	f7fb ffae 	bl	8000170 <_cs>

  /* Return sum in host byte order. */
  return sum;
}
 8004214:	4620      	mov	r0, r4
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004218 <_ZN15Enc28J60Network9geterevidEv>:
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_str(F("Enc28J60Network::geterevid(void) DEBUG_V3:Function started and return:"));
    LogObject.uart_send_decln(erevid);
  #endif
  return(erevid);
}
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <_ZN15Enc28J60Network9geterevidEv+0x8>)
 800421a:	7818      	ldrb	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000023c 	.word	0x2000023c

08004224 <_ZN10MemoryPool4initEv>:

struct memblock MemoryPool::blocks[MEMPOOL_NUM_MEMBLOCKS+1];

void
MemoryPool::init()
{
 8004224:	b508      	push	{r3, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("MemoryPool::init() DEBUG_V3:Function started"));
  #endif
  memset(&blocks[0], 0, sizeof(blocks));
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <_ZN10MemoryPool4initEv+0x20>)
 8004228:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f001 ff8a 	bl	8006148 <memset>
  blocks[POOLSTART].begin = MEMPOOL_STARTADDRESS;
 8004234:	f640 0201 	movw	r2, #2049	; 0x801
 8004238:	8002      	strh	r2, [r0, #0]
  blocks[POOLSTART].size = 0;
 800423a:	2200      	movs	r2, #0
  blocks[POOLSTART].nextblock = NOBLOCK;
 800423c:	7102      	strb	r2, [r0, #4]
  blocks[POOLSTART].size = 0;
 800423e:	8042      	strh	r2, [r0, #2]
}
 8004240:	bd08      	pop	{r3, pc}
 8004242:	bf00      	nop
 8004244:	2000023e 	.word	0x2000023e

08004248 <_ZN10MemoryPool10allocBlockEt>:

memhandle
MemoryPool::allocBlock(memaddress size)
{
 8004248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("MemoryPool::allocBlock(memaddress size) DEBUG_V3:Function started"));
  #endif
  if (size==0)
 800424c:	4606      	mov	r6, r0
 800424e:	b910      	cbnz	r0, 8004256 <_ZN10MemoryPool10allocBlockEt+0xe>
    {
    #if ACTLOGLEVEL>=LOG_WARNING
      LogObject.uart_send_strln(F("MemoryPool::allocBlock(memaddress size) WARNING: Called 0 size"));
    #endif
    return NOBLOCK;
 8004250:	2000      	movs	r0, #0
  notfound:
  #if ACTLOGLEVEL>=LOG_ERR
    LogObject.uart_send_strln(F("MemoryPool::allocBlock(memaddress size) ERROR:Failed to allocate memory for packet"));
  #endif
  return NOBLOCK;
}
 8004252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  memhandle cur = POOLSTART;
 8004256:	2700      	movs	r7, #0
      memaddress freesize = ( next == NOBLOCK ? blocks[POOLSTART].begin + MEMPOOL_SIZE : blocks[next].begin) - block->begin - block->size;
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <_ZN10MemoryPool10allocBlockEt+0xd4>)
  memaddress bestsize = MEMPOOL_SIZE + 1;
 800425a:	f44f 5ec0 	mov.w	lr, #6144	; 0x1800
  memblock* best = NULL;
 800425e:	463c      	mov	r4, r7
 8004260:	461d      	mov	r5, r3
      memaddress freesize = ( next == NOBLOCK ? blocks[POOLSTART].begin + MEMPOOL_SIZE : blocks[next].begin) - block->begin - block->size;
 8004262:	f04f 0c06 	mov.w	ip, #6
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	f502 52bf 	add.w	r2, r2, #6112	; 0x17e0
 800426c:	321f      	adds	r2, #31
 800426e:	b290      	uxth	r0, r2
      memhandle next = block->nextblock;
 8004270:	7919      	ldrb	r1, [r3, #4]
      memaddress freesize = ( next == NOBLOCK ? blocks[POOLSTART].begin + MEMPOOL_SIZE : blocks[next].begin) - block->begin - block->size;
 8004272:	b1c9      	cbz	r1, 80042a8 <_ZN10MemoryPool10allocBlockEt+0x60>
 8004274:	fb0c f201 	mul.w	r2, ip, r1
 8004278:	5aaa      	ldrh	r2, [r5, r2]
 800427a:	f8b3 8000 	ldrh.w	r8, [r3]
 800427e:	885b      	ldrh	r3, [r3, #2]
 8004280:	4443      	add	r3, r8
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	b29b      	uxth	r3, r3
      if (freesize == size)
 8004286:	429e      	cmp	r6, r3
 8004288:	d110      	bne.n	80042ac <_ZN10MemoryPool10allocBlockEt+0x64>
          best = &blocks[cur];
 800428a:	2406      	movs	r4, #6
 800428c:	fb04 5407 	mla	r4, r4, r7, r5
      for (cur = POOLOFFSET; cur < MEMPOOL_NUM_MEMBLOCKS + POOLOFFSET; cur++)
 8004290:	2001      	movs	r0, #1
      block = &blocks[POOLOFFSET];
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <_ZN10MemoryPool10allocBlockEt+0xd8>)
          if (block->size)
 8004294:	885a      	ldrh	r2, [r3, #2]
 8004296:	2a00      	cmp	r2, #0
 8004298:	d036      	beq.n	8004308 <_ZN10MemoryPool10allocBlockEt+0xc0>
      for (cur = POOLOFFSET; cur < MEMPOOL_NUM_MEMBLOCKS + POOLOFFSET; cur++)
 800429a:	3001      	adds	r0, #1
 800429c:	b2c0      	uxtb	r0, r0
 800429e:	2835      	cmp	r0, #53	; 0x35
              block++;
 80042a0:	f103 0306 	add.w	r3, r3, #6
      for (cur = POOLOFFSET; cur < MEMPOOL_NUM_MEMBLOCKS + POOLOFFSET; cur++)
 80042a4:	d1f6      	bne.n	8004294 <_ZN10MemoryPool10allocBlockEt+0x4c>
 80042a6:	e7d3      	b.n	8004250 <_ZN10MemoryPool10allocBlockEt+0x8>
      memaddress freesize = ( next == NOBLOCK ? blocks[POOLSTART].begin + MEMPOOL_SIZE : blocks[next].begin) - block->begin - block->size;
 80042a8:	4602      	mov	r2, r0
 80042aa:	e7e6      	b.n	800427a <_ZN10MemoryPool10allocBlockEt+0x32>
      if (freesize > size && freesize < bestsize)
 80042ac:	d204      	bcs.n	80042b8 <_ZN10MemoryPool10allocBlockEt+0x70>
 80042ae:	459e      	cmp	lr, r3
          best = &blocks[cur];
 80042b0:	bf84      	itt	hi
 80042b2:	469e      	movhi	lr, r3
 80042b4:	fb0c 5407 	mlahi	r4, ip, r7, r5
      if (next == NOBLOCK)
 80042b8:	b9c9      	cbnz	r1, 80042ee <_ZN10MemoryPool10allocBlockEt+0xa6>
          if (best)
 80042ba:	2c00      	cmp	r4, #0
 80042bc:	d1e8      	bne.n	8004290 <_ZN10MemoryPool10allocBlockEt+0x48>
          memblock* nextblock = &blocks[next];
 80042be:	f04f 0906 	mov.w	r9, #6
      block = &blocks[POOLSTART];
 80042c2:	4c16      	ldr	r4, [pc, #88]	; (800431c <_ZN10MemoryPool10allocBlockEt+0xd4>)
      while ((next = block->nextblock) != NOBLOCK)
 80042c4:	7922      	ldrb	r2, [r4, #4]
 80042c6:	8827      	ldrh	r7, [r4, #0]
 80042c8:	8860      	ldrh	r0, [r4, #2]
 80042ca:	b1a2      	cbz	r2, 80042f6 <_ZN10MemoryPool10allocBlockEt+0xae>
          memblock* nextblock = &blocks[next];
 80042cc:	fb09 f802 	mul.w	r8, r9, r2
          memaddress dest = block->begin + block->size;
 80042d0:	183b      	adds	r3, r7, r0
          if (dest != *src)
 80042d2:	f835 1008 	ldrh.w	r1, [r5, r8]
          memaddress dest = block->begin + block->size;
 80042d6:	b29f      	uxth	r7, r3
          if (dest != *src)
 80042d8:	42b9      	cmp	r1, r7
          memblock* nextblock = &blocks[next];
 80042da:	eb05 0408 	add.w	r4, r5, r8
          if (dest != *src)
 80042de:	d0f1      	beq.n	80042c4 <_ZN10MemoryPool10allocBlockEt+0x7c>
              MEMPOOL_MEMBLOCK_MV(dest,*src,nextblock->size);
 80042e0:	4638      	mov	r0, r7
 80042e2:	8862      	ldrh	r2, [r4, #2]
 80042e4:	f7ff fe62 	bl	8003fac <_Z36enc28J60_mempool_block_move_callbackttt>
              *src = dest;
 80042e8:	f825 7008 	strh.w	r7, [r5, r8]
 80042ec:	e7ea      	b.n	80042c4 <_ZN10MemoryPool10allocBlockEt+0x7c>
      cur = next;
 80042ee:	460f      	mov	r7, r1
      block = &blocks[next];
 80042f0:	fb0c 5301 	mla	r3, ip, r1, r5
      cur = next;
 80042f4:	e7bc      	b.n	8004270 <_ZN10MemoryPool10allocBlockEt+0x28>
      if (blocks[POOLSTART].begin + MEMPOOL_SIZE - block->begin - block->size >= size)
 80042f6:	882a      	ldrh	r2, [r5, #0]
 80042f8:	f502 53bf 	add.w	r3, r2, #6112	; 0x17e0
 80042fc:	331f      	adds	r3, #31
 80042fe:	1bdb      	subs	r3, r3, r7
 8004300:	1a1b      	subs	r3, r3, r0
 8004302:	42b3      	cmp	r3, r6
 8004304:	dac4      	bge.n	8004290 <_ZN10MemoryPool10allocBlockEt+0x48>
 8004306:	e7a3      	b.n	8004250 <_ZN10MemoryPool10allocBlockEt+0x8>
          memaddress address = best->begin + best->size;
 8004308:	8822      	ldrh	r2, [r4, #0]
 800430a:	8861      	ldrh	r1, [r4, #2]
          block->size = size;
 800430c:	805e      	strh	r6, [r3, #2]
          memaddress address = best->begin + best->size;
 800430e:	440a      	add	r2, r1
          block->begin = address;
 8004310:	801a      	strh	r2, [r3, #0]
          block->nextblock = best->nextblock;
 8004312:	7922      	ldrb	r2, [r4, #4]
 8004314:	711a      	strb	r2, [r3, #4]
          best->nextblock = cur;
 8004316:	7120      	strb	r0, [r4, #4]
          return cur;
 8004318:	e79b      	b.n	8004252 <_ZN10MemoryPool10allocBlockEt+0xa>
 800431a:	bf00      	nop
 800431c:	2000023e 	.word	0x2000023e
 8004320:	20000244 	.word	0x20000244

08004324 <_ZN10MemoryPool9freeBlockEh>:

void
MemoryPool::freeBlock(memhandle handle)
{
 8004324:	b510      	push	{r4, lr}
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("MemoryPool::freeBlock(memhandle handle) DEBUG_V3:Function started"));
  #endif
  if (handle == NOBLOCK)
 8004326:	b168      	cbz	r0, 8004344 <_ZN10MemoryPool9freeBlockEh+0x20>
    #if ACTLOGLEVEL>=LOG_WARNING
      LogObject.uart_send_strln(F("MemoryPool::freeBlock(memhandle handle) WARNING: Don't free NOBLOCK handle"));
    #endif
    return;
    }
  memblock *b = &blocks[POOLSTART];
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <_ZN10MemoryPool9freeBlockEh+0x2c>)
          f->nextblock = NOBLOCK;
          return;
        }
      if (next == NOBLOCK)
        return;
      b = &blocks[next];
 800432a:	2406      	movs	r4, #6
 800432c:	4619      	mov	r1, r3
      memhandle next = b->nextblock;
 800432e:	791a      	ldrb	r2, [r3, #4]
      if (next == handle)
 8004330:	4290      	cmp	r0, r2
 8004332:	d108      	bne.n	8004346 <_ZN10MemoryPool9freeBlockEh+0x22>
          b->nextblock = f->nextblock;
 8004334:	2206      	movs	r2, #6
 8004336:	fb02 1000 	mla	r0, r2, r0, r1
 800433a:	7902      	ldrb	r2, [r0, #4]
 800433c:	711a      	strb	r2, [r3, #4]
          f->size = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	8043      	strh	r3, [r0, #2]
          f->nextblock = NOBLOCK;
 8004342:	7103      	strb	r3, [r0, #4]
      #if defined(ESP8266)
//        yield();
      #endif
    }
  while (true);
}
 8004344:	bd10      	pop	{r4, pc}
      if (next == NOBLOCK)
 8004346:	2a00      	cmp	r2, #0
 8004348:	d0fc      	beq.n	8004344 <_ZN10MemoryPool9freeBlockEh+0x20>
      b = &blocks[next];
 800434a:	fb04 1302 	mla	r3, r4, r2, r1
 800434e:	e7ee      	b.n	800432e <_ZN10MemoryPool9freeBlockEh+0xa>
 8004350:	2000023e 	.word	0x2000023e

08004354 <_ZN10MemoryPool11resizeBlockEht>:
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("MemoryPool::resizeBlock(memhandle handle, memaddress position) DEBUG_V3:Function started"));
  #endif
  memblock * block = &blocks[handle];
  block->begin += position;
 8004354:	2306      	movs	r3, #6
 8004356:	4358      	muls	r0, r3
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <_ZN10MemoryPool11resizeBlockEht+0x18>)
{
 800435a:	b510      	push	{r4, lr}
  block->begin += position;
 800435c:	5a13      	ldrh	r3, [r2, r0]
 800435e:	1814      	adds	r4, r2, r0
 8004360:	440b      	add	r3, r1
 8004362:	5213      	strh	r3, [r2, r0]
  block->size -= position;
 8004364:	8863      	ldrh	r3, [r4, #2]
 8004366:	1a59      	subs	r1, r3, r1
 8004368:	8061      	strh	r1, [r4, #2]
}
 800436a:	bd10      	pop	{r4, pc}
 800436c:	2000023e 	.word	0x2000023e

08004370 <_ZN10MemoryPool11resizeBlockEhtt>:
{
  #if ACTLOGLEVEL>=LOG_DEBUG_V3
    LogObject.uart_send_strln(F("MemoryPool::resizeBlock(memhandle handle, memaddress position, memaddress size) DEBUG_V3:Function started"));
  #endif
  memblock * block = &blocks[handle];
  block->begin += position;
 8004370:	2306      	movs	r3, #6
 8004372:	4358      	muls	r0, r3
{
 8004374:	b530      	push	{r4, r5, lr}
  block->begin += position;
 8004376:	4c03      	ldr	r4, [pc, #12]	; (8004384 <_ZN10MemoryPool11resizeBlockEhtt+0x14>)
 8004378:	5a25      	ldrh	r5, [r4, r0]
 800437a:	1823      	adds	r3, r4, r0
 800437c:	4429      	add	r1, r5
 800437e:	5221      	strh	r1, [r4, r0]
  block->size = size;
 8004380:	805a      	strh	r2, [r3, #2]
}
 8004382:	bd30      	pop	{r4, r5, pc}
 8004384:	2000023e 	.word	0x2000023e

08004388 <uip_add32>:
#endif /* UIP_LOGGING == 1 */

#if ! UIP_ARCH_ADD32
void
uip_add32(u8_t *op32, u16_t op16)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3303      	adds	r3, #3
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	4413      	add	r3, r2
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b29      	ldr	r3, [pc, #164]	; (8004448 <uip_add32+0xc0>)
 80043a4:	70da      	strb	r2, [r3, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3302      	adds	r3, #2
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <uip_add32+0xc0>)
 80043ba:	709a      	strb	r2, [r3, #2]
  uip_acc32[1] = op32[1];
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	785a      	ldrb	r2, [r3, #1]
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <uip_add32+0xc0>)
 80043c2:	705a      	strb	r2, [r3, #1]
  uip_acc32[0] = op32[0];
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <uip_add32+0xc0>)
 80043ca:	701a      	strb	r2, [r3, #0]
  
  if(uip_acc32[2] < (op16 >> 8)) {
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <uip_add32+0xc0>)
 80043ce:	789b      	ldrb	r3, [r3, #2]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	887b      	ldrh	r3, [r7, #2]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	429a      	cmp	r2, r3
 80043da:	d20f      	bcs.n	80043fc <uip_add32+0x74>
    ++uip_acc32[1];
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <uip_add32+0xc0>)
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	3301      	adds	r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b18      	ldr	r3, [pc, #96]	; (8004448 <uip_add32+0xc0>)
 80043e6:	705a      	strb	r2, [r3, #1]
    if(uip_acc32[1] == 0) {
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <uip_add32+0xc0>)
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <uip_add32+0x74>
      ++uip_acc32[0];
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <uip_add32+0xc0>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <uip_add32+0xc0>)
 80043fa:	701a      	strb	r2, [r3, #0]
    }
  }
  
  
  if(uip_acc32[3] < (op16 & 0xff)) {
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <uip_add32+0xc0>)
 80043fe:	78db      	ldrb	r3, [r3, #3]
 8004400:	461a      	mov	r2, r3
 8004402:	887b      	ldrh	r3, [r7, #2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	429a      	cmp	r2, r3
 8004408:	da19      	bge.n	800443e <uip_add32+0xb6>
    ++uip_acc32[2];
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <uip_add32+0xc0>)
 800440c:	789b      	ldrb	r3, [r3, #2]
 800440e:	3301      	adds	r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <uip_add32+0xc0>)
 8004414:	709a      	strb	r2, [r3, #2]
    if(uip_acc32[2] == 0) {
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <uip_add32+0xc0>)
 8004418:	789b      	ldrb	r3, [r3, #2]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <uip_add32+0xb6>
      ++uip_acc32[1];
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <uip_add32+0xc0>)
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	3301      	adds	r3, #1
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <uip_add32+0xc0>)
 8004428:	705a      	strb	r2, [r3, #1]
      if(uip_acc32[1] == 0) {
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <uip_add32+0xc0>)
 800442c:	785b      	ldrb	r3, [r3, #1]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <uip_add32+0xb6>
	++uip_acc32[0];
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <uip_add32+0xc0>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b03      	ldr	r3, [pc, #12]	; (8004448 <uip_add32+0xc0>)
 800443c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	2000040c 	.word	0x2000040c

0800444c <uip_init>:
#endif /* UIP_ARCH_CHKSUM */
/*---------------------------------------------------------------------------*/
//"struct uip_conn {" in uip.h
void
uip_init(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <uip_init+0x98>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e00c      	b.n	8004472 <uip_init+0x26>
    uip_listenports[c] = 0;
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <uip_init+0x98>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <uip_init+0x9c>)
 8004460:	2100      	movs	r1, #0
 8004462:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <uip_init+0x98>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <uip_init+0x98>)
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <uip_init+0x98>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d9ee      	bls.n	8004458 <uip_init+0xc>
  }
  for(c = 0; c < UIP_CONNS; ++c) {
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <uip_init+0x98>)
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e00d      	b.n	800449e <uip_init+0x52>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <uip_init+0x98>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	4a19      	ldr	r2, [pc, #100]	; (80044ec <uip_init+0xa0>)
 8004488:	015b      	lsls	r3, r3, #5
 800448a:	4413      	add	r3, r2
 800448c:	3319      	adds	r3, #25
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
  for(c = 0; c < UIP_CONNS; ++c) {
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <uip_init+0x98>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <uip_init+0x98>)
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <uip_init+0x98>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d9ed      	bls.n	8004482 <uip_init+0x36>
  }
#if UIP_ACTIVE_OPEN
  lastport = 1024;
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <uip_init+0xa4>)
 80044a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ac:	801a      	strh	r2, [r3, #0]
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <uip_init+0x98>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e00d      	b.n	80044d2 <uip_init+0x86>
    uip_udp_conns[c].lport = 0;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <uip_init+0x98>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	4a0e      	ldr	r2, [pc, #56]	; (80044f4 <uip_init+0xa8>)
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	2200      	movs	r2, #0
 80044c4:	801a      	strh	r2, [r3, #0]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <uip_init+0x98>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <uip_init+0x98>)
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <uip_init+0x98>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d9ed      	bls.n	80044b6 <uip_init+0x6a>
  /* IPv4 initialization. */
#if UIP_FIXEDADDR == 0
  /*  uip_hostaddr[0] = uip_hostaddr[1] = 0;*/
#endif /* UIP_FIXEDADDR */

}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	2000038a 	.word	0x2000038a
 80044e8:	200004a0 	.word	0x200004a0
 80044ec:	20000420 	.word	0x20000420
 80044f0:	20000388 	.word	0x20000388
 80044f4:	2000051c 	.word	0x2000051c

080044f8 <uip_connect>:
/*---------------------------------------------------------------------------*/
#if UIP_ACTIVE_OPEN
struct uip_conn *
uip_connect(uip_ipaddr_t *ripaddr, u16_t rport)
{
 80044f8:	b5b0      	push	{r4, r5, r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
  register struct uip_conn *conn, *cconn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8004504:	4b44      	ldr	r3, [pc, #272]	; (8004618 <uip_connect+0x120>)
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	4b42      	ldr	r3, [pc, #264]	; (8004618 <uip_connect+0x120>)
 800450e:	801a      	strh	r2, [r3, #0]

  if(lastport >= 32000) {
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <uip_connect+0x120>)
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004518:	d303      	bcc.n	8004522 <uip_connect+0x2a>
    lastport = 4096;
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <uip_connect+0x120>)
 800451c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004520:	801a      	strh	r2, [r3, #0]
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
 8004522:	4b3e      	ldr	r3, [pc, #248]	; (800461c <uip_connect+0x124>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e017      	b.n	800455a <uip_connect+0x62>
    conn = &uip_conns[c];
 800452a:	4b3c      	ldr	r3, [pc, #240]	; (800461c <uip_connect+0x124>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	015b      	lsls	r3, r3, #5
 8004530:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <uip_connect+0x128>)
 8004532:	189c      	adds	r4, r3, r2
    if(conn->tcpstateflags != UIP_CLOSED &&
 8004534:	7e63      	ldrb	r3, [r4, #25]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <uip_connect+0x56>
       conn->lport == htons(lastport)) {
 800453a:	88a4      	ldrh	r4, [r4, #4]
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <uip_connect+0x120>)
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fa61 	bl	8005a08 <htons>
 8004546:	4603      	mov	r3, r0
    if(conn->tcpstateflags != UIP_CLOSED &&
 8004548:	429c      	cmp	r4, r3
 800454a:	d100      	bne.n	800454e <uip_connect+0x56>
      goto again;
 800454c:	e7da      	b.n	8004504 <uip_connect+0xc>
  for(c = 0; c < UIP_CONNS; ++c) {
 800454e:	4b33      	ldr	r3, [pc, #204]	; (800461c <uip_connect+0x124>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <uip_connect+0x124>)
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	4b30      	ldr	r3, [pc, #192]	; (800461c <uip_connect+0x124>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d9e3      	bls.n	800452a <uip_connect+0x32>
    }
  }

  conn = 0;
 8004562:	2400      	movs	r4, #0
  for(c = 0; c < UIP_CONNS; ++c) {
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <uip_connect+0x124>)
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e019      	b.n	80045a0 <uip_connect+0xa8>
    cconn = &uip_conns[c];
 800456c:	4b2b      	ldr	r3, [pc, #172]	; (800461c <uip_connect+0x124>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	015b      	lsls	r3, r3, #5
 8004572:	4a2b      	ldr	r2, [pc, #172]	; (8004620 <uip_connect+0x128>)
 8004574:	189d      	adds	r5, r3, r2
    if(cconn->tcpstateflags == UIP_CLOSED) {
 8004576:	7e6b      	ldrb	r3, [r5, #25]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <uip_connect+0x88>
      conn = cconn;
 800457c:	462c      	mov	r4, r5
      break;
 800457e:	e013      	b.n	80045a8 <uip_connect+0xb0>
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
 8004580:	7e6b      	ldrb	r3, [r5, #25]
 8004582:	2b07      	cmp	r3, #7
 8004584:	d106      	bne.n	8004594 <uip_connect+0x9c>
      if(conn == 0 ||
 8004586:	2c00      	cmp	r4, #0
 8004588:	d003      	beq.n	8004592 <uip_connect+0x9a>
	 cconn->timer > conn->timer) {
 800458a:	7eaa      	ldrb	r2, [r5, #26]
 800458c:	7ea3      	ldrb	r3, [r4, #26]
      if(conn == 0 ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d900      	bls.n	8004594 <uip_connect+0x9c>
	conn = cconn;
 8004592:	462c      	mov	r4, r5
  for(c = 0; c < UIP_CONNS; ++c) {
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <uip_connect+0x124>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <uip_connect+0x124>)
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <uip_connect+0x124>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d9e1      	bls.n	800456c <uip_connect+0x74>
      }
    }
  }

  if(conn == 0) {
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	d101      	bne.n	80045b0 <uip_connect+0xb8>
    return 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e02e      	b.n	800460e <uip_connect+0x116>
  }
  
  conn->tcpstateflags = UIP_SYN_SENT;
 80045b0:	2302      	movs	r3, #2
 80045b2:	7663      	strb	r3, [r4, #25]

  conn->snd_nxt[0] = iss[0];
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <uip_connect+0x12c>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	7323      	strb	r3, [r4, #12]
  conn->snd_nxt[1] = iss[1];
 80045ba:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <uip_connect+0x12c>)
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	7363      	strb	r3, [r4, #13]
  conn->snd_nxt[2] = iss[2];
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <uip_connect+0x12c>)
 80045c2:	789b      	ldrb	r3, [r3, #2]
 80045c4:	73a3      	strb	r3, [r4, #14]
  conn->snd_nxt[3] = iss[3];
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <uip_connect+0x12c>)
 80045c8:	78db      	ldrb	r3, [r3, #3]
 80045ca:	73e3      	strb	r3, [r4, #15]

  conn->initialmss = conn->mss = UIP_TCP_MSS;
 80045cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d0:	8263      	strh	r3, [r4, #18]
 80045d2:	8a63      	ldrh	r3, [r4, #18]
 80045d4:	82a3      	strh	r3, [r4, #20]
  
  conn->len = 1;   /* TCP length of the SYN is one. */
 80045d6:	2301      	movs	r3, #1
 80045d8:	8223      	strh	r3, [r4, #16]
  conn->nrtx = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	76e3      	strb	r3, [r4, #27]
  conn->timer = 1; /* Send the SYN next time around. */
 80045de:	2301      	movs	r3, #1
 80045e0:	76a3      	strb	r3, [r4, #26]
  conn->rto = UIP_RTO;
 80045e2:	2303      	movs	r3, #3
 80045e4:	7623      	strb	r3, [r4, #24]
  conn->sa = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75a3      	strb	r3, [r4, #22]
  conn->sv = 16;   /* Initial value of the RTT variance. */
 80045ea:	2310      	movs	r3, #16
 80045ec:	75e3      	strb	r3, [r4, #23]
  conn->lport = htons(lastport);
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <uip_connect+0x120>)
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fa08 	bl	8005a08 <htons>
 80045f8:	4603      	mov	r3, r0
 80045fa:	80a3      	strh	r3, [r4, #4]
  conn->rport = rport;
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	8023      	strh	r3, [r4, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	885b      	ldrh	r3, [r3, #2]
 800460a:	8063      	strh	r3, [r4, #2]
  
  return conn;
 800460c:	4623      	mov	r3, r4
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}
 8004616:	bf00      	nop
 8004618:	20000388 	.word	0x20000388
 800461c:	2000038a 	.word	0x2000038a
 8004620:	20000420 	.word	0x20000420
 8004624:	20000384 	.word	0x20000384

08004628 <uip_udp_new>:
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
#if UIP_UDP
struct uip_udp_conn *
uip_udp_new(uip_ipaddr_t *ripaddr, u16_t rport)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
  register struct uip_udp_conn *conn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8004634:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <uip_udp_new+0xf8>)
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	4b38      	ldr	r3, [pc, #224]	; (8004720 <uip_udp_new+0xf8>)
 800463e:	801a      	strh	r2, [r3, #0]

  if(lastport >= 32000) {
 8004640:	4b37      	ldr	r3, [pc, #220]	; (8004720 <uip_udp_new+0xf8>)
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004648:	d303      	bcc.n	8004652 <uip_udp_new+0x2a>
    lastport = 4096;
 800464a:	4b35      	ldr	r3, [pc, #212]	; (8004720 <uip_udp_new+0xf8>)
 800464c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004650:	801a      	strh	r2, [r3, #0]
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004652:	4b34      	ldr	r3, [pc, #208]	; (8004724 <uip_udp_new+0xfc>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e015      	b.n	8004686 <uip_udp_new+0x5e>
    if(uip_udp_conns[c].lport == htons(lastport)) {
 800465a:	4b32      	ldr	r3, [pc, #200]	; (8004724 <uip_udp_new+0xfc>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	4a32      	ldr	r2, [pc, #200]	; (8004728 <uip_udp_new+0x100>)
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	4413      	add	r3, r2
 8004664:	3304      	adds	r3, #4
 8004666:	881c      	ldrh	r4, [r3, #0]
 8004668:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <uip_udp_new+0xf8>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f001 f9cb 	bl	8005a08 <htons>
 8004672:	4603      	mov	r3, r0
 8004674:	429c      	cmp	r4, r3
 8004676:	d100      	bne.n	800467a <uip_udp_new+0x52>
      goto again;
 8004678:	e7dc      	b.n	8004634 <uip_udp_new+0xc>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 800467a:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <uip_udp_new+0xfc>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b28      	ldr	r3, [pc, #160]	; (8004724 <uip_udp_new+0xfc>)
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <uip_udp_new+0xfc>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d9e5      	bls.n	800465a <uip_udp_new+0x32>
    }
  }


  conn = 0;
 800468e:	2400      	movs	r4, #0
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004690:	4b24      	ldr	r3, [pc, #144]	; (8004724 <uip_udp_new+0xfc>)
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e014      	b.n	80046c2 <uip_udp_new+0x9a>
    if(uip_udp_conns[c].lport == 0) {
 8004698:	4b22      	ldr	r3, [pc, #136]	; (8004724 <uip_udp_new+0xfc>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4a22      	ldr	r2, [pc, #136]	; (8004728 <uip_udp_new+0x100>)
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <uip_udp_new+0x8e>
      conn = &uip_udp_conns[c];
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <uip_udp_new+0xfc>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <uip_udp_new+0x100>)
 80046b2:	189c      	adds	r4, r3, r2
      break;
 80046b4:	e009      	b.n	80046ca <uip_udp_new+0xa2>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <uip_udp_new+0xfc>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4b19      	ldr	r3, [pc, #100]	; (8004724 <uip_udp_new+0xfc>)
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	4b18      	ldr	r3, [pc, #96]	; (8004724 <uip_udp_new+0xfc>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d9e6      	bls.n	8004698 <uip_udp_new+0x70>
    }
  }

  if(conn == 0) {
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d101      	bne.n	80046d2 <uip_udp_new+0xaa>
    return 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e021      	b.n	8004716 <uip_udp_new+0xee>
  }
  
  conn->lport = HTONS(lastport);
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <uip_udp_new+0xf8>)
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	b21a      	sxth	r2, r3
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <uip_udp_new+0xf8>)
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b21b      	sxth	r3, r3
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	80a3      	strh	r3, [r4, #4]
  conn->rport = rport;
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	80e3      	strh	r3, [r4, #6]
  if(ripaddr == NULL) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <uip_udp_new+0xdc>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
 80046f6:	4623      	mov	r3, r4
 80046f8:	2204      	movs	r2, #4
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fd23 	bl	8006148 <memset>
 8004702:	e005      	b.n	8004710 <uip_udp_new+0xe8>
  } else {
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	8023      	strh	r3, [r4, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	885b      	ldrh	r3, [r3, #2]
 800470e:	8063      	strh	r3, [r4, #2]
  }
  conn->ttl = UIP_TTL;
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	7223      	strb	r3, [r4, #8]
  
  return conn;
 8004714:	4623      	mov	r3, r4
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}
 800471e:	bf00      	nop
 8004720:	20000388 	.word	0x20000388
 8004724:	2000038a 	.word	0x2000038a
 8004728:	2000051c 	.word	0x2000051c

0800472c <uip_listen>:
  }
}
/*---------------------------------------------------------------------------*/
void
uip_listen(u16_t port)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	80fb      	strh	r3, [r7, #6]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <uip_listen+0x50>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e015      	b.n	800476a <uip_listen+0x3e>
    if(uip_listenports[c] == 0) {
 800473e:	4b0f      	ldr	r3, [pc, #60]	; (800477c <uip_listen+0x50>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <uip_listen+0x54>)
 8004746:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <uip_listen+0x32>
      uip_listenports[c] = port;
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <uip_listen+0x50>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <uip_listen+0x54>)
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
      return;
 800475c:	e009      	b.n	8004772 <uip_listen+0x46>
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <uip_listen+0x50>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <uip_listen+0x50>)
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <uip_listen+0x50>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b03      	cmp	r3, #3
 8004770:	d9e5      	bls.n	800473e <uip_listen+0x12>
    }
  }
}
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2000038a 	.word	0x2000038a
 8004780:	200004a0 	.word	0x200004a0

08004784 <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	80fb      	strh	r3, [r7, #6]
  uip_add32(uip_conn->rcv_nxt, n);
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <uip_add_rcv_nxt+0x4c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3308      	adds	r3, #8
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fdf5 	bl	8004388 <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <uip_add_rcv_nxt+0x4c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <uip_add_rcv_nxt+0x50>)
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	721a      	strb	r2, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <uip_add_rcv_nxt+0x4c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <uip_add_rcv_nxt+0x50>)
 80047ae:	7852      	ldrb	r2, [r2, #1]
 80047b0:	725a      	strb	r2, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <uip_add_rcv_nxt+0x4c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <uip_add_rcv_nxt+0x50>)
 80047b8:	7892      	ldrb	r2, [r2, #2]
 80047ba:	729a      	strb	r2, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <uip_add_rcv_nxt+0x4c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <uip_add_rcv_nxt+0x50>)
 80047c2:	78d2      	ldrb	r2, [r2, #3]
 80047c4:	72da      	strb	r2, [r3, #11]
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000041c 	.word	0x2000041c
 80047d4:	2000040c 	.word	0x2000040c

080047d8 <uip_process>:
/*---------------------------------------------------------------------------*/
void
uip_process(u8_t flag)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  register struct uip_conn *uip_connr = uip_conn;
 80047e2:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <uip_process+0x1e0>)
 80047e4:	681c      	ldr	r4, [r3, #0]

#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	f000 8255 	beq.w	8004c98 <uip_process+0x4c0>
    goto udp_send;
  }
#endif /* UIP_UDP */
  
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 80047ee:	4b73      	ldr	r3, [pc, #460]	; (80049bc <uip_process+0x1e4>)
 80047f0:	4a73      	ldr	r2, [pc, #460]	; (80049c0 <uip_process+0x1e8>)
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	4b71      	ldr	r3, [pc, #452]	; (80049bc <uip_process+0x1e4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a72      	ldr	r2, [pc, #456]	; (80049c4 <uip_process+0x1ec>)
 80047fa:	6013      	str	r3, [r2, #0]

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d110      	bne.n	8004824 <uip_process+0x4c>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8004802:	7e63      	ldrb	r3, [r4, #25]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2b03      	cmp	r3, #3
 800480a:	f041 80b7 	bne.w	800597c <uip_process+0x11a4>
       !uip_outstanding(uip_connr)) {
 800480e:	8a23      	ldrh	r3, [r4, #16]
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	f041 80b3 	bne.w	800597c <uip_process+0x11a4>
	uip_flags = UIP_POLL;
 8004816:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <uip_process+0x1f0>)
 8004818:	2208      	movs	r2, #8
 800481a:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
 800481c:	f7fe fa22 	bl	8002c64 <uipclient_appcall>
	goto appsend;
 8004820:	f000 bf18 	b.w	8005654 <uip_process+0xe7c>
    }
    goto drop;
    
    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	2b02      	cmp	r3, #2
 8004828:	f040 80a5 	bne.w	8004976 <uip_process+0x19e>
    if(uip_reasstmr != 0) {
      --uip_reasstmr;
    }
#endif /* UIP_REASSEMBLY */
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
 800482c:	4b67      	ldr	r3, [pc, #412]	; (80049cc <uip_process+0x1f4>)
 800482e:	78db      	ldrb	r3, [r3, #3]
 8004830:	3301      	adds	r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b65      	ldr	r3, [pc, #404]	; (80049cc <uip_process+0x1f4>)
 8004836:	70da      	strb	r2, [r3, #3]
 8004838:	4b64      	ldr	r3, [pc, #400]	; (80049cc <uip_process+0x1f4>)
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d119      	bne.n	8004874 <uip_process+0x9c>
      if(++iss[2] == 0) {
 8004840:	4b62      	ldr	r3, [pc, #392]	; (80049cc <uip_process+0x1f4>)
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	3301      	adds	r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	4b60      	ldr	r3, [pc, #384]	; (80049cc <uip_process+0x1f4>)
 800484a:	709a      	strb	r2, [r3, #2]
 800484c:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <uip_process+0x1f4>)
 800484e:	789b      	ldrb	r3, [r3, #2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10f      	bne.n	8004874 <uip_process+0x9c>
	if(++iss[1] == 0) {
 8004854:	4b5d      	ldr	r3, [pc, #372]	; (80049cc <uip_process+0x1f4>)
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	3301      	adds	r3, #1
 800485a:	b2da      	uxtb	r2, r3
 800485c:	4b5b      	ldr	r3, [pc, #364]	; (80049cc <uip_process+0x1f4>)
 800485e:	705a      	strb	r2, [r3, #1]
 8004860:	4b5a      	ldr	r3, [pc, #360]	; (80049cc <uip_process+0x1f4>)
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <uip_process+0x9c>
	  ++iss[0];
 8004868:	4b58      	ldr	r3, [pc, #352]	; (80049cc <uip_process+0x1f4>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	4b56      	ldr	r3, [pc, #344]	; (80049cc <uip_process+0x1f4>)
 8004872:	701a      	strb	r2, [r3, #0]
	}
      }
    }

    /* Reset the length variables. */
    uip_len = 0;
 8004874:	4b56      	ldr	r3, [pc, #344]	; (80049d0 <uip_process+0x1f8>)
 8004876:	2200      	movs	r2, #0
 8004878:	801a      	strh	r2, [r3, #0]
    uip_slen = 0;
 800487a:	4b56      	ldr	r3, [pc, #344]	; (80049d4 <uip_process+0x1fc>)
 800487c:	2200      	movs	r2, #0
 800487e:	801a      	strh	r2, [r3, #0]

    /* Check if the connection is in a state in which we simply wait
       for the connection to time out. If so, we increase the
       connection's timer and remove the connection if it times
       out. */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 8004880:	7e63      	ldrb	r3, [r4, #25]
 8004882:	2b07      	cmp	r3, #7
 8004884:	d002      	beq.n	800488c <uip_process+0xb4>
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
 8004886:	7e63      	ldrb	r3, [r4, #25]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 8004888:	2b05      	cmp	r3, #5
 800488a:	d109      	bne.n	80048a0 <uip_process+0xc8>
      ++(uip_connr->timer);
 800488c:	7ea3      	ldrb	r3, [r4, #26]
 800488e:	3301      	adds	r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	76a3      	strb	r3, [r4, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
 8004894:	7ea3      	ldrb	r3, [r4, #26]
 8004896:	2b78      	cmp	r3, #120	; 0x78
 8004898:	d16b      	bne.n	8004972 <uip_process+0x19a>
	uip_connr->tcpstateflags = UIP_CLOSED;
 800489a:	2300      	movs	r3, #0
 800489c:	7663      	strb	r3, [r4, #25]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
 800489e:	e068      	b.n	8004972 <uip_process+0x19a>
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
 80048a0:	7e63      	ldrb	r3, [r4, #25]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f001 806c 	beq.w	8005980 <uip_process+0x11a8>
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */
      if(uip_outstanding(uip_connr)) {
 80048a8:	8a23      	ldrh	r3, [r4, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d054      	beq.n	8004958 <uip_process+0x180>
	if(uip_connr->timer-- == 0) {
 80048ae:	7ea3      	ldrb	r3, [r4, #26]
 80048b0:	1e5a      	subs	r2, r3, #1
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	76a2      	strb	r2, [r4, #26]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f041 8062 	bne.w	8005980 <uip_process+0x11a8>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 80048bc:	7ee3      	ldrb	r3, [r4, #27]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d008      	beq.n	80048d4 <uip_process+0xfc>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 80048c2:	7e63      	ldrb	r3, [r4, #25]
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d002      	beq.n	80048ce <uip_process+0xf6>
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 80048c8:	7e63      	ldrb	r3, [r4, #25]
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10f      	bne.n	80048ee <uip_process+0x116>
	      uip_connr->nrtx == UIP_MAXSYNRTX)) {
 80048ce:	7ee3      	ldrb	r3, [r4, #27]
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d10c      	bne.n	80048ee <uip_process+0x116>
	    uip_connr->tcpstateflags = UIP_CLOSED;
 80048d4:	2300      	movs	r3, #0
 80048d6:	7663      	strb	r3, [r4, #25]

	    /* We call UIP_APPCALL() with uip_flags set to
	       UIP_TIMEDOUT to inform the application that the
	       connection has timed out. */
	    uip_flags = UIP_TIMEDOUT;
 80048d8:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <uip_process+0x1f0>)
 80048da:	2280      	movs	r2, #128	; 0x80
 80048dc:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 80048de:	f7fe f9c1 	bl	8002c64 <uipclient_appcall>

	    /* We also send a reset packet to the remote host. */
	    BUF->flags = TCP_RST | TCP_ACK;
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <uip_process+0x200>)
 80048e4:	2214      	movs	r2, #20
 80048e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    goto tcp_send_nodata;
 80048ea:	f000 bfa8 	b.w	800583e <uip_process+0x1066>
	  }

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 80048ee:	7ee3      	ldrb	r3, [r4, #27]
					 4:
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	bf28      	it	cs
 80048f4:	2304      	movcs	r3, #4
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 80048fa:	2303      	movs	r3, #3
 80048fc:	4093      	lsls	r3, r2
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	76a3      	strb	r3, [r4, #26]
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
 8004902:	7ee3      	ldrb	r3, [r4, #27]
 8004904:	3301      	adds	r3, #1
 8004906:	b2db      	uxtb	r3, r3
 8004908:	76e3      	strb	r3, [r4, #27]
	     call upon the application so that it may prepare the
	     data for the retransmit. In SYN_RCVD, we resend the
	     SYNACK that we sent earlier and in LAST_ACK we have to
	     retransmit our FINACK. */
	  UIP_STAT(++uip_stat.tcp.rexmit);
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 800490a:	7e63      	ldrb	r3, [r4, #25]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	3b01      	subs	r3, #1
 8004912:	2b07      	cmp	r3, #7
 8004914:	f201 8034 	bhi.w	8005980 <uip_process+0x11a8>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <uip_process+0x148>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08005131 	.word	0x08005131
 8004924:	08004941 	.word	0x08004941
 8004928:	0800494b 	.word	0x0800494b
 800492c:	0800555d 	.word	0x0800555d
 8004930:	08005981 	.word	0x08005981
 8004934:	0800555d 	.word	0x0800555d
 8004938:	08005981 	.word	0x08005981
 800493c:	0800555d 	.word	0x0800555d
	    goto tcp_send_synack;
	    
#if UIP_ACTIVE_OPEN
	  case UIP_SYN_SENT:
	    /* In the SYN_SENT state, we retransmit out SYN. */
	    BUF->flags = 0;
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <uip_process+0x200>)
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    goto tcp_send_syn;
 8004948:	e3fd      	b.n	8005146 <uip_process+0x96e>
	  case UIP_ESTABLISHED:
	    /* In the ESTABLISHED state, we call upon the application
               to do the actual retransmit after which we jump into
               the code for sending out the packet (the apprexmit
               label). */
	    uip_flags = UIP_REXMIT;
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <uip_process+0x1f0>)
 800494c:	2204      	movs	r2, #4
 800494e:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 8004950:	f7fe f988 	bl	8002c64 <uipclient_appcall>
	    goto apprexmit;
 8004954:	f000 bec2 	b.w	80056dc <uip_process+0xf04>
	    /* In all these states we should retransmit a FINACK. */
	    goto tcp_send_finack;
	    
	  }
	}
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
 8004958:	7e63      	ldrb	r3, [r4, #25]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2b03      	cmp	r3, #3
 8004960:	f041 800e 	bne.w	8005980 <uip_process+0x11a8>
	/* If there was no need for a retransmission, we poll the
           application for new data. */
	uip_flags = UIP_POLL;
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <uip_process+0x1f0>)
 8004966:	2208      	movs	r2, #8
 8004968:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
 800496a:	f7fe f97b 	bl	8002c64 <uipclient_appcall>
	goto appsend;
 800496e:	f000 be71 	b.w	8005654 <uip_process+0xe7c>
      }
    }
    goto drop;
 8004972:	f001 b805 	b.w	8005980 <uip_process+0x11a8>
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	2b05      	cmp	r3, #5
 800497a:	d133      	bne.n	80049e4 <uip_process+0x20c>
    if(uip_udp_conn->lport != 0) {
 800497c:	4b17      	ldr	r3, [pc, #92]	; (80049dc <uip_process+0x204>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	889b      	ldrh	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 87fe 	beq.w	8005984 <uip_process+0x11ac>
      uip_conn = NULL;
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <uip_process+0x1e0>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <uip_process+0x1e4>)
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <uip_process+0x208>)
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <uip_process+0x1e4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <uip_process+0x1ec>)
 800499a:	6013      	str	r3, [r2, #0]
      uip_len = uip_slen = 0;
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <uip_process+0x1fc>)
 800499e:	2200      	movs	r2, #0
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <uip_process+0x1fc>)
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <uip_process+0x1f8>)
 80049a8:	801a      	strh	r2, [r3, #0]
      uip_flags = UIP_POLL;
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <uip_process+0x1f0>)
 80049ac:	2208      	movs	r2, #8
 80049ae:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
 80049b0:	f7fe fe6c 	bl	800368c <uipudp_appcall>
      goto udp_send;
 80049b4:	e171      	b.n	8004c9a <uip_process+0x4c2>
 80049b6:	bf00      	nop
 80049b8:	2000041c 	.word	0x2000041c
 80049bc:	20000418 	.word	0x20000418
 80049c0:	200004ea 	.word	0x200004ea
 80049c4:	20000408 	.word	0x20000408
 80049c8:	20000410 	.word	0x20000410
 80049cc:	20000384 	.word	0x20000384
 80049d0:	20000404 	.word	0x20000404
 80049d4:	20000518 	.word	0x20000518
 80049d8:	200004c2 	.word	0x200004c2
 80049dc:	20000414 	.word	0x20000414
 80049e0:	200004de 	.word	0x200004de
    UIP_LOG("ipv6: invalid version.");
    goto drop;
  }
#else /* UIP_CONF_IPV6 */
  /* Check validity of the IP header. */
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
 80049e4:	4b97      	ldr	r3, [pc, #604]	; (8004c44 <uip_process+0x46c>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b45      	cmp	r3, #69	; 0x45
 80049ea:	f040 87cd 	bne.w	8005988 <uip_process+0x11b0>
     that the packet has been corrupted in transit. If the size of
     uip_len is larger than the size reported in the IP packet header,
     the packet has been padded and we set uip_len to the correct
     value.. */

  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
 80049ee:	4b95      	ldr	r3, [pc, #596]	; (8004c44 <uip_process+0x46c>)
 80049f0:	789b      	ldrb	r3, [r3, #2]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	4a93      	ldr	r2, [pc, #588]	; (8004c44 <uip_process+0x46c>)
 80049f6:	78d2      	ldrb	r2, [r2, #3]
 80049f8:	4413      	add	r3, r2
 80049fa:	4a93      	ldr	r2, [pc, #588]	; (8004c48 <uip_process+0x470>)
 80049fc:	8812      	ldrh	r2, [r2, #0]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f300 87c4 	bgt.w	800598c <uip_process+0x11b4>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 8004a04:	4b8f      	ldr	r3, [pc, #572]	; (8004c44 <uip_process+0x46c>)
 8004a06:	789b      	ldrb	r3, [r3, #2]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	4b8d      	ldr	r3, [pc, #564]	; (8004c44 <uip_process+0x46c>)
 8004a10:	78db      	ldrb	r3, [r3, #3]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	4b8b      	ldr	r3, [pc, #556]	; (8004c48 <uip_process+0x470>)
 8004a1a:	801a      	strh	r2, [r3, #0]
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 8004a1c:	4b89      	ldr	r3, [pc, #548]	; (8004c44 <uip_process+0x46c>)
 8004a1e:	799b      	ldrb	r3, [r3, #6]
 8004a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 87b3 	bne.w	8005990 <uip_process+0x11b8>
     BUF->ipoffset[1] != 0) {
 8004a2a:	4b86      	ldr	r3, [pc, #536]	; (8004c44 <uip_process+0x46c>)
 8004a2c:	79db      	ldrb	r3, [r3, #7]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 87ae 	bne.w	8005990 <uip_process+0x11b8>
    goto drop;
#endif /* UIP_REASSEMBLY */
  }
#endif /* UIP_CONF_IPV6 */

  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
 8004a34:	4b85      	ldr	r3, [pc, #532]	; (8004c4c <uip_process+0x474>)
 8004a36:	881a      	ldrh	r2, [r3, #0]
 8004a38:	4b85      	ldr	r3, [pc, #532]	; (8004c50 <uip_process+0x478>)
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d105      	bne.n	8004a4c <uip_process+0x274>
 8004a40:	4b82      	ldr	r3, [pc, #520]	; (8004c4c <uip_process+0x474>)
 8004a42:	885a      	ldrh	r2, [r3, #2]
 8004a44:	4b83      	ldr	r3, [pc, #524]	; (8004c54 <uip_process+0x47c>)
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d037      	beq.n	8004abc <uip_process+0x2e4>
  } else {
    /* If IP broadcast support is configured, we check for a broadcast
       UDP packet, which may be destined to us. */
#if UIP_BROADCAST
    DEBUG_PRINTF("UDP IP checksum 0x%04x\n", uip_ipchksum());
     if(BUF->proto == UIP_PROTO_UDP && (
 8004a4c:	4b7d      	ldr	r3, [pc, #500]	; (8004c44 <uip_process+0x46c>)
 8004a4e:	7a5b      	ldrb	r3, [r3, #9]
 8004a50:	2b11      	cmp	r3, #17
 8004a52:	d125      	bne.n	8004aa0 <uip_process+0x2c8>
        uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr) // Limited broadcast
 8004a54:	4b80      	ldr	r3, [pc, #512]	; (8004c58 <uip_process+0x480>)
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	4b80      	ldr	r3, [pc, #512]	; (8004c5c <uip_process+0x484>)
 8004a5a:	881b      	ldrh	r3, [r3, #0]
     if(BUF->proto == UIP_PROTO_UDP && (
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d105      	bne.n	8004a6c <uip_process+0x294>
        uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr) // Limited broadcast
 8004a60:	4b7f      	ldr	r3, [pc, #508]	; (8004c60 <uip_process+0x488>)
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	4b7f      	ldr	r3, [pc, #508]	; (8004c64 <uip_process+0x48c>)
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d06b      	beq.n	8004b44 <uip_process+0x36c>
        || ((BUF->destipaddr[0]==(uip_hostaddr[0] | (0xFFFF&(~uip_netmask[0])))) && (BUF->destipaddr[1]==(uip_hostaddr[1] | (0XFFFF&(~uip_netmask[1]))))) // Direct broadcast
 8004a6c:	4b75      	ldr	r3, [pc, #468]	; (8004c44 <uip_process+0x46c>)
 8004a6e:	8a1b      	ldrh	r3, [r3, #16]
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <uip_process+0x474>)
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4b7b      	ldr	r3, [pc, #492]	; (8004c68 <uip_process+0x490>)
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	430b      	orrs	r3, r1
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d10c      	bne.n	8004aa0 <uip_process+0x2c8>
 8004a86:	4b6f      	ldr	r3, [pc, #444]	; (8004c44 <uip_process+0x46c>)
 8004a88:	8a5b      	ldrh	r3, [r3, #18]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4b6f      	ldr	r3, [pc, #444]	; (8004c4c <uip_process+0x474>)
 8004a8e:	885b      	ldrh	r3, [r3, #2]
 8004a90:	4619      	mov	r1, r3
 8004a92:	4b75      	ldr	r3, [pc, #468]	; (8004c68 <uip_process+0x490>)
 8004a94:	885b      	ldrh	r3, [r3, #2]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d051      	beq.n	8004b44 <uip_process+0x36c>
    }
#endif /* UIP_BROADCAST */
    
    /* Check if the packet is destined for our IP address. */
#if !UIP_CONF_IPV6
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
 8004aa0:	4b6d      	ldr	r3, [pc, #436]	; (8004c58 <uip_process+0x480>)
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	4b69      	ldr	r3, [pc, #420]	; (8004c4c <uip_process+0x474>)
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	f040 8773 	bne.w	8005994 <uip_process+0x11bc>
 8004aae:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <uip_process+0x488>)
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	4b66      	ldr	r3, [pc, #408]	; (8004c4c <uip_process+0x474>)
 8004ab4:	885b      	ldrh	r3, [r3, #2]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	f040 876c 	bne.w	8005994 <uip_process+0x11bc>
    }
#endif /* UIP_CONF_IPV6 */
  }

#if !UIP_CONF_IPV6
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
 8004abc:	f7fe fbb6 	bl	800322c <uip_ipchksum>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	f040 8765 	bne.w	8005998 <uip_process+0x11c0>
    UIP_LOG("ip: bad checksum.");
    goto drop;
  }
#endif /* UIP_CONF_IPV6 */

  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <uip_process+0x46c>)
 8004ad0:	7a5b      	ldrb	r3, [r3, #9]
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	f000 8147 	beq.w	8004d66 <uip_process+0x58e>
				       processing. */
    goto tcp_input;
  }

#if UIP_UDP
  if(BUF->proto == UIP_PROTO_UDP) {
 8004ad8:	4b5a      	ldr	r3, [pc, #360]	; (8004c44 <uip_process+0x46c>)
 8004ada:	7a5b      	ldrb	r3, [r3, #9]
 8004adc:	2b11      	cmp	r3, #17
 8004ade:	d033      	beq.n	8004b48 <uip_process+0x370>
  }
#endif /* UIP_UDP */

#if !UIP_CONF_IPV6
  /* ICMPv4 processing code follows. */
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
 8004ae0:	4b58      	ldr	r3, [pc, #352]	; (8004c44 <uip_process+0x46c>)
 8004ae2:	7a5b      	ldrb	r3, [r3, #9]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 8759 	bne.w	800599c <uip_process+0x11c4>
  UIP_STAT(++uip_stat.icmp.recv);

  /* ICMP echo (i.e., ping) processing. This is simple, we only change
     the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
     checksum before we return the packet. */
  if(ICMPBUF->type != ICMP_ECHO) {
 8004aea:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <uip_process+0x46c>)
 8004aec:	7d1b      	ldrb	r3, [r3, #20]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	f040 8756 	bne.w	80059a0 <uip_process+0x11c8>
    uip_hostaddr[0] = BUF->destipaddr[0];
    uip_hostaddr[1] = BUF->destipaddr[1];
  }
#endif /* UIP_PINGADDRCONF */

  ICMPBUF->type = ICMP_ECHO_REPLY;
 8004af4:	4b53      	ldr	r3, [pc, #332]	; (8004c44 <uip_process+0x46c>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	751a      	strb	r2, [r3, #20]

  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
 8004afa:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <uip_process+0x46c>)
 8004afc:	8adb      	ldrh	r3, [r3, #22]
 8004afe:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d906      	bls.n	8004b14 <uip_process+0x33c>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 8004b06:	4b4f      	ldr	r3, [pc, #316]	; (8004c44 <uip_process+0x46c>)
 8004b08:	8adb      	ldrh	r3, [r3, #22]
 8004b0a:	4a4e      	ldr	r2, [pc, #312]	; (8004c44 <uip_process+0x46c>)
 8004b0c:	3309      	adds	r3, #9
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	82d3      	strh	r3, [r2, #22]
 8004b12:	e005      	b.n	8004b20 <uip_process+0x348>
  } else {
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 8004b14:	4b4b      	ldr	r3, [pc, #300]	; (8004c44 <uip_process+0x46c>)
 8004b16:	8adb      	ldrh	r3, [r3, #22]
 8004b18:	4a4a      	ldr	r2, [pc, #296]	; (8004c44 <uip_process+0x46c>)
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	82d3      	strh	r3, [r2, #22]
  }

  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <uip_process+0x494>)
 8004b22:	4b4d      	ldr	r3, [pc, #308]	; (8004c58 <uip_process+0x480>)
 8004b24:	8812      	ldrh	r2, [r2, #0]
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	4a51      	ldr	r2, [pc, #324]	; (8004c70 <uip_process+0x498>)
 8004b2a:	4b4d      	ldr	r3, [pc, #308]	; (8004c60 <uip_process+0x488>)
 8004b2c:	8812      	ldrh	r2, [r2, #0]
 8004b2e:	801a      	strh	r2, [r3, #0]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8004b30:	4b4e      	ldr	r3, [pc, #312]	; (8004c6c <uip_process+0x494>)
 8004b32:	4a46      	ldr	r2, [pc, #280]	; (8004c4c <uip_process+0x474>)
 8004b34:	8812      	ldrh	r2, [r2, #0]
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	4b4d      	ldr	r3, [pc, #308]	; (8004c70 <uip_process+0x498>)
 8004b3a:	4a44      	ldr	r2, [pc, #272]	; (8004c4c <uip_process+0x474>)
 8004b3c:	8852      	ldrh	r2, [r2, #2]
 8004b3e:	801a      	strh	r2, [r3, #0]

  UIP_STAT(++uip_stat.icmp.sent);
  goto send;
 8004b40:	f000 bf18 	b.w	8005974 <uip_process+0x119c>
      goto udp_input;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <uip_process+0x372>
    goto udp_input;
 8004b48:	bf00      	nop
  /* UDP processing is really just a hack. We don't do anything to the
     UDP/IP headers, but let the UDP application do all the hard
     work. If the application sets uip_slen, it has a packet to
     send. */
#if UIP_UDP_CHECKSUMS
  uip_len = uip_len - UIP_IPUDPH_LEN;
 8004b4a:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <uip_process+0x470>)
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	3b1c      	subs	r3, #28
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <uip_process+0x470>)
 8004b54:	801a      	strh	r2, [r3, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <uip_process+0x49c>)
 8004b58:	4a47      	ldr	r2, [pc, #284]	; (8004c78 <uip_process+0x4a0>)
 8004b5a:	601a      	str	r2, [r3, #0]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
 8004b5c:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <uip_process+0x46c>)
 8004b5e:	8b5b      	ldrh	r3, [r3, #26]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <uip_process+0x39e>
 8004b64:	f7fe fb67 	bl	8003236 <uip_udpchksum>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b70:	429a      	cmp	r2, r3
 8004b72:	f040 8717 	bne.w	80059a4 <uip_process+0x11cc>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 8004b76:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <uip_process+0x4a4>)
 8004b78:	4a41      	ldr	r2, [pc, #260]	; (8004c80 <uip_process+0x4a8>)
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e046      	b.n	8004c0c <uip_process+0x434>
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 8004b7e:	4b3f      	ldr	r3, [pc, #252]	; (8004c7c <uip_process+0x4a4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	889b      	ldrh	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d03c      	beq.n	8004c02 <uip_process+0x42a>
       UDPBUF->destport == uip_udp_conn->lport &&
 8004b88:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <uip_process+0x46c>)
 8004b8a:	8ada      	ldrh	r2, [r3, #22]
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <uip_process+0x4a4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	889b      	ldrh	r3, [r3, #4]
    if(uip_udp_conn->lport != 0 &&
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d135      	bne.n	8004c02 <uip_process+0x42a>
       (uip_udp_conn->rport == 0 ||
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <uip_process+0x4a4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	88db      	ldrh	r3, [r3, #6]
       UDPBUF->destport == uip_udp_conn->lport &&
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <uip_process+0x3d6>
        UDPBUF->srcport == uip_udp_conn->rport) &&
 8004ba0:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <uip_process+0x46c>)
 8004ba2:	8a9a      	ldrh	r2, [r3, #20]
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <uip_process+0x4a4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	88db      	ldrh	r3, [r3, #6]
       (uip_udp_conn->rport == 0 ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d129      	bne.n	8004c02 <uip_process+0x42a>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8004bae:	4b33      	ldr	r3, [pc, #204]	; (8004c7c <uip_process+0x4a4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <uip_process+0x478>)
 8004bb6:	881b      	ldrh	r3, [r3, #0]
        UDPBUF->srcport == uip_udp_conn->rport) &&
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d106      	bne.n	8004bca <uip_process+0x3f2>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <uip_process+0x4a4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	885a      	ldrh	r2, [r3, #2]
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <uip_process+0x47c>)
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d027      	beq.n	8004c1a <uip_process+0x442>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <uip_process+0x4a4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <uip_process+0x484>)
 8004bd2:	881b      	ldrh	r3, [r3, #0]
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d106      	bne.n	8004be6 <uip_process+0x40e>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8004bd8:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <uip_process+0x4a4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	885a      	ldrh	r2, [r3, #2]
 8004bde:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <uip_process+0x48c>)
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d019      	beq.n	8004c1a <uip_process+0x442>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
 8004be6:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <uip_process+0x494>)
 8004be8:	881a      	ldrh	r2, [r3, #0]
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <uip_process+0x4a4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	881b      	ldrh	r3, [r3, #0]
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d106      	bne.n	8004c02 <uip_process+0x42a>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <uip_process+0x498>)
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <uip_process+0x4a4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	885b      	ldrh	r3, [r3, #2]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d00b      	beq.n	8004c1a <uip_process+0x442>
      ++uip_udp_conn) {
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <uip_process+0x4a4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3310      	adds	r3, #16
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <uip_process+0x4a4>)
 8004c0a:	6013      	str	r3, [r2, #0]
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <uip_process+0x4a4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
  for(uip_udp_conn = &uip_udp_conns[0];
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <uip_process+0x4ac>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d3b3      	bcc.n	8004b7e <uip_process+0x3a6>
      goto udp_found;
    }
  }
  UIP_LOG("udp: no matching connection found");
  goto drop;
 8004c16:	f000 beda 	b.w	80059ce <uip_process+0x11f6>
      goto udp_found;
 8004c1a:	bf00      	nop
  
 udp_found:
  uip_conn = NULL;
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <uip_process+0x4b0>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
  uip_flags = UIP_NEWDATA;
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <uip_process+0x4b4>)
 8004c24:	2202      	movs	r2, #2
 8004c26:	701a      	strb	r2, [r3, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <uip_process+0x49c>)
 8004c2a:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <uip_process+0x4a0>)
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <uip_process+0x49c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <uip_process+0x4b8>)
 8004c34:	6013      	str	r3, [r2, #0]
  uip_slen = 0;
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <uip_process+0x4bc>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	801a      	strh	r2, [r3, #0]
  UIP_UDP_APPCALL();
 8004c3c:	f7fe fd26 	bl	800368c <uipudp_appcall>
 8004c40:	e02b      	b.n	8004c9a <uip_process+0x4c2>
 8004c42:	bf00      	nop
 8004c44:	200004c2 	.word	0x200004c2
 8004c48:	20000404 	.word	0x20000404
 8004c4c:	200004b0 	.word	0x200004b0
 8004c50:	08007418 	.word	0x08007418
 8004c54:	0800741a 	.word	0x0800741a
 8004c58:	200004d2 	.word	0x200004d2
 8004c5c:	08007414 	.word	0x08007414
 8004c60:	200004d4 	.word	0x200004d4
 8004c64:	08007416 	.word	0x08007416
 8004c68:	200004ac 	.word	0x200004ac
 8004c6c:	200004ce 	.word	0x200004ce
 8004c70:	200004d0 	.word	0x200004d0
 8004c74:	20000418 	.word	0x20000418
 8004c78:	200004de 	.word	0x200004de
 8004c7c:	20000414 	.word	0x20000414
 8004c80:	2000051c 	.word	0x2000051c
 8004c84:	2000055c 	.word	0x2000055c
 8004c88:	2000041c 	.word	0x2000041c
 8004c8c:	20000410 	.word	0x20000410
 8004c90:	20000408 	.word	0x20000408
 8004c94:	20000518 	.word	0x20000518
    goto udp_send;
 8004c98:	bf00      	nop
 udp_send:
  if(uip_slen == 0) {
 8004c9a:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <uip_process+0x628>)
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8682 	beq.w	80059a8 <uip_process+0x11d0>
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 8004ca4:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <uip_process+0x628>)
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	331c      	adds	r3, #28
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <uip_process+0x62c>)
 8004cae:	801a      	strh	r2, [r3, #0]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 8004cb0:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <uip_process+0x62c>)
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	4b53      	ldr	r3, [pc, #332]	; (8004e08 <uip_process+0x630>)
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	709a      	strb	r2, [r3, #2]
  BUF->len[1] = (uip_len & 0xff);
 8004cbe:	4b51      	ldr	r3, [pc, #324]	; (8004e04 <uip_process+0x62c>)
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <uip_process+0x630>)
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	70da      	strb	r2, [r3, #3]
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <uip_process+0x634>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a4e      	ldr	r2, [pc, #312]	; (8004e08 <uip_process+0x630>)
 8004cce:	7a1b      	ldrb	r3, [r3, #8]
 8004cd0:	7213      	strb	r3, [r2, #8]
  BUF->proto = UIP_PROTO_UDP;
 8004cd2:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <uip_process+0x630>)
 8004cd4:	2211      	movs	r2, #17
 8004cd6:	725a      	strb	r2, [r3, #9]

  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
 8004cd8:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <uip_process+0x628>)
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	b21a      	sxth	r2, r3
 8004ce4:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <uip_process+0x628>)
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	b21a      	sxth	r2, r3
 8004cf6:	4b44      	ldr	r3, [pc, #272]	; (8004e08 <uip_process+0x630>)
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	831a      	strh	r2, [r3, #24]
  UDPBUF->udpchksum = 0;
 8004cfc:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <uip_process+0x630>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	835a      	strh	r2, [r3, #26]

  BUF->srcport  = uip_udp_conn->lport;
 8004d02:	4b42      	ldr	r3, [pc, #264]	; (8004e0c <uip_process+0x634>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a40      	ldr	r2, [pc, #256]	; (8004e08 <uip_process+0x630>)
 8004d08:	889b      	ldrh	r3, [r3, #4]
 8004d0a:	8293      	strh	r3, [r2, #20]
  BUF->destport = uip_udp_conn->rport;
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <uip_process+0x634>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3d      	ldr	r2, [pc, #244]	; (8004e08 <uip_process+0x630>)
 8004d12:	88db      	ldrh	r3, [r3, #6]
 8004d14:	82d3      	strh	r3, [r2, #22]

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <uip_process+0x638>)
 8004d18:	4a3e      	ldr	r2, [pc, #248]	; (8004e14 <uip_process+0x63c>)
 8004d1a:	8812      	ldrh	r2, [r2, #0]
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <uip_process+0x640>)
 8004d20:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <uip_process+0x63c>)
 8004d22:	8852      	ldrh	r2, [r2, #2]
 8004d24:	801a      	strh	r2, [r3, #0]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <uip_process+0x634>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3c      	ldr	r2, [pc, #240]	; (8004e1c <uip_process+0x644>)
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	8013      	strh	r3, [r2, #0]
 8004d30:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <uip_process+0x634>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a3a      	ldr	r2, [pc, #232]	; (8004e20 <uip_process+0x648>)
 8004d36:	885b      	ldrh	r3, [r3, #2]
 8004d38:	8013      	strh	r3, [r2, #0]
   
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 8004d3a:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <uip_process+0x64c>)
 8004d3c:	4a3a      	ldr	r2, [pc, #232]	; (8004e28 <uip_process+0x650>)
 8004d3e:	601a      	str	r2, [r3, #0]

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UDPBUF->udpchksum = ~(uip_udpchksum());
 8004d40:	f7fe fa79 	bl	8003236 <uip_udpchksum>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <uip_process+0x630>)
 8004d4a:	43d2      	mvns	r2, r2
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	835a      	strh	r2, [r3, #26]
  if(UDPBUF->udpchksum == 0) {
 8004d50:	4b2d      	ldr	r3, [pc, #180]	; (8004e08 <uip_process+0x630>)
 8004d52:	8b5b      	ldrh	r3, [r3, #26]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 85e3 	bne.w	8005920 <uip_process+0x1148>
    UDPBUF->udpchksum = 0xffff;
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <uip_process+0x630>)
 8004d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d60:	835a      	strh	r2, [r3, #26]
  }
#endif /* UIP_UDP_CHECKSUMS */
  
  goto ip_send_nolen;
 8004d62:	f000 bddd 	b.w	8005920 <uip_process+0x1148>
    goto tcp_input;
 8004d66:	bf00      	nop
 tcp_input:
  UIP_STAT(++uip_stat.tcp.recv);

  /* Start of TCP input header processing code. */
  
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
 8004d68:	f7fe fa62 	bl	8003230 <uip_tcpchksum>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d74:	429a      	cmp	r2, r3
 8004d76:	f040 8619 	bne.w	80059ac <uip_process+0x11d4>
  }
  
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 8004d7a:	4c2c      	ldr	r4, [pc, #176]	; (8004e2c <uip_process+0x654>)
 8004d7c:	e018      	b.n	8004db0 <uip_process+0x5d8>
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 8004d7e:	7e63      	ldrb	r3, [r4, #25]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d014      	beq.n	8004dae <uip_process+0x5d6>
       BUF->destport == uip_connr->lport &&
 8004d84:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <uip_process+0x630>)
 8004d86:	8ada      	ldrh	r2, [r3, #22]
 8004d88:	88a3      	ldrh	r3, [r4, #4]
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d10f      	bne.n	8004dae <uip_process+0x5d6>
       BUF->srcport == uip_connr->rport &&
 8004d8e:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <uip_process+0x630>)
 8004d90:	8a9a      	ldrh	r2, [r3, #20]
 8004d92:	88e3      	ldrh	r3, [r4, #6]
       BUF->destport == uip_connr->lport &&
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d10a      	bne.n	8004dae <uip_process+0x5d6>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <uip_process+0x638>)
 8004d9a:	881a      	ldrh	r2, [r3, #0]
 8004d9c:	8823      	ldrh	r3, [r4, #0]
       BUF->srcport == uip_connr->rport &&
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d105      	bne.n	8004dae <uip_process+0x5d6>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <uip_process+0x640>)
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	8863      	ldrh	r3, [r4, #2]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	f000 81ed 	beq.w	8005188 <uip_process+0x9b0>
      ++uip_connr) {
 8004dae:	3420      	adds	r4, #32
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 8004db0:	4b1f      	ldr	r3, [pc, #124]	; (8004e30 <uip_process+0x658>)
 8004db2:	429c      	cmp	r4, r3
 8004db4:	d9e3      	bls.n	8004d7e <uip_process+0x5a6>

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <uip_process+0x630>)
 8004db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d13d      	bne.n	8004e40 <uip_process+0x668>
    goto reset;
  }
  
  tmp16 = BUF->destport;
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <uip_process+0x630>)
 8004dc6:	8ada      	ldrh	r2, [r3, #22]
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <uip_process+0x65c>)
 8004dca:	801a      	strh	r2, [r3, #0]
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <uip_process+0x660>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e010      	b.n	8004df6 <uip_process+0x61e>
    if(tmp16 == uip_listenports[c])
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <uip_process+0x660>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <uip_process+0x664>)
 8004ddc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004de0:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <uip_process+0x65c>)
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	f000 80aa 	beq.w	8004f3e <uip_process+0x766>
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <uip_process+0x660>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <uip_process+0x660>)
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <uip_process+0x660>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d9ea      	bls.n	8004dd4 <uip_process+0x5fc>
      goto found_listen;
  }
  
  /* No matching connection found, so we send a RST packet. */
  UIP_STAT(++uip_stat.tcp.synrst);
 reset:
 8004dfe:	e020      	b.n	8004e42 <uip_process+0x66a>
 8004e00:	20000518 	.word	0x20000518
 8004e04:	20000404 	.word	0x20000404
 8004e08:	200004c2 	.word	0x200004c2
 8004e0c:	20000414 	.word	0x20000414
 8004e10:	200004ce 	.word	0x200004ce
 8004e14:	200004b0 	.word	0x200004b0
 8004e18:	200004d0 	.word	0x200004d0
 8004e1c:	200004d2 	.word	0x200004d2
 8004e20:	200004d4 	.word	0x200004d4
 8004e24:	20000418 	.word	0x20000418
 8004e28:	200004ea 	.word	0x200004ea
 8004e2c:	20000420 	.word	0x20000420
 8004e30:	20000480 	.word	0x20000480
 8004e34:	2000038c 	.word	0x2000038c
 8004e38:	2000038a 	.word	0x2000038a
 8004e3c:	200004a0 	.word	0x200004a0
    goto reset;
 8004e40:	bf00      	nop

  /* We do not send resets in response to resets. */
  if(BUF->flags & TCP_RST) {
 8004e42:	4b89      	ldr	r3, [pc, #548]	; (8005068 <uip_process+0x890>)
 8004e44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 85af 	bne.w	80059b0 <uip_process+0x11d8>
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);
  
  BUF->flags = TCP_RST | TCP_ACK;
 8004e52:	4b85      	ldr	r3, [pc, #532]	; (8005068 <uip_process+0x890>)
 8004e54:	2214      	movs	r2, #20
 8004e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  uip_len = UIP_IPTCPH_LEN;
 8004e5a:	4b84      	ldr	r3, [pc, #528]	; (800506c <uip_process+0x894>)
 8004e5c:	2228      	movs	r2, #40	; 0x28
 8004e5e:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = 5 << 4;
 8004e60:	4b81      	ldr	r3, [pc, #516]	; (8005068 <uip_process+0x890>)
 8004e62:	2250      	movs	r2, #80	; 0x50
 8004e64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
 8004e68:	4b7f      	ldr	r3, [pc, #508]	; (8005068 <uip_process+0x890>)
 8004e6a:	7eda      	ldrb	r2, [r3, #27]
 8004e6c:	4b80      	ldr	r3, [pc, #512]	; (8005070 <uip_process+0x898>)
 8004e6e:	701a      	strb	r2, [r3, #0]
  BUF->seqno[3] = BUF->ackno[3];
 8004e70:	4a7d      	ldr	r2, [pc, #500]	; (8005068 <uip_process+0x890>)
 8004e72:	4b7d      	ldr	r3, [pc, #500]	; (8005068 <uip_process+0x890>)
 8004e74:	7fd2      	ldrb	r2, [r2, #31]
 8004e76:	76da      	strb	r2, [r3, #27]
  BUF->ackno[3] = c;
 8004e78:	4b7b      	ldr	r3, [pc, #492]	; (8005068 <uip_process+0x890>)
 8004e7a:	4a7d      	ldr	r2, [pc, #500]	; (8005070 <uip_process+0x898>)
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	77da      	strb	r2, [r3, #31]
  
  c = BUF->seqno[2];
 8004e80:	4b79      	ldr	r3, [pc, #484]	; (8005068 <uip_process+0x890>)
 8004e82:	7e9a      	ldrb	r2, [r3, #26]
 8004e84:	4b7a      	ldr	r3, [pc, #488]	; (8005070 <uip_process+0x898>)
 8004e86:	701a      	strb	r2, [r3, #0]
  BUF->seqno[2] = BUF->ackno[2];
 8004e88:	4a77      	ldr	r2, [pc, #476]	; (8005068 <uip_process+0x890>)
 8004e8a:	4b77      	ldr	r3, [pc, #476]	; (8005068 <uip_process+0x890>)
 8004e8c:	7f92      	ldrb	r2, [r2, #30]
 8004e8e:	769a      	strb	r2, [r3, #26]
  BUF->ackno[2] = c;
 8004e90:	4b75      	ldr	r3, [pc, #468]	; (8005068 <uip_process+0x890>)
 8004e92:	4a77      	ldr	r2, [pc, #476]	; (8005070 <uip_process+0x898>)
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	779a      	strb	r2, [r3, #30]
  
  c = BUF->seqno[1];
 8004e98:	4b73      	ldr	r3, [pc, #460]	; (8005068 <uip_process+0x890>)
 8004e9a:	7e5a      	ldrb	r2, [r3, #25]
 8004e9c:	4b74      	ldr	r3, [pc, #464]	; (8005070 <uip_process+0x898>)
 8004e9e:	701a      	strb	r2, [r3, #0]
  BUF->seqno[1] = BUF->ackno[1];
 8004ea0:	4a71      	ldr	r2, [pc, #452]	; (8005068 <uip_process+0x890>)
 8004ea2:	4b71      	ldr	r3, [pc, #452]	; (8005068 <uip_process+0x890>)
 8004ea4:	7f52      	ldrb	r2, [r2, #29]
 8004ea6:	765a      	strb	r2, [r3, #25]
  BUF->ackno[1] = c;
 8004ea8:	4b6f      	ldr	r3, [pc, #444]	; (8005068 <uip_process+0x890>)
 8004eaa:	4a71      	ldr	r2, [pc, #452]	; (8005070 <uip_process+0x898>)
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	775a      	strb	r2, [r3, #29]
  
  c = BUF->seqno[0];
 8004eb0:	4b6d      	ldr	r3, [pc, #436]	; (8005068 <uip_process+0x890>)
 8004eb2:	7e1a      	ldrb	r2, [r3, #24]
 8004eb4:	4b6e      	ldr	r3, [pc, #440]	; (8005070 <uip_process+0x898>)
 8004eb6:	701a      	strb	r2, [r3, #0]
  BUF->seqno[0] = BUF->ackno[0];
 8004eb8:	4a6b      	ldr	r2, [pc, #428]	; (8005068 <uip_process+0x890>)
 8004eba:	4b6b      	ldr	r3, [pc, #428]	; (8005068 <uip_process+0x890>)
 8004ebc:	7f12      	ldrb	r2, [r2, #28]
 8004ebe:	761a      	strb	r2, [r3, #24]
  BUF->ackno[0] = c;
 8004ec0:	4b69      	ldr	r3, [pc, #420]	; (8005068 <uip_process+0x890>)
 8004ec2:	4a6b      	ldr	r2, [pc, #428]	; (8005070 <uip_process+0x898>)
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	771a      	strb	r2, [r3, #28]

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++BUF->ackno[3] == 0) {
 8004ec8:	4b67      	ldr	r3, [pc, #412]	; (8005068 <uip_process+0x890>)
 8004eca:	7fda      	ldrb	r2, [r3, #31]
 8004ecc:	3201      	adds	r2, #1
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	77da      	strb	r2, [r3, #31]
 8004ed2:	7fdb      	ldrb	r3, [r3, #31]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d114      	bne.n	8004f02 <uip_process+0x72a>
    if(++BUF->ackno[2] == 0) {
 8004ed8:	4b63      	ldr	r3, [pc, #396]	; (8005068 <uip_process+0x890>)
 8004eda:	7f9a      	ldrb	r2, [r3, #30]
 8004edc:	3201      	adds	r2, #1
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	779a      	strb	r2, [r3, #30]
 8004ee2:	7f9b      	ldrb	r3, [r3, #30]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10c      	bne.n	8004f02 <uip_process+0x72a>
      if(++BUF->ackno[1] == 0) {
 8004ee8:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <uip_process+0x890>)
 8004eea:	7f5a      	ldrb	r2, [r3, #29]
 8004eec:	3201      	adds	r2, #1
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	775a      	strb	r2, [r3, #29]
 8004ef2:	7f5b      	ldrb	r3, [r3, #29]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <uip_process+0x72a>
	++BUF->ackno[0];
 8004ef8:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <uip_process+0x890>)
 8004efa:	7f1a      	ldrb	r2, [r3, #28]
 8004efc:	3201      	adds	r2, #1
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
 8004f02:	4b59      	ldr	r3, [pc, #356]	; (8005068 <uip_process+0x890>)
 8004f04:	8a9a      	ldrh	r2, [r3, #20]
 8004f06:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <uip_process+0x89c>)
 8004f08:	801a      	strh	r2, [r3, #0]
  BUF->srcport = BUF->destport;
 8004f0a:	4a57      	ldr	r2, [pc, #348]	; (8005068 <uip_process+0x890>)
 8004f0c:	4b56      	ldr	r3, [pc, #344]	; (8005068 <uip_process+0x890>)
 8004f0e:	8ad2      	ldrh	r2, [r2, #22]
 8004f10:	829a      	strh	r2, [r3, #20]
  BUF->destport = tmp16;
 8004f12:	4b55      	ldr	r3, [pc, #340]	; (8005068 <uip_process+0x890>)
 8004f14:	4a57      	ldr	r2, [pc, #348]	; (8005074 <uip_process+0x89c>)
 8004f16:	8812      	ldrh	r2, [r2, #0]
 8004f18:	82da      	strh	r2, [r3, #22]
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8004f1a:	4a57      	ldr	r2, [pc, #348]	; (8005078 <uip_process+0x8a0>)
 8004f1c:	4b57      	ldr	r3, [pc, #348]	; (800507c <uip_process+0x8a4>)
 8004f1e:	8812      	ldrh	r2, [r2, #0]
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	4a57      	ldr	r2, [pc, #348]	; (8005080 <uip_process+0x8a8>)
 8004f24:	4b57      	ldr	r3, [pc, #348]	; (8005084 <uip_process+0x8ac>)
 8004f26:	8812      	ldrh	r2, [r2, #0]
 8004f28:	801a      	strh	r2, [r3, #0]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8004f2a:	4b53      	ldr	r3, [pc, #332]	; (8005078 <uip_process+0x8a0>)
 8004f2c:	4a56      	ldr	r2, [pc, #344]	; (8005088 <uip_process+0x8b0>)
 8004f2e:	8812      	ldrh	r2, [r2, #0]
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	4b53      	ldr	r3, [pc, #332]	; (8005080 <uip_process+0x8a8>)
 8004f34:	4a54      	ldr	r2, [pc, #336]	; (8005088 <uip_process+0x8b0>)
 8004f36:	8852      	ldrh	r2, [r2, #2]
 8004f38:	801a      	strh	r2, [r3, #0]
  
  /* And send out the RST packet! */
  goto tcp_send_noconn;
 8004f3a:	f000 bccd 	b.w	80058d8 <uip_process+0x1100>
      goto found_listen;
 8004f3e:	bf00      	nop
     connections are kept in the same table as used connections, but
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
 8004f40:	2400      	movs	r4, #0
  for(c = 0; c < UIP_CONNS; ++c) {
 8004f42:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <uip_process+0x898>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e02e      	b.n	8004fa8 <uip_process+0x7d0>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
 8004f4a:	4b49      	ldr	r3, [pc, #292]	; (8005070 <uip_process+0x898>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	4a4f      	ldr	r2, [pc, #316]	; (800508c <uip_process+0x8b4>)
 8004f50:	015b      	lsls	r3, r3, #5
 8004f52:	4413      	add	r3, r2
 8004f54:	3319      	adds	r3, #25
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <uip_process+0x790>
      uip_connr = &uip_conns[c];
 8004f5c:	4b44      	ldr	r3, [pc, #272]	; (8005070 <uip_process+0x898>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	015b      	lsls	r3, r3, #5
 8004f62:	4a4a      	ldr	r2, [pc, #296]	; (800508c <uip_process+0x8b4>)
 8004f64:	189c      	adds	r4, r3, r2
      break;
 8004f66:	e023      	b.n	8004fb0 <uip_process+0x7d8>
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
 8004f68:	4b41      	ldr	r3, [pc, #260]	; (8005070 <uip_process+0x898>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4a47      	ldr	r2, [pc, #284]	; (800508c <uip_process+0x8b4>)
 8004f6e:	015b      	lsls	r3, r3, #5
 8004f70:	4413      	add	r3, r2
 8004f72:	3319      	adds	r3, #25
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	d110      	bne.n	8004f9c <uip_process+0x7c4>
      if(uip_connr == 0 ||
 8004f7a:	2c00      	cmp	r4, #0
 8004f7c:	d009      	beq.n	8004f92 <uip_process+0x7ba>
	 uip_conns[c].timer > uip_connr->timer) {
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <uip_process+0x898>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	4a42      	ldr	r2, [pc, #264]	; (800508c <uip_process+0x8b4>)
 8004f84:	015b      	lsls	r3, r3, #5
 8004f86:	4413      	add	r3, r2
 8004f88:	331a      	adds	r3, #26
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	7ea3      	ldrb	r3, [r4, #26]
      if(uip_connr == 0 ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d904      	bls.n	8004f9c <uip_process+0x7c4>
	uip_connr = &uip_conns[c];
 8004f92:	4b37      	ldr	r3, [pc, #220]	; (8005070 <uip_process+0x898>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	015b      	lsls	r3, r3, #5
 8004f98:	4a3c      	ldr	r2, [pc, #240]	; (800508c <uip_process+0x8b4>)
 8004f9a:	189c      	adds	r4, r3, r2
  for(c = 0; c < UIP_CONNS; ++c) {
 8004f9c:	4b34      	ldr	r3, [pc, #208]	; (8005070 <uip_process+0x898>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	4b32      	ldr	r3, [pc, #200]	; (8005070 <uip_process+0x898>)
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	4b31      	ldr	r3, [pc, #196]	; (8005070 <uip_process+0x898>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d9cc      	bls.n	8004f4a <uip_process+0x772>
      }
    }
  }

  if(uip_connr == 0) {
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	f000 84ff 	beq.w	80059b4 <uip_process+0x11dc>
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <uip_process+0x8b8>)
 8004fb8:	601c      	str	r4, [r3, #0]
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	76a3      	strb	r3, [r4, #26]
 8004fbe:	7ea3      	ldrb	r3, [r4, #26]
 8004fc0:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75a3      	strb	r3, [r4, #22]
  uip_connr->sv = 4;
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	75e3      	strb	r3, [r4, #23]
  uip_connr->nrtx = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	76e3      	strb	r3, [r4, #27]
  uip_connr->lport = BUF->destport;
 8004fce:	4b26      	ldr	r3, [pc, #152]	; (8005068 <uip_process+0x890>)
 8004fd0:	8adb      	ldrh	r3, [r3, #22]
 8004fd2:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <uip_process+0x890>)
 8004fd6:	8a9b      	ldrh	r3, [r3, #20]
 8004fd8:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
 8004fda:	4b27      	ldr	r3, [pc, #156]	; (8005078 <uip_process+0x8a0>)
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	8023      	strh	r3, [r4, #0]
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <uip_process+0x8a8>)
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	8063      	strh	r3, [r4, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	7663      	strb	r3, [r4, #25]

  uip_connr->snd_nxt[0] = iss[0];
 8004fea:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <uip_process+0x8bc>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	7323      	strb	r3, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 8004ff0:	4b28      	ldr	r3, [pc, #160]	; (8005094 <uip_process+0x8bc>)
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	7363      	strb	r3, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 8004ff6:	4b27      	ldr	r3, [pc, #156]	; (8005094 <uip_process+0x8bc>)
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	73a3      	strb	r3, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <uip_process+0x8bc>)
 8004ffe:	78db      	ldrb	r3, [r3, #3]
 8005000:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;
 8005002:	2301      	movs	r3, #1
 8005004:	8223      	strh	r3, [r4, #16]

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <uip_process+0x890>)
 8005008:	7edb      	ldrb	r3, [r3, #27]
 800500a:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <uip_process+0x890>)
 800500e:	7e9b      	ldrb	r3, [r3, #26]
 8005010:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <uip_process+0x890>)
 8005014:	7e5b      	ldrb	r3, [r3, #25]
 8005016:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <uip_process+0x890>)
 800501a:	7e1b      	ldrb	r3, [r3, #24]
 800501c:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 800501e:	2001      	movs	r0, #1
 8005020:	f7ff fbb0 	bl	8004784 <uip_add_rcv_nxt>

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <uip_process+0x890>)
 8005026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800502a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502e:	2b50      	cmp	r3, #80	; 0x50
 8005030:	f340 8080 	ble.w	8005134 <uip_process+0x95c>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <uip_process+0x898>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e06c      	b.n	8005116 <uip_process+0x93e>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <uip_process+0x898>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	3336      	adds	r3, #54	; 0x36
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <uip_process+0x8c0>)
 8005044:	5cd2      	ldrb	r2, [r2, r3]
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <uip_process+0x8c4>)
 8005048:	701a      	strb	r2, [r3, #0]
      if(opt == TCP_OPT_END) {
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <uip_process+0x8c4>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d072      	beq.n	8005138 <uip_process+0x960>
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <uip_process+0x8c4>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d122      	bne.n	80050a0 <uip_process+0x8c8>
	++c;
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <uip_process+0x898>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	3301      	adds	r3, #1
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <uip_process+0x898>)
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e056      	b.n	8005116 <uip_process+0x93e>
 8005068:	200004c2 	.word	0x200004c2
 800506c:	20000404 	.word	0x20000404
 8005070:	2000038a 	.word	0x2000038a
 8005074:	2000038c 	.word	0x2000038c
 8005078:	200004ce 	.word	0x200004ce
 800507c:	200004d2 	.word	0x200004d2
 8005080:	200004d0 	.word	0x200004d0
 8005084:	200004d4 	.word	0x200004d4
 8005088:	200004b0 	.word	0x200004b0
 800508c:	20000420 	.word	0x20000420
 8005090:	2000041c 	.word	0x2000041c
 8005094:	20000384 	.word	0x20000384
 8005098:	200004b4 	.word	0x200004b4
 800509c:	2000038b 	.word	0x2000038b
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
 80050a0:	4ba8      	ldr	r3, [pc, #672]	; (8005344 <uip_process+0xb6c>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d124      	bne.n	80050f2 <uip_process+0x91a>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 80050a8:	4ba7      	ldr	r3, [pc, #668]	; (8005348 <uip_process+0xb70>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	3337      	adds	r3, #55	; 0x37
 80050ae:	4aa7      	ldr	r2, [pc, #668]	; (800534c <uip_process+0xb74>)
 80050b0:	5cd3      	ldrb	r3, [r2, r3]
      } else if(opt == TCP_OPT_MSS &&
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d11d      	bne.n	80050f2 <uip_process+0x91a>
	/* An MSS option with the right option length. */
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80050b6:	4ba4      	ldr	r3, [pc, #656]	; (8005348 <uip_process+0xb70>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	3338      	adds	r3, #56	; 0x38
 80050bc:	4aa3      	ldr	r2, [pc, #652]	; (800534c <uip_process+0xb74>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	b21a      	sxth	r2, r3
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
 80050c4:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <uip_process+0xb70>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	3339      	adds	r3, #57	; 0x39
 80050ca:	49a0      	ldr	r1, [pc, #640]	; (800534c <uip_process+0xb74>)
 80050cc:	5ccb      	ldrb	r3, [r1, r3]
 80050ce:	b21b      	sxth	r3, r3
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80050d0:	4313      	orrs	r3, r2
 80050d2:	b21b      	sxth	r3, r3
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	4b9e      	ldr	r3, [pc, #632]	; (8005350 <uip_process+0xb78>)
 80050d8:	801a      	strh	r2, [r3, #0]
	uip_connr->initialmss = uip_connr->mss =
	  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 80050da:	4b9d      	ldr	r3, [pc, #628]	; (8005350 <uip_process+0xb78>)
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e2:	bf28      	it	cs
 80050e4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80050e8:	b29b      	uxth	r3, r3
	uip_connr->initialmss = uip_connr->mss =
 80050ea:	8263      	strh	r3, [r4, #18]
 80050ec:	8a63      	ldrh	r3, [r4, #18]
 80050ee:	82a3      	strh	r3, [r4, #20]
	
	/* And we are done processing options. */
	break;
 80050f0:	e025      	b.n	800513e <uip_process+0x966>
      } else {
	/* All other options have a length field, so that we easily
	   can skip past them. */
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 80050f2:	4b95      	ldr	r3, [pc, #596]	; (8005348 <uip_process+0xb70>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	3337      	adds	r3, #55	; 0x37
 80050f8:	4a94      	ldr	r2, [pc, #592]	; (800534c <uip_process+0xb74>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01d      	beq.n	800513c <uip_process+0x964>
	  /* If the length field is zero, the options are malformed
	     and we don't process them further. */
	  break;
	}
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 8005100:	4b91      	ldr	r3, [pc, #580]	; (8005348 <uip_process+0xb70>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	3337      	adds	r3, #55	; 0x37
 8005106:	4a91      	ldr	r2, [pc, #580]	; (800534c <uip_process+0xb74>)
 8005108:	5cd2      	ldrb	r2, [r2, r3]
 800510a:	4b8f      	ldr	r3, [pc, #572]	; (8005348 <uip_process+0xb70>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	4413      	add	r3, r2
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4b8d      	ldr	r3, [pc, #564]	; (8005348 <uip_process+0xb70>)
 8005114:	701a      	strb	r2, [r3, #0]
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8005116:	4b8c      	ldr	r3, [pc, #560]	; (8005348 <uip_process+0xb70>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	4b8d      	ldr	r3, [pc, #564]	; (8005354 <uip_process+0xb7c>)
 800511e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	b2db      	uxtb	r3, r3
 8005126:	3b05      	subs	r3, #5
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	429a      	cmp	r2, r3
 800512c:	db86      	blt.n	800503c <uip_process+0x864>
    }
  }
  
  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
 800512e:	e001      	b.n	8005134 <uip_process+0x95c>
	    goto tcp_send_synack;
 8005130:	bf00      	nop
 8005132:	e004      	b.n	800513e <uip_process+0x966>
 tcp_send_synack:
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <uip_process+0x966>
	break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <uip_process+0x966>
	  break;
 800513c:	bf00      	nop
  BUF->flags = TCP_ACK;
 800513e:	4b85      	ldr	r3, [pc, #532]	; (8005354 <uip_process+0xb7c>)
 8005140:	2210      	movs	r2, #16
 8005142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
 tcp_send_syn:
  BUF->flags |= TCP_SYN;
 8005146:	4b83      	ldr	r3, [pc, #524]	; (8005354 <uip_process+0xb7c>)
 8005148:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800514c:	4a81      	ldr	r2, [pc, #516]	; (8005354 <uip_process+0xb7c>)
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  BUF->flags = TCP_SYN | TCP_ACK;
#endif /* UIP_ACTIVE_OPEN */
  
  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  BUF->optdata[0] = TCP_OPT_MSS;
 8005158:	4b7e      	ldr	r3, [pc, #504]	; (8005354 <uip_process+0xb7c>)
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 8005160:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <uip_process+0xb7c>)
 8005162:	2204      	movs	r2, #4
 8005164:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 8005168:	4b7a      	ldr	r3, [pc, #488]	; (8005354 <uip_process+0xb7c>)
 800516a:	2202      	movs	r2, #2
 800516c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 8005170:	4b78      	ldr	r3, [pc, #480]	; (8005354 <uip_process+0xb7c>)
 8005172:	2200      	movs	r2, #0
 8005174:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 8005178:	4b77      	ldr	r3, [pc, #476]	; (8005358 <uip_process+0xb80>)
 800517a:	222c      	movs	r2, #44	; 0x2c
 800517c:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 800517e:	4b75      	ldr	r3, [pc, #468]	; (8005354 <uip_process+0xb7c>)
 8005180:	2260      	movs	r2, #96	; 0x60
 8005182:	f883 2020 	strb.w	r2, [r3, #32]
  goto tcp_send;
 8005186:	e361      	b.n	800584c <uip_process+0x1074>
      goto found;
 8005188:	bf00      	nop

  /* This label will be jumped to if we found an active connection. */
 found:
  uip_conn = uip_connr;
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <uip_process+0xb84>)
 800518c:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
 800518e:	4b74      	ldr	r3, [pc, #464]	; (8005360 <uip_process+0xb88>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(BUF->flags & TCP_RST) {
 8005194:	4b6f      	ldr	r3, [pc, #444]	; (8005354 <uip_process+0xb7c>)
 8005196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <uip_process+0x9dc>
    uip_connr->tcpstateflags = UIP_CLOSED;
 80051a2:	2300      	movs	r3, #0
 80051a4:	7663      	strb	r3, [r4, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
 80051a6:	4b6e      	ldr	r3, [pc, #440]	; (8005360 <uip_process+0xb88>)
 80051a8:	2220      	movs	r2, #32
 80051aa:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 80051ac:	f7fd fd5a 	bl	8002c64 <uipclient_appcall>
    goto drop;
 80051b0:	f000 bc0d 	b.w	80059ce <uip_process+0x11f6>
  }
  /* Calculated the length of the data, if the application has sent
     any data to us. */
  c = (BUF->tcpoffset >> 4) << 2;
 80051b4:	4b67      	ldr	r3, [pc, #412]	; (8005354 <uip_process+0xb7c>)
 80051b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ba:	091b      	lsrs	r3, r3, #4
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	4b61      	ldr	r3, [pc, #388]	; (8005348 <uip_process+0xb70>)
 80051c4:	701a      	strb	r2, [r3, #0]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
 80051c6:	4b64      	ldr	r3, [pc, #400]	; (8005358 <uip_process+0xb80>)
 80051c8:	881a      	ldrh	r2, [r3, #0]
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <uip_process+0xb70>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b14      	subs	r3, #20
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <uip_process+0xb80>)
 80051da:	801a      	strh	r2, [r3, #0]

  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in. */
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 80051dc:	7e63      	ldrb	r3, [r4, #25]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d106      	bne.n	80051f4 <uip_process+0xa1c>
       ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
 80051e6:	4b5b      	ldr	r3, [pc, #364]	; (8005354 <uip_process+0xb7c>)
 80051e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 80051f0:	2b12      	cmp	r3, #18
 80051f2:	d022      	beq.n	800523a <uip_process+0xa62>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 80051f4:	4b58      	ldr	r3, [pc, #352]	; (8005358 <uip_process+0xb80>)
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <uip_process+0xa32>
 80051fc:	4b55      	ldr	r3, [pc, #340]	; (8005354 <uip_process+0xb7c>)
 80051fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d017      	beq.n	800523a <uip_process+0xa62>
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 800520a:	4b52      	ldr	r3, [pc, #328]	; (8005354 <uip_process+0xb7c>)
 800520c:	7e1a      	ldrb	r2, [r3, #24]
 800520e:	7a23      	ldrb	r3, [r4, #8]
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 8005210:	429a      	cmp	r2, r3
 8005212:	f040 82ff 	bne.w	8005814 <uip_process+0x103c>
	BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
 8005216:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <uip_process+0xb7c>)
 8005218:	7e5a      	ldrb	r2, [r3, #25]
 800521a:	7a63      	ldrb	r3, [r4, #9]
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 800521c:	429a      	cmp	r2, r3
 800521e:	f040 82f9 	bne.w	8005814 <uip_process+0x103c>
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 8005222:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <uip_process+0xb7c>)
 8005224:	7e9a      	ldrb	r2, [r3, #26]
 8005226:	7aa3      	ldrb	r3, [r4, #10]
	BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
 8005228:	429a      	cmp	r2, r3
 800522a:	f040 82f3 	bne.w	8005814 <uip_process+0x103c>
	BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
 800522e:	4b49      	ldr	r3, [pc, #292]	; (8005354 <uip_process+0xb7c>)
 8005230:	7eda      	ldrb	r2, [r3, #27]
 8005232:	7ae3      	ldrb	r3, [r4, #11]
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 8005234:	429a      	cmp	r2, r3
 8005236:	f040 82ed 	bne.w	8005814 <uip_process+0x103c>

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
 800523a:	4b46      	ldr	r3, [pc, #280]	; (8005354 <uip_process+0xb7c>)
 800523c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d063      	beq.n	8005310 <uip_process+0xb38>
 8005248:	8a23      	ldrh	r3, [r4, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d060      	beq.n	8005310 <uip_process+0xb38>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 800524e:	f104 030c 	add.w	r3, r4, #12
 8005252:	8a22      	ldrh	r2, [r4, #16]
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff f896 	bl	8004388 <uip_add32>

    if(BUF->ackno[0] == uip_acc32[0] &&
 800525c:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <uip_process+0xb7c>)
 800525e:	7f1a      	ldrb	r2, [r3, #28]
 8005260:	4b40      	ldr	r3, [pc, #256]	; (8005364 <uip_process+0xb8c>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d153      	bne.n	8005310 <uip_process+0xb38>
       BUF->ackno[1] == uip_acc32[1] &&
 8005268:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <uip_process+0xb7c>)
 800526a:	7f5a      	ldrb	r2, [r3, #29]
 800526c:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <uip_process+0xb8c>)
 800526e:	785b      	ldrb	r3, [r3, #1]
    if(BUF->ackno[0] == uip_acc32[0] &&
 8005270:	429a      	cmp	r2, r3
 8005272:	d14d      	bne.n	8005310 <uip_process+0xb38>
       BUF->ackno[2] == uip_acc32[2] &&
 8005274:	4b37      	ldr	r3, [pc, #220]	; (8005354 <uip_process+0xb7c>)
 8005276:	7f9a      	ldrb	r2, [r3, #30]
 8005278:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <uip_process+0xb8c>)
 800527a:	789b      	ldrb	r3, [r3, #2]
       BUF->ackno[1] == uip_acc32[1] &&
 800527c:	429a      	cmp	r2, r3
 800527e:	d147      	bne.n	8005310 <uip_process+0xb38>
       BUF->ackno[3] == uip_acc32[3]) {
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <uip_process+0xb7c>)
 8005282:	7fda      	ldrb	r2, [r3, #31]
 8005284:	4b37      	ldr	r3, [pc, #220]	; (8005364 <uip_process+0xb8c>)
 8005286:	78db      	ldrb	r3, [r3, #3]
       BUF->ackno[2] == uip_acc32[2] &&
 8005288:	429a      	cmp	r2, r3
 800528a:	d141      	bne.n	8005310 <uip_process+0xb38>
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
 800528c:	4b35      	ldr	r3, [pc, #212]	; (8005364 <uip_process+0xb8c>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	7323      	strb	r3, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 8005292:	4b34      	ldr	r3, [pc, #208]	; (8005364 <uip_process+0xb8c>)
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	7363      	strb	r3, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 8005298:	4b32      	ldr	r3, [pc, #200]	; (8005364 <uip_process+0xb8c>)
 800529a:	789b      	ldrb	r3, [r3, #2]
 800529c:	73a3      	strb	r3, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <uip_process+0xb8c>)
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	73e3      	strb	r3, [r4, #15]
	

      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
 80052a4:	7ee3      	ldrb	r3, [r4, #27]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12b      	bne.n	8005302 <uip_process+0xb2a>
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
 80052aa:	7e22      	ldrb	r2, [r4, #24]
 80052ac:	7ea3      	ldrb	r3, [r4, #26]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	73fb      	strb	r3, [r7, #15]
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	7da3      	ldrb	r3, [r4, #22]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	73fb      	strb	r3, [r7, #15]
	uip_connr->sa += m;
 80052c2:	7da2      	ldrb	r2, [r4, #22]
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	4413      	add	r3, r2
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	75a3      	strb	r3, [r4, #22]
	if(m < 0) {
 80052cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da03      	bge.n	80052dc <uip_process+0xb04>
	  m = -m;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	425b      	negs	r3, r3
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	73fb      	strb	r3, [r7, #15]
	}
	m = m - (uip_connr->sv >> 2);
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	7de3      	ldrb	r3, [r4, #23]
 80052e0:	089b      	lsrs	r3, r3, #2
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	73fb      	strb	r3, [r7, #15]
	uip_connr->sv += m;
 80052ea:	7de2      	ldrb	r2, [r4, #23]
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	4413      	add	r3, r2
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	75e3      	strb	r3, [r4, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 80052f4:	7da3      	ldrb	r3, [r4, #22]
 80052f6:	08db      	lsrs	r3, r3, #3
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	7de3      	ldrb	r3, [r4, #23]
 80052fc:	4413      	add	r3, r2
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	7623      	strb	r3, [r4, #24]

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <uip_process+0xb88>)
 8005304:	2201      	movs	r2, #1
 8005306:	701a      	strb	r2, [r3, #0]
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;
 8005308:	7e23      	ldrb	r3, [r4, #24]
 800530a:	76a3      	strb	r3, [r4, #26]

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	8223      	strh	r3, [r4, #16]
    }
    
  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 8005310:	7e63      	ldrb	r3, [r4, #25]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	3b01      	subs	r3, #1
 8005318:	2b07      	cmp	r3, #7
 800531a:	f200 834d 	bhi.w	80059b8 <uip_process+0x11e0>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <uip_process+0xb4c>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005369 	.word	0x08005369
 8005328:	080053b1 	.word	0x080053b1
 800532c:	080054f9 	.word	0x080054f9
 8005330:	08005741 	.word	0x08005741
 8005334:	080057b3 	.word	0x080057b3
 8005338:	080057f9 	.word	0x080057f9
 800533c:	08005835 	.word	0x08005835
 8005340:	08005725 	.word	0x08005725
 8005344:	2000038b 	.word	0x2000038b
 8005348:	2000038a 	.word	0x2000038a
 800534c:	200004b4 	.word	0x200004b4
 8005350:	2000038c 	.word	0x2000038c
 8005354:	200004c2 	.word	0x200004c2
 8005358:	20000404 	.word	0x20000404
 800535c:	2000041c 	.word	0x2000041c
 8005360:	20000410 	.word	0x20000410
 8005364:	2000040c 	.word	0x2000040c
  case UIP_SYN_RCVD:
    /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
       we are waiting for an ACK that acknowledges the data we sent
       out the last time. Therefore, we want to have the UIP_ACKDATA
       flag set. If so, we enter the ESTABLISHED state. */
    if(uip_flags & UIP_ACKDATA) {
 8005368:	4b7f      	ldr	r3, [pc, #508]	; (8005568 <uip_process+0xd90>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8323 	beq.w	80059bc <uip_process+0x11e4>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 8005376:	2303      	movs	r3, #3
 8005378:	7663      	strb	r3, [r4, #25]
      uip_flags = UIP_CONNECTED;
 800537a:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <uip_process+0xd90>)
 800537c:	2240      	movs	r2, #64	; 0x40
 800537e:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	8223      	strh	r3, [r4, #16]
      if(uip_len > 0) {
 8005384:	4b79      	ldr	r3, [pc, #484]	; (800556c <uip_process+0xd94>)
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <uip_process+0xbcc>
        uip_flags |= UIP_NEWDATA;
 800538c:	4b76      	ldr	r3, [pc, #472]	; (8005568 <uip_process+0xd90>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	b2da      	uxtb	r2, r3
 8005396:	4b74      	ldr	r3, [pc, #464]	; (8005568 <uip_process+0xd90>)
 8005398:	701a      	strb	r2, [r3, #0]
        uip_add_rcv_nxt(uip_len);
 800539a:	4b74      	ldr	r3, [pc, #464]	; (800556c <uip_process+0xd94>)
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff f9f0 	bl	8004784 <uip_add_rcv_nxt>
      }
      uip_slen = 0;
 80053a4:	4b72      	ldr	r3, [pc, #456]	; (8005570 <uip_process+0xd98>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 80053aa:	f7fd fc5b 	bl	8002c64 <uipclient_appcall>
      goto appsend;
 80053ae:	e151      	b.n	8005654 <uip_process+0xe7c>
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
 80053b0:	4b6d      	ldr	r3, [pc, #436]	; (8005568 <uip_process+0xd90>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8093 	beq.w	80054e4 <uip_process+0xd0c>
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
 80053be:	4b6d      	ldr	r3, [pc, #436]	; (8005574 <uip_process+0xd9c>)
 80053c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if((uip_flags & UIP_ACKDATA) &&
 80053c8:	2b12      	cmp	r3, #18
 80053ca:	f040 808b 	bne.w	80054e4 <uip_process+0xd0c>

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
 80053ce:	4b69      	ldr	r3, [pc, #420]	; (8005574 <uip_process+0xd9c>)
 80053d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d8:	2b50      	cmp	r3, #80	; 0x50
 80053da:	dd64      	ble.n	80054a6 <uip_process+0xcce>
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 80053dc:	4b66      	ldr	r3, [pc, #408]	; (8005578 <uip_process+0xda0>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e050      	b.n	8005486 <uip_process+0xcae>
	  opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 80053e4:	4b64      	ldr	r3, [pc, #400]	; (8005578 <uip_process+0xda0>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	3336      	adds	r3, #54	; 0x36
 80053ea:	4a64      	ldr	r2, [pc, #400]	; (800557c <uip_process+0xda4>)
 80053ec:	5cd2      	ldrb	r2, [r2, r3]
 80053ee:	4b64      	ldr	r3, [pc, #400]	; (8005580 <uip_process+0xda8>)
 80053f0:	701a      	strb	r2, [r3, #0]
	  if(opt == TCP_OPT_END) {
 80053f2:	4b63      	ldr	r3, [pc, #396]	; (8005580 <uip_process+0xda8>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d052      	beq.n	80054a0 <uip_process+0xcc8>
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
 80053fa:	4b61      	ldr	r3, [pc, #388]	; (8005580 <uip_process+0xda8>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d106      	bne.n	8005410 <uip_process+0xc38>
	    ++c;
 8005402:	4b5d      	ldr	r3, [pc, #372]	; (8005578 <uip_process+0xda0>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <uip_process+0xda0>)
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e03a      	b.n	8005486 <uip_process+0xcae>
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
 8005410:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <uip_process+0xda8>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d124      	bne.n	8005462 <uip_process+0xc8a>
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 8005418:	4b57      	ldr	r3, [pc, #348]	; (8005578 <uip_process+0xda0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	3337      	adds	r3, #55	; 0x37
 800541e:	4a57      	ldr	r2, [pc, #348]	; (800557c <uip_process+0xda4>)
 8005420:	5cd3      	ldrb	r3, [r2, r3]
	  } else if(opt == TCP_OPT_MSS &&
 8005422:	2b04      	cmp	r3, #4
 8005424:	d11d      	bne.n	8005462 <uip_process+0xc8a>
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8005426:	4b54      	ldr	r3, [pc, #336]	; (8005578 <uip_process+0xda0>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	3338      	adds	r3, #56	; 0x38
 800542c:	4a53      	ldr	r2, [pc, #332]	; (800557c <uip_process+0xda4>)
 800542e:	5cd3      	ldrb	r3, [r2, r3]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	b21a      	sxth	r2, r3
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
 8005434:	4b50      	ldr	r3, [pc, #320]	; (8005578 <uip_process+0xda0>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	3339      	adds	r3, #57	; 0x39
 800543a:	4950      	ldr	r1, [pc, #320]	; (800557c <uip_process+0xda4>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	b21b      	sxth	r3, r3
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8005440:	4313      	orrs	r3, r2
 8005442:	b21b      	sxth	r3, r3
 8005444:	b29a      	uxth	r2, r3
 8005446:	4b4f      	ldr	r3, [pc, #316]	; (8005584 <uip_process+0xdac>)
 8005448:	801a      	strh	r2, [r3, #0]
	    uip_connr->initialmss =
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 800544a:	4b4e      	ldr	r3, [pc, #312]	; (8005584 <uip_process+0xdac>)
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005452:	bf28      	it	cs
 8005454:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005458:	b29b      	uxth	r3, r3
 800545a:	8263      	strh	r3, [r4, #18]
 800545c:	8a63      	ldrh	r3, [r4, #18]
	    uip_connr->initialmss =
 800545e:	82a3      	strh	r3, [r4, #20]

	    /* And we are done processing options. */
	    break;
 8005460:	e021      	b.n	80054a6 <uip_process+0xcce>
	  } else {
	    /* All other options have a length field, so that we easily
	       can skip past them. */
	    if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 8005462:	4b45      	ldr	r3, [pc, #276]	; (8005578 <uip_process+0xda0>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	3337      	adds	r3, #55	; 0x37
 8005468:	4a44      	ldr	r2, [pc, #272]	; (800557c <uip_process+0xda4>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d019      	beq.n	80054a4 <uip_process+0xccc>
	      /* If the length field is zero, the options are malformed
		 and we don't process them further. */
	      break;
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <uip_process+0xda0>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3337      	adds	r3, #55	; 0x37
 8005476:	4a41      	ldr	r2, [pc, #260]	; (800557c <uip_process+0xda4>)
 8005478:	5cd2      	ldrb	r2, [r2, r3]
 800547a:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <uip_process+0xda0>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	4413      	add	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4b3d      	ldr	r3, [pc, #244]	; (8005578 <uip_process+0xda0>)
 8005484:	701a      	strb	r2, [r3, #0]
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8005486:	4b3c      	ldr	r3, [pc, #240]	; (8005578 <uip_process+0xda0>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	4b39      	ldr	r3, [pc, #228]	; (8005574 <uip_process+0xd9c>)
 800548e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005492:	091b      	lsrs	r3, r3, #4
 8005494:	b2db      	uxtb	r3, r3
 8005496:	3b05      	subs	r3, #5
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	429a      	cmp	r2, r3
 800549c:	dba2      	blt.n	80053e4 <uip_process+0xc0c>
 800549e:	e002      	b.n	80054a6 <uip_process+0xcce>
	    break;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <uip_process+0xcce>
	      break;
 80054a4:	bf00      	nop
	  }
	}
      }
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 80054a6:	2303      	movs	r3, #3
 80054a8:	7663      	strb	r3, [r4, #25]
      uip_connr->rcv_nxt[0] = BUF->seqno[0];
 80054aa:	4b32      	ldr	r3, [pc, #200]	; (8005574 <uip_process+0xd9c>)
 80054ac:	7e1b      	ldrb	r3, [r3, #24]
 80054ae:	7223      	strb	r3, [r4, #8]
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
 80054b0:	4b30      	ldr	r3, [pc, #192]	; (8005574 <uip_process+0xd9c>)
 80054b2:	7e5b      	ldrb	r3, [r3, #25]
 80054b4:	7263      	strb	r3, [r4, #9]
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
 80054b6:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <uip_process+0xd9c>)
 80054b8:	7e9b      	ldrb	r3, [r3, #26]
 80054ba:	72a3      	strb	r3, [r4, #10]
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <uip_process+0xd9c>)
 80054be:	7edb      	ldrb	r3, [r3, #27]
 80054c0:	72e3      	strb	r3, [r4, #11]
      uip_add_rcv_nxt(1);
 80054c2:	2001      	movs	r0, #1
 80054c4:	f7ff f95e 	bl	8004784 <uip_add_rcv_nxt>
      uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <uip_process+0xd90>)
 80054ca:	2242      	movs	r2, #66	; 0x42
 80054cc:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	8223      	strh	r3, [r4, #16]
      uip_len = 0;
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <uip_process+0xd94>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	801a      	strh	r2, [r3, #0]
      uip_slen = 0;
 80054d8:	4b25      	ldr	r3, [pc, #148]	; (8005570 <uip_process+0xd98>)
 80054da:	2200      	movs	r2, #0
 80054dc:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 80054de:	f7fd fbc1 	bl	8002c64 <uipclient_appcall>
      goto appsend;
 80054e2:	e0b7      	b.n	8005654 <uip_process+0xe7c>
    }
    /* Inform the application that the connection failed */
    uip_flags = UIP_ABORT;
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <uip_process+0xd90>)
 80054e6:	2220      	movs	r2, #32
 80054e8:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 80054ea:	f7fd fbbb 	bl	8002c64 <uipclient_appcall>
    /* The connection is closed after we send the RST */
    uip_conn->tcpstateflags = UIP_CLOSED;
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <uip_process+0xdb0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	765a      	strb	r2, [r3, #25]
    goto reset;
 80054f6:	e4a4      	b.n	8004e42 <uip_process+0x66a>
    If the incoming packet is a FIN, we should close the connection on
    this side as well, and we send out a FIN and enter the LAST_ACK
    state. We require that there is no outstanding data; otherwise the
    sequence numbers will be screwed up. */

    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <uip_process+0xd9c>)
 80054fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d042      	beq.n	800558c <uip_process+0xdb4>
 8005506:	7e63      	ldrb	r3, [r4, #25]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d13d      	bne.n	800558c <uip_process+0xdb4>
      if(uip_outstanding(uip_connr)) {
 8005510:	8a23      	ldrh	r3, [r4, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 8254 	bne.w	80059c0 <uip_process+0x11e8>
	goto drop;
      }
      uip_add_rcv_nxt(1 + uip_len);
 8005518:	4b14      	ldr	r3, [pc, #80]	; (800556c <uip_process+0xd94>)
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	b29b      	uxth	r3, r3
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff f92f 	bl	8004784 <uip_add_rcv_nxt>
      uip_flags |= UIP_CLOSE;
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <uip_process+0xd90>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f043 0310 	orr.w	r3, r3, #16
 800552e:	b2da      	uxtb	r2, r3
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <uip_process+0xd90>)
 8005532:	701a      	strb	r2, [r3, #0]
      if(uip_len > 0) {
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <uip_process+0xd94>)
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <uip_process+0xd72>
	uip_flags |= UIP_NEWDATA;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <uip_process+0xd90>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	b2da      	uxtb	r2, r3
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <uip_process+0xd90>)
 8005548:	701a      	strb	r2, [r3, #0]
      }
      UIP_APPCALL();
 800554a:	f7fd fb8b 	bl	8002c64 <uipclient_appcall>
      uip_connr->len = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	8223      	strh	r3, [r4, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
 8005552:	2308      	movs	r3, #8
 8005554:	7663      	strb	r3, [r4, #25]
      uip_connr->nrtx = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	76e3      	strb	r3, [r4, #27]
 800555a:	e000      	b.n	800555e <uip_process+0xd86>
	    goto tcp_send_finack;
 800555c:	bf00      	nop
    tcp_send_finack:
      BUF->flags = TCP_FIN | TCP_ACK;
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <uip_process+0xd9c>)
 8005560:	2211      	movs	r2, #17
 8005562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      goto tcp_send_nodata;
 8005566:	e16a      	b.n	800583e <uip_process+0x1066>
 8005568:	20000410 	.word	0x20000410
 800556c:	20000404 	.word	0x20000404
 8005570:	20000518 	.word	0x20000518
 8005574:	200004c2 	.word	0x200004c2
 8005578:	2000038a 	.word	0x2000038a
 800557c:	200004b4 	.word	0x200004b4
 8005580:	2000038b 	.word	0x2000038b
 8005584:	2000038c 	.word	0x2000038c
 8005588:	2000041c 	.word	0x2000041c
    }

    /* Check the URG flag. If this is set, the segment carries urgent
       data that we must pass to the application. */
    if((BUF->flags & TCP_URG) != 0) {
 800558c:	4ba2      	ldr	r3, [pc, #648]	; (8005818 <uip_process+0x1040>)
 800558e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01e      	beq.n	80055d8 <uip_process+0xe00>
      uip_urgdata = uip_appdata;
      uip_appdata += uip_urglen;
    } else {
      uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 800559a:	4ba0      	ldr	r3, [pc, #640]	; (800581c <uip_process+0x1044>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a9e      	ldr	r2, [pc, #632]	; (8005818 <uip_process+0x1040>)
 80055a0:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 80055a4:	0212      	lsls	r2, r2, #8
 80055a6:	499c      	ldr	r1, [pc, #624]	; (8005818 <uip_process+0x1040>)
 80055a8:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80055ac:	430a      	orrs	r2, r1
 80055ae:	4413      	add	r3, r2
 80055b0:	4a9a      	ldr	r2, [pc, #616]	; (800581c <uip_process+0x1044>)
 80055b2:	6013      	str	r3, [r2, #0]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 80055b4:	4b9a      	ldr	r3, [pc, #616]	; (8005820 <uip_process+0x1048>)
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	4b97      	ldr	r3, [pc, #604]	; (8005818 <uip_process+0x1040>)
 80055ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b219      	sxth	r1, r3
 80055c2:	4b95      	ldr	r3, [pc, #596]	; (8005818 <uip_process+0x1040>)
 80055c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	430b      	orrs	r3, r1
 80055cc:	b21b      	sxth	r3, r3
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	4b92      	ldr	r3, [pc, #584]	; (8005820 <uip_process+0x1048>)
 80055d6:	801a      	strh	r2, [r3, #0]
    /* If uip_len > 0 we have TCP data in the packet, and we flag this
       by setting the UIP_NEWDATA flag and update the sequence number
       we acknowledge. If the application has stopped the dataflow
       using uip_stop(), we must not accept any data packets from the
       remote host. */
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 80055d8:	4b91      	ldr	r3, [pc, #580]	; (8005820 <uip_process+0x1048>)
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <uip_process+0xe2a>
 80055e0:	7e63      	ldrb	r3, [r4, #25]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <uip_process+0xe2a>
      uip_flags |= UIP_NEWDATA;
 80055ea:	4b8e      	ldr	r3, [pc, #568]	; (8005824 <uip_process+0x104c>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	4b8b      	ldr	r3, [pc, #556]	; (8005824 <uip_process+0x104c>)
 80055f6:	701a      	strb	r2, [r3, #0]
      uip_add_rcv_nxt(uip_len);
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <uip_process+0x1048>)
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff f8c1 	bl	8004784 <uip_add_rcv_nxt>
       the initial MSS so that the application will send an entire MSS
       of data. This data will not be acknowledged by the receiver,
       and the application will retransmit it. This is called the
       "persistent timer" and uses the retransmission mechanim.
    */
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
 8005602:	4b85      	ldr	r3, [pc, #532]	; (8005818 <uip_process+0x1040>)
 8005604:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005608:	b29b      	uxth	r3, r3
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	b29a      	uxth	r2, r3
 800560e:	4b82      	ldr	r3, [pc, #520]	; (8005818 <uip_process+0x1040>)
 8005610:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005614:	b29b      	uxth	r3, r3
 8005616:	4413      	add	r3, r2
 8005618:	b29a      	uxth	r2, r3
 800561a:	4b83      	ldr	r3, [pc, #524]	; (8005828 <uip_process+0x1050>)
 800561c:	801a      	strh	r2, [r3, #0]
    if(tmp16 > uip_connr->initialmss ||
 800561e:	8aa2      	ldrh	r2, [r4, #20]
 8005620:	4b81      	ldr	r3, [pc, #516]	; (8005828 <uip_process+0x1050>)
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d303      	bcc.n	8005630 <uip_process+0xe58>
       tmp16 == 0) {
 8005628:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <uip_process+0x1050>)
 800562a:	881b      	ldrh	r3, [r3, #0]
    if(tmp16 > uip_connr->initialmss ||
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <uip_process+0xe5e>
      tmp16 = uip_connr->initialmss;
 8005630:	8aa2      	ldrh	r2, [r4, #20]
 8005632:	4b7d      	ldr	r3, [pc, #500]	; (8005828 <uip_process+0x1050>)
 8005634:	801a      	strh	r2, [r3, #0]
    }
    uip_connr->mss = tmp16;
 8005636:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <uip_process+0x1050>)
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	8263      	strh	r3, [r4, #18]

       If the application wishes to send any data, this data should be
       put into the uip_appdata and the length of the data should be
       put into uip_len. If the application don't have any data to
       send, uip_len must be set to 0. */
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
 800563c:	4b79      	ldr	r3, [pc, #484]	; (8005824 <uip_process+0x104c>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81bd 	beq.w	80059c4 <uip_process+0x11ec>
      uip_slen = 0;
 800564a:	4b78      	ldr	r3, [pc, #480]	; (800582c <uip_process+0x1054>)
 800564c:	2200      	movs	r2, #0
 800564e:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 8005650:	f7fd fb08 	bl	8002c64 <uipclient_appcall>

    appsend:
      
      if(uip_flags & UIP_ABORT) {
 8005654:	4b73      	ldr	r3, [pc, #460]	; (8005824 <uip_process+0x104c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <uip_process+0xe9c>
	uip_slen = 0;
 8005660:	4b72      	ldr	r3, [pc, #456]	; (800582c <uip_process+0x1054>)
 8005662:	2200      	movs	r2, #0
 8005664:	801a      	strh	r2, [r3, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
 8005666:	2300      	movs	r3, #0
 8005668:	7663      	strb	r3, [r4, #25]
	BUF->flags = TCP_RST | TCP_ACK;
 800566a:	4b6b      	ldr	r3, [pc, #428]	; (8005818 <uip_process+0x1040>)
 800566c:	2214      	movs	r2, #20
 800566e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	goto tcp_send_nodata;
 8005672:	e0e4      	b.n	800583e <uip_process+0x1066>
      }

      if(uip_flags & UIP_CLOSE) {
 8005674:	4b6b      	ldr	r3, [pc, #428]	; (8005824 <uip_process+0x104c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00d      	beq.n	800569c <uip_process+0xec4>
	uip_slen = 0;
 8005680:	4b6a      	ldr	r3, [pc, #424]	; (800582c <uip_process+0x1054>)
 8005682:	2200      	movs	r2, #0
 8005684:	801a      	strh	r2, [r3, #0]
	uip_connr->len = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	8223      	strh	r3, [r4, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 800568a:	2304      	movs	r3, #4
 800568c:	7663      	strb	r3, [r4, #25]
	uip_connr->nrtx = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	76e3      	strb	r3, [r4, #27]
	BUF->flags = TCP_FIN | TCP_ACK;
 8005692:	4b61      	ldr	r3, [pc, #388]	; (8005818 <uip_process+0x1040>)
 8005694:	2211      	movs	r2, #17
 8005696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	goto tcp_send_nodata;
 800569a:	e0d0      	b.n	800583e <uip_process+0x1066>
      }

      /* If uip_slen > 0, the application has data to be sent. */
      if(uip_slen > 0) {
 800569c:	4b63      	ldr	r3, [pc, #396]	; (800582c <uip_process+0x1054>)
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <uip_process+0xf00>

	/* If the connection has acknowledged data, the contents of
	   the ->len variable should be discarded. */
	if((uip_flags & UIP_ACKDATA) != 0) {
 80056a4:	4b5f      	ldr	r3, [pc, #380]	; (8005824 <uip_process+0x104c>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <uip_process+0xedc>
	  uip_connr->len = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	8223      	strh	r3, [r4, #16]
	}

	/* If the ->len variable is non-zero the connection has
	   already data in transit and cannot send anymore right
	   now. */
	if(uip_connr->len == 0) {
 80056b4:	8a23      	ldrh	r3, [r4, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <uip_process+0xefa>

	  /* The application cannot send more than what is allowed by
	     the mss (the minumum of the MSS and the available
	     window). */
	  if(uip_slen > uip_connr->mss) {
 80056ba:	8a62      	ldrh	r2, [r4, #18]
 80056bc:	4b5b      	ldr	r3, [pc, #364]	; (800582c <uip_process+0x1054>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d202      	bcs.n	80056ca <uip_process+0xef2>
	    uip_slen = uip_connr->mss;
 80056c4:	8a62      	ldrh	r2, [r4, #18]
 80056c6:	4b59      	ldr	r3, [pc, #356]	; (800582c <uip_process+0x1054>)
 80056c8:	801a      	strh	r2, [r3, #0]
	  }

	  /* Remember how much data we send out now so that we know
	     when everything has been acknowledged. */
	  uip_connr->len = uip_slen;
 80056ca:	4b58      	ldr	r3, [pc, #352]	; (800582c <uip_process+0x1054>)
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	8223      	strh	r3, [r4, #16]
 80056d0:	e002      	b.n	80056d8 <uip_process+0xf00>
	} else {

	  /* If the application already had unacknowledged data, we
	     make sure that the application does not send (i.e.,
	     retransmit) out more than it previously sent out. */
	  uip_slen = uip_connr->len;
 80056d2:	8a22      	ldrh	r2, [r4, #16]
 80056d4:	4b55      	ldr	r3, [pc, #340]	; (800582c <uip_process+0x1054>)
 80056d6:	801a      	strh	r2, [r3, #0]
	}
      }
      uip_connr->nrtx = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	76e3      	strb	r3, [r4, #27]
    apprexmit:
      uip_appdata = uip_sappdata;
 80056dc:	4b54      	ldr	r3, [pc, #336]	; (8005830 <uip_process+0x1058>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a4e      	ldr	r2, [pc, #312]	; (800581c <uip_process+0x1044>)
 80056e2:	6013      	str	r3, [r2, #0]
      
      /* If the application has data to be sent, or if the incoming
         packet had new data in it, we must send out a packet. */
      if(uip_slen > 0 && uip_connr->len > 0) {
 80056e4:	4b51      	ldr	r3, [pc, #324]	; (800582c <uip_process+0x1054>)
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <uip_process+0xf2e>
 80056ec:	8a23      	ldrh	r3, [r4, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <uip_process+0xf2e>
	/* Add the length of the IP and TCP headers. */
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 80056f2:	8a23      	ldrh	r3, [r4, #16]
 80056f4:	3328      	adds	r3, #40	; 0x28
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	4b49      	ldr	r3, [pc, #292]	; (8005820 <uip_process+0x1048>)
 80056fa:	801a      	strh	r2, [r3, #0]
	/* We always set the ACK flag in response packets. */
	BUF->flags = TCP_ACK | TCP_PSH;
 80056fc:	4b46      	ldr	r3, [pc, #280]	; (8005818 <uip_process+0x1040>)
 80056fe:	2218      	movs	r2, #24
 8005700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	/* Send the packet. */
	goto tcp_send_noopts;
 8005704:	e09e      	b.n	8005844 <uip_process+0x106c>
      }
      /* If there is no data to send, just send out a pure ACK if
	 there is newdata. */
      if(uip_flags & UIP_NEWDATA) {
 8005706:	4b47      	ldr	r3, [pc, #284]	; (8005824 <uip_process+0x104c>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8158 	beq.w	80059c4 <uip_process+0x11ec>
	uip_len = UIP_TCPIP_HLEN;
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <uip_process+0x1048>)
 8005716:	2228      	movs	r2, #40	; 0x28
 8005718:	801a      	strh	r2, [r3, #0]
	BUF->flags = TCP_ACK;
 800571a:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <uip_process+0x1040>)
 800571c:	2210      	movs	r2, #16
 800571e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	goto tcp_send_noopts;
 8005722:	e08f      	b.n	8005844 <uip_process+0x106c>
    }
    goto drop;
  case UIP_LAST_ACK:
    /* We can close this connection if the peer has acknowledged our
       FIN. This is indicated by the UIP_ACKDATA flag. */
    if(uip_flags & UIP_ACKDATA) {
 8005724:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <uip_process+0x104c>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d06f      	beq.n	8005810 <uip_process+0x1038>
      uip_connr->tcpstateflags = UIP_CLOSED;
 8005730:	2300      	movs	r3, #0
 8005732:	7663      	strb	r3, [r4, #25]
      uip_flags = UIP_CLOSE;
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <uip_process+0x104c>)
 8005736:	2210      	movs	r2, #16
 8005738:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800573a:	f7fd fa93 	bl	8002c64 <uipclient_appcall>
    }
    break;
 800573e:	e067      	b.n	8005810 <uip_process+0x1038>
    
  case UIP_FIN_WAIT_1:
    /* The application has closed the connection, but the remote host
       hasn't closed its end yet. Thus we do nothing but wait for a
       FIN from the other side. */
    if(uip_len > 0) {
 8005740:	4b37      	ldr	r3, [pc, #220]	; (8005820 <uip_process+0x1048>)
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <uip_process+0xf7a>
      uip_add_rcv_nxt(uip_len);
 8005748:	4b35      	ldr	r3, [pc, #212]	; (8005820 <uip_process+0x1048>)
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff f819 	bl	8004784 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 8005752:	4b31      	ldr	r3, [pc, #196]	; (8005818 <uip_process+0x1040>)
 8005754:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <uip_process+0xfb8>
      if(uip_flags & UIP_ACKDATA) {
 8005760:	4b30      	ldr	r3, [pc, #192]	; (8005824 <uip_process+0x104c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <uip_process+0xfa2>
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
 800576c:	2307      	movs	r3, #7
 800576e:	7663      	strb	r3, [r4, #25]
	uip_connr->timer = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	76a3      	strb	r3, [r4, #26]
	uip_connr->len = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	8223      	strh	r3, [r4, #16]
 8005778:	e001      	b.n	800577e <uip_process+0xfa6>
      } else {
	uip_connr->tcpstateflags = UIP_CLOSING;
 800577a:	2306      	movs	r3, #6
 800577c:	7663      	strb	r3, [r4, #25]
      }
      uip_add_rcv_nxt(1);
 800577e:	2001      	movs	r0, #1
 8005780:	f7ff f800 	bl	8004784 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 8005784:	4b27      	ldr	r3, [pc, #156]	; (8005824 <uip_process+0x104c>)
 8005786:	2210      	movs	r2, #16
 8005788:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800578a:	f7fd fa6b 	bl	8002c64 <uipclient_appcall>
      goto tcp_send_ack;
 800578e:	e052      	b.n	8005836 <uip_process+0x105e>
    } else if(uip_flags & UIP_ACKDATA) {
 8005790:	4b24      	ldr	r3, [pc, #144]	; (8005824 <uip_process+0x104c>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <uip_process+0xfce>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 800579c:	2305      	movs	r3, #5
 800579e:	7663      	strb	r3, [r4, #25]
      uip_connr->len = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	8223      	strh	r3, [r4, #16]
      goto drop;
 80057a4:	e113      	b.n	80059ce <uip_process+0x11f6>
    }
    if(uip_len > 0) {
 80057a6:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <uip_process+0x1048>)
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 810c 	beq.w	80059c8 <uip_process+0x11f0>
      goto tcp_send_ack;
 80057b0:	e041      	b.n	8005836 <uip_process+0x105e>
    }
    goto drop;
      
  case UIP_FIN_WAIT_2:
    if(uip_len > 0) {
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <uip_process+0x1048>)
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <uip_process+0xfec>
      uip_add_rcv_nxt(uip_len);
 80057ba:	4b19      	ldr	r3, [pc, #100]	; (8005820 <uip_process+0x1048>)
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe ffe0 	bl	8004784 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 80057c4:	4b14      	ldr	r3, [pc, #80]	; (8005818 <uip_process+0x1040>)
 80057c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <uip_process+0x1014>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 80057d2:	2307      	movs	r3, #7
 80057d4:	7663      	strb	r3, [r4, #25]
      uip_connr->timer = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	76a3      	strb	r3, [r4, #26]
      uip_add_rcv_nxt(1);
 80057da:	2001      	movs	r0, #1
 80057dc:	f7fe ffd2 	bl	8004784 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <uip_process+0x104c>)
 80057e2:	2210      	movs	r2, #16
 80057e4:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 80057e6:	f7fd fa3d 	bl	8002c64 <uipclient_appcall>
      goto tcp_send_ack;
 80057ea:	e024      	b.n	8005836 <uip_process+0x105e>
    }
    if(uip_len > 0) {
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <uip_process+0x1048>)
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80eb 	beq.w	80059cc <uip_process+0x11f4>
      goto tcp_send_ack;
 80057f6:	e01e      	b.n	8005836 <uip_process+0x105e>

  case UIP_TIME_WAIT:
    goto tcp_send_ack;
    
  case UIP_CLOSING:
    if(uip_flags & UIP_ACKDATA) {
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <uip_process+0x104c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80d9 	beq.w	80059b8 <uip_process+0x11e0>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8005806:	2307      	movs	r3, #7
 8005808:	7663      	strb	r3, [r4, #25]
      uip_connr->timer = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	76a3      	strb	r3, [r4, #26]
    }
  }
  goto drop;
 800580e:	e0d3      	b.n	80059b8 <uip_process+0x11e0>
    break;
 8005810:	bf00      	nop
  goto drop;
 8005812:	e0d1      	b.n	80059b8 <uip_process+0x11e0>
      goto tcp_send_ack;
 8005814:	bf00      	nop
 8005816:	e00e      	b.n	8005836 <uip_process+0x105e>
 8005818:	200004c2 	.word	0x200004c2
 800581c:	20000418 	.word	0x20000418
 8005820:	20000404 	.word	0x20000404
 8005824:	20000410 	.word	0x20000410
 8005828:	2000038c 	.word	0x2000038c
 800582c:	20000518 	.word	0x20000518
 8005830:	20000408 	.word	0x20000408
    goto tcp_send_ack;
 8005834:	bf00      	nop
  

  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  BUF->flags = TCP_ACK;
 8005836:	4b6b      	ldr	r3, [pc, #428]	; (80059e4 <uip_process+0x120c>)
 8005838:	2210      	movs	r2, #16
 800583a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
 800583e:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <uip_process+0x1210>)
 8005840:	2228      	movs	r2, #40	; 0x28
 8005842:	801a      	strh	r2, [r3, #0]
 tcp_send_noopts:
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 8005844:	4b67      	ldr	r3, [pc, #412]	; (80059e4 <uip_process+0x120c>)
 8005846:	2250      	movs	r2, #80	; 0x50
 8005848:	f883 2020 	strb.w	r2, [r3, #32]
 tcp_send:
  /* We're done with the input processing. We are now ready to send a
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 800584c:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <uip_process+0x120c>)
 800584e:	7a22      	ldrb	r2, [r4, #8]
 8005850:	771a      	strb	r2, [r3, #28]
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8005852:	4b64      	ldr	r3, [pc, #400]	; (80059e4 <uip_process+0x120c>)
 8005854:	7a62      	ldrb	r2, [r4, #9]
 8005856:	775a      	strb	r2, [r3, #29]
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8005858:	4b62      	ldr	r3, [pc, #392]	; (80059e4 <uip_process+0x120c>)
 800585a:	7aa2      	ldrb	r2, [r4, #10]
 800585c:	779a      	strb	r2, [r3, #30]
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 800585e:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <uip_process+0x120c>)
 8005860:	7ae2      	ldrb	r2, [r4, #11]
 8005862:	77da      	strb	r2, [r3, #31]
  
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 8005864:	4b5f      	ldr	r3, [pc, #380]	; (80059e4 <uip_process+0x120c>)
 8005866:	7b22      	ldrb	r2, [r4, #12]
 8005868:	761a      	strb	r2, [r3, #24]
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 800586a:	4b5e      	ldr	r3, [pc, #376]	; (80059e4 <uip_process+0x120c>)
 800586c:	7b62      	ldrb	r2, [r4, #13]
 800586e:	765a      	strb	r2, [r3, #25]
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 8005870:	4b5c      	ldr	r3, [pc, #368]	; (80059e4 <uip_process+0x120c>)
 8005872:	7ba2      	ldrb	r2, [r4, #14]
 8005874:	769a      	strb	r2, [r3, #26]
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 8005876:	4b5b      	ldr	r3, [pc, #364]	; (80059e4 <uip_process+0x120c>)
 8005878:	7be2      	ldrb	r2, [r4, #15]
 800587a:	76da      	strb	r2, [r3, #27]

  BUF->proto = UIP_PROTO_TCP;
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <uip_process+0x120c>)
 800587e:	2206      	movs	r2, #6
 8005880:	725a      	strb	r2, [r3, #9]
  
  BUF->srcport  = uip_connr->lport;
 8005882:	4b58      	ldr	r3, [pc, #352]	; (80059e4 <uip_process+0x120c>)
 8005884:	88a2      	ldrh	r2, [r4, #4]
 8005886:	829a      	strh	r2, [r3, #20]
  BUF->destport = uip_connr->rport;
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <uip_process+0x120c>)
 800588a:	88e2      	ldrh	r2, [r4, #6]
 800588c:	82da      	strh	r2, [r3, #22]

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 800588e:	4b57      	ldr	r3, [pc, #348]	; (80059ec <uip_process+0x1214>)
 8005890:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <uip_process+0x1218>)
 8005892:	8812      	ldrh	r2, [r2, #0]
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <uip_process+0x121c>)
 8005898:	4a55      	ldr	r2, [pc, #340]	; (80059f0 <uip_process+0x1218>)
 800589a:	8852      	ldrh	r2, [r2, #2]
 800589c:	801a      	strh	r2, [r3, #0]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
 800589e:	4b56      	ldr	r3, [pc, #344]	; (80059f8 <uip_process+0x1220>)
 80058a0:	8822      	ldrh	r2, [r4, #0]
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	4b55      	ldr	r3, [pc, #340]	; (80059fc <uip_process+0x1224>)
 80058a6:	8862      	ldrh	r2, [r4, #2]
 80058a8:	801a      	strh	r2, [r3, #0]

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
 80058aa:	7e63      	ldrb	r3, [r4, #25]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <uip_process+0x10f0>
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    BUF->wnd[0] = BUF->wnd[1] = 0;
 80058b4:	4b4b      	ldr	r3, [pc, #300]	; (80059e4 <uip_process+0x120c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80058bc:	4a49      	ldr	r2, [pc, #292]	; (80059e4 <uip_process+0x120c>)
 80058be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80058c2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 80058c6:	e007      	b.n	80058d8 <uip_process+0x1100>
  } else {
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 80058c8:	4b46      	ldr	r3, [pc, #280]	; (80059e4 <uip_process+0x120c>)
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 80058d0:	4b44      	ldr	r3, [pc, #272]	; (80059e4 <uip_process+0x120c>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  }

 tcp_send_noconn:
  BUF->ttl = UIP_TTL;
 80058d8:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <uip_process+0x120c>)
 80058da:	2240      	movs	r2, #64	; 0x40
 80058dc:	721a      	strb	r2, [r3, #8]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 80058de:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <uip_process+0x1210>)
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <uip_process+0x120c>)
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	709a      	strb	r2, [r3, #2]
  BUF->len[1] = (uip_len & 0xff);
 80058ec:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <uip_process+0x1210>)
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <uip_process+0x120c>)
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	70da      	strb	r2, [r3, #3]
#endif /* UIP_CONF_IPV6 */

  BUF->urgp[0] = BUF->urgp[1] = 0;
 80058f6:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <uip_process+0x120c>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80058fe:	4a39      	ldr	r2, [pc, #228]	; (80059e4 <uip_process+0x120c>)
 8005900:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005904:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
  
  /* Calculate TCP checksum. */
  BUF->tcpchksum = 0;
 8005908:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <uip_process+0x120c>)
 800590a:	2200      	movs	r2, #0
 800590c:	849a      	strh	r2, [r3, #36]	; 0x24
  BUF->tcpchksum = ~(uip_tcpchksum());
 800590e:	f7fd fc8f 	bl	8003230 <uip_tcpchksum>
 8005912:	4603      	mov	r3, r0
 8005914:	461a      	mov	r2, r3
 8005916:	4b33      	ldr	r3, [pc, #204]	; (80059e4 <uip_process+0x120c>)
 8005918:	43d2      	mvns	r2, r2
 800591a:	b292      	uxth	r2, r2
 800591c:	849a      	strh	r2, [r3, #36]	; 0x24
 800591e:	e000      	b.n	8005922 <uip_process+0x114a>
  goto ip_send_nolen;
 8005920:	bf00      	nop
#if UIP_CONF_IPV6
  BUF->vtc = 0x60;
  BUF->tcflow = 0x00;
  BUF->flow = 0x00;
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
 8005922:	4b30      	ldr	r3, [pc, #192]	; (80059e4 <uip_process+0x120c>)
 8005924:	2245      	movs	r2, #69	; 0x45
 8005926:	701a      	strb	r2, [r3, #0]
  BUF->tos = 0;
 8005928:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <uip_process+0x120c>)
 800592a:	2200      	movs	r2, #0
 800592c:	705a      	strb	r2, [r3, #1]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 800592e:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <uip_process+0x120c>)
 8005930:	2200      	movs	r2, #0
 8005932:	71da      	strb	r2, [r3, #7]
 8005934:	4a2b      	ldr	r2, [pc, #172]	; (80059e4 <uip_process+0x120c>)
 8005936:	79db      	ldrb	r3, [r3, #7]
 8005938:	7193      	strb	r3, [r2, #6]
  ++ipid;
 800593a:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <uip_process+0x1228>)
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <uip_process+0x1228>)
 8005944:	801a      	strh	r2, [r3, #0]
  BUF->ipid[0] = ipid >> 8;
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <uip_process+0x1228>)
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	b29a      	uxth	r2, r3
 800594e:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <uip_process+0x120c>)
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	711a      	strb	r2, [r3, #4]
  BUF->ipid[1] = ipid & 0xff;
 8005954:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <uip_process+0x1228>)
 8005956:	881a      	ldrh	r2, [r3, #0]
 8005958:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <uip_process+0x120c>)
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	715a      	strb	r2, [r3, #5]
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
 800595e:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <uip_process+0x120c>)
 8005960:	2200      	movs	r2, #0
 8005962:	815a      	strh	r2, [r3, #10]
  BUF->ipchksum = ~(uip_ipchksum());
 8005964:	f7fd fc62 	bl	800322c <uip_ipchksum>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <uip_process+0x120c>)
 800596e:	43d2      	mvns	r2, r2
 8005970:	b292      	uxth	r2, r2
 8005972:	815a      	strh	r2, [r3, #10]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
	       (BUF->len[0] << 8) | BUF->len[1]);
  
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
 8005974:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <uip_process+0x122c>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
  return;
 800597a:	e02f      	b.n	80059dc <uip_process+0x1204>
    goto drop;
 800597c:	bf00      	nop
 800597e:	e026      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 8005980:	bf00      	nop
 8005982:	e024      	b.n	80059ce <uip_process+0x11f6>
      goto drop;
 8005984:	bf00      	nop
 8005986:	e022      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 8005988:	bf00      	nop
 800598a:	e020      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 800598c:	bf00      	nop
 800598e:	e01e      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 8005990:	bf00      	nop
 8005992:	e01c      	b.n	80059ce <uip_process+0x11f6>
      goto drop;
 8005994:	bf00      	nop
 8005996:	e01a      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 8005998:	bf00      	nop
 800599a:	e018      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 800599c:	bf00      	nop
 800599e:	e016      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059a0:	bf00      	nop
 80059a2:	e014      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059a4:	bf00      	nop
 80059a6:	e012      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059a8:	bf00      	nop
 80059aa:	e010      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059ac:	bf00      	nop
 80059ae:	e00e      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059b0:	bf00      	nop
 80059b2:	e00c      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059b4:	bf00      	nop
 80059b6:	e00a      	b.n	80059ce <uip_process+0x11f6>
  goto drop;
 80059b8:	bf00      	nop
 80059ba:	e008      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059bc:	bf00      	nop
 80059be:	e006      	b.n	80059ce <uip_process+0x11f6>
	goto drop;
 80059c0:	bf00      	nop
 80059c2:	e004      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059c4:	bf00      	nop
 80059c6:	e002      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <uip_process+0x11f6>
    goto drop;
 80059cc:	bf00      	nop
 drop:
  uip_len = 0;
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <uip_process+0x1210>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	801a      	strh	r2, [r3, #0]
  uip_flags = 0;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <uip_process+0x122c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
  return;
 80059da:	bf00      	nop
}
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200004c2 	.word	0x200004c2
 80059e8:	20000404 	.word	0x20000404
 80059ec:	200004ce 	.word	0x200004ce
 80059f0:	200004b0 	.word	0x200004b0
 80059f4:	200004d0 	.word	0x200004d0
 80059f8:	200004d2 	.word	0x200004d2
 80059fc:	200004d4 	.word	0x200004d4
 8005a00:	20000382 	.word	0x20000382
 8005a04:	20000410 	.word	0x20000410

08005a08 <htons>:
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80fb      	strh	r3, [r7, #6]
  return HTONS(val);
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	b21a      	sxth	r2, r3
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	b21b      	sxth	r3, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b21b      	sxth	r3, r3
 8005a24:	b29b      	uxth	r3, r3
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uip_slen = len;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <uip_send+0x3c>)
 8005a40:	801a      	strh	r2, [r3, #0]
  if(len > 0) {
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dd0c      	ble.n	8005a62 <uip_send+0x32>
    if(data != uip_sappdata) {
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <uip_send+0x40>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d007      	beq.n	8005a62 <uip_send+0x32>
      memcpy(uip_sappdata, (data), uip_slen);
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <uip_send+0x40>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <uip_send+0x3c>)
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fb65 	bl	800612c <memcpy>
    }
  }
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000518 	.word	0x20000518
 8005a70:	20000408 	.word	0x20000408

08005a74 <uip_arp_init>:
 *
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <uip_arp_init+0x44>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e013      	b.n	8005aa8 <uip_arp_init+0x34>
    memset(arp_table[i].ipaddr, 0, 4);
 8005a80:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <uip_arp_init+0x44>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <uip_arp_init+0x48>)
 8005a90:	4413      	add	r3, r2
 8005a92:	2204      	movs	r2, #4
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fb56 	bl	8006148 <memset>
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <uip_arp_init+0x44>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <uip_arp_init+0x44>)
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <uip_arp_init+0x44>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b07      	cmp	r3, #7
 8005aae:	d9e7      	bls.n	8005a80 <uip_arp_init+0xc>
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200003f4 	.word	0x200003f4
 8005abc:	20000390 	.word	0x20000390

08005ac0 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <uip_arp_update+0x150>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e029      	b.n	8005b26 <uip_arp_update+0x66>

    tabptr = &arp_table[i];
 8005ad2:	4b4f      	ldr	r3, [pc, #316]	; (8005c10 <uip_arp_update+0x150>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a4c      	ldr	r2, [pc, #304]	; (8005c14 <uip_arp_update+0x154>)
 8005ae2:	189c      	adds	r4, r3, r2
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
 8005ae4:	8823      	ldrh	r3, [r4, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d017      	beq.n	8005b1a <uip_arp_update+0x5a>
       tabptr->ipaddr[1] != 0) {
 8005aea:	8863      	ldrh	r3, [r4, #2]
    if(tabptr->ipaddr[0] != 0 &&
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d014      	beq.n	8005b1a <uip_arp_update+0x5a>

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	8823      	ldrh	r3, [r4, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d10f      	bne.n	8005b1a <uip_arp_update+0x5a>
	 ipaddr[1] == tabptr->ipaddr[1]) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3302      	adds	r3, #2
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	8863      	ldrh	r3, [r4, #2]
      if(ipaddr[0] == tabptr->ipaddr[0] &&
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d109      	bne.n	8005b1a <uip_arp_update+0x5a>
	 
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8005b06:	1d23      	adds	r3, r4, #4
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	2206      	movs	r2, #6
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fb0d 	bl	800612c <memcpy>
	tabptr->time = arptime;
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <uip_arp_update+0x158>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	72a3      	strb	r3, [r4, #10]

	return;
 8005b18:	e077      	b.n	8005c0a <uip_arp_update+0x14a>
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005b1a:	4b3d      	ldr	r3, [pc, #244]	; (8005c10 <uip_arp_update+0x150>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	4b3b      	ldr	r3, [pc, #236]	; (8005c10 <uip_arp_update+0x150>)
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	4b3a      	ldr	r3, [pc, #232]	; (8005c10 <uip_arp_update+0x150>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b07      	cmp	r3, #7
 8005b2c:	d9d1      	bls.n	8005ad2 <uip_arp_update+0x12>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005b2e:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <uip_arp_update+0x150>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e014      	b.n	8005b60 <uip_arp_update+0xa0>
    tabptr = &arp_table[i];
 8005b36:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <uip_arp_update+0x150>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4a33      	ldr	r2, [pc, #204]	; (8005c14 <uip_arp_update+0x154>)
 8005b46:	189c      	adds	r4, r3, r2
    if(tabptr->ipaddr[0] == 0 &&
 8005b48:	8823      	ldrh	r3, [r4, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <uip_arp_update+0x94>
       tabptr->ipaddr[1] == 0) {
 8005b4e:	8863      	ldrh	r3, [r4, #2]
    if(tabptr->ipaddr[0] == 0 &&
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <uip_arp_update+0xaa>
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005b54:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <uip_arp_update+0x150>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <uip_arp_update+0x150>)
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <uip_arp_update+0x150>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b07      	cmp	r3, #7
 8005b66:	d9e6      	bls.n	8005b36 <uip_arp_update+0x76>
 8005b68:	e000      	b.n	8005b6c <uip_arp_update+0xac>
      break;
 8005b6a:	bf00      	nop
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
 8005b6c:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <uip_arp_update+0x150>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d13d      	bne.n	8005bf0 <uip_arp_update+0x130>
    tmpage = 0;
 8005b74:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <uip_arp_update+0x15c>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
    c = 0;
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <uip_arp_update+0x160>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005b80:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <uip_arp_update+0x150>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e022      	b.n	8005bce <uip_arp_update+0x10e>
      tabptr = &arp_table[i];
 8005b88:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <uip_arp_update+0x150>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <uip_arp_update+0x154>)
 8005b98:	189c      	adds	r4, r3, r2
      if(arptime - tabptr->time > tmpage) {
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <uip_arp_update+0x158>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	7aa3      	ldrb	r3, [r4, #10]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <uip_arp_update+0x15c>)
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	dd0a      	ble.n	8005bc2 <uip_arp_update+0x102>
	tmpage = arptime - tabptr->time;
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <uip_arp_update+0x158>)
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	7aa3      	ldrb	r3, [r4, #10]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <uip_arp_update+0x15c>)
 8005bb8:	701a      	strb	r2, [r3, #0]
	c = i;
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <uip_arp_update+0x150>)
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <uip_arp_update+0x160>)
 8005bc0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <uip_arp_update+0x150>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <uip_arp_update+0x150>)
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <uip_arp_update+0x150>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b07      	cmp	r3, #7
 8005bd4:	d9d8      	bls.n	8005b88 <uip_arp_update+0xc8>
      }
    }
    i = c;
 8005bd6:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <uip_arp_update+0x160>)
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <uip_arp_update+0x150>)
 8005bdc:	701a      	strb	r2, [r3, #0]
    tabptr = &arp_table[i];
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <uip_arp_update+0x150>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	4613      	mov	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <uip_arp_update+0x154>)
 8005bee:	189c      	adds	r4, r3, r2
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6013      	str	r3, [r2, #0]
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8005bf8:	1d23      	adds	r3, r4, #4
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	2206      	movs	r2, #6
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fa94 	bl	800612c <memcpy>
  tabptr->time = arptime;
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <uip_arp_update+0x158>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	72a3      	strb	r3, [r4, #10]
}
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}
 8005c10:	200003f4 	.word	0x200003f4
 8005c14:	20000390 	.word	0x20000390
 8005c18:	200003f6 	.word	0x200003f6
 8005c1c:	200003f7 	.word	0x200003f7
 8005c20:	200003f5 	.word	0x200003f5

08005c24 <uip_arp_ipin>:
 */
/*-----------------------------------------------------------------------------------*/
//#if 0
void
uip_arp_ipin(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  uip_len -= sizeof(struct uip_eth_hdr);
 8005c2a:	4b32      	ldr	r3, [pc, #200]	; (8005cf4 <uip_arp_ipin+0xd0>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	3b0e      	subs	r3, #14
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	4b30      	ldr	r3, [pc, #192]	; (8005cf4 <uip_arp_ipin+0xd0>)
 8005c34:	801a      	strh	r2, [r3, #0]
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
 8005c36:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <uip_arp_ipin+0xd4>)
 8005c38:	8b5a      	ldrh	r2, [r3, #26]
     (uip_hostaddr[0] & uip_netmask[0])) {
 8005c3a:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <uip_arp_ipin+0xd8>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
 8005c3e:	4053      	eors	r3, r2
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	4b2f      	ldr	r3, [pc, #188]	; (8005d00 <uip_arp_ipin+0xdc>)
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	4013      	ands	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d14b      	bne.n	8005ce6 <uip_arp_ipin+0xc2>
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
 8005c4e:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <uip_arp_ipin+0xd4>)
 8005c50:	8b9a      	ldrh	r2, [r3, #28]
     (uip_hostaddr[1] & uip_netmask[1])) {
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <uip_arp_ipin+0xd8>)
 8005c54:	885b      	ldrh	r3, [r3, #2]
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
 8005c56:	4053      	eors	r3, r2
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <uip_arp_ipin+0xdc>)
 8005c5c:	885b      	ldrh	r3, [r3, #2]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d141      	bne.n	8005cea <uip_arp_ipin+0xc6>
  }
  /* Insert the entry only if it was ment for us (not broadcast) or already appears in the table */
#if UIP_ADD_ALL_BROADCAST_TO_ARP
  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
#else 
  if(uip_ipaddr_cmp(IPBUF->destipaddr, uip_hostaddr)) {
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <uip_arp_ipin+0xe0>)
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <uip_arp_ipin+0xd8>)
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d10c      	bne.n	8005c8c <uip_arp_ipin+0x68>
 8005c72:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <uip_arp_ipin+0xe4>)
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <uip_arp_ipin+0xd8>)
 8005c78:	885b      	ldrh	r3, [r3, #2]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d106      	bne.n	8005c8c <uip_arp_ipin+0x68>
    uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <uip_arp_ipin+0xe8>)
 8005c80:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <uip_arp_ipin+0xec>)
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff ff1b 	bl	8005ac0 <uip_arp_update>
 8005c8a:	e02b      	b.n	8005ce4 <uip_arp_ipin+0xc0>
  } else {
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005c8c:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <uip_arp_ipin+0xf0>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e022      	b.n	8005cda <uip_arp_ipin+0xb6>
      struct arp_entry *tabptr = &arp_table[i];
 8005c94:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <uip_arp_ipin+0xf0>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <uip_arp_ipin+0xf4>)
 8005ca4:	4413      	add	r3, r2
 8005ca6:	607b      	str	r3, [r7, #4]
      if(uip_ipaddr_cmp(IPBUF->srcipaddr, tabptr->ipaddr)) {
 8005ca8:	4b18      	ldr	r3, [pc, #96]	; (8005d0c <uip_arp_ipin+0xe8>)
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d10c      	bne.n	8005cce <uip_arp_ipin+0xaa>
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <uip_arp_ipin+0xf8>)
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	885b      	ldrh	r3, [r3, #2]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d106      	bne.n	8005cce <uip_arp_ipin+0xaa>
        uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <uip_arp_ipin+0xe8>)
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <uip_arp_ipin+0xec>)
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fefa 	bl	8005ac0 <uip_arp_update>
	break;
 8005ccc:	e00a      	b.n	8005ce4 <uip_arp_ipin+0xc0>
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <uip_arp_ipin+0xf0>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <uip_arp_ipin+0xf0>)
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <uip_arp_ipin+0xf0>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b07      	cmp	r3, #7
 8005ce0:	d9d8      	bls.n	8005c94 <uip_arp_ipin+0x70>
      }
    }
  }
#endif  
  return;
 8005ce2:	e003      	b.n	8005cec <uip_arp_ipin+0xc8>
 8005ce4:	e002      	b.n	8005cec <uip_arp_ipin+0xc8>
    return;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <uip_arp_ipin+0xc8>
    return;
 8005cea:	bf00      	nop
}
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000404 	.word	0x20000404
 8005cf8:	200004b4 	.word	0x200004b4
 8005cfc:	200004b0 	.word	0x200004b0
 8005d00:	200004ac 	.word	0x200004ac
 8005d04:	200004d2 	.word	0x200004d2
 8005d08:	200004d4 	.word	0x200004d4
 8005d0c:	200004ce 	.word	0x200004ce
 8005d10:	200004ba 	.word	0x200004ba
 8005d14:	200003f4 	.word	0x200003f4
 8005d18:	20000390 	.word	0x20000390
 8005d1c:	200004d0 	.word	0x200004d0

08005d20 <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  
  if(uip_len < sizeof(struct arp_hdr)) {
 8005d24:	4b38      	ldr	r3, [pc, #224]	; (8005e08 <uip_arp_arpin+0xe8>)
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b29      	cmp	r3, #41	; 0x29
 8005d2a:	d803      	bhi.n	8005d34 <uip_arp_arpin+0x14>
    uip_len = 0;
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <uip_arp_arpin+0xe8>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	801a      	strh	r2, [r3, #0]
    return;
 8005d32:	e068      	b.n	8005e06 <uip_arp_arpin+0xe6>
  }
  uip_len = 0;
 8005d34:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <uip_arp_arpin+0xe8>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	801a      	strh	r2, [r3, #0]
  
  switch(BUF->opcode) {
 8005d3a:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <uip_arp_arpin+0xec>)
 8005d3c:	8a9b      	ldrh	r3, [r3, #20]
 8005d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d42:	d003      	beq.n	8005d4c <uip_arp_arpin+0x2c>
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d48:	d046      	beq.n	8005dd8 <uip_arp_arpin+0xb8>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    }
    break;
  }

  return;
 8005d4a:	e05b      	b.n	8005e04 <uip_arp_arpin+0xe4>
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 8005d4c:	4b30      	ldr	r3, [pc, #192]	; (8005e10 <uip_arp_arpin+0xf0>)
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <uip_arp_arpin+0xf4>)
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d152      	bne.n	8005dfe <uip_arp_arpin+0xde>
 8005d58:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <uip_arp_arpin+0xf8>)
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <uip_arp_arpin+0xf4>)
 8005d5e:	885b      	ldrh	r3, [r3, #2]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d14c      	bne.n	8005dfe <uip_arp_arpin+0xde>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 8005d64:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <uip_arp_arpin+0xfc>)
 8005d66:	4a2e      	ldr	r2, [pc, #184]	; (8005e20 <uip_arp_arpin+0x100>)
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fea8 	bl	8005ac0 <uip_arp_update>
      BUF->opcode = HTONS(2);
 8005d70:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <uip_arp_arpin+0xec>)
 8005d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d76:	829a      	strh	r2, [r3, #20]
      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 8005d78:	4b2a      	ldr	r3, [pc, #168]	; (8005e24 <uip_arp_arpin+0x104>)
 8005d7a:	4929      	ldr	r1, [pc, #164]	; (8005e20 <uip_arp_arpin+0x100>)
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f9d4 	bl	800612c <memcpy>
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 8005d84:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <uip_arp_arpin+0x100>)
 8005d86:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <uip_arp_arpin+0x108>)
 8005d88:	6811      	ldr	r1, [r2, #0]
 8005d8a:	6019      	str	r1, [r3, #0]
 8005d8c:	8892      	ldrh	r2, [r2, #4]
 8005d8e:	809a      	strh	r2, [r3, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 8005d90:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <uip_arp_arpin+0x10c>)
 8005d92:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <uip_arp_arpin+0x108>)
 8005d94:	6811      	ldr	r1, [r2, #0]
 8005d96:	6019      	str	r1, [r3, #0]
 8005d98:	8892      	ldrh	r2, [r2, #4]
 8005d9a:	809a      	strh	r2, [r3, #4]
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 8005d9c:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <uip_arp_arpin+0x104>)
 8005d9e:	2206      	movs	r2, #6
 8005da0:	4619      	mov	r1, r3
 8005da2:	481a      	ldr	r0, [pc, #104]	; (8005e0c <uip_arp_arpin+0xec>)
 8005da4:	f000 f9c2 	bl	800612c <memcpy>
      BUF->dipaddr[0] = BUF->sipaddr[0];
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <uip_arp_arpin+0xec>)
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <uip_arp_arpin+0xec>)
 8005dac:	8b92      	ldrh	r2, [r2, #28]
 8005dae:	84da      	strh	r2, [r3, #38]	; 0x26
      BUF->dipaddr[1] = BUF->sipaddr[1];
 8005db0:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <uip_arp_arpin+0xec>)
 8005db2:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <uip_arp_arpin+0xec>)
 8005db4:	8bd2      	ldrh	r2, [r2, #30]
 8005db6:	851a      	strh	r2, [r3, #40]	; 0x28
      BUF->sipaddr[0] = uip_hostaddr[0];
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <uip_arp_arpin+0xec>)
 8005dba:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <uip_arp_arpin+0xf4>)
 8005dbc:	8812      	ldrh	r2, [r2, #0]
 8005dbe:	839a      	strh	r2, [r3, #28]
      BUF->sipaddr[1] = uip_hostaddr[1];
 8005dc0:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <uip_arp_arpin+0xec>)
 8005dc2:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <uip_arp_arpin+0xf4>)
 8005dc4:	8852      	ldrh	r2, [r2, #2]
 8005dc6:	83da      	strh	r2, [r3, #30]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <uip_arp_arpin+0xec>)
 8005dca:	f44f 62c1 	mov.w	r2, #1544	; 0x608
 8005dce:	819a      	strh	r2, [r3, #12]
      uip_len = sizeof(struct arp_hdr);
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <uip_arp_arpin+0xe8>)
 8005dd2:	222a      	movs	r2, #42	; 0x2a
 8005dd4:	801a      	strh	r2, [r3, #0]
    break;
 8005dd6:	e012      	b.n	8005dfe <uip_arp_arpin+0xde>
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <uip_arp_arpin+0xf0>)
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <uip_arp_arpin+0xf4>)
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d10e      	bne.n	8005e02 <uip_arp_arpin+0xe2>
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <uip_arp_arpin+0xf8>)
 8005de6:	881a      	ldrh	r2, [r3, #0]
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <uip_arp_arpin+0xf4>)
 8005dea:	885b      	ldrh	r3, [r3, #2]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d108      	bne.n	8005e02 <uip_arp_arpin+0xe2>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <uip_arp_arpin+0xfc>)
 8005df2:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <uip_arp_arpin+0x100>)
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fe62 	bl	8005ac0 <uip_arp_update>
    break;
 8005dfc:	e001      	b.n	8005e02 <uip_arp_arpin+0xe2>
    break;
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <uip_arp_arpin+0xe4>
    break;
 8005e02:	bf00      	nop
  return;
 8005e04:	bf00      	nop
}
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000404 	.word	0x20000404
 8005e0c:	200004b4 	.word	0x200004b4
 8005e10:	200004da 	.word	0x200004da
 8005e14:	200004b0 	.word	0x200004b0
 8005e18:	200004dc 	.word	0x200004dc
 8005e1c:	200004d0 	.word	0x200004d0
 8005e20:	200004ca 	.word	0x200004ca
 8005e24:	200004d4 	.word	0x200004d4
 8005e28:	2000037c 	.word	0x2000037c
 8005e2c:	200004ba 	.word	0x200004ba

08005e30 <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)
 8005e36:	4b7e      	ldr	r3, [pc, #504]	; (8006030 <uip_arp_out+0x200>)
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	4b7e      	ldr	r3, [pc, #504]	; (8006034 <uip_arp_out+0x204>)
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d105      	bne.n	8005e4e <uip_arp_out+0x1e>
 8005e42:	4b7d      	ldr	r3, [pc, #500]	; (8006038 <uip_arp_out+0x208>)
 8005e44:	881a      	ldrh	r2, [r3, #0]
 8005e46:	4b7d      	ldr	r3, [pc, #500]	; (800603c <uip_arp_out+0x20c>)
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d019      	beq.n	8005e82 <uip_arp_out+0x52>
        || ((IPBUF->destipaddr[0]==(uip_hostaddr[0] | (0xFFFF&(~uip_netmask[0])))) && (IPBUF->destipaddr[1]==(uip_hostaddr[1] | (0XFFFF&(~uip_netmask[1]))))) //Local Broatcast  
 8005e4e:	4b7c      	ldr	r3, [pc, #496]	; (8006040 <uip_arp_out+0x210>)
 8005e50:	8bdb      	ldrh	r3, [r3, #30]
 8005e52:	461a      	mov	r2, r3
 8005e54:	4b7b      	ldr	r3, [pc, #492]	; (8006044 <uip_arp_out+0x214>)
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4b7b      	ldr	r3, [pc, #492]	; (8006048 <uip_arp_out+0x218>)
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	430b      	orrs	r3, r1
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d113      	bne.n	8005e90 <uip_arp_out+0x60>
 8005e68:	4b75      	ldr	r3, [pc, #468]	; (8006040 <uip_arp_out+0x210>)
 8005e6a:	8c1b      	ldrh	r3, [r3, #32]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b75      	ldr	r3, [pc, #468]	; (8006044 <uip_arp_out+0x214>)
 8005e70:	885b      	ldrh	r3, [r3, #2]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4b74      	ldr	r3, [pc, #464]	; (8006048 <uip_arp_out+0x218>)
 8005e76:	885b      	ldrh	r3, [r3, #2]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d106      	bne.n	8005e90 <uip_arp_out+0x60>
    ) {
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6); 
 8005e82:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <uip_arp_out+0x210>)
 8005e84:	4a71      	ldr	r2, [pc, #452]	; (800604c <uip_arp_out+0x21c>)
 8005e86:	6810      	ldr	r0, [r2, #0]
 8005e88:	6018      	str	r0, [r3, #0]
 8005e8a:	8892      	ldrh	r2, [r2, #4]
 8005e8c:	809a      	strh	r2, [r3, #4]
 8005e8e:	e0bd      	b.n	800600c <uip_arp_out+0x1dc>
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 8005e90:	4b67      	ldr	r3, [pc, #412]	; (8006030 <uip_arp_out+0x200>)
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	4b6b      	ldr	r3, [pc, #428]	; (8006044 <uip_arp_out+0x214>)
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	4053      	eors	r3, r2
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	4b6a      	ldr	r3, [pc, #424]	; (8006048 <uip_arp_out+0x218>)
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <uip_arp_out+0x90>
 8005ea8:	4b63      	ldr	r3, [pc, #396]	; (8006038 <uip_arp_out+0x208>)
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	4b65      	ldr	r3, [pc, #404]	; (8006044 <uip_arp_out+0x214>)
 8005eae:	885b      	ldrh	r3, [r3, #2]
 8005eb0:	4053      	eors	r3, r2
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	4b64      	ldr	r3, [pc, #400]	; (8006048 <uip_arp_out+0x218>)
 8005eb6:	885b      	ldrh	r3, [r3, #2]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <uip_arp_out+0xa2>
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
 8005ec0:	4b63      	ldr	r3, [pc, #396]	; (8006050 <uip_arp_out+0x220>)
 8005ec2:	881a      	ldrh	r2, [r3, #0]
 8005ec4:	4b63      	ldr	r3, [pc, #396]	; (8006054 <uip_arp_out+0x224>)
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	4b61      	ldr	r3, [pc, #388]	; (8006050 <uip_arp_out+0x220>)
 8005eca:	885a      	ldrh	r2, [r3, #2]
 8005ecc:	4b61      	ldr	r3, [pc, #388]	; (8006054 <uip_arp_out+0x224>)
 8005ece:	805a      	strh	r2, [r3, #2]
 8005ed0:	e007      	b.n	8005ee2 <uip_arp_out+0xb2>
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 8005ed2:	4b57      	ldr	r3, [pc, #348]	; (8006030 <uip_arp_out+0x200>)
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	4b5f      	ldr	r3, [pc, #380]	; (8006054 <uip_arp_out+0x224>)
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	4b57      	ldr	r3, [pc, #348]	; (8006038 <uip_arp_out+0x208>)
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	4b5d      	ldr	r3, [pc, #372]	; (8006054 <uip_arp_out+0x224>)
 8005ee0:	805a      	strh	r2, [r3, #2]
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005ee2:	4b5d      	ldr	r3, [pc, #372]	; (8006058 <uip_arp_out+0x228>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e033      	b.n	8005f52 <uip_arp_out+0x122>
      tabptr = &arp_table[i];
 8005eea:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <uip_arp_out+0x228>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4a58      	ldr	r2, [pc, #352]	; (800605c <uip_arp_out+0x22c>)
 8005efa:	4413      	add	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
#if UIP_ADD_ALL_BROADCAST_TO_ARP
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
#else 
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr) && uip_eth_addr_valid(tabptr->ethaddr.addr)) {
 8005efe:	4b55      	ldr	r3, [pc, #340]	; (8006054 <uip_arp_out+0x224>)
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d11d      	bne.n	8005f46 <uip_arp_out+0x116>
 8005f0a:	4b52      	ldr	r3, [pc, #328]	; (8006054 <uip_arp_out+0x224>)
 8005f0c:	885a      	ldrh	r2, [r3, #2]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	885b      	ldrh	r3, [r3, #2]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d117      	bne.n	8005f46 <uip_arp_out+0x116>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	791b      	ldrb	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11d      	bne.n	8005f5a <uip_arp_out+0x12a>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	795b      	ldrb	r3, [r3, #5]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d119      	bne.n	8005f5a <uip_arp_out+0x12a>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	799b      	ldrb	r3, [r3, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d115      	bne.n	8005f5a <uip_arp_out+0x12a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	79db      	ldrb	r3, [r3, #7]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d111      	bne.n	8005f5a <uip_arp_out+0x12a>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	7a1b      	ldrb	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10d      	bne.n	8005f5a <uip_arp_out+0x12a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	7a5b      	ldrb	r3, [r3, #9]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <uip_arp_out+0x12a>
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005f46:	4b44      	ldr	r3, [pc, #272]	; (8006058 <uip_arp_out+0x228>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4b42      	ldr	r3, [pc, #264]	; (8006058 <uip_arp_out+0x228>)
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <uip_arp_out+0x228>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d9c7      	bls.n	8005eea <uip_arp_out+0xba>
#endif
	break;
      }
    }

    if(i == UIP_ARPTAB_SIZE) {
 8005f5a:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <uip_arp_out+0x228>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d14d      	bne.n	8005ffe <uip_arp_out+0x1ce>
      /* The destination address was not in our ARP table, so we
	 overwrite the IP packet with an ARP request. */

      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 8005f62:	2206      	movs	r2, #6
 8005f64:	21ff      	movs	r1, #255	; 0xff
 8005f66:	4836      	ldr	r0, [pc, #216]	; (8006040 <uip_arp_out+0x210>)
 8005f68:	f000 f8ee 	bl	8006148 <memset>
      memset(BUF->dhwaddr.addr, 0x00, 6);
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <uip_arp_out+0x208>)
 8005f6e:	2206      	movs	r2, #6
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f8e8 	bl	8006148 <memset>
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 8005f78:	4b39      	ldr	r3, [pc, #228]	; (8006060 <uip_arp_out+0x230>)
 8005f7a:	4a3a      	ldr	r2, [pc, #232]	; (8006064 <uip_arp_out+0x234>)
 8005f7c:	6811      	ldr	r1, [r2, #0]
 8005f7e:	6019      	str	r1, [r3, #0]
 8005f80:	8892      	ldrh	r2, [r2, #4]
 8005f82:	809a      	strh	r2, [r3, #4]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 8005f84:	4b38      	ldr	r3, [pc, #224]	; (8006068 <uip_arp_out+0x238>)
 8005f86:	4a37      	ldr	r2, [pc, #220]	; (8006064 <uip_arp_out+0x234>)
 8005f88:	6811      	ldr	r1, [r2, #0]
 8005f8a:	6019      	str	r1, [r3, #0]
 8005f8c:	8892      	ldrh	r2, [r2, #4]
 8005f8e:	809a      	strh	r2, [r3, #4]
    
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 8005f90:	4b36      	ldr	r3, [pc, #216]	; (800606c <uip_arp_out+0x23c>)
 8005f92:	4a30      	ldr	r2, [pc, #192]	; (8006054 <uip_arp_out+0x224>)
 8005f94:	8812      	ldrh	r2, [r2, #0]
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	4b35      	ldr	r3, [pc, #212]	; (8006070 <uip_arp_out+0x240>)
 8005f9a:	4a2e      	ldr	r2, [pc, #184]	; (8006054 <uip_arp_out+0x224>)
 8005f9c:	8852      	ldrh	r2, [r2, #2]
 8005f9e:	801a      	strh	r2, [r3, #0]
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 8005fa0:	4b34      	ldr	r3, [pc, #208]	; (8006074 <uip_arp_out+0x244>)
 8005fa2:	4a28      	ldr	r2, [pc, #160]	; (8006044 <uip_arp_out+0x214>)
 8005fa4:	8812      	ldrh	r2, [r2, #0]
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	4b21      	ldr	r3, [pc, #132]	; (8006030 <uip_arp_out+0x200>)
 8005faa:	4a26      	ldr	r2, [pc, #152]	; (8006044 <uip_arp_out+0x214>)
 8005fac:	8852      	ldrh	r2, [r2, #2]
 8005fae:	801a      	strh	r2, [r3, #0]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <uip_arp_out+0x210>)
 8005fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fb6:	829a      	strh	r2, [r3, #20]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 8005fb8:	4b21      	ldr	r3, [pc, #132]	; (8006040 <uip_arp_out+0x210>)
 8005fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fbe:	81da      	strh	r2, [r3, #14]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <uip_arp_out+0x210>)
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	821a      	strh	r2, [r3, #16]
      BUF->hwlen = 6;
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <uip_arp_out+0x210>)
 8005fc8:	2206      	movs	r2, #6
 8005fca:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
 8005fcc:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <uip_arp_out+0x210>)
 8005fce:	2204      	movs	r2, #4
 8005fd0:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <uip_arp_out+0x210>)
 8005fd4:	f44f 62c1 	mov.w	r2, #1544	; 0x608
 8005fd8:	819a      	strh	r2, [r3, #12]

      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 8005fda:	4b27      	ldr	r3, [pc, #156]	; (8006078 <uip_arp_out+0x248>)
 8005fdc:	4a27      	ldr	r2, [pc, #156]	; (800607c <uip_arp_out+0x24c>)
 8005fde:	601a      	str	r2, [r3, #0]
    
      uip_len = sizeof(struct arp_hdr);
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <uip_arp_out+0x250>)
 8005fe2:	222a      	movs	r2, #42	; 0x2a
 8005fe4:	801a      	strh	r2, [r3, #0]
#if UIP_ADD_ALL_BROADCAST_TO_ARP
#else
      /* Insert an invalid entry in the table */
      struct uip_eth_addr zero_address;
      memset(zero_address.addr, 0, 6);
 8005fe6:	1d3b      	adds	r3, r7, #4
 8005fe8:	2206      	movs	r2, #6
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f8ab 	bl	8006148 <memset>
      uip_arp_update(ipaddr, &zero_address);
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4817      	ldr	r0, [pc, #92]	; (8006054 <uip_arp_out+0x224>)
 8005ff8:	f7ff fd62 	bl	8005ac0 <uip_arp_update>
 8005ffc:	e015      	b.n	800602a <uip_arp_out+0x1fa>
#endif
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3304      	adds	r3, #4
 8006002:	2206      	movs	r2, #6
 8006004:	4619      	mov	r1, r3
 8006006:	480e      	ldr	r0, [pc, #56]	; (8006040 <uip_arp_out+0x210>)
 8006008:	f000 f890 	bl	800612c <memcpy>
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 800600c:	4b14      	ldr	r3, [pc, #80]	; (8006060 <uip_arp_out+0x230>)
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <uip_arp_out+0x234>)
 8006010:	6811      	ldr	r1, [r2, #0]
 8006012:	6019      	str	r1, [r3, #0]
 8006014:	8892      	ldrh	r2, [r2, #4]
 8006016:	809a      	strh	r2, [r3, #4]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <uip_arp_out+0x210>)
 800601a:	2208      	movs	r2, #8
 800601c:	819a      	strh	r2, [r3, #12]

  uip_len += sizeof(struct uip_eth_hdr);
 800601e:	4b18      	ldr	r3, [pc, #96]	; (8006080 <uip_arp_out+0x250>)
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	330e      	adds	r3, #14
 8006024:	b29a      	uxth	r2, r3
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <uip_arp_out+0x250>)
 8006028:	801a      	strh	r2, [r3, #0]
}
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200004d2 	.word	0x200004d2
 8006034:	08007424 	.word	0x08007424
 8006038:	200004d4 	.word	0x200004d4
 800603c:	08007426 	.word	0x08007426
 8006040:	200004b4 	.word	0x200004b4
 8006044:	200004b0 	.word	0x200004b0
 8006048:	200004ac 	.word	0x200004ac
 800604c:	0800741c 	.word	0x0800741c
 8006050:	200004a8 	.word	0x200004a8
 8006054:	200003f0 	.word	0x200003f0
 8006058:	200003f4 	.word	0x200003f4
 800605c:	20000390 	.word	0x20000390
 8006060:	200004ba 	.word	0x200004ba
 8006064:	2000037c 	.word	0x2000037c
 8006068:	200004ca 	.word	0x200004ca
 800606c:	200004da 	.word	0x200004da
 8006070:	200004dc 	.word	0x200004dc
 8006074:	200004d0 	.word	0x200004d0
 8006078:	20000418 	.word	0x20000418
 800607c:	200004ea 	.word	0x200004ea
 8006080:	20000404 	.word	0x20000404

08006084 <_ZdlPvj>:
 8006084:	f000 b800 	b.w	8006088 <_ZdlPv>

08006088 <_ZdlPv>:
 8006088:	f000 b83a 	b.w	8006100 <free>

0800608c <abort>:
 800608c:	2006      	movs	r0, #6
 800608e:	b508      	push	{r3, lr}
 8006090:	f000 f988 	bl	80063a4 <raise>
 8006094:	2001      	movs	r0, #1
 8006096:	f7fa fc0c 	bl	80008b2 <_exit>
	...

0800609c <__errno>:
 800609c:	4b01      	ldr	r3, [pc, #4]	; (80060a4 <__errno+0x8>)
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	2000002c 	.word	0x2000002c

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	2600      	movs	r6, #0
 80060ac:	4d0c      	ldr	r5, [pc, #48]	; (80060e0 <__libc_init_array+0x38>)
 80060ae:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060b0:	1b64      	subs	r4, r4, r5
 80060b2:	10a4      	asrs	r4, r4, #2
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	f001 f8a8 	bl	800720c <_init>
 80060bc:	2600      	movs	r6, #0
 80060be:	4d0a      	ldr	r5, [pc, #40]	; (80060e8 <__libc_init_array+0x40>)
 80060c0:	4c0a      	ldr	r4, [pc, #40]	; (80060ec <__libc_init_array+0x44>)
 80060c2:	1b64      	subs	r4, r4, r5
 80060c4:	10a4      	asrs	r4, r4, #2
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d0:	4798      	blx	r3
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060da:	4798      	blx	r3
 80060dc:	3601      	adds	r6, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	08007574 	.word	0x08007574
 80060e4:	08007574 	.word	0x08007574
 80060e8:	08007574 	.word	0x08007574
 80060ec:	08007594 	.word	0x08007594

080060f0 <malloc>:
 80060f0:	4b02      	ldr	r3, [pc, #8]	; (80060fc <malloc+0xc>)
 80060f2:	4601      	mov	r1, r0
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f000 b87b 	b.w	80061f0 <_malloc_r>
 80060fa:	bf00      	nop
 80060fc:	2000002c 	.word	0x2000002c

08006100 <free>:
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <free+0xc>)
 8006102:	4601      	mov	r1, r0
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	f000 b827 	b.w	8006158 <_free_r>
 800610a:	bf00      	nop
 800610c:	2000002c 	.word	0x2000002c

08006110 <memcmp>:
 8006110:	b530      	push	{r4, r5, lr}
 8006112:	2400      	movs	r4, #0
 8006114:	3901      	subs	r1, #1
 8006116:	42a2      	cmp	r2, r4
 8006118:	d101      	bne.n	800611e <memcmp+0xe>
 800611a:	2000      	movs	r0, #0
 800611c:	e005      	b.n	800612a <memcmp+0x1a>
 800611e:	5d03      	ldrb	r3, [r0, r4]
 8006120:	3401      	adds	r4, #1
 8006122:	5d0d      	ldrb	r5, [r1, r4]
 8006124:	42ab      	cmp	r3, r5
 8006126:	d0f6      	beq.n	8006116 <memcmp+0x6>
 8006128:	1b58      	subs	r0, r3, r5
 800612a:	bd30      	pop	{r4, r5, pc}

0800612c <memcpy>:
 800612c:	440a      	add	r2, r1
 800612e:	4291      	cmp	r1, r2
 8006130:	f100 33ff 	add.w	r3, r0, #4294967295
 8006134:	d100      	bne.n	8006138 <memcpy+0xc>
 8006136:	4770      	bx	lr
 8006138:	b510      	push	{r4, lr}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	4291      	cmp	r1, r2
 8006140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006144:	d1f9      	bne.n	800613a <memcpy+0xe>
 8006146:	bd10      	pop	{r4, pc}

08006148 <memset>:
 8006148:	4603      	mov	r3, r0
 800614a:	4402      	add	r2, r0
 800614c:	4293      	cmp	r3, r2
 800614e:	d100      	bne.n	8006152 <memset+0xa>
 8006150:	4770      	bx	lr
 8006152:	f803 1b01 	strb.w	r1, [r3], #1
 8006156:	e7f9      	b.n	800614c <memset+0x4>

08006158 <_free_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4605      	mov	r5, r0
 800615c:	2900      	cmp	r1, #0
 800615e:	d043      	beq.n	80061e8 <_free_r+0x90>
 8006160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006164:	1f0c      	subs	r4, r1, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	bfb8      	it	lt
 800616a:	18e4      	addlt	r4, r4, r3
 800616c:	f000 f98e 	bl	800648c <__malloc_lock>
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <_free_r+0x94>)
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	4610      	mov	r0, r2
 8006176:	b933      	cbnz	r3, 8006186 <_free_r+0x2e>
 8006178:	6063      	str	r3, [r4, #4]
 800617a:	6014      	str	r4, [r2, #0]
 800617c:	4628      	mov	r0, r5
 800617e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006182:	f000 b989 	b.w	8006498 <__malloc_unlock>
 8006186:	42a3      	cmp	r3, r4
 8006188:	d90a      	bls.n	80061a0 <_free_r+0x48>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	1862      	adds	r2, r4, r1
 800618e:	4293      	cmp	r3, r2
 8006190:	bf01      	itttt	eq
 8006192:	681a      	ldreq	r2, [r3, #0]
 8006194:	685b      	ldreq	r3, [r3, #4]
 8006196:	1852      	addeq	r2, r2, r1
 8006198:	6022      	streq	r2, [r4, #0]
 800619a:	6063      	str	r3, [r4, #4]
 800619c:	6004      	str	r4, [r0, #0]
 800619e:	e7ed      	b.n	800617c <_free_r+0x24>
 80061a0:	461a      	mov	r2, r3
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	b10b      	cbz	r3, 80061aa <_free_r+0x52>
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	d9fa      	bls.n	80061a0 <_free_r+0x48>
 80061aa:	6811      	ldr	r1, [r2, #0]
 80061ac:	1850      	adds	r0, r2, r1
 80061ae:	42a0      	cmp	r0, r4
 80061b0:	d10b      	bne.n	80061ca <_free_r+0x72>
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	4401      	add	r1, r0
 80061b6:	1850      	adds	r0, r2, r1
 80061b8:	4283      	cmp	r3, r0
 80061ba:	6011      	str	r1, [r2, #0]
 80061bc:	d1de      	bne.n	800617c <_free_r+0x24>
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	4401      	add	r1, r0
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	6053      	str	r3, [r2, #4]
 80061c8:	e7d8      	b.n	800617c <_free_r+0x24>
 80061ca:	d902      	bls.n	80061d2 <_free_r+0x7a>
 80061cc:	230c      	movs	r3, #12
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	e7d4      	b.n	800617c <_free_r+0x24>
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	1821      	adds	r1, r4, r0
 80061d6:	428b      	cmp	r3, r1
 80061d8:	bf01      	itttt	eq
 80061da:	6819      	ldreq	r1, [r3, #0]
 80061dc:	685b      	ldreq	r3, [r3, #4]
 80061de:	1809      	addeq	r1, r1, r0
 80061e0:	6021      	streq	r1, [r4, #0]
 80061e2:	6063      	str	r3, [r4, #4]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7c9      	b.n	800617c <_free_r+0x24>
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
 80061ea:	bf00      	nop
 80061ec:	200003f8 	.word	0x200003f8

080061f0 <_malloc_r>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	1ccd      	adds	r5, r1, #3
 80061f4:	f025 0503 	bic.w	r5, r5, #3
 80061f8:	3508      	adds	r5, #8
 80061fa:	2d0c      	cmp	r5, #12
 80061fc:	bf38      	it	cc
 80061fe:	250c      	movcc	r5, #12
 8006200:	2d00      	cmp	r5, #0
 8006202:	4606      	mov	r6, r0
 8006204:	db01      	blt.n	800620a <_malloc_r+0x1a>
 8006206:	42a9      	cmp	r1, r5
 8006208:	d903      	bls.n	8006212 <_malloc_r+0x22>
 800620a:	230c      	movs	r3, #12
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	2000      	movs	r0, #0
 8006210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006212:	f000 f93b 	bl	800648c <__malloc_lock>
 8006216:	4921      	ldr	r1, [pc, #132]	; (800629c <_malloc_r+0xac>)
 8006218:	680a      	ldr	r2, [r1, #0]
 800621a:	4614      	mov	r4, r2
 800621c:	b99c      	cbnz	r4, 8006246 <_malloc_r+0x56>
 800621e:	4f20      	ldr	r7, [pc, #128]	; (80062a0 <_malloc_r+0xb0>)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	b923      	cbnz	r3, 800622e <_malloc_r+0x3e>
 8006224:	4621      	mov	r1, r4
 8006226:	4630      	mov	r0, r6
 8006228:	f000 f884 	bl	8006334 <_sbrk_r>
 800622c:	6038      	str	r0, [r7, #0]
 800622e:	4629      	mov	r1, r5
 8006230:	4630      	mov	r0, r6
 8006232:	f000 f87f 	bl	8006334 <_sbrk_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d123      	bne.n	8006282 <_malloc_r+0x92>
 800623a:	230c      	movs	r3, #12
 800623c:	4630      	mov	r0, r6
 800623e:	6033      	str	r3, [r6, #0]
 8006240:	f000 f92a 	bl	8006498 <__malloc_unlock>
 8006244:	e7e3      	b.n	800620e <_malloc_r+0x1e>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	1b5b      	subs	r3, r3, r5
 800624a:	d417      	bmi.n	800627c <_malloc_r+0x8c>
 800624c:	2b0b      	cmp	r3, #11
 800624e:	d903      	bls.n	8006258 <_malloc_r+0x68>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	441c      	add	r4, r3
 8006254:	6025      	str	r5, [r4, #0]
 8006256:	e004      	b.n	8006262 <_malloc_r+0x72>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	42a2      	cmp	r2, r4
 800625c:	bf0c      	ite	eq
 800625e:	600b      	streq	r3, [r1, #0]
 8006260:	6053      	strne	r3, [r2, #4]
 8006262:	4630      	mov	r0, r6
 8006264:	f000 f918 	bl	8006498 <__malloc_unlock>
 8006268:	f104 000b 	add.w	r0, r4, #11
 800626c:	1d23      	adds	r3, r4, #4
 800626e:	f020 0007 	bic.w	r0, r0, #7
 8006272:	1ac2      	subs	r2, r0, r3
 8006274:	d0cc      	beq.n	8006210 <_malloc_r+0x20>
 8006276:	1a1b      	subs	r3, r3, r0
 8006278:	50a3      	str	r3, [r4, r2]
 800627a:	e7c9      	b.n	8006210 <_malloc_r+0x20>
 800627c:	4622      	mov	r2, r4
 800627e:	6864      	ldr	r4, [r4, #4]
 8006280:	e7cc      	b.n	800621c <_malloc_r+0x2c>
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d0e3      	beq.n	8006254 <_malloc_r+0x64>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4630      	mov	r0, r6
 8006290:	f000 f850 	bl	8006334 <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d1dd      	bne.n	8006254 <_malloc_r+0x64>
 8006298:	e7cf      	b.n	800623a <_malloc_r+0x4a>
 800629a:	bf00      	nop
 800629c:	200003f8 	.word	0x200003f8
 80062a0:	200003fc 	.word	0x200003fc

080062a4 <rand>:
 80062a4:	4b17      	ldr	r3, [pc, #92]	; (8006304 <rand+0x60>)
 80062a6:	b510      	push	{r4, lr}
 80062a8:	681c      	ldr	r4, [r3, #0]
 80062aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062ac:	b9b3      	cbnz	r3, 80062dc <rand+0x38>
 80062ae:	2018      	movs	r0, #24
 80062b0:	f7ff ff1e 	bl	80060f0 <malloc>
 80062b4:	4602      	mov	r2, r0
 80062b6:	63a0      	str	r0, [r4, #56]	; 0x38
 80062b8:	b920      	cbnz	r0, 80062c4 <rand+0x20>
 80062ba:	214e      	movs	r1, #78	; 0x4e
 80062bc:	4b12      	ldr	r3, [pc, #72]	; (8006308 <rand+0x64>)
 80062be:	4813      	ldr	r0, [pc, #76]	; (800630c <rand+0x68>)
 80062c0:	f000 f8b4 	bl	800642c <__assert_func>
 80062c4:	4912      	ldr	r1, [pc, #72]	; (8006310 <rand+0x6c>)
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <rand+0x70>)
 80062c8:	e9c0 1300 	strd	r1, r3, [r0]
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <rand+0x74>)
 80062ce:	2100      	movs	r1, #0
 80062d0:	6083      	str	r3, [r0, #8]
 80062d2:	230b      	movs	r3, #11
 80062d4:	8183      	strh	r3, [r0, #12]
 80062d6:	2001      	movs	r0, #1
 80062d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80062dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062de:	480f      	ldr	r0, [pc, #60]	; (800631c <rand+0x78>)
 80062e0:	690a      	ldr	r2, [r1, #16]
 80062e2:	694b      	ldr	r3, [r1, #20]
 80062e4:	4350      	muls	r0, r2
 80062e6:	4c0e      	ldr	r4, [pc, #56]	; (8006320 <rand+0x7c>)
 80062e8:	fb04 0003 	mla	r0, r4, r3, r0
 80062ec:	fba2 3404 	umull	r3, r4, r2, r4
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	4404      	add	r4, r0
 80062f4:	f144 0000 	adc.w	r0, r4, #0
 80062f8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80062fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	2000002c 	.word	0x2000002c
 8006308:	0800742c 	.word	0x0800742c
 800630c:	08007443 	.word	0x08007443
 8006310:	abcd330e 	.word	0xabcd330e
 8006314:	e66d1234 	.word	0xe66d1234
 8006318:	0005deec 	.word	0x0005deec
 800631c:	5851f42d 	.word	0x5851f42d
 8006320:	4c957f2d 	.word	0x4c957f2d

08006324 <realloc>:
 8006324:	4b02      	ldr	r3, [pc, #8]	; (8006330 <realloc+0xc>)
 8006326:	460a      	mov	r2, r1
 8006328:	4601      	mov	r1, r0
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	f000 b8ba 	b.w	80064a4 <_realloc_r>
 8006330:	2000002c 	.word	0x2000002c

08006334 <_sbrk_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	2300      	movs	r3, #0
 8006338:	4d05      	ldr	r5, [pc, #20]	; (8006350 <_sbrk_r+0x1c>)
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	f7fa fb2a 	bl	8000998 <_sbrk>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_sbrk_r+0x1a>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_sbrk_r+0x1a>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	2000055c 	.word	0x2000055c

08006354 <_raise_r>:
 8006354:	291f      	cmp	r1, #31
 8006356:	b538      	push	{r3, r4, r5, lr}
 8006358:	4604      	mov	r4, r0
 800635a:	460d      	mov	r5, r1
 800635c:	d904      	bls.n	8006368 <_raise_r+0x14>
 800635e:	2316      	movs	r3, #22
 8006360:	6003      	str	r3, [r0, #0]
 8006362:	f04f 30ff 	mov.w	r0, #4294967295
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800636a:	b112      	cbz	r2, 8006372 <_raise_r+0x1e>
 800636c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006370:	b94b      	cbnz	r3, 8006386 <_raise_r+0x32>
 8006372:	4620      	mov	r0, r4
 8006374:	f000 f830 	bl	80063d8 <_getpid_r>
 8006378:	462a      	mov	r2, r5
 800637a:	4601      	mov	r1, r0
 800637c:	4620      	mov	r0, r4
 800637e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006382:	f000 b817 	b.w	80063b4 <_kill_r>
 8006386:	2b01      	cmp	r3, #1
 8006388:	d00a      	beq.n	80063a0 <_raise_r+0x4c>
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	d103      	bne.n	8006396 <_raise_r+0x42>
 800638e:	2316      	movs	r3, #22
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	2001      	movs	r0, #1
 8006394:	e7e7      	b.n	8006366 <_raise_r+0x12>
 8006396:	2400      	movs	r4, #0
 8006398:	4628      	mov	r0, r5
 800639a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800639e:	4798      	blx	r3
 80063a0:	2000      	movs	r0, #0
 80063a2:	e7e0      	b.n	8006366 <_raise_r+0x12>

080063a4 <raise>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <raise+0xc>)
 80063a6:	4601      	mov	r1, r0
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f7ff bfd3 	b.w	8006354 <_raise_r>
 80063ae:	bf00      	nop
 80063b0:	2000002c 	.word	0x2000002c

080063b4 <_kill_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	2300      	movs	r3, #0
 80063b8:	4d06      	ldr	r5, [pc, #24]	; (80063d4 <_kill_r+0x20>)
 80063ba:	4604      	mov	r4, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	f7fa fa66 	bl	8000892 <_kill>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	d102      	bne.n	80063d0 <_kill_r+0x1c>
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	b103      	cbz	r3, 80063d0 <_kill_r+0x1c>
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	bd38      	pop	{r3, r4, r5, pc}
 80063d2:	bf00      	nop
 80063d4:	2000055c 	.word	0x2000055c

080063d8 <_getpid_r>:
 80063d8:	f7fa ba54 	b.w	8000884 <_getpid>

080063dc <strchr>:
 80063dc:	4603      	mov	r3, r0
 80063de:	b2c9      	uxtb	r1, r1
 80063e0:	4618      	mov	r0, r3
 80063e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e6:	b112      	cbz	r2, 80063ee <strchr+0x12>
 80063e8:	428a      	cmp	r2, r1
 80063ea:	d1f9      	bne.n	80063e0 <strchr+0x4>
 80063ec:	4770      	bx	lr
 80063ee:	2900      	cmp	r1, #0
 80063f0:	bf18      	it	ne
 80063f2:	2000      	movne	r0, #0
 80063f4:	4770      	bx	lr

080063f6 <strcpy>:
 80063f6:	4603      	mov	r3, r0
 80063f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fc:	f803 2b01 	strb.w	r2, [r3], #1
 8006400:	2a00      	cmp	r2, #0
 8006402:	d1f9      	bne.n	80063f8 <strcpy+0x2>
 8006404:	4770      	bx	lr

08006406 <strncmp>:
 8006406:	b510      	push	{r4, lr}
 8006408:	b16a      	cbz	r2, 8006426 <strncmp+0x20>
 800640a:	3901      	subs	r1, #1
 800640c:	1884      	adds	r4, r0, r2
 800640e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006412:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006416:	4293      	cmp	r3, r2
 8006418:	d103      	bne.n	8006422 <strncmp+0x1c>
 800641a:	42a0      	cmp	r0, r4
 800641c:	d001      	beq.n	8006422 <strncmp+0x1c>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f5      	bne.n	800640e <strncmp+0x8>
 8006422:	1a98      	subs	r0, r3, r2
 8006424:	bd10      	pop	{r4, pc}
 8006426:	4610      	mov	r0, r2
 8006428:	e7fc      	b.n	8006424 <strncmp+0x1e>
	...

0800642c <__assert_func>:
 800642c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800642e:	4614      	mov	r4, r2
 8006430:	461a      	mov	r2, r3
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <__assert_func+0x2c>)
 8006434:	4605      	mov	r5, r0
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68d8      	ldr	r0, [r3, #12]
 800643a:	b14c      	cbz	r4, 8006450 <__assert_func+0x24>
 800643c:	4b07      	ldr	r3, [pc, #28]	; (800645c <__assert_func+0x30>)
 800643e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006442:	9100      	str	r1, [sp, #0]
 8006444:	462b      	mov	r3, r5
 8006446:	4906      	ldr	r1, [pc, #24]	; (8006460 <__assert_func+0x34>)
 8006448:	f000 f80e 	bl	8006468 <fiprintf>
 800644c:	f7ff fe1e 	bl	800608c <abort>
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <__assert_func+0x38>)
 8006452:	461c      	mov	r4, r3
 8006454:	e7f3      	b.n	800643e <__assert_func+0x12>
 8006456:	bf00      	nop
 8006458:	2000002c 	.word	0x2000002c
 800645c:	080074a2 	.word	0x080074a2
 8006460:	080074af 	.word	0x080074af
 8006464:	08007412 	.word	0x08007412

08006468 <fiprintf>:
 8006468:	b40e      	push	{r1, r2, r3}
 800646a:	b503      	push	{r0, r1, lr}
 800646c:	4601      	mov	r1, r0
 800646e:	ab03      	add	r3, sp, #12
 8006470:	4805      	ldr	r0, [pc, #20]	; (8006488 <fiprintf+0x20>)
 8006472:	f853 2b04 	ldr.w	r2, [r3], #4
 8006476:	6800      	ldr	r0, [r0, #0]
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	f000 f861 	bl	8006540 <_vfiprintf_r>
 800647e:	b002      	add	sp, #8
 8006480:	f85d eb04 	ldr.w	lr, [sp], #4
 8006484:	b003      	add	sp, #12
 8006486:	4770      	bx	lr
 8006488:	2000002c 	.word	0x2000002c

0800648c <__malloc_lock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_lock+0x8>)
 800648e:	f000 bd95 	b.w	8006fbc <__retarget_lock_acquire_recursive>
 8006492:	bf00      	nop
 8006494:	20000564 	.word	0x20000564

08006498 <__malloc_unlock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_unlock+0x8>)
 800649a:	f000 bd90 	b.w	8006fbe <__retarget_lock_release_recursive>
 800649e:	bf00      	nop
 80064a0:	20000564 	.word	0x20000564

080064a4 <_realloc_r>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	4607      	mov	r7, r0
 80064a8:	4614      	mov	r4, r2
 80064aa:	460e      	mov	r6, r1
 80064ac:	b921      	cbnz	r1, 80064b8 <_realloc_r+0x14>
 80064ae:	4611      	mov	r1, r2
 80064b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064b4:	f7ff be9c 	b.w	80061f0 <_malloc_r>
 80064b8:	b922      	cbnz	r2, 80064c4 <_realloc_r+0x20>
 80064ba:	f7ff fe4d 	bl	8006158 <_free_r>
 80064be:	4625      	mov	r5, r4
 80064c0:	4628      	mov	r0, r5
 80064c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c4:	f000 fdee 	bl	80070a4 <_malloc_usable_size_r>
 80064c8:	42a0      	cmp	r0, r4
 80064ca:	d20f      	bcs.n	80064ec <_realloc_r+0x48>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4638      	mov	r0, r7
 80064d0:	f7ff fe8e 	bl	80061f0 <_malloc_r>
 80064d4:	4605      	mov	r5, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0f2      	beq.n	80064c0 <_realloc_r+0x1c>
 80064da:	4631      	mov	r1, r6
 80064dc:	4622      	mov	r2, r4
 80064de:	f7ff fe25 	bl	800612c <memcpy>
 80064e2:	4631      	mov	r1, r6
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff fe37 	bl	8006158 <_free_r>
 80064ea:	e7e9      	b.n	80064c0 <_realloc_r+0x1c>
 80064ec:	4635      	mov	r5, r6
 80064ee:	e7e7      	b.n	80064c0 <_realloc_r+0x1c>

080064f0 <__sfputc_r>:
 80064f0:	6893      	ldr	r3, [r2, #8]
 80064f2:	b410      	push	{r4}
 80064f4:	3b01      	subs	r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	6093      	str	r3, [r2, #8]
 80064fa:	da07      	bge.n	800650c <__sfputc_r+0x1c>
 80064fc:	6994      	ldr	r4, [r2, #24]
 80064fe:	42a3      	cmp	r3, r4
 8006500:	db01      	blt.n	8006506 <__sfputc_r+0x16>
 8006502:	290a      	cmp	r1, #10
 8006504:	d102      	bne.n	800650c <__sfputc_r+0x1c>
 8006506:	bc10      	pop	{r4}
 8006508:	f000 bae0 	b.w	8006acc <__swbuf_r>
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	1c58      	adds	r0, r3, #1
 8006510:	6010      	str	r0, [r2, #0]
 8006512:	7019      	strb	r1, [r3, #0]
 8006514:	4608      	mov	r0, r1
 8006516:	bc10      	pop	{r4}
 8006518:	4770      	bx	lr

0800651a <__sfputs_r>:
 800651a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651c:	4606      	mov	r6, r0
 800651e:	460f      	mov	r7, r1
 8006520:	4614      	mov	r4, r2
 8006522:	18d5      	adds	r5, r2, r3
 8006524:	42ac      	cmp	r4, r5
 8006526:	d101      	bne.n	800652c <__sfputs_r+0x12>
 8006528:	2000      	movs	r0, #0
 800652a:	e007      	b.n	800653c <__sfputs_r+0x22>
 800652c:	463a      	mov	r2, r7
 800652e:	4630      	mov	r0, r6
 8006530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006534:	f7ff ffdc 	bl	80064f0 <__sfputc_r>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d1f3      	bne.n	8006524 <__sfputs_r+0xa>
 800653c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006540 <_vfiprintf_r>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	460d      	mov	r5, r1
 8006546:	4614      	mov	r4, r2
 8006548:	4698      	mov	r8, r3
 800654a:	4606      	mov	r6, r0
 800654c:	b09d      	sub	sp, #116	; 0x74
 800654e:	b118      	cbz	r0, 8006558 <_vfiprintf_r+0x18>
 8006550:	6983      	ldr	r3, [r0, #24]
 8006552:	b90b      	cbnz	r3, 8006558 <_vfiprintf_r+0x18>
 8006554:	f000 fc94 	bl	8006e80 <__sinit>
 8006558:	4b89      	ldr	r3, [pc, #548]	; (8006780 <_vfiprintf_r+0x240>)
 800655a:	429d      	cmp	r5, r3
 800655c:	d11b      	bne.n	8006596 <_vfiprintf_r+0x56>
 800655e:	6875      	ldr	r5, [r6, #4]
 8006560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006562:	07d9      	lsls	r1, r3, #31
 8006564:	d405      	bmi.n	8006572 <_vfiprintf_r+0x32>
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	059a      	lsls	r2, r3, #22
 800656a:	d402      	bmi.n	8006572 <_vfiprintf_r+0x32>
 800656c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800656e:	f000 fd25 	bl	8006fbc <__retarget_lock_acquire_recursive>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	d501      	bpl.n	800657c <_vfiprintf_r+0x3c>
 8006578:	692b      	ldr	r3, [r5, #16]
 800657a:	b9eb      	cbnz	r3, 80065b8 <_vfiprintf_r+0x78>
 800657c:	4629      	mov	r1, r5
 800657e:	4630      	mov	r0, r6
 8006580:	f000 faf6 	bl	8006b70 <__swsetup_r>
 8006584:	b1c0      	cbz	r0, 80065b8 <_vfiprintf_r+0x78>
 8006586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006588:	07dc      	lsls	r4, r3, #31
 800658a:	d50e      	bpl.n	80065aa <_vfiprintf_r+0x6a>
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	b01d      	add	sp, #116	; 0x74
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	4b7b      	ldr	r3, [pc, #492]	; (8006784 <_vfiprintf_r+0x244>)
 8006598:	429d      	cmp	r5, r3
 800659a:	d101      	bne.n	80065a0 <_vfiprintf_r+0x60>
 800659c:	68b5      	ldr	r5, [r6, #8]
 800659e:	e7df      	b.n	8006560 <_vfiprintf_r+0x20>
 80065a0:	4b79      	ldr	r3, [pc, #484]	; (8006788 <_vfiprintf_r+0x248>)
 80065a2:	429d      	cmp	r5, r3
 80065a4:	bf08      	it	eq
 80065a6:	68f5      	ldreq	r5, [r6, #12]
 80065a8:	e7da      	b.n	8006560 <_vfiprintf_r+0x20>
 80065aa:	89ab      	ldrh	r3, [r5, #12]
 80065ac:	0598      	lsls	r0, r3, #22
 80065ae:	d4ed      	bmi.n	800658c <_vfiprintf_r+0x4c>
 80065b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065b2:	f000 fd04 	bl	8006fbe <__retarget_lock_release_recursive>
 80065b6:	e7e9      	b.n	800658c <_vfiprintf_r+0x4c>
 80065b8:	2300      	movs	r3, #0
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	2320      	movs	r3, #32
 80065be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065c2:	2330      	movs	r3, #48	; 0x30
 80065c4:	f04f 0901 	mov.w	r9, #1
 80065c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800678c <_vfiprintf_r+0x24c>
 80065d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065d4:	4623      	mov	r3, r4
 80065d6:	469a      	mov	sl, r3
 80065d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065dc:	b10a      	cbz	r2, 80065e2 <_vfiprintf_r+0xa2>
 80065de:	2a25      	cmp	r2, #37	; 0x25
 80065e0:	d1f9      	bne.n	80065d6 <_vfiprintf_r+0x96>
 80065e2:	ebba 0b04 	subs.w	fp, sl, r4
 80065e6:	d00b      	beq.n	8006600 <_vfiprintf_r+0xc0>
 80065e8:	465b      	mov	r3, fp
 80065ea:	4622      	mov	r2, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff ff93 	bl	800651a <__sfputs_r>
 80065f4:	3001      	adds	r0, #1
 80065f6:	f000 80aa 	beq.w	800674e <_vfiprintf_r+0x20e>
 80065fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065fc:	445a      	add	r2, fp
 80065fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006600:	f89a 3000 	ldrb.w	r3, [sl]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80a2 	beq.w	800674e <_vfiprintf_r+0x20e>
 800660a:	2300      	movs	r3, #0
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006614:	f10a 0a01 	add.w	sl, sl, #1
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	9307      	str	r3, [sp, #28]
 800661c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006620:	931a      	str	r3, [sp, #104]	; 0x68
 8006622:	4654      	mov	r4, sl
 8006624:	2205      	movs	r2, #5
 8006626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662a:	4858      	ldr	r0, [pc, #352]	; (800678c <_vfiprintf_r+0x24c>)
 800662c:	f000 fd2c 	bl	8007088 <memchr>
 8006630:	9a04      	ldr	r2, [sp, #16]
 8006632:	b9d8      	cbnz	r0, 800666c <_vfiprintf_r+0x12c>
 8006634:	06d1      	lsls	r1, r2, #27
 8006636:	bf44      	itt	mi
 8006638:	2320      	movmi	r3, #32
 800663a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663e:	0713      	lsls	r3, r2, #28
 8006640:	bf44      	itt	mi
 8006642:	232b      	movmi	r3, #43	; 0x2b
 8006644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006648:	f89a 3000 	ldrb.w	r3, [sl]
 800664c:	2b2a      	cmp	r3, #42	; 0x2a
 800664e:	d015      	beq.n	800667c <_vfiprintf_r+0x13c>
 8006650:	4654      	mov	r4, sl
 8006652:	2000      	movs	r0, #0
 8006654:	f04f 0c0a 	mov.w	ip, #10
 8006658:	9a07      	ldr	r2, [sp, #28]
 800665a:	4621      	mov	r1, r4
 800665c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006660:	3b30      	subs	r3, #48	; 0x30
 8006662:	2b09      	cmp	r3, #9
 8006664:	d94e      	bls.n	8006704 <_vfiprintf_r+0x1c4>
 8006666:	b1b0      	cbz	r0, 8006696 <_vfiprintf_r+0x156>
 8006668:	9207      	str	r2, [sp, #28]
 800666a:	e014      	b.n	8006696 <_vfiprintf_r+0x156>
 800666c:	eba0 0308 	sub.w	r3, r0, r8
 8006670:	fa09 f303 	lsl.w	r3, r9, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	46a2      	mov	sl, r4
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	e7d2      	b.n	8006622 <_vfiprintf_r+0xe2>
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	1d19      	adds	r1, r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	9103      	str	r1, [sp, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfbb      	ittet	lt
 8006688:	425b      	neglt	r3, r3
 800668a:	f042 0202 	orrlt.w	r2, r2, #2
 800668e:	9307      	strge	r3, [sp, #28]
 8006690:	9307      	strlt	r3, [sp, #28]
 8006692:	bfb8      	it	lt
 8006694:	9204      	strlt	r2, [sp, #16]
 8006696:	7823      	ldrb	r3, [r4, #0]
 8006698:	2b2e      	cmp	r3, #46	; 0x2e
 800669a:	d10c      	bne.n	80066b6 <_vfiprintf_r+0x176>
 800669c:	7863      	ldrb	r3, [r4, #1]
 800669e:	2b2a      	cmp	r3, #42	; 0x2a
 80066a0:	d135      	bne.n	800670e <_vfiprintf_r+0x1ce>
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	3402      	adds	r4, #2
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	9203      	str	r2, [sp, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bfb8      	it	lt
 80066b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800679c <_vfiprintf_r+0x25c>
 80066ba:	2203      	movs	r2, #3
 80066bc:	4650      	mov	r0, sl
 80066be:	7821      	ldrb	r1, [r4, #0]
 80066c0:	f000 fce2 	bl	8007088 <memchr>
 80066c4:	b140      	cbz	r0, 80066d8 <_vfiprintf_r+0x198>
 80066c6:	2340      	movs	r3, #64	; 0x40
 80066c8:	eba0 000a 	sub.w	r0, r0, sl
 80066cc:	fa03 f000 	lsl.w	r0, r3, r0
 80066d0:	9b04      	ldr	r3, [sp, #16]
 80066d2:	3401      	adds	r4, #1
 80066d4:	4303      	orrs	r3, r0
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066dc:	2206      	movs	r2, #6
 80066de:	482c      	ldr	r0, [pc, #176]	; (8006790 <_vfiprintf_r+0x250>)
 80066e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066e4:	f000 fcd0 	bl	8007088 <memchr>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d03f      	beq.n	800676c <_vfiprintf_r+0x22c>
 80066ec:	4b29      	ldr	r3, [pc, #164]	; (8006794 <_vfiprintf_r+0x254>)
 80066ee:	bb1b      	cbnz	r3, 8006738 <_vfiprintf_r+0x1f8>
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	3307      	adds	r3, #7
 80066f4:	f023 0307 	bic.w	r3, r3, #7
 80066f8:	3308      	adds	r3, #8
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fe:	443b      	add	r3, r7
 8006700:	9309      	str	r3, [sp, #36]	; 0x24
 8006702:	e767      	b.n	80065d4 <_vfiprintf_r+0x94>
 8006704:	460c      	mov	r4, r1
 8006706:	2001      	movs	r0, #1
 8006708:	fb0c 3202 	mla	r2, ip, r2, r3
 800670c:	e7a5      	b.n	800665a <_vfiprintf_r+0x11a>
 800670e:	2300      	movs	r3, #0
 8006710:	f04f 0c0a 	mov.w	ip, #10
 8006714:	4619      	mov	r1, r3
 8006716:	3401      	adds	r4, #1
 8006718:	9305      	str	r3, [sp, #20]
 800671a:	4620      	mov	r0, r4
 800671c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006720:	3a30      	subs	r2, #48	; 0x30
 8006722:	2a09      	cmp	r2, #9
 8006724:	d903      	bls.n	800672e <_vfiprintf_r+0x1ee>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0c5      	beq.n	80066b6 <_vfiprintf_r+0x176>
 800672a:	9105      	str	r1, [sp, #20]
 800672c:	e7c3      	b.n	80066b6 <_vfiprintf_r+0x176>
 800672e:	4604      	mov	r4, r0
 8006730:	2301      	movs	r3, #1
 8006732:	fb0c 2101 	mla	r1, ip, r1, r2
 8006736:	e7f0      	b.n	800671a <_vfiprintf_r+0x1da>
 8006738:	ab03      	add	r3, sp, #12
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	462a      	mov	r2, r5
 800673e:	4630      	mov	r0, r6
 8006740:	4b15      	ldr	r3, [pc, #84]	; (8006798 <_vfiprintf_r+0x258>)
 8006742:	a904      	add	r1, sp, #16
 8006744:	f3af 8000 	nop.w
 8006748:	4607      	mov	r7, r0
 800674a:	1c78      	adds	r0, r7, #1
 800674c:	d1d6      	bne.n	80066fc <_vfiprintf_r+0x1bc>
 800674e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006750:	07d9      	lsls	r1, r3, #31
 8006752:	d405      	bmi.n	8006760 <_vfiprintf_r+0x220>
 8006754:	89ab      	ldrh	r3, [r5, #12]
 8006756:	059a      	lsls	r2, r3, #22
 8006758:	d402      	bmi.n	8006760 <_vfiprintf_r+0x220>
 800675a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800675c:	f000 fc2f 	bl	8006fbe <__retarget_lock_release_recursive>
 8006760:	89ab      	ldrh	r3, [r5, #12]
 8006762:	065b      	lsls	r3, r3, #25
 8006764:	f53f af12 	bmi.w	800658c <_vfiprintf_r+0x4c>
 8006768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800676a:	e711      	b.n	8006590 <_vfiprintf_r+0x50>
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	462a      	mov	r2, r5
 8006772:	4630      	mov	r0, r6
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <_vfiprintf_r+0x258>)
 8006776:	a904      	add	r1, sp, #16
 8006778:	f000 f882 	bl	8006880 <_printf_i>
 800677c:	e7e4      	b.n	8006748 <_vfiprintf_r+0x208>
 800677e:	bf00      	nop
 8006780:	08007534 	.word	0x08007534
 8006784:	08007554 	.word	0x08007554
 8006788:	08007514 	.word	0x08007514
 800678c:	080074de 	.word	0x080074de
 8006790:	080074e8 	.word	0x080074e8
 8006794:	00000000 	.word	0x00000000
 8006798:	0800651b 	.word	0x0800651b
 800679c:	080074e4 	.word	0x080074e4

080067a0 <_printf_common>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	4616      	mov	r6, r2
 80067a6:	4699      	mov	r9, r3
 80067a8:	688a      	ldr	r2, [r1, #8]
 80067aa:	690b      	ldr	r3, [r1, #16]
 80067ac:	4607      	mov	r7, r0
 80067ae:	4293      	cmp	r3, r2
 80067b0:	bfb8      	it	lt
 80067b2:	4613      	movlt	r3, r2
 80067b4:	6033      	str	r3, [r6, #0]
 80067b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ba:	460c      	mov	r4, r1
 80067bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c0:	b10a      	cbz	r2, 80067c6 <_printf_common+0x26>
 80067c2:	3301      	adds	r3, #1
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	0699      	lsls	r1, r3, #26
 80067ca:	bf42      	ittt	mi
 80067cc:	6833      	ldrmi	r3, [r6, #0]
 80067ce:	3302      	addmi	r3, #2
 80067d0:	6033      	strmi	r3, [r6, #0]
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	f015 0506 	ands.w	r5, r5, #6
 80067d8:	d106      	bne.n	80067e8 <_printf_common+0x48>
 80067da:	f104 0a19 	add.w	sl, r4, #25
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	6832      	ldr	r2, [r6, #0]
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	dc28      	bgt.n	800683a <_printf_common+0x9a>
 80067e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067ec:	1e13      	subs	r3, r2, #0
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	bf18      	it	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	0692      	lsls	r2, r2, #26
 80067f6:	d42d      	bmi.n	8006854 <_printf_common+0xb4>
 80067f8:	4649      	mov	r1, r9
 80067fa:	4638      	mov	r0, r7
 80067fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006800:	47c0      	blx	r8
 8006802:	3001      	adds	r0, #1
 8006804:	d020      	beq.n	8006848 <_printf_common+0xa8>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	68e5      	ldr	r5, [r4, #12]
 800680a:	f003 0306 	and.w	r3, r3, #6
 800680e:	2b04      	cmp	r3, #4
 8006810:	bf18      	it	ne
 8006812:	2500      	movne	r5, #0
 8006814:	6832      	ldr	r2, [r6, #0]
 8006816:	f04f 0600 	mov.w	r6, #0
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	bf08      	it	eq
 800681e:	1aad      	subeq	r5, r5, r2
 8006820:	6922      	ldr	r2, [r4, #16]
 8006822:	bf08      	it	eq
 8006824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006828:	4293      	cmp	r3, r2
 800682a:	bfc4      	itt	gt
 800682c:	1a9b      	subgt	r3, r3, r2
 800682e:	18ed      	addgt	r5, r5, r3
 8006830:	341a      	adds	r4, #26
 8006832:	42b5      	cmp	r5, r6
 8006834:	d11a      	bne.n	800686c <_printf_common+0xcc>
 8006836:	2000      	movs	r0, #0
 8006838:	e008      	b.n	800684c <_printf_common+0xac>
 800683a:	2301      	movs	r3, #1
 800683c:	4652      	mov	r2, sl
 800683e:	4649      	mov	r1, r9
 8006840:	4638      	mov	r0, r7
 8006842:	47c0      	blx	r8
 8006844:	3001      	adds	r0, #1
 8006846:	d103      	bne.n	8006850 <_printf_common+0xb0>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006850:	3501      	adds	r5, #1
 8006852:	e7c4      	b.n	80067de <_printf_common+0x3e>
 8006854:	2030      	movs	r0, #48	; 0x30
 8006856:	18e1      	adds	r1, r4, r3
 8006858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006862:	4422      	add	r2, r4
 8006864:	3302      	adds	r3, #2
 8006866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800686a:	e7c5      	b.n	80067f8 <_printf_common+0x58>
 800686c:	2301      	movs	r3, #1
 800686e:	4622      	mov	r2, r4
 8006870:	4649      	mov	r1, r9
 8006872:	4638      	mov	r0, r7
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d0e6      	beq.n	8006848 <_printf_common+0xa8>
 800687a:	3601      	adds	r6, #1
 800687c:	e7d9      	b.n	8006832 <_printf_common+0x92>
	...

08006880 <_printf_i>:
 8006880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	7e27      	ldrb	r7, [r4, #24]
 8006888:	4691      	mov	r9, r2
 800688a:	2f78      	cmp	r7, #120	; 0x78
 800688c:	4680      	mov	r8, r0
 800688e:	469a      	mov	sl, r3
 8006890:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006896:	d807      	bhi.n	80068a8 <_printf_i+0x28>
 8006898:	2f62      	cmp	r7, #98	; 0x62
 800689a:	d80a      	bhi.n	80068b2 <_printf_i+0x32>
 800689c:	2f00      	cmp	r7, #0
 800689e:	f000 80d9 	beq.w	8006a54 <_printf_i+0x1d4>
 80068a2:	2f58      	cmp	r7, #88	; 0x58
 80068a4:	f000 80a4 	beq.w	80069f0 <_printf_i+0x170>
 80068a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068b0:	e03a      	b.n	8006928 <_printf_i+0xa8>
 80068b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068b6:	2b15      	cmp	r3, #21
 80068b8:	d8f6      	bhi.n	80068a8 <_printf_i+0x28>
 80068ba:	a001      	add	r0, pc, #4	; (adr r0, 80068c0 <_printf_i+0x40>)
 80068bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068c0:	08006919 	.word	0x08006919
 80068c4:	0800692d 	.word	0x0800692d
 80068c8:	080068a9 	.word	0x080068a9
 80068cc:	080068a9 	.word	0x080068a9
 80068d0:	080068a9 	.word	0x080068a9
 80068d4:	080068a9 	.word	0x080068a9
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	080068a9 	.word	0x080068a9
 80068e0:	080068a9 	.word	0x080068a9
 80068e4:	080068a9 	.word	0x080068a9
 80068e8:	080068a9 	.word	0x080068a9
 80068ec:	08006a3b 	.word	0x08006a3b
 80068f0:	0800695d 	.word	0x0800695d
 80068f4:	08006a1d 	.word	0x08006a1d
 80068f8:	080068a9 	.word	0x080068a9
 80068fc:	080068a9 	.word	0x080068a9
 8006900:	08006a5d 	.word	0x08006a5d
 8006904:	080068a9 	.word	0x080068a9
 8006908:	0800695d 	.word	0x0800695d
 800690c:	080068a9 	.word	0x080068a9
 8006910:	080068a9 	.word	0x080068a9
 8006914:	08006a25 	.word	0x08006a25
 8006918:	680b      	ldr	r3, [r1, #0]
 800691a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	600a      	str	r2, [r1, #0]
 8006924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006928:	2301      	movs	r3, #1
 800692a:	e0a4      	b.n	8006a76 <_printf_i+0x1f6>
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	6808      	ldr	r0, [r1, #0]
 8006930:	062e      	lsls	r6, r5, #24
 8006932:	f100 0304 	add.w	r3, r0, #4
 8006936:	d50a      	bpl.n	800694e <_printf_i+0xce>
 8006938:	6805      	ldr	r5, [r0, #0]
 800693a:	600b      	str	r3, [r1, #0]
 800693c:	2d00      	cmp	r5, #0
 800693e:	da03      	bge.n	8006948 <_printf_i+0xc8>
 8006940:	232d      	movs	r3, #45	; 0x2d
 8006942:	426d      	negs	r5, r5
 8006944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006948:	230a      	movs	r3, #10
 800694a:	485e      	ldr	r0, [pc, #376]	; (8006ac4 <_printf_i+0x244>)
 800694c:	e019      	b.n	8006982 <_printf_i+0x102>
 800694e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006952:	6805      	ldr	r5, [r0, #0]
 8006954:	600b      	str	r3, [r1, #0]
 8006956:	bf18      	it	ne
 8006958:	b22d      	sxthne	r5, r5
 800695a:	e7ef      	b.n	800693c <_printf_i+0xbc>
 800695c:	680b      	ldr	r3, [r1, #0]
 800695e:	6825      	ldr	r5, [r4, #0]
 8006960:	1d18      	adds	r0, r3, #4
 8006962:	6008      	str	r0, [r1, #0]
 8006964:	0628      	lsls	r0, r5, #24
 8006966:	d501      	bpl.n	800696c <_printf_i+0xec>
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	e002      	b.n	8006972 <_printf_i+0xf2>
 800696c:	0669      	lsls	r1, r5, #25
 800696e:	d5fb      	bpl.n	8006968 <_printf_i+0xe8>
 8006970:	881d      	ldrh	r5, [r3, #0]
 8006972:	2f6f      	cmp	r7, #111	; 0x6f
 8006974:	bf0c      	ite	eq
 8006976:	2308      	moveq	r3, #8
 8006978:	230a      	movne	r3, #10
 800697a:	4852      	ldr	r0, [pc, #328]	; (8006ac4 <_printf_i+0x244>)
 800697c:	2100      	movs	r1, #0
 800697e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006982:	6866      	ldr	r6, [r4, #4]
 8006984:	2e00      	cmp	r6, #0
 8006986:	bfa8      	it	ge
 8006988:	6821      	ldrge	r1, [r4, #0]
 800698a:	60a6      	str	r6, [r4, #8]
 800698c:	bfa4      	itt	ge
 800698e:	f021 0104 	bicge.w	r1, r1, #4
 8006992:	6021      	strge	r1, [r4, #0]
 8006994:	b90d      	cbnz	r5, 800699a <_printf_i+0x11a>
 8006996:	2e00      	cmp	r6, #0
 8006998:	d04d      	beq.n	8006a36 <_printf_i+0x1b6>
 800699a:	4616      	mov	r6, r2
 800699c:	fbb5 f1f3 	udiv	r1, r5, r3
 80069a0:	fb03 5711 	mls	r7, r3, r1, r5
 80069a4:	5dc7      	ldrb	r7, [r0, r7]
 80069a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069aa:	462f      	mov	r7, r5
 80069ac:	42bb      	cmp	r3, r7
 80069ae:	460d      	mov	r5, r1
 80069b0:	d9f4      	bls.n	800699c <_printf_i+0x11c>
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d10b      	bne.n	80069ce <_printf_i+0x14e>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	07df      	lsls	r7, r3, #31
 80069ba:	d508      	bpl.n	80069ce <_printf_i+0x14e>
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	6861      	ldr	r1, [r4, #4]
 80069c0:	4299      	cmp	r1, r3
 80069c2:	bfde      	ittt	le
 80069c4:	2330      	movle	r3, #48	; 0x30
 80069c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069ce:	1b92      	subs	r2, r2, r6
 80069d0:	6122      	str	r2, [r4, #16]
 80069d2:	464b      	mov	r3, r9
 80069d4:	4621      	mov	r1, r4
 80069d6:	4640      	mov	r0, r8
 80069d8:	f8cd a000 	str.w	sl, [sp]
 80069dc:	aa03      	add	r2, sp, #12
 80069de:	f7ff fedf 	bl	80067a0 <_printf_common>
 80069e2:	3001      	adds	r0, #1
 80069e4:	d14c      	bne.n	8006a80 <_printf_i+0x200>
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	b004      	add	sp, #16
 80069ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f0:	4834      	ldr	r0, [pc, #208]	; (8006ac4 <_printf_i+0x244>)
 80069f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069f6:	680e      	ldr	r6, [r1, #0]
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80069fe:	061f      	lsls	r7, r3, #24
 8006a00:	600e      	str	r6, [r1, #0]
 8006a02:	d514      	bpl.n	8006a2e <_printf_i+0x1ae>
 8006a04:	07d9      	lsls	r1, r3, #31
 8006a06:	bf44      	itt	mi
 8006a08:	f043 0320 	orrmi.w	r3, r3, #32
 8006a0c:	6023      	strmi	r3, [r4, #0]
 8006a0e:	b91d      	cbnz	r5, 8006a18 <_printf_i+0x198>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	f023 0320 	bic.w	r3, r3, #32
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	2310      	movs	r3, #16
 8006a1a:	e7af      	b.n	800697c <_printf_i+0xfc>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	f043 0320 	orr.w	r3, r3, #32
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	2378      	movs	r3, #120	; 0x78
 8006a26:	4828      	ldr	r0, [pc, #160]	; (8006ac8 <_printf_i+0x248>)
 8006a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a2c:	e7e3      	b.n	80069f6 <_printf_i+0x176>
 8006a2e:	065e      	lsls	r6, r3, #25
 8006a30:	bf48      	it	mi
 8006a32:	b2ad      	uxthmi	r5, r5
 8006a34:	e7e6      	b.n	8006a04 <_printf_i+0x184>
 8006a36:	4616      	mov	r6, r2
 8006a38:	e7bb      	b.n	80069b2 <_printf_i+0x132>
 8006a3a:	680b      	ldr	r3, [r1, #0]
 8006a3c:	6826      	ldr	r6, [r4, #0]
 8006a3e:	1d1d      	adds	r5, r3, #4
 8006a40:	6960      	ldr	r0, [r4, #20]
 8006a42:	600d      	str	r5, [r1, #0]
 8006a44:	0635      	lsls	r5, r6, #24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	d501      	bpl.n	8006a4e <_printf_i+0x1ce>
 8006a4a:	6018      	str	r0, [r3, #0]
 8006a4c:	e002      	b.n	8006a54 <_printf_i+0x1d4>
 8006a4e:	0671      	lsls	r1, r6, #25
 8006a50:	d5fb      	bpl.n	8006a4a <_printf_i+0x1ca>
 8006a52:	8018      	strh	r0, [r3, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	4616      	mov	r6, r2
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	e7ba      	b.n	80069d2 <_printf_i+0x152>
 8006a5c:	680b      	ldr	r3, [r1, #0]
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	600a      	str	r2, [r1, #0]
 8006a62:	681e      	ldr	r6, [r3, #0]
 8006a64:	2100      	movs	r1, #0
 8006a66:	4630      	mov	r0, r6
 8006a68:	6862      	ldr	r2, [r4, #4]
 8006a6a:	f000 fb0d 	bl	8007088 <memchr>
 8006a6e:	b108      	cbz	r0, 8006a74 <_printf_i+0x1f4>
 8006a70:	1b80      	subs	r0, r0, r6
 8006a72:	6060      	str	r0, [r4, #4]
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a7e:	e7a8      	b.n	80069d2 <_printf_i+0x152>
 8006a80:	4632      	mov	r2, r6
 8006a82:	4649      	mov	r1, r9
 8006a84:	4640      	mov	r0, r8
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	47d0      	blx	sl
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d0ab      	beq.n	80069e6 <_printf_i+0x166>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	079b      	lsls	r3, r3, #30
 8006a92:	d413      	bmi.n	8006abc <_printf_i+0x23c>
 8006a94:	68e0      	ldr	r0, [r4, #12]
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	4298      	cmp	r0, r3
 8006a9a:	bfb8      	it	lt
 8006a9c:	4618      	movlt	r0, r3
 8006a9e:	e7a4      	b.n	80069ea <_printf_i+0x16a>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	47d0      	blx	sl
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d09b      	beq.n	80069e6 <_printf_i+0x166>
 8006aae:	3501      	adds	r5, #1
 8006ab0:	68e3      	ldr	r3, [r4, #12]
 8006ab2:	9903      	ldr	r1, [sp, #12]
 8006ab4:	1a5b      	subs	r3, r3, r1
 8006ab6:	42ab      	cmp	r3, r5
 8006ab8:	dcf2      	bgt.n	8006aa0 <_printf_i+0x220>
 8006aba:	e7eb      	b.n	8006a94 <_printf_i+0x214>
 8006abc:	2500      	movs	r5, #0
 8006abe:	f104 0619 	add.w	r6, r4, #25
 8006ac2:	e7f5      	b.n	8006ab0 <_printf_i+0x230>
 8006ac4:	080074ef 	.word	0x080074ef
 8006ac8:	08007500 	.word	0x08007500

08006acc <__swbuf_r>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	460e      	mov	r6, r1
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	b118      	cbz	r0, 8006ade <__swbuf_r+0x12>
 8006ad6:	6983      	ldr	r3, [r0, #24]
 8006ad8:	b90b      	cbnz	r3, 8006ade <__swbuf_r+0x12>
 8006ada:	f000 f9d1 	bl	8006e80 <__sinit>
 8006ade:	4b21      	ldr	r3, [pc, #132]	; (8006b64 <__swbuf_r+0x98>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	d12b      	bne.n	8006b3c <__swbuf_r+0x70>
 8006ae4:	686c      	ldr	r4, [r5, #4]
 8006ae6:	69a3      	ldr	r3, [r4, #24]
 8006ae8:	60a3      	str	r3, [r4, #8]
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	071a      	lsls	r2, r3, #28
 8006aee:	d52f      	bpl.n	8006b50 <__swbuf_r+0x84>
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	b36b      	cbz	r3, 8006b50 <__swbuf_r+0x84>
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	b2f6      	uxtb	r6, r6
 8006afa:	1ac0      	subs	r0, r0, r3
 8006afc:	6963      	ldr	r3, [r4, #20]
 8006afe:	4637      	mov	r7, r6
 8006b00:	4283      	cmp	r3, r0
 8006b02:	dc04      	bgt.n	8006b0e <__swbuf_r+0x42>
 8006b04:	4621      	mov	r1, r4
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 f926 	bl	8006d58 <_fflush_r>
 8006b0c:	bb30      	cbnz	r0, 8006b5c <__swbuf_r+0x90>
 8006b0e:	68a3      	ldr	r3, [r4, #8]
 8006b10:	3001      	adds	r0, #1
 8006b12:	3b01      	subs	r3, #1
 8006b14:	60a3      	str	r3, [r4, #8]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	6022      	str	r2, [r4, #0]
 8006b1c:	701e      	strb	r6, [r3, #0]
 8006b1e:	6963      	ldr	r3, [r4, #20]
 8006b20:	4283      	cmp	r3, r0
 8006b22:	d004      	beq.n	8006b2e <__swbuf_r+0x62>
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	07db      	lsls	r3, r3, #31
 8006b28:	d506      	bpl.n	8006b38 <__swbuf_r+0x6c>
 8006b2a:	2e0a      	cmp	r6, #10
 8006b2c:	d104      	bne.n	8006b38 <__swbuf_r+0x6c>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4628      	mov	r0, r5
 8006b32:	f000 f911 	bl	8006d58 <_fflush_r>
 8006b36:	b988      	cbnz	r0, 8006b5c <__swbuf_r+0x90>
 8006b38:	4638      	mov	r0, r7
 8006b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <__swbuf_r+0x9c>)
 8006b3e:	429c      	cmp	r4, r3
 8006b40:	d101      	bne.n	8006b46 <__swbuf_r+0x7a>
 8006b42:	68ac      	ldr	r4, [r5, #8]
 8006b44:	e7cf      	b.n	8006ae6 <__swbuf_r+0x1a>
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <__swbuf_r+0xa0>)
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	bf08      	it	eq
 8006b4c:	68ec      	ldreq	r4, [r5, #12]
 8006b4e:	e7ca      	b.n	8006ae6 <__swbuf_r+0x1a>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f80c 	bl	8006b70 <__swsetup_r>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d0cb      	beq.n	8006af4 <__swbuf_r+0x28>
 8006b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b60:	e7ea      	b.n	8006b38 <__swbuf_r+0x6c>
 8006b62:	bf00      	nop
 8006b64:	08007534 	.word	0x08007534
 8006b68:	08007554 	.word	0x08007554
 8006b6c:	08007514 	.word	0x08007514

08006b70 <__swsetup_r>:
 8006b70:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <__swsetup_r+0xcc>)
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	681d      	ldr	r5, [r3, #0]
 8006b76:	4606      	mov	r6, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	b125      	cbz	r5, 8006b86 <__swsetup_r+0x16>
 8006b7c:	69ab      	ldr	r3, [r5, #24]
 8006b7e:	b913      	cbnz	r3, 8006b86 <__swsetup_r+0x16>
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f97d 	bl	8006e80 <__sinit>
 8006b86:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <__swsetup_r+0xd0>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d10f      	bne.n	8006bac <__swsetup_r+0x3c>
 8006b8c:	686c      	ldr	r4, [r5, #4]
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b94:	0719      	lsls	r1, r3, #28
 8006b96:	d42c      	bmi.n	8006bf2 <__swsetup_r+0x82>
 8006b98:	06dd      	lsls	r5, r3, #27
 8006b9a:	d411      	bmi.n	8006bc0 <__swsetup_r+0x50>
 8006b9c:	2309      	movs	r3, #9
 8006b9e:	6033      	str	r3, [r6, #0]
 8006ba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	e03e      	b.n	8006c2a <__swsetup_r+0xba>
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <__swsetup_r+0xd4>)
 8006bae:	429c      	cmp	r4, r3
 8006bb0:	d101      	bne.n	8006bb6 <__swsetup_r+0x46>
 8006bb2:	68ac      	ldr	r4, [r5, #8]
 8006bb4:	e7eb      	b.n	8006b8e <__swsetup_r+0x1e>
 8006bb6:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <__swsetup_r+0xd8>)
 8006bb8:	429c      	cmp	r4, r3
 8006bba:	bf08      	it	eq
 8006bbc:	68ec      	ldreq	r4, [r5, #12]
 8006bbe:	e7e6      	b.n	8006b8e <__swsetup_r+0x1e>
 8006bc0:	0758      	lsls	r0, r3, #29
 8006bc2:	d512      	bpl.n	8006bea <__swsetup_r+0x7a>
 8006bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bc6:	b141      	cbz	r1, 8006bda <__swsetup_r+0x6a>
 8006bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	d002      	beq.n	8006bd6 <__swsetup_r+0x66>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7ff fac1 	bl	8006158 <_free_r>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	2300      	movs	r3, #0
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f043 0308 	orr.w	r3, r3, #8
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	b94b      	cbnz	r3, 8006c0a <__swsetup_r+0x9a>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d003      	beq.n	8006c0a <__swsetup_r+0x9a>
 8006c02:	4621      	mov	r1, r4
 8006c04:	4630      	mov	r0, r6
 8006c06:	f000 f9ff 	bl	8007008 <__smakebuf_r>
 8006c0a:	89a0      	ldrh	r0, [r4, #12]
 8006c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c10:	f010 0301 	ands.w	r3, r0, #1
 8006c14:	d00a      	beq.n	8006c2c <__swsetup_r+0xbc>
 8006c16:	2300      	movs	r3, #0
 8006c18:	60a3      	str	r3, [r4, #8]
 8006c1a:	6963      	ldr	r3, [r4, #20]
 8006c1c:	425b      	negs	r3, r3
 8006c1e:	61a3      	str	r3, [r4, #24]
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	b943      	cbnz	r3, 8006c36 <__swsetup_r+0xc6>
 8006c24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c28:	d1ba      	bne.n	8006ba0 <__swsetup_r+0x30>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	0781      	lsls	r1, r0, #30
 8006c2e:	bf58      	it	pl
 8006c30:	6963      	ldrpl	r3, [r4, #20]
 8006c32:	60a3      	str	r3, [r4, #8]
 8006c34:	e7f4      	b.n	8006c20 <__swsetup_r+0xb0>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e7f7      	b.n	8006c2a <__swsetup_r+0xba>
 8006c3a:	bf00      	nop
 8006c3c:	2000002c 	.word	0x2000002c
 8006c40:	08007534 	.word	0x08007534
 8006c44:	08007554 	.word	0x08007554
 8006c48:	08007514 	.word	0x08007514

08006c4c <__sflush_r>:
 8006c4c:	898a      	ldrh	r2, [r1, #12]
 8006c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c52:	4605      	mov	r5, r0
 8006c54:	0710      	lsls	r0, r2, #28
 8006c56:	460c      	mov	r4, r1
 8006c58:	d458      	bmi.n	8006d0c <__sflush_r+0xc0>
 8006c5a:	684b      	ldr	r3, [r1, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dc05      	bgt.n	8006c6c <__sflush_r+0x20>
 8006c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dc02      	bgt.n	8006c6c <__sflush_r+0x20>
 8006c66:	2000      	movs	r0, #0
 8006c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	d0f9      	beq.n	8006c66 <__sflush_r+0x1a>
 8006c72:	2300      	movs	r3, #0
 8006c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c78:	682f      	ldr	r7, [r5, #0]
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	d032      	beq.n	8006ce4 <__sflush_r+0x98>
 8006c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	075a      	lsls	r2, r3, #29
 8006c84:	d505      	bpl.n	8006c92 <__sflush_r+0x46>
 8006c86:	6863      	ldr	r3, [r4, #4]
 8006c88:	1ac0      	subs	r0, r0, r3
 8006c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c8c:	b10b      	cbz	r3, 8006c92 <__sflush_r+0x46>
 8006c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c90:	1ac0      	subs	r0, r0, r3
 8006c92:	2300      	movs	r3, #0
 8006c94:	4602      	mov	r2, r0
 8006c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c98:	4628      	mov	r0, r5
 8006c9a:	6a21      	ldr	r1, [r4, #32]
 8006c9c:	47b0      	blx	r6
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	d106      	bne.n	8006cb2 <__sflush_r+0x66>
 8006ca4:	6829      	ldr	r1, [r5, #0]
 8006ca6:	291d      	cmp	r1, #29
 8006ca8:	d82c      	bhi.n	8006d04 <__sflush_r+0xb8>
 8006caa:	4a2a      	ldr	r2, [pc, #168]	; (8006d54 <__sflush_r+0x108>)
 8006cac:	40ca      	lsrs	r2, r1
 8006cae:	07d6      	lsls	r6, r2, #31
 8006cb0:	d528      	bpl.n	8006d04 <__sflush_r+0xb8>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	6062      	str	r2, [r4, #4]
 8006cb6:	6922      	ldr	r2, [r4, #16]
 8006cb8:	04d9      	lsls	r1, r3, #19
 8006cba:	6022      	str	r2, [r4, #0]
 8006cbc:	d504      	bpl.n	8006cc8 <__sflush_r+0x7c>
 8006cbe:	1c42      	adds	r2, r0, #1
 8006cc0:	d101      	bne.n	8006cc6 <__sflush_r+0x7a>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	b903      	cbnz	r3, 8006cc8 <__sflush_r+0x7c>
 8006cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8006cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cca:	602f      	str	r7, [r5, #0]
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d0ca      	beq.n	8006c66 <__sflush_r+0x1a>
 8006cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cd4:	4299      	cmp	r1, r3
 8006cd6:	d002      	beq.n	8006cde <__sflush_r+0x92>
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f7ff fa3d 	bl	8006158 <_free_r>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ce2:	e7c1      	b.n	8006c68 <__sflush_r+0x1c>
 8006ce4:	6a21      	ldr	r1, [r4, #32]
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b0      	blx	r6
 8006cec:	1c41      	adds	r1, r0, #1
 8006cee:	d1c7      	bne.n	8006c80 <__sflush_r+0x34>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0c4      	beq.n	8006c80 <__sflush_r+0x34>
 8006cf6:	2b1d      	cmp	r3, #29
 8006cf8:	d001      	beq.n	8006cfe <__sflush_r+0xb2>
 8006cfa:	2b16      	cmp	r3, #22
 8006cfc:	d101      	bne.n	8006d02 <__sflush_r+0xb6>
 8006cfe:	602f      	str	r7, [r5, #0]
 8006d00:	e7b1      	b.n	8006c66 <__sflush_r+0x1a>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	e7ad      	b.n	8006c68 <__sflush_r+0x1c>
 8006d0c:	690f      	ldr	r7, [r1, #16]
 8006d0e:	2f00      	cmp	r7, #0
 8006d10:	d0a9      	beq.n	8006c66 <__sflush_r+0x1a>
 8006d12:	0793      	lsls	r3, r2, #30
 8006d14:	bf18      	it	ne
 8006d16:	2300      	movne	r3, #0
 8006d18:	680e      	ldr	r6, [r1, #0]
 8006d1a:	bf08      	it	eq
 8006d1c:	694b      	ldreq	r3, [r1, #20]
 8006d1e:	eba6 0807 	sub.w	r8, r6, r7
 8006d22:	600f      	str	r7, [r1, #0]
 8006d24:	608b      	str	r3, [r1, #8]
 8006d26:	f1b8 0f00 	cmp.w	r8, #0
 8006d2a:	dd9c      	ble.n	8006c66 <__sflush_r+0x1a>
 8006d2c:	4643      	mov	r3, r8
 8006d2e:	463a      	mov	r2, r7
 8006d30:	4628      	mov	r0, r5
 8006d32:	6a21      	ldr	r1, [r4, #32]
 8006d34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d36:	47b0      	blx	r6
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	dc06      	bgt.n	8006d4a <__sflush_r+0xfe>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d46:	81a3      	strh	r3, [r4, #12]
 8006d48:	e78e      	b.n	8006c68 <__sflush_r+0x1c>
 8006d4a:	4407      	add	r7, r0
 8006d4c:	eba8 0800 	sub.w	r8, r8, r0
 8006d50:	e7e9      	b.n	8006d26 <__sflush_r+0xda>
 8006d52:	bf00      	nop
 8006d54:	20400001 	.word	0x20400001

08006d58 <_fflush_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	690b      	ldr	r3, [r1, #16]
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	b913      	cbnz	r3, 8006d68 <_fflush_r+0x10>
 8006d62:	2500      	movs	r5, #0
 8006d64:	4628      	mov	r0, r5
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	b118      	cbz	r0, 8006d72 <_fflush_r+0x1a>
 8006d6a:	6983      	ldr	r3, [r0, #24]
 8006d6c:	b90b      	cbnz	r3, 8006d72 <_fflush_r+0x1a>
 8006d6e:	f000 f887 	bl	8006e80 <__sinit>
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <_fflush_r+0x6c>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d11b      	bne.n	8006db0 <_fflush_r+0x58>
 8006d78:	686c      	ldr	r4, [r5, #4]
 8006d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0ef      	beq.n	8006d62 <_fflush_r+0xa>
 8006d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d84:	07d0      	lsls	r0, r2, #31
 8006d86:	d404      	bmi.n	8006d92 <_fflush_r+0x3a>
 8006d88:	0599      	lsls	r1, r3, #22
 8006d8a:	d402      	bmi.n	8006d92 <_fflush_r+0x3a>
 8006d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d8e:	f000 f915 	bl	8006fbc <__retarget_lock_acquire_recursive>
 8006d92:	4628      	mov	r0, r5
 8006d94:	4621      	mov	r1, r4
 8006d96:	f7ff ff59 	bl	8006c4c <__sflush_r>
 8006d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	07da      	lsls	r2, r3, #31
 8006da0:	d4e0      	bmi.n	8006d64 <_fflush_r+0xc>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	059b      	lsls	r3, r3, #22
 8006da6:	d4dd      	bmi.n	8006d64 <_fflush_r+0xc>
 8006da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006daa:	f000 f908 	bl	8006fbe <__retarget_lock_release_recursive>
 8006dae:	e7d9      	b.n	8006d64 <_fflush_r+0xc>
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <_fflush_r+0x70>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	d101      	bne.n	8006dba <_fflush_r+0x62>
 8006db6:	68ac      	ldr	r4, [r5, #8]
 8006db8:	e7df      	b.n	8006d7a <_fflush_r+0x22>
 8006dba:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <_fflush_r+0x74>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	bf08      	it	eq
 8006dc0:	68ec      	ldreq	r4, [r5, #12]
 8006dc2:	e7da      	b.n	8006d7a <_fflush_r+0x22>
 8006dc4:	08007534 	.word	0x08007534
 8006dc8:	08007554 	.word	0x08007554
 8006dcc:	08007514 	.word	0x08007514

08006dd0 <std>:
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dde:	6083      	str	r3, [r0, #8]
 8006de0:	8181      	strh	r1, [r0, #12]
 8006de2:	6643      	str	r3, [r0, #100]	; 0x64
 8006de4:	81c2      	strh	r2, [r0, #14]
 8006de6:	6183      	str	r3, [r0, #24]
 8006de8:	4619      	mov	r1, r3
 8006dea:	2208      	movs	r2, #8
 8006dec:	305c      	adds	r0, #92	; 0x5c
 8006dee:	f7ff f9ab 	bl	8006148 <memset>
 8006df2:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <std+0x38>)
 8006df4:	6224      	str	r4, [r4, #32]
 8006df6:	6263      	str	r3, [r4, #36]	; 0x24
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <std+0x3c>)
 8006dfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <std+0x40>)
 8006dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <std+0x44>)
 8006e02:	6323      	str	r3, [r4, #48]	; 0x30
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	bf00      	nop
 8006e08:	080070b5 	.word	0x080070b5
 8006e0c:	080070d7 	.word	0x080070d7
 8006e10:	0800710f 	.word	0x0800710f
 8006e14:	08007133 	.word	0x08007133

08006e18 <_cleanup_r>:
 8006e18:	4901      	ldr	r1, [pc, #4]	; (8006e20 <_cleanup_r+0x8>)
 8006e1a:	f000 b8af 	b.w	8006f7c <_fwalk_reent>
 8006e1e:	bf00      	nop
 8006e20:	08006d59 	.word	0x08006d59

08006e24 <__sfmoreglue>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	2568      	movs	r5, #104	; 0x68
 8006e28:	1e4a      	subs	r2, r1, #1
 8006e2a:	4355      	muls	r5, r2
 8006e2c:	460e      	mov	r6, r1
 8006e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e32:	f7ff f9dd 	bl	80061f0 <_malloc_r>
 8006e36:	4604      	mov	r4, r0
 8006e38:	b140      	cbz	r0, 8006e4c <__sfmoreglue+0x28>
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e40:	300c      	adds	r0, #12
 8006e42:	60a0      	str	r0, [r4, #8]
 8006e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e48:	f7ff f97e 	bl	8006148 <memset>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}

08006e50 <__sfp_lock_acquire>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__sfp_lock_acquire+0x8>)
 8006e52:	f000 b8b3 	b.w	8006fbc <__retarget_lock_acquire_recursive>
 8006e56:	bf00      	nop
 8006e58:	20000568 	.word	0x20000568

08006e5c <__sfp_lock_release>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__sfp_lock_release+0x8>)
 8006e5e:	f000 b8ae 	b.w	8006fbe <__retarget_lock_release_recursive>
 8006e62:	bf00      	nop
 8006e64:	20000568 	.word	0x20000568

08006e68 <__sinit_lock_acquire>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__sinit_lock_acquire+0x8>)
 8006e6a:	f000 b8a7 	b.w	8006fbc <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20000563 	.word	0x20000563

08006e74 <__sinit_lock_release>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__sinit_lock_release+0x8>)
 8006e76:	f000 b8a2 	b.w	8006fbe <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000563 	.word	0x20000563

08006e80 <__sinit>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4604      	mov	r4, r0
 8006e84:	f7ff fff0 	bl	8006e68 <__sinit_lock_acquire>
 8006e88:	69a3      	ldr	r3, [r4, #24]
 8006e8a:	b11b      	cbz	r3, 8006e94 <__sinit+0x14>
 8006e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e90:	f7ff bff0 	b.w	8006e74 <__sinit_lock_release>
 8006e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e98:	6523      	str	r3, [r4, #80]	; 0x50
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <__sinit+0x68>)
 8006e9c:	4a13      	ldr	r2, [pc, #76]	; (8006eec <__sinit+0x6c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	bf08      	it	eq
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	bf08      	it	eq
 8006eac:	61a3      	streq	r3, [r4, #24]
 8006eae:	f000 f81f 	bl	8006ef0 <__sfp>
 8006eb2:	6060      	str	r0, [r4, #4]
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 f81b 	bl	8006ef0 <__sfp>
 8006eba:	60a0      	str	r0, [r4, #8]
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 f817 	bl	8006ef0 <__sfp>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2104      	movs	r1, #4
 8006ec6:	60e0      	str	r0, [r4, #12]
 8006ec8:	6860      	ldr	r0, [r4, #4]
 8006eca:	f7ff ff81 	bl	8006dd0 <std>
 8006ece:	2201      	movs	r2, #1
 8006ed0:	2109      	movs	r1, #9
 8006ed2:	68a0      	ldr	r0, [r4, #8]
 8006ed4:	f7ff ff7c 	bl	8006dd0 <std>
 8006ed8:	2202      	movs	r2, #2
 8006eda:	2112      	movs	r1, #18
 8006edc:	68e0      	ldr	r0, [r4, #12]
 8006ede:	f7ff ff77 	bl	8006dd0 <std>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61a3      	str	r3, [r4, #24]
 8006ee6:	e7d1      	b.n	8006e8c <__sinit+0xc>
 8006ee8:	08007428 	.word	0x08007428
 8006eec:	08006e19 	.word	0x08006e19

08006ef0 <__sfp>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	f7ff ffac 	bl	8006e50 <__sfp_lock_acquire>
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <__sfp+0x84>)
 8006efa:	681e      	ldr	r6, [r3, #0]
 8006efc:	69b3      	ldr	r3, [r6, #24]
 8006efe:	b913      	cbnz	r3, 8006f06 <__sfp+0x16>
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff ffbd 	bl	8006e80 <__sinit>
 8006f06:	3648      	adds	r6, #72	; 0x48
 8006f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	d503      	bpl.n	8006f18 <__sfp+0x28>
 8006f10:	6833      	ldr	r3, [r6, #0]
 8006f12:	b30b      	cbz	r3, 8006f58 <__sfp+0x68>
 8006f14:	6836      	ldr	r6, [r6, #0]
 8006f16:	e7f7      	b.n	8006f08 <__sfp+0x18>
 8006f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f1c:	b9d5      	cbnz	r5, 8006f54 <__sfp+0x64>
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <__sfp+0x88>)
 8006f20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f24:	60e3      	str	r3, [r4, #12]
 8006f26:	6665      	str	r5, [r4, #100]	; 0x64
 8006f28:	f000 f847 	bl	8006fba <__retarget_lock_init_recursive>
 8006f2c:	f7ff ff96 	bl	8006e5c <__sfp_lock_release>
 8006f30:	2208      	movs	r2, #8
 8006f32:	4629      	mov	r1, r5
 8006f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f3c:	6025      	str	r5, [r4, #0]
 8006f3e:	61a5      	str	r5, [r4, #24]
 8006f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f44:	f7ff f900 	bl	8006148 <memset>
 8006f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f50:	4620      	mov	r0, r4
 8006f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f54:	3468      	adds	r4, #104	; 0x68
 8006f56:	e7d9      	b.n	8006f0c <__sfp+0x1c>
 8006f58:	2104      	movs	r1, #4
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f7ff ff62 	bl	8006e24 <__sfmoreglue>
 8006f60:	4604      	mov	r4, r0
 8006f62:	6030      	str	r0, [r6, #0]
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d1d5      	bne.n	8006f14 <__sfp+0x24>
 8006f68:	f7ff ff78 	bl	8006e5c <__sfp_lock_release>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	e7ee      	b.n	8006f50 <__sfp+0x60>
 8006f72:	bf00      	nop
 8006f74:	08007428 	.word	0x08007428
 8006f78:	ffff0001 	.word	0xffff0001

08006f7c <_fwalk_reent>:
 8006f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	4606      	mov	r6, r0
 8006f82:	4688      	mov	r8, r1
 8006f84:	2700      	movs	r7, #0
 8006f86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8006f92:	d505      	bpl.n	8006fa0 <_fwalk_reent+0x24>
 8006f94:	6824      	ldr	r4, [r4, #0]
 8006f96:	2c00      	cmp	r4, #0
 8006f98:	d1f7      	bne.n	8006f8a <_fwalk_reent+0xe>
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa0:	89ab      	ldrh	r3, [r5, #12]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d907      	bls.n	8006fb6 <_fwalk_reent+0x3a>
 8006fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006faa:	3301      	adds	r3, #1
 8006fac:	d003      	beq.n	8006fb6 <_fwalk_reent+0x3a>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	47c0      	blx	r8
 8006fb4:	4307      	orrs	r7, r0
 8006fb6:	3568      	adds	r5, #104	; 0x68
 8006fb8:	e7e9      	b.n	8006f8e <_fwalk_reent+0x12>

08006fba <__retarget_lock_init_recursive>:
 8006fba:	4770      	bx	lr

08006fbc <__retarget_lock_acquire_recursive>:
 8006fbc:	4770      	bx	lr

08006fbe <__retarget_lock_release_recursive>:
 8006fbe:	4770      	bx	lr

08006fc0 <__swhatbuf_r>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	460e      	mov	r6, r1
 8006fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc8:	4614      	mov	r4, r2
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	461d      	mov	r5, r3
 8006fce:	b096      	sub	sp, #88	; 0x58
 8006fd0:	da07      	bge.n	8006fe2 <__swhatbuf_r+0x22>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	89b3      	ldrh	r3, [r6, #12]
 8006fd8:	061a      	lsls	r2, r3, #24
 8006fda:	d410      	bmi.n	8006ffe <__swhatbuf_r+0x3e>
 8006fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe0:	e00e      	b.n	8007000 <__swhatbuf_r+0x40>
 8006fe2:	466a      	mov	r2, sp
 8006fe4:	f000 f8cc 	bl	8007180 <_fstat_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dbf2      	blt.n	8006fd2 <__swhatbuf_r+0x12>
 8006fec:	9a01      	ldr	r2, [sp, #4]
 8006fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ff6:	425a      	negs	r2, r3
 8006ff8:	415a      	adcs	r2, r3
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	e7ee      	b.n	8006fdc <__swhatbuf_r+0x1c>
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	2000      	movs	r0, #0
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	b016      	add	sp, #88	; 0x58
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__smakebuf_r>:
 8007008:	898b      	ldrh	r3, [r1, #12]
 800700a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800700c:	079d      	lsls	r5, r3, #30
 800700e:	4606      	mov	r6, r0
 8007010:	460c      	mov	r4, r1
 8007012:	d507      	bpl.n	8007024 <__smakebuf_r+0x1c>
 8007014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	6123      	str	r3, [r4, #16]
 800701c:	2301      	movs	r3, #1
 800701e:	6163      	str	r3, [r4, #20]
 8007020:	b002      	add	sp, #8
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	466a      	mov	r2, sp
 8007026:	ab01      	add	r3, sp, #4
 8007028:	f7ff ffca 	bl	8006fc0 <__swhatbuf_r>
 800702c:	9900      	ldr	r1, [sp, #0]
 800702e:	4605      	mov	r5, r0
 8007030:	4630      	mov	r0, r6
 8007032:	f7ff f8dd 	bl	80061f0 <_malloc_r>
 8007036:	b948      	cbnz	r0, 800704c <__smakebuf_r+0x44>
 8007038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703c:	059a      	lsls	r2, r3, #22
 800703e:	d4ef      	bmi.n	8007020 <__smakebuf_r+0x18>
 8007040:	f023 0303 	bic.w	r3, r3, #3
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	e7e3      	b.n	8007014 <__smakebuf_r+0xc>
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <__smakebuf_r+0x7c>)
 800704e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	6020      	str	r0, [r4, #0]
 8007054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	9b00      	ldr	r3, [sp, #0]
 800705c:	6120      	str	r0, [r4, #16]
 800705e:	6163      	str	r3, [r4, #20]
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	b15b      	cbz	r3, 800707c <__smakebuf_r+0x74>
 8007064:	4630      	mov	r0, r6
 8007066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800706a:	f000 f89b 	bl	80071a4 <_isatty_r>
 800706e:	b128      	cbz	r0, 800707c <__smakebuf_r+0x74>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	89a0      	ldrh	r0, [r4, #12]
 800707e:	4305      	orrs	r5, r0
 8007080:	81a5      	strh	r5, [r4, #12]
 8007082:	e7cd      	b.n	8007020 <__smakebuf_r+0x18>
 8007084:	08006e19 	.word	0x08006e19

08007088 <memchr>:
 8007088:	4603      	mov	r3, r0
 800708a:	b510      	push	{r4, lr}
 800708c:	b2c9      	uxtb	r1, r1
 800708e:	4402      	add	r2, r0
 8007090:	4293      	cmp	r3, r2
 8007092:	4618      	mov	r0, r3
 8007094:	d101      	bne.n	800709a <memchr+0x12>
 8007096:	2000      	movs	r0, #0
 8007098:	e003      	b.n	80070a2 <memchr+0x1a>
 800709a:	7804      	ldrb	r4, [r0, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	428c      	cmp	r4, r1
 80070a0:	d1f6      	bne.n	8007090 <memchr+0x8>
 80070a2:	bd10      	pop	{r4, pc}

080070a4 <_malloc_usable_size_r>:
 80070a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a8:	1f18      	subs	r0, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bfbc      	itt	lt
 80070ae:	580b      	ldrlt	r3, [r1, r0]
 80070b0:	18c0      	addlt	r0, r0, r3
 80070b2:	4770      	bx	lr

080070b4 <__sread>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	460c      	mov	r4, r1
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	f000 f894 	bl	80071e8 <_read_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	bfab      	itete	ge
 80070c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070c6:	89a3      	ldrhlt	r3, [r4, #12]
 80070c8:	181b      	addge	r3, r3, r0
 80070ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ce:	bfac      	ite	ge
 80070d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070d2:	81a3      	strhlt	r3, [r4, #12]
 80070d4:	bd10      	pop	{r4, pc}

080070d6 <__swrite>:
 80070d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	461f      	mov	r7, r3
 80070dc:	898b      	ldrh	r3, [r1, #12]
 80070de:	4605      	mov	r5, r0
 80070e0:	05db      	lsls	r3, r3, #23
 80070e2:	460c      	mov	r4, r1
 80070e4:	4616      	mov	r6, r2
 80070e6:	d505      	bpl.n	80070f4 <__swrite+0x1e>
 80070e8:	2302      	movs	r3, #2
 80070ea:	2200      	movs	r2, #0
 80070ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f0:	f000 f868 	bl	80071c4 <_lseek_r>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	4632      	mov	r2, r6
 80070f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	4628      	mov	r0, r5
 8007100:	463b      	mov	r3, r7
 8007102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	f000 b817 	b.w	800713c <_write_r>

0800710e <__sseek>:
 800710e:	b510      	push	{r4, lr}
 8007110:	460c      	mov	r4, r1
 8007112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007116:	f000 f855 	bl	80071c4 <_lseek_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	bf15      	itete	ne
 8007120:	6560      	strne	r0, [r4, #84]	; 0x54
 8007122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800712a:	81a3      	strheq	r3, [r4, #12]
 800712c:	bf18      	it	ne
 800712e:	81a3      	strhne	r3, [r4, #12]
 8007130:	bd10      	pop	{r4, pc}

08007132 <__sclose>:
 8007132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007136:	f000 b813 	b.w	8007160 <_close_r>
	...

0800713c <_write_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	4611      	mov	r1, r2
 8007144:	2200      	movs	r2, #0
 8007146:	4d05      	ldr	r5, [pc, #20]	; (800715c <_write_r+0x20>)
 8007148:	602a      	str	r2, [r5, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f7f9 fbd8 	bl	8000900 <_write>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_write_r+0x1e>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_write_r+0x1e>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	2000055c 	.word	0x2000055c

08007160 <_close_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	2300      	movs	r3, #0
 8007164:	4d05      	ldr	r5, [pc, #20]	; (800717c <_close_r+0x1c>)
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7f9 fbe4 	bl	8000938 <_close>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_close_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_close_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	2000055c 	.word	0x2000055c

08007180 <_fstat_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	2300      	movs	r3, #0
 8007184:	4d06      	ldr	r5, [pc, #24]	; (80071a0 <_fstat_r+0x20>)
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	f7f9 fbde 	bl	800094e <_fstat>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	d102      	bne.n	800719c <_fstat_r+0x1c>
 8007196:	682b      	ldr	r3, [r5, #0]
 8007198:	b103      	cbz	r3, 800719c <_fstat_r+0x1c>
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	bd38      	pop	{r3, r4, r5, pc}
 800719e:	bf00      	nop
 80071a0:	2000055c 	.word	0x2000055c

080071a4 <_isatty_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	2300      	movs	r3, #0
 80071a8:	4d05      	ldr	r5, [pc, #20]	; (80071c0 <_isatty_r+0x1c>)
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7f9 fbdc 	bl	800096c <_isatty>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_isatty_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_isatty_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	2000055c 	.word	0x2000055c

080071c4 <_lseek_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	2200      	movs	r2, #0
 80071ce:	4d05      	ldr	r5, [pc, #20]	; (80071e4 <_lseek_r+0x20>)
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7f9 fbd4 	bl	8000980 <_lseek>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_lseek_r+0x1e>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_lseek_r+0x1e>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	2000055c 	.word	0x2000055c

080071e8 <_read_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	2200      	movs	r2, #0
 80071f2:	4d05      	ldr	r5, [pc, #20]	; (8007208 <_read_r+0x20>)
 80071f4:	602a      	str	r2, [r5, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f7f9 fb65 	bl	80008c6 <_read>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_read_r+0x1e>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_read_r+0x1e>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	2000055c 	.word	0x2000055c

0800720c <_init>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr

08007218 <_fini>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr
