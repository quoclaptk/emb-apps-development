
STM32F103C8T6-DTH11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002950  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08002b78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002b78  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093d6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001897  00000000  00000000  0002946f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195e0  00000000  00000000  0002bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094f8  00000000  00000000  00045218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008495f  00000000  00000000  0004e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d306f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002370  00000000  00000000  000d30c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a44 	.word	0x08002a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a44 	.word	0x08002a44

0800014c <_Z8delay_usm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t us) /* 20us<time<40us */
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

}
 8000154:	bf00      	nop
 8000156:	370c      	adds	r7, #12
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
	...

08000160 <_Z9i2c_writehh>:
void i2c_write(uint8_t addr, uint8_t data)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af02      	add	r7, sp, #8
 8000166:	4603      	mov	r3, r0
 8000168:	460a      	mov	r2, r1
 800016a:	71fb      	strb	r3, [r7, #7]
 800016c:	4613      	mov	r3, r2
 800016e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, addr, &data, 1, 10);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	b299      	uxth	r1, r3
 8000174:	1dba      	adds	r2, r7, #6
 8000176:	230a      	movs	r3, #10
 8000178:	9300      	str	r3, [sp, #0]
 800017a:	2301      	movs	r3, #1
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <_Z9i2c_writehh+0x2c>)
 800017e:	f000 ff25 	bl	8000fcc <HAL_I2C_Master_Transmit>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	200000a0 	.word	0x200000a0

08000190 <_Z9readDHT11v>:
LCD16x2 lcd(0x27, 16, 2);


uint32_t readDHT11(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b088      	sub	sp, #32
 8000194:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

	uint32_t myData = 0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	617b      	str	r3, [r7, #20]

	uint16_t rhData = 0, tData = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	83fb      	strh	r3, [r7, #30]
 80001aa:	2300      	movs	r3, #0
 80001ac:	83bb      	strh	r3, [r7, #28]

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80001ae:	2304      	movs	r3, #4
 80001b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001b2:	2311      	movs	r3, #17
 80001b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b6:	2300      	movs	r3, #0
 80001b8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	4830      	ldr	r0, [pc, #192]	; (8000280 <_Z9readDHT11v+0xf0>)
 80001c0:	f000 fc0c 	bl	80009dc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2104      	movs	r1, #4
 80001c8:	482d      	ldr	r0, [pc, #180]	; (8000280 <_Z9readDHT11v+0xf0>)
 80001ca:	f000 fda2 	bl	8000d12 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80001ce:	2012      	movs	r0, #18
 80001d0:	f000 fafc 	bl	80007cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2104      	movs	r1, #4
 80001d8:	4829      	ldr	r0, [pc, #164]	; (8000280 <_Z9readDHT11v+0xf0>)
 80001da:	f000 fd9a 	bl	8000d12 <HAL_GPIO_WritePin>
	delay_us(30);
 80001de:	201e      	movs	r0, #30
 80001e0:	f7ff ffb4 	bl	800014c <_Z8delay_usm>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80001e4:	2304      	movs	r3, #4
 80001e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4619      	mov	r1, r3
 80001f4:	4822      	ldr	r0, [pc, #136]	; (8000280 <_Z9readDHT11v+0xf0>)
 80001f6:	f000 fbf1 	bl	80009dc <HAL_GPIO_Init>

	delay_us(160); /* cancel DTH signal  */
 80001fa:	20a0      	movs	r0, #160	; 0xa0
 80001fc:	f7ff ffa6 	bl	800014c <_Z8delay_usm>

	for(uint8_t i=0; i<40; i++)
 8000200:	2300      	movs	r3, #0
 8000202:	76fb      	strb	r3, [r7, #27]
 8000204:	7efb      	ldrb	r3, [r7, #27]
 8000206:	2b27      	cmp	r3, #39	; 0x27
 8000208:	d829      	bhi.n	800025e <_Z9readDHT11v+0xce>
	{
		if(i<16)/* RH data */
 800020a:	7efb      	ldrb	r3, [r7, #27]
 800020c:	2b0f      	cmp	r3, #15
 800020e:	d80e      	bhi.n	800022e <_Z9readDHT11v+0x9e>
		{
			rhData |= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000210:	2104      	movs	r1, #4
 8000212:	481b      	ldr	r0, [pc, #108]	; (8000280 <_Z9readDHT11v+0xf0>)
 8000214:	f000 fd66 	bl	8000ce4 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	b21a      	sxth	r2, r3
 800021c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000220:	4313      	orrs	r3, r2
 8000222:	b21b      	sxth	r3, r3
 8000224:	83fb      	strh	r3, [r7, #30]
			rhData = rhData<<1;
 8000226:	8bfb      	ldrh	r3, [r7, #30]
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	83fb      	strh	r3, [r7, #30]
 800022c:	e013      	b.n	8000256 <_Z9readDHT11v+0xc6>
		}
		else if((i>=16) && (i<32))/* T data */
 800022e:	7efb      	ldrb	r3, [r7, #27]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d910      	bls.n	8000256 <_Z9readDHT11v+0xc6>
 8000234:	7efb      	ldrb	r3, [r7, #27]
 8000236:	2b1f      	cmp	r3, #31
 8000238:	d80d      	bhi.n	8000256 <_Z9readDHT11v+0xc6>
		{
			tData |= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800023a:	2104      	movs	r1, #4
 800023c:	4810      	ldr	r0, [pc, #64]	; (8000280 <_Z9readDHT11v+0xf0>)
 800023e:	f000 fd51 	bl	8000ce4 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	b21a      	sxth	r2, r3
 8000246:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800024a:	4313      	orrs	r3, r2
 800024c:	b21b      	sxth	r3, r3
 800024e:	83bb      	strh	r3, [r7, #28]
			tData = tData<<1;
 8000250:	8bbb      	ldrh	r3, [r7, #28]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	83bb      	strh	r3, [r7, #28]
	for(uint8_t i=0; i<40; i++)
 8000256:	7efb      	ldrb	r3, [r7, #27]
 8000258:	3301      	adds	r3, #1
 800025a:	76fb      	strb	r3, [r7, #27]
 800025c:	e7d2      	b.n	8000204 <_Z9readDHT11v+0x74>
		else
		{
			/* read checksum value */
		}
	}
	myData |= rhData; myData<<=16; myData |= tData;
 800025e:	8bfb      	ldrh	r3, [r7, #30]
 8000260:	697a      	ldr	r2, [r7, #20]
 8000262:	4313      	orrs	r3, r2
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	041b      	lsls	r3, r3, #16
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	8bbb      	ldrh	r3, [r7, #28]
 800026e:	697a      	ldr	r2, [r7, #20]
 8000270:	4313      	orrs	r3, r2
 8000272:	617b      	str	r3, [r7, #20]
	return myData;
 8000274:	697b      	ldr	r3, [r7, #20]

}
 8000276:	4618      	mov	r0, r3
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010800 	.word	0x40010800

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fa3e 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f854 	bl	8000338 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f8cc 	bl	800042c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000294:	f000 f896 	bl	80003c4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  lcd.reg_i2c_fnc(i2c_write);
 8000298:	4920      	ldr	r1, [pc, #128]	; (800031c <main+0x98>)
 800029a:	4821      	ldr	r0, [pc, #132]	; (8000320 <main+0x9c>)
 800029c:	f001 ff56 	bl	800214c <_ZN7LCD16x211reg_i2c_fncEPFvhhE>
    lcd.begin();
 80002a0:	481f      	ldr	r0, [pc, #124]	; (8000320 <main+0x9c>)
 80002a2:	f001 fdc1 	bl	8001e28 <_ZN7LCD16x25beginEv>
    lcd.backlight();
 80002a6:	481e      	ldr	r0, [pc, #120]	; (8000320 <main+0x9c>)
 80002a8:	f001 fe92 	bl	8001fd0 <_ZN7LCD16x29backlightEv>
    lcd.printstr((uint8_t*)msg, sizeof(msg));
 80002ac:	220d      	movs	r2, #13
 80002ae:	491d      	ldr	r1, [pc, #116]	; (8000324 <main+0xa0>)
 80002b0:	481b      	ldr	r0, [pc, #108]	; (8000320 <main+0x9c>)
 80002b2:	f001 ff2d 	bl	8002110 <_ZN7LCD16x28printstrEPKhh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  myDHT11value = readDHT11();
 80002b6:	f7ff ff6b 	bl	8000190 <_Z9readDHT11v>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <main+0xa4>)
 80002be:	6013      	str	r3, [r2, #0]


	  sprintf((char*)myBuff, "Do am = %d,%d", (uint8_t)(myDHT11value>>24), (uint8_t)(myDHT11value>>16));
 80002c0:	4b19      	ldr	r3, [pc, #100]	; (8000328 <main+0xa4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	0e1b      	lsrs	r3, r3, #24
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <main+0xa4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	0c1b      	lsrs	r3, r3, #16
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	4916      	ldr	r1, [pc, #88]	; (800032c <main+0xa8>)
 80002d4:	4816      	ldr	r0, [pc, #88]	; (8000330 <main+0xac>)
 80002d6:	f001 ff7b 	bl	80021d0 <siprintf>
	  lcd.setCursor(0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	4810      	ldr	r0, [pc, #64]	; (8000320 <main+0x9c>)
 80002e0:	f001 fe2c 	bl	8001f3c <_ZN7LCD16x29setCursorEhh>
	  lcd.printstr(myBuff, sizeof(myBuff));
 80002e4:	2210      	movs	r2, #16
 80002e6:	4912      	ldr	r1, [pc, #72]	; (8000330 <main+0xac>)
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <main+0x9c>)
 80002ea:	f001 ff11 	bl	8002110 <_ZN7LCD16x28printstrEPKhh>

	  sprintf((char*)myBuff, "Nhiet Do = %d,%d", (uint8_t)(myDHT11value>>8), (uint8_t)(myDHT11value));
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <main+0xa4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	0a1b      	lsrs	r3, r3, #8
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <main+0xa4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <main+0xb0>)
 8000300:	480b      	ldr	r0, [pc, #44]	; (8000330 <main+0xac>)
 8000302:	f001 ff65 	bl	80021d0 <siprintf>
	  lcd.setCursor(0, 1);
 8000306:	2201      	movs	r2, #1
 8000308:	2100      	movs	r1, #0
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <main+0x9c>)
 800030c:	f001 fe16 	bl	8001f3c <_ZN7LCD16x29setCursorEhh>
	  lcd.printstr(myBuff, sizeof(myBuff));
 8000310:	2210      	movs	r2, #16
 8000312:	4907      	ldr	r1, [pc, #28]	; (8000330 <main+0xac>)
 8000314:	4802      	ldr	r0, [pc, #8]	; (8000320 <main+0x9c>)
 8000316:	f001 fefb 	bl	8002110 <_ZN7LCD16x28printstrEPKhh>
	  myDHT11value = readDHT11();
 800031a:	e7cc      	b.n	80002b6 <main+0x32>
 800031c:	08000161 	.word	0x08000161
 8000320:	200000f4 	.word	0x200000f4
 8000324:	08002a5c 	.word	0x08002a5c
 8000328:	2000008c 	.word	0x2000008c
 800032c:	08002a6c 	.word	0x08002a6c
 8000330:	20000090 	.word	0x20000090
 8000334:	08002a7c 	.word	0x08002a7c

08000338 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 ff3a 	bl	80021c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035a:	2302      	movs	r3, #2
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000362:	2310      	movs	r3, #16
 8000364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000366:	2300      	movs	r3, #0
 8000368:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f932 	bl	80015d8 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf14      	ite	ne
 800037a:	2301      	movne	r3, #1
 800037c:	2300      	moveq	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000384:	f000 f89c 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fb99 	bl	8001ad8 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	bf14      	ite	ne
 80003ac:	2301      	movne	r3, #1
 80003ae:	2300      	moveq	r3, #0
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80003b6:	f000 f883 	bl	80004c0 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <_ZL12MX_I2C1_Initv+0x60>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003d0:	4a15      	ldr	r2, [pc, #84]	; (8000428 <_ZL12MX_I2C1_Initv+0x64>)
 80003d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <_ZL12MX_I2C1_Initv+0x5c>)
 8000402:	f000 fc9f 	bl	8000d44 <HAL_I2C_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	bf14      	ite	ne
 800040c:	2301      	movne	r3, #1
 800040e:	2300      	moveq	r3, #0
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000416:	f000 f853 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000a0 	.word	0x200000a0
 8000424:	40005400 	.word	0x40005400
 8000428:	000186a0 	.word	0x000186a0

0800042c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <_ZL12MX_GPIO_Initv+0x8c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <_ZL12MX_GPIO_Initv+0x8c>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <_ZL12MX_GPIO_Initv+0x8c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <_ZL12MX_GPIO_Initv+0x8c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <_ZL12MX_GPIO_Initv+0x8c>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <_ZL12MX_GPIO_Initv+0x8c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	4811      	ldr	r0, [pc, #68]	; (80004bc <_ZL12MX_GPIO_Initv+0x90>)
 8000476:	f000 fc4c 	bl	8000d12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800047a:	2302      	movs	r3, #2
 800047c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	4619      	mov	r1, r3
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <_ZL12MX_GPIO_Initv+0x90>)
 800048e:	f000 faa5 	bl	80009dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000492:	2304      	movs	r3, #4
 8000494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	4619      	mov	r1, r3
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <_ZL12MX_GPIO_Initv+0x90>)
 80004aa:	f000 fa97 	bl	80009dc <HAL_GPIO_Init>

}
 80004ae:	bf00      	nop
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d10c      	bne.n	80004f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d107      	bne.n	80004f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
LCD16x2 lcd(0x27, 16, 2);
 80004e6:	2300      	movs	r3, #0
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2302      	movs	r3, #2
 80004ec:	2210      	movs	r2, #16
 80004ee:	2127      	movs	r1, #39	; 0x27
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80004f2:	f001 fc77 	bl	8001de4 <_ZN7LCD16x2C1Ehhhh>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000f4 	.word	0x200000f4

08000504 <_GLOBAL__sub_I_myDHT11value>:
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
 8000508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff ffdd 	bl	80004cc <_Z41__static_initialization_and_destruction_0ii>
 8000512:	bd80      	pop	{r7, pc}

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_MspInit+0x5c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <HAL_MspInit+0x5c>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_MspInit+0x5c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x5c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_MspInit+0x5c>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x5c>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <HAL_MspInit+0x60>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_MspInit+0x60>)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000
 8000574:	40010000 	.word	0x40010000

08000578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <HAL_I2C_MspInit+0x70>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d123      	bne.n	80005e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_I2C_MspInit+0x74>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <HAL_I2C_MspInit+0x74>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_I2C_MspInit+0x74>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0308 	and.w	r3, r3, #8
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b0:	23c0      	movs	r3, #192	; 0xc0
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b4:	2312      	movs	r3, #18
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <HAL_I2C_MspInit+0x78>)
 80005c4:	f000 fa0a 	bl	80009dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_I2C_MspInit+0x74>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_I2C_MspInit+0x74>)
 80005ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d2:	61d3      	str	r3, [r2, #28]
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_I2C_MspInit+0x74>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f8ab 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <_sbrk+0x5c>)
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <_sbrk+0x60>)
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <_sbrk+0x64>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <_sbrk+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	429a      	cmp	r2, r3
 8000672:	d207      	bcs.n	8000684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000674:	f001 fd7a 	bl	800216c <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	220c      	movs	r2, #12
 800067c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e009      	b.n	8000698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <_sbrk+0x64>)
 8000694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20005000 	.word	0x20005000
 80006a4:	00000400 	.word	0x00000400
 80006a8:	200000fc 	.word	0x200000fc
 80006ac:	20000120 	.word	0x20000120

080006b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	; (8000700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e2:	f7ff ffe5 	bl	80006b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e6:	f001 fd47 	bl	8002178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fdcb 	bl	8000284 <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006f8:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 80006fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000700:	20000120 	.word	0x20000120

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f92b 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	200f      	movs	r0, #15
 8000720:	f000 f808 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff fef6 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x54>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_InitTick+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f935 	bl	80009c2 <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f90b 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_InitTick+0x5c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000000 	.word	0x20000000
 800078c:	20000008 	.word	0x20000008
 8000790:	20000004 	.word	0x20000004

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000008 	.word	0x20000008
 80007b4:	2000010c 	.word	0x2000010c

080007b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	2000010c 	.word	0x2000010c

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff fff0 	bl	80007b8 <HAL_GetTick>
 80007d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_Delay+0x44>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f2:	bf00      	nop
 80007f4:	f7ff ffe0 	bl	80007b8 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008

08000814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_GetPriorityGrouping+0x18>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 0307 	and.w	r3, r3, #7
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	; (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff90 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff49 	bl	8000814 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff5e 	bl	800085c <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff90 	bl	80008cc <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff5f 	bl	8000878 <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff ffb0 	bl	8000930 <SysTick_Config>
 80009d0:	4603      	mov	r3, r0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009dc:	b480      	push	{r7}
 80009de:	b08b      	sub	sp, #44	; 0x2c
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e169      	b.n	8000cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f0:	2201      	movs	r2, #1
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	f040 8158 	bne.w	8000cbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a9a      	ldr	r2, [pc, #616]	; (8000c7c <HAL_GPIO_Init+0x2a0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d05e      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a18:	4a98      	ldr	r2, [pc, #608]	; (8000c7c <HAL_GPIO_Init+0x2a0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d875      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a1e:	4a98      	ldr	r2, [pc, #608]	; (8000c80 <HAL_GPIO_Init+0x2a4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d058      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a24:	4a96      	ldr	r2, [pc, #600]	; (8000c80 <HAL_GPIO_Init+0x2a4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d86f      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a2a:	4a96      	ldr	r2, [pc, #600]	; (8000c84 <HAL_GPIO_Init+0x2a8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d052      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a30:	4a94      	ldr	r2, [pc, #592]	; (8000c84 <HAL_GPIO_Init+0x2a8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d869      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a36:	4a94      	ldr	r2, [pc, #592]	; (8000c88 <HAL_GPIO_Init+0x2ac>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d04c      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a3c:	4a92      	ldr	r2, [pc, #584]	; (8000c88 <HAL_GPIO_Init+0x2ac>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d863      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a42:	4a92      	ldr	r2, [pc, #584]	; (8000c8c <HAL_GPIO_Init+0x2b0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d046      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a48:	4a90      	ldr	r2, [pc, #576]	; (8000c8c <HAL_GPIO_Init+0x2b0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d85d      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d82a      	bhi.n	8000aa8 <HAL_GPIO_Init+0xcc>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d859      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <HAL_GPIO_Init+0x80>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000ad7 	.word	0x08000ad7
 8000a60:	08000ab1 	.word	0x08000ab1
 8000a64:	08000ac3 	.word	0x08000ac3
 8000a68:	08000b05 	.word	0x08000b05
 8000a6c:	08000b0b 	.word	0x08000b0b
 8000a70:	08000b0b 	.word	0x08000b0b
 8000a74:	08000b0b 	.word	0x08000b0b
 8000a78:	08000b0b 	.word	0x08000b0b
 8000a7c:	08000b0b 	.word	0x08000b0b
 8000a80:	08000b0b 	.word	0x08000b0b
 8000a84:	08000b0b 	.word	0x08000b0b
 8000a88:	08000b0b 	.word	0x08000b0b
 8000a8c:	08000b0b 	.word	0x08000b0b
 8000a90:	08000b0b 	.word	0x08000b0b
 8000a94:	08000b0b 	.word	0x08000b0b
 8000a98:	08000b0b 	.word	0x08000b0b
 8000a9c:	08000b0b 	.word	0x08000b0b
 8000aa0:	08000ab9 	.word	0x08000ab9
 8000aa4:	08000acd 	.word	0x08000acd
 8000aa8:	4a79      	ldr	r2, [pc, #484]	; (8000c90 <HAL_GPIO_Init+0x2b4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aae:	e02c      	b.n	8000b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	623b      	str	r3, [r7, #32]
          break;
 8000ab6:	e029      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	3304      	adds	r3, #4
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e024      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	623b      	str	r3, [r7, #32]
          break;
 8000aca:	e01f      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	330c      	adds	r3, #12
 8000ad2:	623b      	str	r3, [r7, #32]
          break;
 8000ad4:	e01a      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e013      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d105      	bne.n	8000af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aec:	2308      	movs	r3, #8
 8000aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	611a      	str	r2, [r3, #16]
          break;
 8000af6:	e009      	b.n	8000b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af8:	2308      	movs	r3, #8
 8000afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	615a      	str	r2, [r3, #20]
          break;
 8000b02:	e003      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          break;
 8000b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	; 0xff
 8000b10:	d801      	bhi.n	8000b16 <HAL_GPIO_Init+0x13a>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	e001      	b.n	8000b1a <HAL_GPIO_Init+0x13e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2bff      	cmp	r3, #255	; 0xff
 8000b20:	d802      	bhi.n	8000b28 <HAL_GPIO_Init+0x14c>
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	e002      	b.n	8000b2e <HAL_GPIO_Init+0x152>
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	3b08      	subs	r3, #8
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	210f      	movs	r1, #15
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	401a      	ands	r2, r3
 8000b40:	6a39      	ldr	r1, [r7, #32]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b74:	4a48      	ldr	r2, [pc, #288]	; (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a40      	ldr	r2, [pc, #256]	; (8000c9c <HAL_GPIO_Init+0x2c0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d013      	beq.n	8000bc8 <HAL_GPIO_Init+0x1ec>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3f      	ldr	r2, [pc, #252]	; (8000ca0 <HAL_GPIO_Init+0x2c4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00d      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <HAL_GPIO_Init+0x2c8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e4>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3d      	ldr	r2, [pc, #244]	; (8000ca8 <HAL_GPIO_Init+0x2cc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d101      	bne.n	8000bbc <HAL_GPIO_Init+0x1e0>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	e004      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bcc:	f002 0203 	and.w	r2, r2, #3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bda:	492f      	ldr	r1, [pc, #188]	; (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	492c      	ldr	r1, [pc, #176]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	600b      	str	r3, [r1, #0]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4928      	ldr	r1, [pc, #160]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	4922      	ldr	r1, [pc, #136]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	604b      	str	r3, [r1, #4]
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	491e      	ldr	r1, [pc, #120]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	4918      	ldr	r1, [pc, #96]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	608b      	str	r3, [r1, #8]
 8000c50:	e006      	b.n	8000c60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4914      	ldr	r1, [pc, #80]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d021      	beq.n	8000cb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	490e      	ldr	r1, [pc, #56]	; (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60cb      	str	r3, [r1, #12]
 8000c78:	e021      	b.n	8000cbe <HAL_GPIO_Init+0x2e2>
 8000c7a:	bf00      	nop
 8000c7c:	10320000 	.word	0x10320000
 8000c80:	10310000 	.word	0x10310000
 8000c84:	10220000 	.word	0x10220000
 8000c88:	10210000 	.word	0x10210000
 8000c8c:	10120000 	.word	0x10120000
 8000c90:	10110000 	.word	0x10110000
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40010c00 	.word	0x40010c00
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	40011400 	.word	0x40011400
 8000cac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_GPIO_Init+0x304>)
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <HAL_GPIO_Init+0x304>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	fa22 f303 	lsr.w	r3, r2, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f47f ae8e 	bne.w	80009f0 <HAL_GPIO_Init+0x14>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	372c      	adds	r7, #44	; 0x2c
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e001      	b.n	8000d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	807b      	strh	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d22:	787b      	ldrb	r3, [r7, #1]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d2e:	e003      	b.n	8000d38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	611a      	str	r2, [r3, #16]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e12b      	b.n	8000fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d106      	bne.n	8000d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fc04 	bl	8000578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2224      	movs	r2, #36	; 0x24
 8000d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000da8:	f000 ffea 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8000dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4a81      	ldr	r2, [pc, #516]	; (8000fb8 <HAL_I2C_Init+0x274>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d807      	bhi.n	8000dc8 <HAL_I2C_Init+0x84>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a80      	ldr	r2, [pc, #512]	; (8000fbc <HAL_I2C_Init+0x278>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	bf94      	ite	ls
 8000dc0:	2301      	movls	r3, #1
 8000dc2:	2300      	movhi	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	e006      	b.n	8000dd6 <HAL_I2C_Init+0x92>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a7d      	ldr	r2, [pc, #500]	; (8000fc0 <HAL_I2C_Init+0x27c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	bf94      	ite	ls
 8000dd0:	2301      	movls	r3, #1
 8000dd2:	2300      	movhi	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0e7      	b.n	8000fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4a78      	ldr	r2, [pc, #480]	; (8000fc4 <HAL_I2C_Init+0x280>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	0c9b      	lsrs	r3, r3, #18
 8000de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a6a      	ldr	r2, [pc, #424]	; (8000fb8 <HAL_I2C_Init+0x274>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d802      	bhi.n	8000e18 <HAL_I2C_Init+0xd4>
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	e009      	b.n	8000e2c <HAL_I2C_Init+0xe8>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	4a69      	ldr	r2, [pc, #420]	; (8000fc8 <HAL_I2C_Init+0x284>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	099b      	lsrs	r3, r3, #6
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	430b      	orrs	r3, r1
 8000e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	495c      	ldr	r1, [pc, #368]	; (8000fb8 <HAL_I2C_Init+0x274>)
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d819      	bhi.n	8000e80 <HAL_I2C_Init+0x13c>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	1e59      	subs	r1, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e5a:	1c59      	adds	r1, r3, #1
 8000e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e60:	400b      	ands	r3, r1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00a      	beq.n	8000e7c <HAL_I2C_Init+0x138>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1e59      	subs	r1, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7a:	e051      	b.n	8000f20 <HAL_I2C_Init+0x1dc>
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	e04f      	b.n	8000f20 <HAL_I2C_Init+0x1dc>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d111      	bne.n	8000eac <HAL_I2C_Init+0x168>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6859      	ldr	r1, [r3, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	440b      	add	r3, r1
 8000e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	e012      	b.n	8000ed2 <HAL_I2C_Init+0x18e>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1e58      	subs	r0, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6859      	ldr	r1, [r3, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	0099      	lsls	r1, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_I2C_Init+0x196>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e022      	b.n	8000f20 <HAL_I2C_Init+0x1dc>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10e      	bne.n	8000f00 <HAL_I2C_Init+0x1bc>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1e58      	subs	r0, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6859      	ldr	r1, [r3, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	440b      	add	r3, r1
 8000ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efe:	e00f      	b.n	8000f20 <HAL_I2C_Init+0x1dc>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1e58      	subs	r0, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6859      	ldr	r1, [r3, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	0099      	lsls	r1, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	6809      	ldr	r1, [r1, #0]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69da      	ldr	r2, [r3, #28]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6911      	ldr	r1, [r2, #16]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68d2      	ldr	r2, [r2, #12]
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	000186a0 	.word	0x000186a0
 8000fbc:	001e847f 	.word	0x001e847f
 8000fc0:	003d08ff 	.word	0x003d08ff
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	10624dd3 	.word	0x10624dd3

08000fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	460b      	mov	r3, r1
 8000fda:	817b      	strh	r3, [r7, #10]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fbea 	bl	80007b8 <HAL_GetTick>
 8000fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b20      	cmp	r3, #32
 8000ff0:	f040 80e0 	bne.w	80011b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2319      	movs	r3, #25
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4970      	ldr	r1, [pc, #448]	; (80011c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f964 	bl	80012cc <I2C_WaitOnFlagUntilTimeout>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800100a:	2302      	movs	r3, #2
 800100c:	e0d3      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_I2C_Master_Transmit+0x50>
 8001018:	2302      	movs	r3, #2
 800101a:	e0cc      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ea>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b01      	cmp	r3, #1
 8001030:	d007      	beq.n	8001042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0201 	orr.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2221      	movs	r2, #33	; 0x21
 8001056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2210      	movs	r2, #16
 800105e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	893a      	ldrh	r2, [r7, #8]
 8001072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001078:	b29a      	uxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001084:	8979      	ldrh	r1, [r7, #10]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	6a3a      	ldr	r2, [r7, #32]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f89c 	bl	80011c8 <I2C_MasterRequestWrite>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e08d      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010b0:	e066      	b.n	8001180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	6a39      	ldr	r1, [r7, #32]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f9de 	bl	8001478 <I2C_WaitOnTXEFlagUntilTimeout>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00d      	beq.n	80010de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d107      	bne.n	80010da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e06b      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001106:	3b01      	subs	r3, #1
 8001108:	b29a      	uxth	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b04      	cmp	r3, #4
 800111a:	d11b      	bne.n	8001154 <HAL_I2C_Master_Transmit+0x188>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d017      	beq.n	8001154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113e:	b29b      	uxth	r3, r3
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	3b01      	subs	r3, #1
 800114e:	b29a      	uxth	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6a39      	ldr	r1, [r7, #32]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f9ce 	bl	80014fa <I2C_WaitOnBTFFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00d      	beq.n	8001180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2b04      	cmp	r3, #4
 800116a:	d107      	bne.n	800117c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800117a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e01a      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d194      	bne.n	80010b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2220      	movs	r2, #32
 800119c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011b4:	2302      	movs	r3, #2
  }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	00100002 	.word	0x00100002
 80011c4:	ffff0000 	.word	0xffff0000

080011c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d006      	beq.n	80011f2 <I2C_MasterRequestWrite+0x2a>
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d003      	beq.n	80011f2 <I2C_MasterRequestWrite+0x2a>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011f0:	d108      	bne.n	8001204 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e00b      	b.n	800121c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	2b12      	cmp	r3, #18
 800120a:	d107      	bne.n	800121c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800121a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 f84f 	bl	80012cc <I2C_WaitOnFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001242:	d103      	bne.n	800124c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e035      	b.n	80012bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001258:	d108      	bne.n	800126c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800125a:	897b      	ldrh	r3, [r7, #10]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	e01b      	b.n	80012a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800126c:	897b      	ldrh	r3, [r7, #10]
 800126e:	11db      	asrs	r3, r3, #7
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 0306 	and.w	r3, r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f063 030f 	orn	r3, r3, #15
 800127c:	b2da      	uxtb	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <I2C_MasterRequestWrite+0xfc>)
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f875 	bl	800137a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e010      	b.n	80012bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800129a:	897b      	ldrh	r3, [r7, #10]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <I2C_MasterRequestWrite+0x100>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 f865 	bl	800137a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	00010008 	.word	0x00010008
 80012c8:	00010002 	.word	0x00010002

080012cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012dc:	e025      	b.n	800132a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d021      	beq.n	800132a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e6:	f7ff fa67 	bl	80007b8 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d302      	bcc.n	80012fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d116      	bne.n	800132a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f043 0220 	orr.w	r2, r3, #32
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e023      	b.n	8001372 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0c1b      	lsrs	r3, r3, #16
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4013      	ands	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	e00c      	b.n	800136a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4013      	ands	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	429a      	cmp	r2, r3
 800136e:	d0b6      	beq.n	80012de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001388:	e051      	b.n	800142e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	d123      	bne.n	80013e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2220      	movs	r2, #32
 80013be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f043 0204 	orr.w	r2, r3, #4
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e046      	b.n	8001470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d021      	beq.n	800142e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ea:	f7ff f9e5 	bl	80007b8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d302      	bcc.n	8001400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d116      	bne.n	800142e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f043 0220 	orr.w	r2, r3, #32
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e020      	b.n	8001470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10c      	bne.n	8001452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4013      	ands	r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf14      	ite	ne
 800144a:	2301      	movne	r3, #1
 800144c:	2300      	moveq	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	e00b      	b.n	800146a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	43da      	mvns	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4013      	ands	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d18d      	bne.n	800138a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001484:	e02d      	b.n	80014e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f878 	bl	800157c <I2C_IsAcknowledgeFailed>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e02d      	b.n	80014f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d021      	beq.n	80014e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149e:	f7ff f98b 	bl	80007b8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d302      	bcc.n	80014b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d116      	bne.n	80014e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0220 	orr.w	r2, r3, #32
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e007      	b.n	80014f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	2b80      	cmp	r3, #128	; 0x80
 80014ee:	d1ca      	bne.n	8001486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001506:	e02d      	b.n	8001564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f837 	bl	800157c <I2C_IsAcknowledgeFailed>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e02d      	b.n	8001574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151e:	d021      	beq.n	8001564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001520:	f7ff f94a 	bl	80007b8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d302      	bcc.n	8001536 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f043 0220 	orr.w	r2, r3, #32
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e007      	b.n	8001574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b04      	cmp	r3, #4
 8001570:	d1ca      	bne.n	8001508 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	d11b      	bne.n	80015cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800159c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f043 0204 	orr.w	r2, r3, #4
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e26c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8087 	beq.w	8001706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b04      	cmp	r3, #4
 8001602:	d00c      	beq.n	800161e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001604:	4b8f      	ldr	r3, [pc, #572]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d112      	bne.n	8001636 <HAL_RCC_OscConfig+0x5e>
 8001610:	4b8c      	ldr	r3, [pc, #560]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d10b      	bne.n	8001636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161e:	4b89      	ldr	r3, [pc, #548]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d06c      	beq.n	8001704 <HAL_RCC_OscConfig+0x12c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d168      	bne.n	8001704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e246      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x76>
 8001640:	4b80      	ldr	r3, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a7f      	ldr	r2, [pc, #508]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e02e      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b78      	ldr	r3, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a77      	ldr	r2, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0xbc>
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a71      	ldr	r2, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 8001694:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6a      	ldr	r2, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b68      	ldr	r3, [pc, #416]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a67      	ldr	r2, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff f880 	bl	80007b8 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f87c 	bl	80007b8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1fa      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xe4>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f86c 	bl	80007b8 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff f868 	bl	80007b8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1e6      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x10c>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d063      	beq.n	80017da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d11c      	bne.n	8001764 <HAL_RCC_OscConfig+0x18c>
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x176>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e1ba      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4939      	ldr	r1, [pc, #228]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	e03a      	b.n	80017da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x270>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff f821 	bl	80007b8 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff f81d 	bl	80007b8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e19b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4927      	ldr	r1, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x270>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff f800 	bl	80007b8 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017bc:	f7fe fffc 	bl	80007b8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e17a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d03a      	beq.n	800185c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d019      	beq.n	8001822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_RCC_OscConfig+0x274>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7fe ffe0 	bl	80007b8 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7fe ffdc 	bl	80007b8 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e15a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_RCC_OscConfig+0x26c>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f000 fac4 	bl	8001da8 <RCC_Delay>
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_RCC_OscConfig+0x274>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7fe ffc6 	bl	80007b8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182e:	e00f      	b.n	8001850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7fe ffc2 	bl	80007b8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d908      	bls.n	8001850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e140      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	42420000 	.word	0x42420000
 800184c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	4b9e      	ldr	r3, [pc, #632]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e9      	bne.n	8001830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a6 	beq.w	80019b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186e:	4b97      	ldr	r3, [pc, #604]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10d      	bne.n	8001896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b94      	ldr	r3, [pc, #592]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a93      	ldr	r2, [pc, #588]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b91      	ldr	r3, [pc, #580]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <HAL_RCC_OscConfig+0x4f8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a8a      	ldr	r2, [pc, #552]	; (8001ad0 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7fe ff83 	bl	80007b8 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7fe ff7f 	bl	80007b8 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0fd      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x312>
 80018dc:	4b7b      	ldr	r3, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e02d      	b.n	8001946 <HAL_RCC_OscConfig+0x36e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x334>
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a75      	ldr	r2, [pc, #468]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a72      	ldr	r2, [pc, #456]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 0304 	bic.w	r3, r3, #4
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	e01c      	b.n	8001946 <HAL_RCC_OscConfig+0x36e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x356>
 8001914:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a69      	ldr	r2, [pc, #420]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0x36e>
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a66      	ldr	r2, [pc, #408]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	4b64      	ldr	r3, [pc, #400]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a63      	ldr	r2, [pc, #396]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d015      	beq.n	800197a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7fe ff33 	bl	80007b8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7fe ff2f 	bl	80007b8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0ab      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ee      	beq.n	8001956 <HAL_RCC_OscConfig+0x37e>
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7fe ff1d 	bl	80007b8 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7fe ff19 	bl	80007b8 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e095      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ee      	bne.n	8001982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019aa:	4b48      	ldr	r3, [pc, #288]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8081 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c0:	4b42      	ldr	r3, [pc, #264]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d061      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d146      	bne.n	8001a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCC_OscConfig+0x4fc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7fe feed 	bl	80007b8 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7fe fee9 	bl	80007b8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e067      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	492d      	ldr	r1, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a19      	ldr	r1, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	4927      	ldr	r1, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x4fc>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe febd 	bl	80007b8 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe feb9 	bl	80007b8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e037      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46a>
 8001a60:	e02f      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_RCC_OscConfig+0x4fc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7fe fea6 	bl	80007b8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe fea2 	bl	80007b8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e020      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x498>
 8001a8e:	e018      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e013      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42420060 	.word	0x42420060

08001ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0d0      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 0207 	bic.w	r2, r3, #7
 8001b02:	4965      	ldr	r1, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d040      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e073      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06b      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f023 0203 	bic.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4936      	ldr	r1, [pc, #216]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc8:	f7fe fdf6 	bl	80007b8 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7fe fdf2 	bl	80007b8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e053      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 020c 	and.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1eb      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d210      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4922      	ldr	r1, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fd54 	bl	8000734 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08002ab0 	.word	0x08002ab0
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b490      	push	{r4, r7}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cb4:	1d3c      	adds	r4, r7, #4
 8001cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cbc:	f240 2301 	movw	r3, #513	; 0x201
 8001cc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cea:	e02d      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cee:	623b      	str	r3, [r7, #32]
      break;
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cfe:	4413      	add	r3, r2
 8001d00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0c5b      	lsrs	r3, r3, #17
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d1e:	4413      	add	r3, r2
 8001d20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2a:	fb02 f203 	mul.w	r2, r2, r3
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e004      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	623b      	str	r3, [r7, #32]
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4a:	623b      	str	r3, [r7, #32]
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc90      	pop	{r4, r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	08002a90 	.word	0x08002a90
 8001d60:	40021000 	.word	0x40021000
 8001d64:	007a1200 	.word	0x007a1200
 8001d68:	003d0900 	.word	0x003d0900

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d84:	f7ff fff2 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08002ac0 	.word	0x08002ac0

08001da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <RCC_Delay+0x34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <RCC_Delay+0x38>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0a5b      	lsrs	r3, r3, #9
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc4:	bf00      	nop
  }
  while (Delay --);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <RCC_Delay+0x1c>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <_ZN7LCD16x2C1Ehhhh>:
//
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LCD16x2::LCD16x2(uint8_t lcd_addr, uint8_t lcd_cols, uint8_t lcd_rows, uint8_t charsize)
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	70fb      	strb	r3, [r7, #3]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70bb      	strb	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	707b      	strb	r3, [r7, #1]
{
	_addr = lcd_addr;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	701a      	strb	r2, [r3, #0]
	_cols = lcd_cols;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	78ba      	ldrb	r2, [r7, #2]
 8001e08:	711a      	strb	r2, [r3, #4]
	_rows = lcd_rows;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	787a      	ldrb	r2, [r7, #1]
 8001e0e:	715a      	strb	r2, [r3, #5]
	_charsize = charsize;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7c3a      	ldrb	r2, [r7, #16]
 8001e14:	719a      	strb	r2, [r3, #6]
	_backlightval = LCD_BACKLIGHT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	71da      	strb	r2, [r3, #7]
}
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <_ZN7LCD16x25beginEv>:

void LCD16x2::begin() {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	705a      	strb	r2, [r3, #1]

	if (_rows > 1) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	795b      	ldrb	r3, [r3, #5]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d906      	bls.n	8001e4c <_ZN7LCD16x25beginEv+0x24>
		_displayfunction |= LCD_2LINE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	705a      	strb	r2, [r3, #1]
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	799b      	ldrb	r3, [r3, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <_ZN7LCD16x25beginEv+0x42>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	795b      	ldrb	r3, [r3, #5]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <_ZN7LCD16x25beginEv+0x42>
		_displayfunction |= LCD_5x10DOTS;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	705a      	strb	r2, [r3, #1]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8001e6a:	2032      	movs	r0, #50	; 0x32
 8001e6c:	f7fe fcae 	bl	80007cc <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	79db      	ldrb	r3, [r3, #7]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f912 	bl	80020a0 <_ZN7LCD16x213expanderWriteEh>
	HAL_Delay(1000);
 8001e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e80:	f7fe fca4 	bl	80007cc <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
 8001e84:	2130      	movs	r1, #48	; 0x30
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8f5 	bl	8002076 <_ZN7LCD16x210write4bitsEh>
	HAL_Delay(5); // wait min 4.1ms
 8001e8c:	2005      	movs	r0, #5
 8001e8e:	f7fe fc9d 	bl	80007cc <HAL_Delay>

	// second try
	write4bits(0x03 << 4);
 8001e92:	2130      	movs	r1, #48	; 0x30
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8ee 	bl	8002076 <_ZN7LCD16x210write4bitsEh>
	HAL_Delay(5); // wait min 4.1ms
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f7fe fc96 	bl	80007cc <HAL_Delay>

	// third go!
	write4bits(0x03 << 4);
 8001ea0:	2130      	movs	r1, #48	; 0x30
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8e7 	bl	8002076 <_ZN7LCD16x210write4bitsEh>
	HAL_Delay(2);
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f7fe fc8f 	bl	80007cc <HAL_Delay>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
 8001eae:	2120      	movs	r1, #32
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8e0 	bl	8002076 <_ZN7LCD16x210write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f893 	bl	8001fee <_ZN7LCD16x27commandEh>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	709a      	strb	r2, [r3, #2]
	display();
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f866 	bl	8001fa0 <_ZN7LCD16x27displayEv>

	// clear it off
	clear();
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f813 	bl	8001f00 <_ZN7LCD16x25clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	70da      	strb	r2, [r3, #3]

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	78db      	ldrb	r3, [r3, #3]
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f87e 	bl	8001fee <_ZN7LCD16x27commandEh>

	home();
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f813 	bl	8001f1e <_ZN7LCD16x24homeEv>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZN7LCD16x25clearEv>:

/********** high level commands, for the user! */
void LCD16x2::clear(){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8001f08:	2101      	movs	r1, #1
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f86f 	bl	8001fee <_ZN7LCD16x27commandEh>
	HAL_Delay(2);  // this command takes a long time!
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7fe fc5b 	bl	80007cc <HAL_Delay>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN7LCD16x24homeEv>:

void LCD16x2::home(){
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
	command(LCD_RETURNHOME);  // set cursor position to zero
 8001f26:	2102      	movs	r1, #2
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f860 	bl	8001fee <_ZN7LCD16x27commandEh>
	HAL_Delay(2);  // this command takes a long time!
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7fe fc4c 	bl	80007cc <HAL_Delay>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN7LCD16x29setCursorEhh>:

void LCD16x2::setCursor(uint8_t col, uint8_t row){
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	70bb      	strb	r3, [r7, #2]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_ZN7LCD16x29setCursorEhh+0x60>)
 8001f4e:	f107 0408 	add.w	r4, r7, #8
 8001f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > _rows) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	795b      	ldrb	r3, [r3, #5]
 8001f5c:	78ba      	ldrb	r2, [r7, #2]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d903      	bls.n	8001f6a <_ZN7LCD16x29setCursorEhh+0x2e>
		row = _rows-1;    // we count rows starting w/0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	795b      	ldrb	r3, [r3, #5]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	70bb      	strb	r3, [r7, #2]
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001f6a:	78bb      	ldrb	r3, [r7, #2]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	f107 0218 	add.w	r2, r7, #24
 8001f72:	4413      	add	r3, r2
 8001f74:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f82e 	bl	8001fee <_ZN7LCD16x27commandEh>
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	08002aa0 	.word	0x08002aa0

08001fa0 <_ZN7LCD16x27displayEv>:
// Turn the display on/off (quickly)
void LCD16x2::noDisplay() {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD16x2::display() {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	_displaycontrol |= LCD_DISPLAYON;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	789b      	ldrb	r3, [r3, #2]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	709a      	strb	r2, [r3, #2]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	789b      	ldrb	r3, [r3, #2]
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f813 	bl	8001fee <_ZN7LCD16x27commandEh>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN7LCD16x29backlightEv>:
void LCD16x2::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LCD16x2::backlight(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	_backlightval=LCD_BACKLIGHT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	71da      	strb	r2, [r3, #7]
	expanderWrite(0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f85d 	bl	80020a0 <_ZN7LCD16x213expanderWriteEh>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_ZN7LCD16x27commandEh>:
}


/*********** mid level commands, for sending data/cmds */

inline void LCD16x2::command(uint8_t value) {
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	70fb      	strb	r3, [r7, #3]
	send(value, 0);
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f815 	bl	8002030 <_ZN7LCD16x24sendEhh>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN7LCD16x25writeEh>:

inline uint8_t LCD16x2::write(uint8_t value) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
	send(value, Rs);
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	2201      	movs	r2, #1
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f805 	bl	8002030 <_ZN7LCD16x24sendEhh>
	return 1;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN7LCD16x24sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LCD16x2::send(uint8_t value, uint8_t mode) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
 800203c:	4613      	mov	r3, r2
 800203e:	70bb      	strb	r3, [r7, #2]
	uint8_t highnib=value&0xf0;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f023 030f 	bic.w	r3, r3, #15
 8002046:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib=(value<<4)&0xf0;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	73bb      	strb	r3, [r7, #14]
	write4bits((highnib)|mode);
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	78bb      	ldrb	r3, [r7, #2]
 8002052:	4313      	orrs	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f80c 	bl	8002076 <_ZN7LCD16x210write4bitsEh>
	write4bits((lownib)|mode);
 800205e:	7bba      	ldrb	r2, [r7, #14]
 8002060:	78bb      	ldrb	r3, [r7, #2]
 8002062:	4313      	orrs	r3, r2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f804 	bl	8002076 <_ZN7LCD16x210write4bitsEh>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZN7LCD16x210write4bitsEh>:

void LCD16x2::write4bits(uint8_t value) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
	expanderWrite(value);
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f80a 	bl	80020a0 <_ZN7LCD16x213expanderWriteEh>
	pulseEnable(value);
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f81d 	bl	80020d0 <_ZN7LCD16x211pulseEnableEh>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <_ZN7LCD16x213expanderWriteEh>:

void LCD16x2::expanderWrite(uint8_t _data){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
	Wire.write(_addr, (int)(_data) | _backlightval);
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_ZN7LCD16x213expanderWriteEh+0x2c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	7810      	ldrb	r0, [r2, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	79d1      	ldrb	r1, [r2, #7]
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	4611      	mov	r1, r2
 80020c0:	4798      	blx	r3
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000100 	.word	0x20000100

080020d0 <_ZN7LCD16x211pulseEnableEh>:

void LCD16x2::pulseEnable(uint8_t _data){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
	expanderWrite(_data | En);	// En high
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffda 	bl	80020a0 <_ZN7LCD16x213expanderWriteEh>
	HAL_Delay(1);		// enable pulse must be >450ns
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe fb6d 	bl	80007cc <HAL_Delay>

	expanderWrite(_data & ~En);	// En low
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffcf 	bl	80020a0 <_ZN7LCD16x213expanderWriteEh>
	HAL_Delay(1);		// commands need > 37us to settle
 8002102:	2001      	movs	r0, #1
 8002104:	f7fe fb62 	bl	80007cc <HAL_Delay>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN7LCD16x28printstrEPKhh>:
		noBacklight();		// turn backlight off
	}
}

void LCD16x2::printstr(const uint8_t *data, uint8_t size)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	4613      	mov	r3, r2
 800211c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<size; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	429a      	cmp	r2, r3
 8002128:	da0b      	bge.n	8002142 <_ZN7LCD16x28printstrEPKhh+0x32>
	{
		write(data[i]);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ff6a 	bl	800200e <_ZN7LCD16x25writeEh>
	for(int i=0; i<size; i++)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e7ef      	b.n	8002122 <_ZN7LCD16x28printstrEPKhh+0x12>
	}
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <_ZN7LCD16x211reg_i2c_fncEPFvhhE>:

void LCD16x2::reg_i2c_fnc(void (*fnc)(uint8_t addr, uint8_t data))
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	Wire.write = fnc;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <_ZN7LCD16x211reg_i2c_fncEPFvhhE+0x1c>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000100 	.word	0x20000100

0800216c <__errno>:
 800216c:	4b01      	ldr	r3, [pc, #4]	; (8002174 <__errno+0x8>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000000c 	.word	0x2000000c

08002178 <__libc_init_array>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	2600      	movs	r6, #0
 800217c:	4d0c      	ldr	r5, [pc, #48]	; (80021b0 <__libc_init_array+0x38>)
 800217e:	4c0d      	ldr	r4, [pc, #52]	; (80021b4 <__libc_init_array+0x3c>)
 8002180:	1b64      	subs	r4, r4, r5
 8002182:	10a4      	asrs	r4, r4, #2
 8002184:	42a6      	cmp	r6, r4
 8002186:	d109      	bne.n	800219c <__libc_init_array+0x24>
 8002188:	f000 fc5c 	bl	8002a44 <_init>
 800218c:	2600      	movs	r6, #0
 800218e:	4d0a      	ldr	r5, [pc, #40]	; (80021b8 <__libc_init_array+0x40>)
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <__libc_init_array+0x44>)
 8002192:	1b64      	subs	r4, r4, r5
 8002194:	10a4      	asrs	r4, r4, #2
 8002196:	42a6      	cmp	r6, r4
 8002198:	d105      	bne.n	80021a6 <__libc_init_array+0x2e>
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a0:	4798      	blx	r3
 80021a2:	3601      	adds	r6, #1
 80021a4:	e7ee      	b.n	8002184 <__libc_init_array+0xc>
 80021a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021aa:	4798      	blx	r3
 80021ac:	3601      	adds	r6, #1
 80021ae:	e7f2      	b.n	8002196 <__libc_init_array+0x1e>
 80021b0:	08002afc 	.word	0x08002afc
 80021b4:	08002afc 	.word	0x08002afc
 80021b8:	08002afc 	.word	0x08002afc
 80021bc:	08002b04 	.word	0x08002b04

080021c0 <memset>:
 80021c0:	4603      	mov	r3, r0
 80021c2:	4402      	add	r2, r0
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d100      	bne.n	80021ca <memset+0xa>
 80021c8:	4770      	bx	lr
 80021ca:	f803 1b01 	strb.w	r1, [r3], #1
 80021ce:	e7f9      	b.n	80021c4 <memset+0x4>

080021d0 <siprintf>:
 80021d0:	b40e      	push	{r1, r2, r3}
 80021d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021d6:	b500      	push	{lr}
 80021d8:	b09c      	sub	sp, #112	; 0x70
 80021da:	ab1d      	add	r3, sp, #116	; 0x74
 80021dc:	9002      	str	r0, [sp, #8]
 80021de:	9006      	str	r0, [sp, #24]
 80021e0:	9107      	str	r1, [sp, #28]
 80021e2:	9104      	str	r1, [sp, #16]
 80021e4:	4808      	ldr	r0, [pc, #32]	; (8002208 <siprintf+0x38>)
 80021e6:	4909      	ldr	r1, [pc, #36]	; (800220c <siprintf+0x3c>)
 80021e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80021ec:	9105      	str	r1, [sp, #20]
 80021ee:	6800      	ldr	r0, [r0, #0]
 80021f0:	a902      	add	r1, sp, #8
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	f000 f868 	bl	80022c8 <_svfiprintf_r>
 80021f8:	2200      	movs	r2, #0
 80021fa:	9b02      	ldr	r3, [sp, #8]
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	b01c      	add	sp, #112	; 0x70
 8002200:	f85d eb04 	ldr.w	lr, [sp], #4
 8002204:	b003      	add	sp, #12
 8002206:	4770      	bx	lr
 8002208:	2000000c 	.word	0x2000000c
 800220c:	ffff0208 	.word	0xffff0208

08002210 <__ssputs_r>:
 8002210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002214:	688e      	ldr	r6, [r1, #8]
 8002216:	4682      	mov	sl, r0
 8002218:	429e      	cmp	r6, r3
 800221a:	460c      	mov	r4, r1
 800221c:	4690      	mov	r8, r2
 800221e:	461f      	mov	r7, r3
 8002220:	d838      	bhi.n	8002294 <__ssputs_r+0x84>
 8002222:	898a      	ldrh	r2, [r1, #12]
 8002224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002228:	d032      	beq.n	8002290 <__ssputs_r+0x80>
 800222a:	6825      	ldr	r5, [r4, #0]
 800222c:	6909      	ldr	r1, [r1, #16]
 800222e:	3301      	adds	r3, #1
 8002230:	eba5 0901 	sub.w	r9, r5, r1
 8002234:	6965      	ldr	r5, [r4, #20]
 8002236:	444b      	add	r3, r9
 8002238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800223c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002240:	106d      	asrs	r5, r5, #1
 8002242:	429d      	cmp	r5, r3
 8002244:	bf38      	it	cc
 8002246:	461d      	movcc	r5, r3
 8002248:	0553      	lsls	r3, r2, #21
 800224a:	d531      	bpl.n	80022b0 <__ssputs_r+0xa0>
 800224c:	4629      	mov	r1, r5
 800224e:	f000 fb53 	bl	80028f8 <_malloc_r>
 8002252:	4606      	mov	r6, r0
 8002254:	b950      	cbnz	r0, 800226c <__ssputs_r+0x5c>
 8002256:	230c      	movs	r3, #12
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f8ca 3000 	str.w	r3, [sl]
 8002260:	89a3      	ldrh	r3, [r4, #12]
 8002262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002266:	81a3      	strh	r3, [r4, #12]
 8002268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800226c:	464a      	mov	r2, r9
 800226e:	6921      	ldr	r1, [r4, #16]
 8002270:	f000 face 	bl	8002810 <memcpy>
 8002274:	89a3      	ldrh	r3, [r4, #12]
 8002276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227e:	81a3      	strh	r3, [r4, #12]
 8002280:	6126      	str	r6, [r4, #16]
 8002282:	444e      	add	r6, r9
 8002284:	6026      	str	r6, [r4, #0]
 8002286:	463e      	mov	r6, r7
 8002288:	6165      	str	r5, [r4, #20]
 800228a:	eba5 0509 	sub.w	r5, r5, r9
 800228e:	60a5      	str	r5, [r4, #8]
 8002290:	42be      	cmp	r6, r7
 8002292:	d900      	bls.n	8002296 <__ssputs_r+0x86>
 8002294:	463e      	mov	r6, r7
 8002296:	4632      	mov	r2, r6
 8002298:	4641      	mov	r1, r8
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	f000 fac6 	bl	800282c <memmove>
 80022a0:	68a3      	ldr	r3, [r4, #8]
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	1b9b      	subs	r3, r3, r6
 80022a6:	4432      	add	r2, r6
 80022a8:	2000      	movs	r0, #0
 80022aa:	60a3      	str	r3, [r4, #8]
 80022ac:	6022      	str	r2, [r4, #0]
 80022ae:	e7db      	b.n	8002268 <__ssputs_r+0x58>
 80022b0:	462a      	mov	r2, r5
 80022b2:	f000 fb7b 	bl	80029ac <_realloc_r>
 80022b6:	4606      	mov	r6, r0
 80022b8:	2800      	cmp	r0, #0
 80022ba:	d1e1      	bne.n	8002280 <__ssputs_r+0x70>
 80022bc:	4650      	mov	r0, sl
 80022be:	6921      	ldr	r1, [r4, #16]
 80022c0:	f000 face 	bl	8002860 <_free_r>
 80022c4:	e7c7      	b.n	8002256 <__ssputs_r+0x46>
	...

080022c8 <_svfiprintf_r>:
 80022c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022cc:	4698      	mov	r8, r3
 80022ce:	898b      	ldrh	r3, [r1, #12]
 80022d0:	4607      	mov	r7, r0
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	460d      	mov	r5, r1
 80022d6:	4614      	mov	r4, r2
 80022d8:	b09d      	sub	sp, #116	; 0x74
 80022da:	d50e      	bpl.n	80022fa <_svfiprintf_r+0x32>
 80022dc:	690b      	ldr	r3, [r1, #16]
 80022de:	b963      	cbnz	r3, 80022fa <_svfiprintf_r+0x32>
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	f000 fb09 	bl	80028f8 <_malloc_r>
 80022e6:	6028      	str	r0, [r5, #0]
 80022e8:	6128      	str	r0, [r5, #16]
 80022ea:	b920      	cbnz	r0, 80022f6 <_svfiprintf_r+0x2e>
 80022ec:	230c      	movs	r3, #12
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	e0d1      	b.n	800249a <_svfiprintf_r+0x1d2>
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	616b      	str	r3, [r5, #20]
 80022fa:	2300      	movs	r3, #0
 80022fc:	9309      	str	r3, [sp, #36]	; 0x24
 80022fe:	2320      	movs	r3, #32
 8002300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002304:	2330      	movs	r3, #48	; 0x30
 8002306:	f04f 0901 	mov.w	r9, #1
 800230a:	f8cd 800c 	str.w	r8, [sp, #12]
 800230e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80024b4 <_svfiprintf_r+0x1ec>
 8002312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002316:	4623      	mov	r3, r4
 8002318:	469a      	mov	sl, r3
 800231a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800231e:	b10a      	cbz	r2, 8002324 <_svfiprintf_r+0x5c>
 8002320:	2a25      	cmp	r2, #37	; 0x25
 8002322:	d1f9      	bne.n	8002318 <_svfiprintf_r+0x50>
 8002324:	ebba 0b04 	subs.w	fp, sl, r4
 8002328:	d00b      	beq.n	8002342 <_svfiprintf_r+0x7a>
 800232a:	465b      	mov	r3, fp
 800232c:	4622      	mov	r2, r4
 800232e:	4629      	mov	r1, r5
 8002330:	4638      	mov	r0, r7
 8002332:	f7ff ff6d 	bl	8002210 <__ssputs_r>
 8002336:	3001      	adds	r0, #1
 8002338:	f000 80aa 	beq.w	8002490 <_svfiprintf_r+0x1c8>
 800233c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800233e:	445a      	add	r2, fp
 8002340:	9209      	str	r2, [sp, #36]	; 0x24
 8002342:	f89a 3000 	ldrb.w	r3, [sl]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80a2 	beq.w	8002490 <_svfiprintf_r+0x1c8>
 800234c:	2300      	movs	r3, #0
 800234e:	f04f 32ff 	mov.w	r2, #4294967295
 8002352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002356:	f10a 0a01 	add.w	sl, sl, #1
 800235a:	9304      	str	r3, [sp, #16]
 800235c:	9307      	str	r3, [sp, #28]
 800235e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002362:	931a      	str	r3, [sp, #104]	; 0x68
 8002364:	4654      	mov	r4, sl
 8002366:	2205      	movs	r2, #5
 8002368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800236c:	4851      	ldr	r0, [pc, #324]	; (80024b4 <_svfiprintf_r+0x1ec>)
 800236e:	f000 fa41 	bl	80027f4 <memchr>
 8002372:	9a04      	ldr	r2, [sp, #16]
 8002374:	b9d8      	cbnz	r0, 80023ae <_svfiprintf_r+0xe6>
 8002376:	06d0      	lsls	r0, r2, #27
 8002378:	bf44      	itt	mi
 800237a:	2320      	movmi	r3, #32
 800237c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002380:	0711      	lsls	r1, r2, #28
 8002382:	bf44      	itt	mi
 8002384:	232b      	movmi	r3, #43	; 0x2b
 8002386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800238a:	f89a 3000 	ldrb.w	r3, [sl]
 800238e:	2b2a      	cmp	r3, #42	; 0x2a
 8002390:	d015      	beq.n	80023be <_svfiprintf_r+0xf6>
 8002392:	4654      	mov	r4, sl
 8002394:	2000      	movs	r0, #0
 8002396:	f04f 0c0a 	mov.w	ip, #10
 800239a:	9a07      	ldr	r2, [sp, #28]
 800239c:	4621      	mov	r1, r4
 800239e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023a2:	3b30      	subs	r3, #48	; 0x30
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d94e      	bls.n	8002446 <_svfiprintf_r+0x17e>
 80023a8:	b1b0      	cbz	r0, 80023d8 <_svfiprintf_r+0x110>
 80023aa:	9207      	str	r2, [sp, #28]
 80023ac:	e014      	b.n	80023d8 <_svfiprintf_r+0x110>
 80023ae:	eba0 0308 	sub.w	r3, r0, r8
 80023b2:	fa09 f303 	lsl.w	r3, r9, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	46a2      	mov	sl, r4
 80023ba:	9304      	str	r3, [sp, #16]
 80023bc:	e7d2      	b.n	8002364 <_svfiprintf_r+0x9c>
 80023be:	9b03      	ldr	r3, [sp, #12]
 80023c0:	1d19      	adds	r1, r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	9103      	str	r1, [sp, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bfbb      	ittet	lt
 80023ca:	425b      	neglt	r3, r3
 80023cc:	f042 0202 	orrlt.w	r2, r2, #2
 80023d0:	9307      	strge	r3, [sp, #28]
 80023d2:	9307      	strlt	r3, [sp, #28]
 80023d4:	bfb8      	it	lt
 80023d6:	9204      	strlt	r2, [sp, #16]
 80023d8:	7823      	ldrb	r3, [r4, #0]
 80023da:	2b2e      	cmp	r3, #46	; 0x2e
 80023dc:	d10c      	bne.n	80023f8 <_svfiprintf_r+0x130>
 80023de:	7863      	ldrb	r3, [r4, #1]
 80023e0:	2b2a      	cmp	r3, #42	; 0x2a
 80023e2:	d135      	bne.n	8002450 <_svfiprintf_r+0x188>
 80023e4:	9b03      	ldr	r3, [sp, #12]
 80023e6:	3402      	adds	r4, #2
 80023e8:	1d1a      	adds	r2, r3, #4
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	9203      	str	r2, [sp, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bfb8      	it	lt
 80023f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80023f6:	9305      	str	r3, [sp, #20]
 80023f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80024c4 <_svfiprintf_r+0x1fc>
 80023fc:	2203      	movs	r2, #3
 80023fe:	4650      	mov	r0, sl
 8002400:	7821      	ldrb	r1, [r4, #0]
 8002402:	f000 f9f7 	bl	80027f4 <memchr>
 8002406:	b140      	cbz	r0, 800241a <_svfiprintf_r+0x152>
 8002408:	2340      	movs	r3, #64	; 0x40
 800240a:	eba0 000a 	sub.w	r0, r0, sl
 800240e:	fa03 f000 	lsl.w	r0, r3, r0
 8002412:	9b04      	ldr	r3, [sp, #16]
 8002414:	3401      	adds	r4, #1
 8002416:	4303      	orrs	r3, r0
 8002418:	9304      	str	r3, [sp, #16]
 800241a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800241e:	2206      	movs	r2, #6
 8002420:	4825      	ldr	r0, [pc, #148]	; (80024b8 <_svfiprintf_r+0x1f0>)
 8002422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002426:	f000 f9e5 	bl	80027f4 <memchr>
 800242a:	2800      	cmp	r0, #0
 800242c:	d038      	beq.n	80024a0 <_svfiprintf_r+0x1d8>
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <_svfiprintf_r+0x1f4>)
 8002430:	bb1b      	cbnz	r3, 800247a <_svfiprintf_r+0x1b2>
 8002432:	9b03      	ldr	r3, [sp, #12]
 8002434:	3307      	adds	r3, #7
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	3308      	adds	r3, #8
 800243c:	9303      	str	r3, [sp, #12]
 800243e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002440:	4433      	add	r3, r6
 8002442:	9309      	str	r3, [sp, #36]	; 0x24
 8002444:	e767      	b.n	8002316 <_svfiprintf_r+0x4e>
 8002446:	460c      	mov	r4, r1
 8002448:	2001      	movs	r0, #1
 800244a:	fb0c 3202 	mla	r2, ip, r2, r3
 800244e:	e7a5      	b.n	800239c <_svfiprintf_r+0xd4>
 8002450:	2300      	movs	r3, #0
 8002452:	f04f 0c0a 	mov.w	ip, #10
 8002456:	4619      	mov	r1, r3
 8002458:	3401      	adds	r4, #1
 800245a:	9305      	str	r3, [sp, #20]
 800245c:	4620      	mov	r0, r4
 800245e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002462:	3a30      	subs	r2, #48	; 0x30
 8002464:	2a09      	cmp	r2, #9
 8002466:	d903      	bls.n	8002470 <_svfiprintf_r+0x1a8>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0c5      	beq.n	80023f8 <_svfiprintf_r+0x130>
 800246c:	9105      	str	r1, [sp, #20]
 800246e:	e7c3      	b.n	80023f8 <_svfiprintf_r+0x130>
 8002470:	4604      	mov	r4, r0
 8002472:	2301      	movs	r3, #1
 8002474:	fb0c 2101 	mla	r1, ip, r1, r2
 8002478:	e7f0      	b.n	800245c <_svfiprintf_r+0x194>
 800247a:	ab03      	add	r3, sp, #12
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	462a      	mov	r2, r5
 8002480:	4638      	mov	r0, r7
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <_svfiprintf_r+0x1f8>)
 8002484:	a904      	add	r1, sp, #16
 8002486:	f3af 8000 	nop.w
 800248a:	1c42      	adds	r2, r0, #1
 800248c:	4606      	mov	r6, r0
 800248e:	d1d6      	bne.n	800243e <_svfiprintf_r+0x176>
 8002490:	89ab      	ldrh	r3, [r5, #12]
 8002492:	065b      	lsls	r3, r3, #25
 8002494:	f53f af2c 	bmi.w	80022f0 <_svfiprintf_r+0x28>
 8002498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800249a:	b01d      	add	sp, #116	; 0x74
 800249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a0:	ab03      	add	r3, sp, #12
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	462a      	mov	r2, r5
 80024a6:	4638      	mov	r0, r7
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <_svfiprintf_r+0x1f8>)
 80024aa:	a904      	add	r1, sp, #16
 80024ac:	f000 f87c 	bl	80025a8 <_printf_i>
 80024b0:	e7eb      	b.n	800248a <_svfiprintf_r+0x1c2>
 80024b2:	bf00      	nop
 80024b4:	08002ac8 	.word	0x08002ac8
 80024b8:	08002ad2 	.word	0x08002ad2
 80024bc:	00000000 	.word	0x00000000
 80024c0:	08002211 	.word	0x08002211
 80024c4:	08002ace 	.word	0x08002ace

080024c8 <_printf_common>:
 80024c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024cc:	4616      	mov	r6, r2
 80024ce:	4699      	mov	r9, r3
 80024d0:	688a      	ldr	r2, [r1, #8]
 80024d2:	690b      	ldr	r3, [r1, #16]
 80024d4:	4607      	mov	r7, r0
 80024d6:	4293      	cmp	r3, r2
 80024d8:	bfb8      	it	lt
 80024da:	4613      	movlt	r3, r2
 80024dc:	6033      	str	r3, [r6, #0]
 80024de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024e2:	460c      	mov	r4, r1
 80024e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024e8:	b10a      	cbz	r2, 80024ee <_printf_common+0x26>
 80024ea:	3301      	adds	r3, #1
 80024ec:	6033      	str	r3, [r6, #0]
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	0699      	lsls	r1, r3, #26
 80024f2:	bf42      	ittt	mi
 80024f4:	6833      	ldrmi	r3, [r6, #0]
 80024f6:	3302      	addmi	r3, #2
 80024f8:	6033      	strmi	r3, [r6, #0]
 80024fa:	6825      	ldr	r5, [r4, #0]
 80024fc:	f015 0506 	ands.w	r5, r5, #6
 8002500:	d106      	bne.n	8002510 <_printf_common+0x48>
 8002502:	f104 0a19 	add.w	sl, r4, #25
 8002506:	68e3      	ldr	r3, [r4, #12]
 8002508:	6832      	ldr	r2, [r6, #0]
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	42ab      	cmp	r3, r5
 800250e:	dc28      	bgt.n	8002562 <_printf_common+0x9a>
 8002510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002514:	1e13      	subs	r3, r2, #0
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	bf18      	it	ne
 800251a:	2301      	movne	r3, #1
 800251c:	0692      	lsls	r2, r2, #26
 800251e:	d42d      	bmi.n	800257c <_printf_common+0xb4>
 8002520:	4649      	mov	r1, r9
 8002522:	4638      	mov	r0, r7
 8002524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002528:	47c0      	blx	r8
 800252a:	3001      	adds	r0, #1
 800252c:	d020      	beq.n	8002570 <_printf_common+0xa8>
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	68e5      	ldr	r5, [r4, #12]
 8002532:	f003 0306 	and.w	r3, r3, #6
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf18      	it	ne
 800253a:	2500      	movne	r5, #0
 800253c:	6832      	ldr	r2, [r6, #0]
 800253e:	f04f 0600 	mov.w	r6, #0
 8002542:	68a3      	ldr	r3, [r4, #8]
 8002544:	bf08      	it	eq
 8002546:	1aad      	subeq	r5, r5, r2
 8002548:	6922      	ldr	r2, [r4, #16]
 800254a:	bf08      	it	eq
 800254c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002550:	4293      	cmp	r3, r2
 8002552:	bfc4      	itt	gt
 8002554:	1a9b      	subgt	r3, r3, r2
 8002556:	18ed      	addgt	r5, r5, r3
 8002558:	341a      	adds	r4, #26
 800255a:	42b5      	cmp	r5, r6
 800255c:	d11a      	bne.n	8002594 <_printf_common+0xcc>
 800255e:	2000      	movs	r0, #0
 8002560:	e008      	b.n	8002574 <_printf_common+0xac>
 8002562:	2301      	movs	r3, #1
 8002564:	4652      	mov	r2, sl
 8002566:	4649      	mov	r1, r9
 8002568:	4638      	mov	r0, r7
 800256a:	47c0      	blx	r8
 800256c:	3001      	adds	r0, #1
 800256e:	d103      	bne.n	8002578 <_printf_common+0xb0>
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002578:	3501      	adds	r5, #1
 800257a:	e7c4      	b.n	8002506 <_printf_common+0x3e>
 800257c:	2030      	movs	r0, #48	; 0x30
 800257e:	18e1      	adds	r1, r4, r3
 8002580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800258a:	4422      	add	r2, r4
 800258c:	3302      	adds	r3, #2
 800258e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002592:	e7c5      	b.n	8002520 <_printf_common+0x58>
 8002594:	2301      	movs	r3, #1
 8002596:	4622      	mov	r2, r4
 8002598:	4649      	mov	r1, r9
 800259a:	4638      	mov	r0, r7
 800259c:	47c0      	blx	r8
 800259e:	3001      	adds	r0, #1
 80025a0:	d0e6      	beq.n	8002570 <_printf_common+0xa8>
 80025a2:	3601      	adds	r6, #1
 80025a4:	e7d9      	b.n	800255a <_printf_common+0x92>
	...

080025a8 <_printf_i>:
 80025a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025ac:	460c      	mov	r4, r1
 80025ae:	7e27      	ldrb	r7, [r4, #24]
 80025b0:	4691      	mov	r9, r2
 80025b2:	2f78      	cmp	r7, #120	; 0x78
 80025b4:	4680      	mov	r8, r0
 80025b6:	469a      	mov	sl, r3
 80025b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025be:	d807      	bhi.n	80025d0 <_printf_i+0x28>
 80025c0:	2f62      	cmp	r7, #98	; 0x62
 80025c2:	d80a      	bhi.n	80025da <_printf_i+0x32>
 80025c4:	2f00      	cmp	r7, #0
 80025c6:	f000 80d9 	beq.w	800277c <_printf_i+0x1d4>
 80025ca:	2f58      	cmp	r7, #88	; 0x58
 80025cc:	f000 80a4 	beq.w	8002718 <_printf_i+0x170>
 80025d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025d8:	e03a      	b.n	8002650 <_printf_i+0xa8>
 80025da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025de:	2b15      	cmp	r3, #21
 80025e0:	d8f6      	bhi.n	80025d0 <_printf_i+0x28>
 80025e2:	a001      	add	r0, pc, #4	; (adr r0, 80025e8 <_printf_i+0x40>)
 80025e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025e8:	08002641 	.word	0x08002641
 80025ec:	08002655 	.word	0x08002655
 80025f0:	080025d1 	.word	0x080025d1
 80025f4:	080025d1 	.word	0x080025d1
 80025f8:	080025d1 	.word	0x080025d1
 80025fc:	080025d1 	.word	0x080025d1
 8002600:	08002655 	.word	0x08002655
 8002604:	080025d1 	.word	0x080025d1
 8002608:	080025d1 	.word	0x080025d1
 800260c:	080025d1 	.word	0x080025d1
 8002610:	080025d1 	.word	0x080025d1
 8002614:	08002763 	.word	0x08002763
 8002618:	08002685 	.word	0x08002685
 800261c:	08002745 	.word	0x08002745
 8002620:	080025d1 	.word	0x080025d1
 8002624:	080025d1 	.word	0x080025d1
 8002628:	08002785 	.word	0x08002785
 800262c:	080025d1 	.word	0x080025d1
 8002630:	08002685 	.word	0x08002685
 8002634:	080025d1 	.word	0x080025d1
 8002638:	080025d1 	.word	0x080025d1
 800263c:	0800274d 	.word	0x0800274d
 8002640:	680b      	ldr	r3, [r1, #0]
 8002642:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	600a      	str	r2, [r1, #0]
 800264c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002650:	2301      	movs	r3, #1
 8002652:	e0a4      	b.n	800279e <_printf_i+0x1f6>
 8002654:	6825      	ldr	r5, [r4, #0]
 8002656:	6808      	ldr	r0, [r1, #0]
 8002658:	062e      	lsls	r6, r5, #24
 800265a:	f100 0304 	add.w	r3, r0, #4
 800265e:	d50a      	bpl.n	8002676 <_printf_i+0xce>
 8002660:	6805      	ldr	r5, [r0, #0]
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	2d00      	cmp	r5, #0
 8002666:	da03      	bge.n	8002670 <_printf_i+0xc8>
 8002668:	232d      	movs	r3, #45	; 0x2d
 800266a:	426d      	negs	r5, r5
 800266c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002670:	230a      	movs	r3, #10
 8002672:	485e      	ldr	r0, [pc, #376]	; (80027ec <_printf_i+0x244>)
 8002674:	e019      	b.n	80026aa <_printf_i+0x102>
 8002676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800267a:	6805      	ldr	r5, [r0, #0]
 800267c:	600b      	str	r3, [r1, #0]
 800267e:	bf18      	it	ne
 8002680:	b22d      	sxthne	r5, r5
 8002682:	e7ef      	b.n	8002664 <_printf_i+0xbc>
 8002684:	680b      	ldr	r3, [r1, #0]
 8002686:	6825      	ldr	r5, [r4, #0]
 8002688:	1d18      	adds	r0, r3, #4
 800268a:	6008      	str	r0, [r1, #0]
 800268c:	0628      	lsls	r0, r5, #24
 800268e:	d501      	bpl.n	8002694 <_printf_i+0xec>
 8002690:	681d      	ldr	r5, [r3, #0]
 8002692:	e002      	b.n	800269a <_printf_i+0xf2>
 8002694:	0669      	lsls	r1, r5, #25
 8002696:	d5fb      	bpl.n	8002690 <_printf_i+0xe8>
 8002698:	881d      	ldrh	r5, [r3, #0]
 800269a:	2f6f      	cmp	r7, #111	; 0x6f
 800269c:	bf0c      	ite	eq
 800269e:	2308      	moveq	r3, #8
 80026a0:	230a      	movne	r3, #10
 80026a2:	4852      	ldr	r0, [pc, #328]	; (80027ec <_printf_i+0x244>)
 80026a4:	2100      	movs	r1, #0
 80026a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026aa:	6866      	ldr	r6, [r4, #4]
 80026ac:	2e00      	cmp	r6, #0
 80026ae:	bfa8      	it	ge
 80026b0:	6821      	ldrge	r1, [r4, #0]
 80026b2:	60a6      	str	r6, [r4, #8]
 80026b4:	bfa4      	itt	ge
 80026b6:	f021 0104 	bicge.w	r1, r1, #4
 80026ba:	6021      	strge	r1, [r4, #0]
 80026bc:	b90d      	cbnz	r5, 80026c2 <_printf_i+0x11a>
 80026be:	2e00      	cmp	r6, #0
 80026c0:	d04d      	beq.n	800275e <_printf_i+0x1b6>
 80026c2:	4616      	mov	r6, r2
 80026c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80026c8:	fb03 5711 	mls	r7, r3, r1, r5
 80026cc:	5dc7      	ldrb	r7, [r0, r7]
 80026ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026d2:	462f      	mov	r7, r5
 80026d4:	42bb      	cmp	r3, r7
 80026d6:	460d      	mov	r5, r1
 80026d8:	d9f4      	bls.n	80026c4 <_printf_i+0x11c>
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d10b      	bne.n	80026f6 <_printf_i+0x14e>
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	07df      	lsls	r7, r3, #31
 80026e2:	d508      	bpl.n	80026f6 <_printf_i+0x14e>
 80026e4:	6923      	ldr	r3, [r4, #16]
 80026e6:	6861      	ldr	r1, [r4, #4]
 80026e8:	4299      	cmp	r1, r3
 80026ea:	bfde      	ittt	le
 80026ec:	2330      	movle	r3, #48	; 0x30
 80026ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026f6:	1b92      	subs	r2, r2, r6
 80026f8:	6122      	str	r2, [r4, #16]
 80026fa:	464b      	mov	r3, r9
 80026fc:	4621      	mov	r1, r4
 80026fe:	4640      	mov	r0, r8
 8002700:	f8cd a000 	str.w	sl, [sp]
 8002704:	aa03      	add	r2, sp, #12
 8002706:	f7ff fedf 	bl	80024c8 <_printf_common>
 800270a:	3001      	adds	r0, #1
 800270c:	d14c      	bne.n	80027a8 <_printf_i+0x200>
 800270e:	f04f 30ff 	mov.w	r0, #4294967295
 8002712:	b004      	add	sp, #16
 8002714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002718:	4834      	ldr	r0, [pc, #208]	; (80027ec <_printf_i+0x244>)
 800271a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800271e:	680e      	ldr	r6, [r1, #0]
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	f856 5b04 	ldr.w	r5, [r6], #4
 8002726:	061f      	lsls	r7, r3, #24
 8002728:	600e      	str	r6, [r1, #0]
 800272a:	d514      	bpl.n	8002756 <_printf_i+0x1ae>
 800272c:	07d9      	lsls	r1, r3, #31
 800272e:	bf44      	itt	mi
 8002730:	f043 0320 	orrmi.w	r3, r3, #32
 8002734:	6023      	strmi	r3, [r4, #0]
 8002736:	b91d      	cbnz	r5, 8002740 <_printf_i+0x198>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	f023 0320 	bic.w	r3, r3, #32
 800273e:	6023      	str	r3, [r4, #0]
 8002740:	2310      	movs	r3, #16
 8002742:	e7af      	b.n	80026a4 <_printf_i+0xfc>
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	f043 0320 	orr.w	r3, r3, #32
 800274a:	6023      	str	r3, [r4, #0]
 800274c:	2378      	movs	r3, #120	; 0x78
 800274e:	4828      	ldr	r0, [pc, #160]	; (80027f0 <_printf_i+0x248>)
 8002750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002754:	e7e3      	b.n	800271e <_printf_i+0x176>
 8002756:	065e      	lsls	r6, r3, #25
 8002758:	bf48      	it	mi
 800275a:	b2ad      	uxthmi	r5, r5
 800275c:	e7e6      	b.n	800272c <_printf_i+0x184>
 800275e:	4616      	mov	r6, r2
 8002760:	e7bb      	b.n	80026da <_printf_i+0x132>
 8002762:	680b      	ldr	r3, [r1, #0]
 8002764:	6826      	ldr	r6, [r4, #0]
 8002766:	1d1d      	adds	r5, r3, #4
 8002768:	6960      	ldr	r0, [r4, #20]
 800276a:	600d      	str	r5, [r1, #0]
 800276c:	0635      	lsls	r5, r6, #24
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	d501      	bpl.n	8002776 <_printf_i+0x1ce>
 8002772:	6018      	str	r0, [r3, #0]
 8002774:	e002      	b.n	800277c <_printf_i+0x1d4>
 8002776:	0671      	lsls	r1, r6, #25
 8002778:	d5fb      	bpl.n	8002772 <_printf_i+0x1ca>
 800277a:	8018      	strh	r0, [r3, #0]
 800277c:	2300      	movs	r3, #0
 800277e:	4616      	mov	r6, r2
 8002780:	6123      	str	r3, [r4, #16]
 8002782:	e7ba      	b.n	80026fa <_printf_i+0x152>
 8002784:	680b      	ldr	r3, [r1, #0]
 8002786:	1d1a      	adds	r2, r3, #4
 8002788:	600a      	str	r2, [r1, #0]
 800278a:	681e      	ldr	r6, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	4630      	mov	r0, r6
 8002790:	6862      	ldr	r2, [r4, #4]
 8002792:	f000 f82f 	bl	80027f4 <memchr>
 8002796:	b108      	cbz	r0, 800279c <_printf_i+0x1f4>
 8002798:	1b80      	subs	r0, r0, r6
 800279a:	6060      	str	r0, [r4, #4]
 800279c:	6863      	ldr	r3, [r4, #4]
 800279e:	6123      	str	r3, [r4, #16]
 80027a0:	2300      	movs	r3, #0
 80027a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027a6:	e7a8      	b.n	80026fa <_printf_i+0x152>
 80027a8:	4632      	mov	r2, r6
 80027aa:	4649      	mov	r1, r9
 80027ac:	4640      	mov	r0, r8
 80027ae:	6923      	ldr	r3, [r4, #16]
 80027b0:	47d0      	blx	sl
 80027b2:	3001      	adds	r0, #1
 80027b4:	d0ab      	beq.n	800270e <_printf_i+0x166>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	079b      	lsls	r3, r3, #30
 80027ba:	d413      	bmi.n	80027e4 <_printf_i+0x23c>
 80027bc:	68e0      	ldr	r0, [r4, #12]
 80027be:	9b03      	ldr	r3, [sp, #12]
 80027c0:	4298      	cmp	r0, r3
 80027c2:	bfb8      	it	lt
 80027c4:	4618      	movlt	r0, r3
 80027c6:	e7a4      	b.n	8002712 <_printf_i+0x16a>
 80027c8:	2301      	movs	r3, #1
 80027ca:	4632      	mov	r2, r6
 80027cc:	4649      	mov	r1, r9
 80027ce:	4640      	mov	r0, r8
 80027d0:	47d0      	blx	sl
 80027d2:	3001      	adds	r0, #1
 80027d4:	d09b      	beq.n	800270e <_printf_i+0x166>
 80027d6:	3501      	adds	r5, #1
 80027d8:	68e3      	ldr	r3, [r4, #12]
 80027da:	9903      	ldr	r1, [sp, #12]
 80027dc:	1a5b      	subs	r3, r3, r1
 80027de:	42ab      	cmp	r3, r5
 80027e0:	dcf2      	bgt.n	80027c8 <_printf_i+0x220>
 80027e2:	e7eb      	b.n	80027bc <_printf_i+0x214>
 80027e4:	2500      	movs	r5, #0
 80027e6:	f104 0619 	add.w	r6, r4, #25
 80027ea:	e7f5      	b.n	80027d8 <_printf_i+0x230>
 80027ec:	08002ad9 	.word	0x08002ad9
 80027f0:	08002aea 	.word	0x08002aea

080027f4 <memchr>:
 80027f4:	4603      	mov	r3, r0
 80027f6:	b510      	push	{r4, lr}
 80027f8:	b2c9      	uxtb	r1, r1
 80027fa:	4402      	add	r2, r0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	d101      	bne.n	8002806 <memchr+0x12>
 8002802:	2000      	movs	r0, #0
 8002804:	e003      	b.n	800280e <memchr+0x1a>
 8002806:	7804      	ldrb	r4, [r0, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	428c      	cmp	r4, r1
 800280c:	d1f6      	bne.n	80027fc <memchr+0x8>
 800280e:	bd10      	pop	{r4, pc}

08002810 <memcpy>:
 8002810:	440a      	add	r2, r1
 8002812:	4291      	cmp	r1, r2
 8002814:	f100 33ff 	add.w	r3, r0, #4294967295
 8002818:	d100      	bne.n	800281c <memcpy+0xc>
 800281a:	4770      	bx	lr
 800281c:	b510      	push	{r4, lr}
 800281e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002822:	4291      	cmp	r1, r2
 8002824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002828:	d1f9      	bne.n	800281e <memcpy+0xe>
 800282a:	bd10      	pop	{r4, pc}

0800282c <memmove>:
 800282c:	4288      	cmp	r0, r1
 800282e:	b510      	push	{r4, lr}
 8002830:	eb01 0402 	add.w	r4, r1, r2
 8002834:	d902      	bls.n	800283c <memmove+0x10>
 8002836:	4284      	cmp	r4, r0
 8002838:	4623      	mov	r3, r4
 800283a:	d807      	bhi.n	800284c <memmove+0x20>
 800283c:	1e43      	subs	r3, r0, #1
 800283e:	42a1      	cmp	r1, r4
 8002840:	d008      	beq.n	8002854 <memmove+0x28>
 8002842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800284a:	e7f8      	b.n	800283e <memmove+0x12>
 800284c:	4601      	mov	r1, r0
 800284e:	4402      	add	r2, r0
 8002850:	428a      	cmp	r2, r1
 8002852:	d100      	bne.n	8002856 <memmove+0x2a>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800285a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800285e:	e7f7      	b.n	8002850 <memmove+0x24>

08002860 <_free_r>:
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	4605      	mov	r5, r0
 8002864:	2900      	cmp	r1, #0
 8002866:	d043      	beq.n	80028f0 <_free_r+0x90>
 8002868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800286c:	1f0c      	subs	r4, r1, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	bfb8      	it	lt
 8002872:	18e4      	addlt	r4, r4, r3
 8002874:	f000 f8d0 	bl	8002a18 <__malloc_lock>
 8002878:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <_free_r+0x94>)
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	4610      	mov	r0, r2
 800287e:	b933      	cbnz	r3, 800288e <_free_r+0x2e>
 8002880:	6063      	str	r3, [r4, #4]
 8002882:	6014      	str	r4, [r2, #0]
 8002884:	4628      	mov	r0, r5
 8002886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800288a:	f000 b8cb 	b.w	8002a24 <__malloc_unlock>
 800288e:	42a3      	cmp	r3, r4
 8002890:	d90a      	bls.n	80028a8 <_free_r+0x48>
 8002892:	6821      	ldr	r1, [r4, #0]
 8002894:	1862      	adds	r2, r4, r1
 8002896:	4293      	cmp	r3, r2
 8002898:	bf01      	itttt	eq
 800289a:	681a      	ldreq	r2, [r3, #0]
 800289c:	685b      	ldreq	r3, [r3, #4]
 800289e:	1852      	addeq	r2, r2, r1
 80028a0:	6022      	streq	r2, [r4, #0]
 80028a2:	6063      	str	r3, [r4, #4]
 80028a4:	6004      	str	r4, [r0, #0]
 80028a6:	e7ed      	b.n	8002884 <_free_r+0x24>
 80028a8:	461a      	mov	r2, r3
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	b10b      	cbz	r3, 80028b2 <_free_r+0x52>
 80028ae:	42a3      	cmp	r3, r4
 80028b0:	d9fa      	bls.n	80028a8 <_free_r+0x48>
 80028b2:	6811      	ldr	r1, [r2, #0]
 80028b4:	1850      	adds	r0, r2, r1
 80028b6:	42a0      	cmp	r0, r4
 80028b8:	d10b      	bne.n	80028d2 <_free_r+0x72>
 80028ba:	6820      	ldr	r0, [r4, #0]
 80028bc:	4401      	add	r1, r0
 80028be:	1850      	adds	r0, r2, r1
 80028c0:	4283      	cmp	r3, r0
 80028c2:	6011      	str	r1, [r2, #0]
 80028c4:	d1de      	bne.n	8002884 <_free_r+0x24>
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4401      	add	r1, r0
 80028cc:	6011      	str	r1, [r2, #0]
 80028ce:	6053      	str	r3, [r2, #4]
 80028d0:	e7d8      	b.n	8002884 <_free_r+0x24>
 80028d2:	d902      	bls.n	80028da <_free_r+0x7a>
 80028d4:	230c      	movs	r3, #12
 80028d6:	602b      	str	r3, [r5, #0]
 80028d8:	e7d4      	b.n	8002884 <_free_r+0x24>
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	1821      	adds	r1, r4, r0
 80028de:	428b      	cmp	r3, r1
 80028e0:	bf01      	itttt	eq
 80028e2:	6819      	ldreq	r1, [r3, #0]
 80028e4:	685b      	ldreq	r3, [r3, #4]
 80028e6:	1809      	addeq	r1, r1, r0
 80028e8:	6021      	streq	r1, [r4, #0]
 80028ea:	6063      	str	r3, [r4, #4]
 80028ec:	6054      	str	r4, [r2, #4]
 80028ee:	e7c9      	b.n	8002884 <_free_r+0x24>
 80028f0:	bd38      	pop	{r3, r4, r5, pc}
 80028f2:	bf00      	nop
 80028f4:	20000104 	.word	0x20000104

080028f8 <_malloc_r>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	1ccd      	adds	r5, r1, #3
 80028fc:	f025 0503 	bic.w	r5, r5, #3
 8002900:	3508      	adds	r5, #8
 8002902:	2d0c      	cmp	r5, #12
 8002904:	bf38      	it	cc
 8002906:	250c      	movcc	r5, #12
 8002908:	2d00      	cmp	r5, #0
 800290a:	4606      	mov	r6, r0
 800290c:	db01      	blt.n	8002912 <_malloc_r+0x1a>
 800290e:	42a9      	cmp	r1, r5
 8002910:	d903      	bls.n	800291a <_malloc_r+0x22>
 8002912:	230c      	movs	r3, #12
 8002914:	6033      	str	r3, [r6, #0]
 8002916:	2000      	movs	r0, #0
 8002918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291a:	f000 f87d 	bl	8002a18 <__malloc_lock>
 800291e:	4921      	ldr	r1, [pc, #132]	; (80029a4 <_malloc_r+0xac>)
 8002920:	680a      	ldr	r2, [r1, #0]
 8002922:	4614      	mov	r4, r2
 8002924:	b99c      	cbnz	r4, 800294e <_malloc_r+0x56>
 8002926:	4f20      	ldr	r7, [pc, #128]	; (80029a8 <_malloc_r+0xb0>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b923      	cbnz	r3, 8002936 <_malloc_r+0x3e>
 800292c:	4621      	mov	r1, r4
 800292e:	4630      	mov	r0, r6
 8002930:	f000 f862 	bl	80029f8 <_sbrk_r>
 8002934:	6038      	str	r0, [r7, #0]
 8002936:	4629      	mov	r1, r5
 8002938:	4630      	mov	r0, r6
 800293a:	f000 f85d 	bl	80029f8 <_sbrk_r>
 800293e:	1c43      	adds	r3, r0, #1
 8002940:	d123      	bne.n	800298a <_malloc_r+0x92>
 8002942:	230c      	movs	r3, #12
 8002944:	4630      	mov	r0, r6
 8002946:	6033      	str	r3, [r6, #0]
 8002948:	f000 f86c 	bl	8002a24 <__malloc_unlock>
 800294c:	e7e3      	b.n	8002916 <_malloc_r+0x1e>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	1b5b      	subs	r3, r3, r5
 8002952:	d417      	bmi.n	8002984 <_malloc_r+0x8c>
 8002954:	2b0b      	cmp	r3, #11
 8002956:	d903      	bls.n	8002960 <_malloc_r+0x68>
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	441c      	add	r4, r3
 800295c:	6025      	str	r5, [r4, #0]
 800295e:	e004      	b.n	800296a <_malloc_r+0x72>
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	42a2      	cmp	r2, r4
 8002964:	bf0c      	ite	eq
 8002966:	600b      	streq	r3, [r1, #0]
 8002968:	6053      	strne	r3, [r2, #4]
 800296a:	4630      	mov	r0, r6
 800296c:	f000 f85a 	bl	8002a24 <__malloc_unlock>
 8002970:	f104 000b 	add.w	r0, r4, #11
 8002974:	1d23      	adds	r3, r4, #4
 8002976:	f020 0007 	bic.w	r0, r0, #7
 800297a:	1ac2      	subs	r2, r0, r3
 800297c:	d0cc      	beq.n	8002918 <_malloc_r+0x20>
 800297e:	1a1b      	subs	r3, r3, r0
 8002980:	50a3      	str	r3, [r4, r2]
 8002982:	e7c9      	b.n	8002918 <_malloc_r+0x20>
 8002984:	4622      	mov	r2, r4
 8002986:	6864      	ldr	r4, [r4, #4]
 8002988:	e7cc      	b.n	8002924 <_malloc_r+0x2c>
 800298a:	1cc4      	adds	r4, r0, #3
 800298c:	f024 0403 	bic.w	r4, r4, #3
 8002990:	42a0      	cmp	r0, r4
 8002992:	d0e3      	beq.n	800295c <_malloc_r+0x64>
 8002994:	1a21      	subs	r1, r4, r0
 8002996:	4630      	mov	r0, r6
 8002998:	f000 f82e 	bl	80029f8 <_sbrk_r>
 800299c:	3001      	adds	r0, #1
 800299e:	d1dd      	bne.n	800295c <_malloc_r+0x64>
 80029a0:	e7cf      	b.n	8002942 <_malloc_r+0x4a>
 80029a2:	bf00      	nop
 80029a4:	20000104 	.word	0x20000104
 80029a8:	20000108 	.word	0x20000108

080029ac <_realloc_r>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	4607      	mov	r7, r0
 80029b0:	4614      	mov	r4, r2
 80029b2:	460e      	mov	r6, r1
 80029b4:	b921      	cbnz	r1, 80029c0 <_realloc_r+0x14>
 80029b6:	4611      	mov	r1, r2
 80029b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80029bc:	f7ff bf9c 	b.w	80028f8 <_malloc_r>
 80029c0:	b922      	cbnz	r2, 80029cc <_realloc_r+0x20>
 80029c2:	f7ff ff4d 	bl	8002860 <_free_r>
 80029c6:	4625      	mov	r5, r4
 80029c8:	4628      	mov	r0, r5
 80029ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029cc:	f000 f830 	bl	8002a30 <_malloc_usable_size_r>
 80029d0:	42a0      	cmp	r0, r4
 80029d2:	d20f      	bcs.n	80029f4 <_realloc_r+0x48>
 80029d4:	4621      	mov	r1, r4
 80029d6:	4638      	mov	r0, r7
 80029d8:	f7ff ff8e 	bl	80028f8 <_malloc_r>
 80029dc:	4605      	mov	r5, r0
 80029de:	2800      	cmp	r0, #0
 80029e0:	d0f2      	beq.n	80029c8 <_realloc_r+0x1c>
 80029e2:	4631      	mov	r1, r6
 80029e4:	4622      	mov	r2, r4
 80029e6:	f7ff ff13 	bl	8002810 <memcpy>
 80029ea:	4631      	mov	r1, r6
 80029ec:	4638      	mov	r0, r7
 80029ee:	f7ff ff37 	bl	8002860 <_free_r>
 80029f2:	e7e9      	b.n	80029c8 <_realloc_r+0x1c>
 80029f4:	4635      	mov	r5, r6
 80029f6:	e7e7      	b.n	80029c8 <_realloc_r+0x1c>

080029f8 <_sbrk_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	2300      	movs	r3, #0
 80029fc:	4d05      	ldr	r5, [pc, #20]	; (8002a14 <_sbrk_r+0x1c>)
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	602b      	str	r3, [r5, #0]
 8002a04:	f7fd fe1e 	bl	8000644 <_sbrk>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d102      	bne.n	8002a12 <_sbrk_r+0x1a>
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	b103      	cbz	r3, 8002a12 <_sbrk_r+0x1a>
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
 8002a14:	20000110 	.word	0x20000110

08002a18 <__malloc_lock>:
 8002a18:	4801      	ldr	r0, [pc, #4]	; (8002a20 <__malloc_lock+0x8>)
 8002a1a:	f000 b811 	b.w	8002a40 <__retarget_lock_acquire_recursive>
 8002a1e:	bf00      	nop
 8002a20:	20000118 	.word	0x20000118

08002a24 <__malloc_unlock>:
 8002a24:	4801      	ldr	r0, [pc, #4]	; (8002a2c <__malloc_unlock+0x8>)
 8002a26:	f000 b80c 	b.w	8002a42 <__retarget_lock_release_recursive>
 8002a2a:	bf00      	nop
 8002a2c:	20000118 	.word	0x20000118

08002a30 <_malloc_usable_size_r>:
 8002a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a34:	1f18      	subs	r0, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bfbc      	itt	lt
 8002a3a:	580b      	ldrlt	r3, [r1, r0]
 8002a3c:	18c0      	addlt	r0, r0, r3
 8002a3e:	4770      	bx	lr

08002a40 <__retarget_lock_acquire_recursive>:
 8002a40:	4770      	bx	lr

08002a42 <__retarget_lock_release_recursive>:
 8002a42:	4770      	bx	lr

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
