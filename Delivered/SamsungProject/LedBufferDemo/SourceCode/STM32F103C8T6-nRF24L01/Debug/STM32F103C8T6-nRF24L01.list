
STM32F103C8T6-nRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080025d0  080025d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002618  08002618  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002618  08002618  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002618  08002618  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08002630  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002630  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6f5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a76  00000000  00000000  0002b72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e92  00000000  00000000  0002e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b71  00000000  00000000  0004754a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a75  00000000  00000000  000510bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  000d6b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080025b8 	.word	0x080025b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080025b8 	.word	0x080025b8

0800014c <delayMicroseconds>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delayMicroseconds(uint32_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	while(us--);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	1e5a      	subs	r2, r3, #1
 8000158:	607a      	str	r2, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	bf14      	ite	ne
 800015e:	2301      	movne	r3, #1
 8000160:	2300      	moveq	r3, #0
 8000162:	b2db      	uxtb	r3, r3
 8000164:	2b00      	cmp	r3, #0
 8000166:	d000      	beq.n	800016a <delayMicroseconds+0x1e>
 8000168:	e7f4      	b.n	8000154 <delayMicroseconds+0x8>
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <digitalWrite>:

void digitalWrite(uint16_t pin, bool level)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	460a      	mov	r2, r1
 800017e:	80fb      	strh	r3, [r7, #6]
 8000180:	4613      	mov	r3, r2
 8000182:	717b      	strb	r3, [r7, #5]
	if(level)HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000184:	797b      	ldrb	r3, [r7, #5]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d006      	beq.n	8000198 <digitalWrite+0x24>
 800018a:	88fb      	ldrh	r3, [r7, #6]
 800018c:	2201      	movs	r2, #1
 800018e:	4619      	mov	r1, r3
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <digitalWrite+0x38>)
 8000192:	f000 fd75 	bl	8000c80 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
}
 8000196:	e005      	b.n	80001a4 <digitalWrite+0x30>
	else HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8000198:	88fb      	ldrh	r3, [r7, #6]
 800019a:	2200      	movs	r2, #0
 800019c:	4619      	mov	r1, r3
 800019e:	4803      	ldr	r0, [pc, #12]	; (80001ac <digitalWrite+0x38>)
 80001a0:	f000 fd6e 	bl	8000c80 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <spiTransfer>:

uint8_t spiTransfer(uint8_t data)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi1, &data, &value, 1, 100);
 80001be:	f107 020f 	add.w	r2, r7, #15
 80001c2:	1df9      	adds	r1, r7, #7
 80001c4:	2364      	movs	r3, #100	; 0x64
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2301      	movs	r3, #1
 80001ca:	4804      	ldr	r0, [pc, #16]	; (80001dc <spiTransfer+0x2c>)
 80001cc:	f001 fa0e 	bl	80015ec <HAL_SPI_TransmitReceive>
	return value;
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	3710      	adds	r7, #16
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000028 	.word	0x20000028

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b590      	push	{r4, r7, lr}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f000 fa5d 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f827 	bl	800023c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f8d5 	bl	800039c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80001f2:	f000 f869 	bl	80002c8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80001f6:	f000 f8a3 	bl	8000340 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  radio.begin();                  //Starting the Wireless communication
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x50>)
 80001fc:	f001 fefa 	bl	8001ff4 <_ZN4RF245beginEv>
  radio.openWritingPipe(address); //Setting the address where we will send the data
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <main+0x54>)
 8000202:	480b      	ldr	r0, [pc, #44]	; (8000230 <main+0x50>)
 8000204:	f002 f8ab 	bl	800235e <_ZN4RF2415openWritingPipeEPKh>
  radio.setPALevel(RF24_PA_MIN);  //You can set it as minimum or maximum depending on the distance between the transmitter and receiver.
 8000208:	2201      	movs	r2, #1
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x50>)
 800020e:	f002 f900 	bl	8002412 <_ZN4RF2410setPALevelEhb>
  radio.stopListening();
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0x50>)
 8000214:	f001 ffc0 	bl	8002198 <_ZN4RF2413stopListeningEv>
  {

#if defined(MODE_TX)
//	  if(nháº¥n nuts)
//	  {
	  	  const char text[] = "Xin chao Hung";
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <main+0x58>)
 800021a:	463c      	mov	r4, r7
 800021c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800021e:	c407      	stmia	r4!, {r0, r1, r2}
 8000220:	8023      	strh	r3, [r4, #0]
		  radio.write(&text, sizeof(text));
 8000222:	463b      	mov	r3, r7
 8000224:	220e      	movs	r2, #14
 8000226:	4619      	mov	r1, r3
 8000228:	4801      	ldr	r0, [pc, #4]	; (8000230 <main+0x50>)
 800022a:	f002 f865 	bl	80022f8 <_ZN4RF245writeEPKvh>
		  }
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800022e:	e7f3      	b.n	8000218 <main+0x38>
 8000230:	200000c4 	.word	0x200000c4
 8000234:	080025f0 	.word	0x080025f0
 8000238:	080025d0 	.word	0x080025d0

0800023c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 f9ac 	bl	80025a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000266:	2310      	movs	r3, #16
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026a:	2300      	movs	r3, #0
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fd1c 	bl	8000cb0 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	bf14      	ite	ne
 800027e:	2301      	movne	r3, #1
 8000280:	2300      	moveq	r3, #0
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000288:	f000 f8c6 	bl	8000418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 ff83 	bl	80011b0 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	2301      	movne	r3, #1
 80002b2:	2300      	moveq	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80002ba:	f000 f8ad 	bl	8000418 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002cc:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002ce:	4a1b      	ldr	r2, [pc, #108]	; (800033c <_ZL12MX_SPI1_Initv+0x74>)
 80002d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 80002fc:	2208      	movs	r2, #8
 80002fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 8000308:	2200      	movs	r2, #0
 800030a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 800030e:	2200      	movs	r2, #0
 8000310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 8000314:	220a      	movs	r2, #10
 8000316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000318:	4807      	ldr	r0, [pc, #28]	; (8000338 <_ZL12MX_SPI1_Initv+0x70>)
 800031a:	f001 f8e3 	bl	80014e4 <HAL_SPI_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf14      	ite	ne
 8000324:	2301      	movne	r3, #1
 8000326:	2300      	moveq	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800032e:	f000 f873 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000028 	.word	0x20000028
 800033c:	40013000 	.word	0x40013000

08000340 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 800034c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000376:	4807      	ldr	r0, [pc, #28]	; (8000394 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000378:	f001 fb80 	bl	8001a7c <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf14      	ite	ne
 8000382:	2301      	movne	r3, #1
 8000384:	2300      	moveq	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800038c:	f000 f844 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000080 	.word	0x20000080
 8000398:	40013800 	.word	0x40013800

0800039c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <_ZL12MX_GPIO_Initv+0x74>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <_ZL12MX_GPIO_Initv+0x74>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <_ZL12MX_GPIO_Initv+0x74>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <_ZL12MX_GPIO_Initv+0x74>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a10      	ldr	r2, [pc, #64]	; (8000410 <_ZL12MX_GPIO_Initv+0x74>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <_ZL12MX_GPIO_Initv+0x74>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2103      	movs	r1, #3
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <_ZL12MX_GPIO_Initv+0x78>)
 80003e6:	f000 fc4b 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003ea:	2303      	movs	r3, #3
 80003ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <_ZL12MX_GPIO_Initv+0x78>)
 8000402:	f000 fab9 	bl	8000978 <HAL_GPIO_Init>

}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40010c00 	.word	0x40010c00

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d10a      	bne.n	800044a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800043a:	4293      	cmp	r3, r2
 800043c:	d105      	bne.n	800044a <_Z41__static_initialization_and_destruction_0ii+0x26>
RF24 radio(GPIO_PIN_0, GPIO_PIN_1); // CE, CSN
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000440:	2202      	movs	r2, #2
 8000442:	2101      	movs	r1, #1
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000446:	f001 fd50 	bl	8001eea <_ZN4RF24C1Ettm>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	00989680 	.word	0x00989680
 8000458:	200000c4 	.word	0x200000c4

0800045c <_GLOBAL__sub_I_hspi1>:
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
 8000460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff ffdd 	bl	8000424 <_Z41__static_initialization_and_destruction_0ii>
 800046a:	bd80      	pop	{r7, pc}

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <HAL_SPI_MspInit+0x88>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d12f      	bne.n	8000550 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <HAL_SPI_MspInit+0x8c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <HAL_SPI_MspInit+0x8c>)
 80004f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_SPI_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_SPI_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <HAL_SPI_MspInit+0x8c>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_SPI_MspInit+0x8c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000520:	23a0      	movs	r3, #160	; 0xa0
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_SPI_MspInit+0x90>)
 8000534:	f000 fa20 	bl	8000978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000538:	2340      	movs	r3, #64	; 0x40
 800053a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <HAL_SPI_MspInit+0x90>)
 800054c:	f000 fa14 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40013000 	.word	0x40013000
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800

08000564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <HAL_UART_MspInit+0x8c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d131      	bne.n	80005e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_UART_MspInit+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <HAL_UART_MspInit+0x90>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_UART_MspInit+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <HAL_UART_MspInit+0x90>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_UART_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_UART_MspInit+0x94>)
 80005ca:	f000 f9d5 	bl	8000978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <HAL_UART_MspInit+0x94>)
 80005e4:	f000 f9c8 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40013800 	.word	0x40013800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f875 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
	...

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067e:	f7ff ffe4 	bl	800064a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000682:	f001 ff6d 	bl	8002560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fdab 	bl	80001e0 <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000694:	08002624 	.word	0x08002624
  ldr r2, =_sbss
 8000698:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800069c:	200000e8 	.word	0x200000e8

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f92b 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fed4 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f935 	bl	800095e <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f90b 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	200000e4 	.word	0x200000e4

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	200000e4 	.word	0x200000e4

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff0 	bl	8000754 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffe0 	bl	8000754 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff90 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff49 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff5e 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff90 	bl	8000868 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5f 	bl	8000814 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffb0 	bl	80008cc <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b08b      	sub	sp, #44	; 0x2c
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098a:	e169      	b.n	8000c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800098c:	2201      	movs	r2, #1
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f040 8158 	bne.w	8000c5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	4a9a      	ldr	r2, [pc, #616]	; (8000c18 <HAL_GPIO_Init+0x2a0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d05e      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009b4:	4a98      	ldr	r2, [pc, #608]	; (8000c18 <HAL_GPIO_Init+0x2a0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d875      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009ba:	4a98      	ldr	r2, [pc, #608]	; (8000c1c <HAL_GPIO_Init+0x2a4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d058      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009c0:	4a96      	ldr	r2, [pc, #600]	; (8000c1c <HAL_GPIO_Init+0x2a4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d86f      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009c6:	4a96      	ldr	r2, [pc, #600]	; (8000c20 <HAL_GPIO_Init+0x2a8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d052      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009cc:	4a94      	ldr	r2, [pc, #592]	; (8000c20 <HAL_GPIO_Init+0x2a8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d869      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009d2:	4a94      	ldr	r2, [pc, #592]	; (8000c24 <HAL_GPIO_Init+0x2ac>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d04c      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009d8:	4a92      	ldr	r2, [pc, #584]	; (8000c24 <HAL_GPIO_Init+0x2ac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d863      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009de:	4a92      	ldr	r2, [pc, #584]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d046      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009e4:	4a90      	ldr	r2, [pc, #576]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d85d      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d82a      	bhi.n	8000a44 <HAL_GPIO_Init+0xcc>
 80009ee:	2b12      	cmp	r3, #18
 80009f0:	d859      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009f2:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <HAL_GPIO_Init+0x80>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a73 	.word	0x08000a73
 80009fc:	08000a4d 	.word	0x08000a4d
 8000a00:	08000a5f 	.word	0x08000a5f
 8000a04:	08000aa1 	.word	0x08000aa1
 8000a08:	08000aa7 	.word	0x08000aa7
 8000a0c:	08000aa7 	.word	0x08000aa7
 8000a10:	08000aa7 	.word	0x08000aa7
 8000a14:	08000aa7 	.word	0x08000aa7
 8000a18:	08000aa7 	.word	0x08000aa7
 8000a1c:	08000aa7 	.word	0x08000aa7
 8000a20:	08000aa7 	.word	0x08000aa7
 8000a24:	08000aa7 	.word	0x08000aa7
 8000a28:	08000aa7 	.word	0x08000aa7
 8000a2c:	08000aa7 	.word	0x08000aa7
 8000a30:	08000aa7 	.word	0x08000aa7
 8000a34:	08000aa7 	.word	0x08000aa7
 8000a38:	08000aa7 	.word	0x08000aa7
 8000a3c:	08000a55 	.word	0x08000a55
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	4a79      	ldr	r2, [pc, #484]	; (8000c2c <HAL_GPIO_Init+0x2b4>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a4a:	e02c      	b.n	8000aa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	623b      	str	r3, [r7, #32]
          break;
 8000a52:	e029      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	623b      	str	r3, [r7, #32]
          break;
 8000a5c:	e024      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	3308      	adds	r3, #8
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e01f      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	e01a      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	623b      	str	r3, [r7, #32]
          break;
 8000a7e:	e013      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	611a      	str	r2, [r3, #16]
          break;
 8000a92:	e009      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2308      	movs	r3, #8
 8000a96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	615a      	str	r2, [r3, #20]
          break;
 8000a9e:	e003      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e000      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          break;
 8000aa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2bff      	cmp	r3, #255	; 0xff
 8000aac:	d801      	bhi.n	8000ab2 <HAL_GPIO_Init+0x13a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	e001      	b.n	8000ab6 <HAL_GPIO_Init+0x13e>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d802      	bhi.n	8000ac4 <HAL_GPIO_Init+0x14c>
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x152>
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	401a      	ands	r2, r3
 8000adc:	6a39      	ldr	r1, [r7, #32]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 80b1 	beq.w	8000c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a4c      	ldr	r2, [pc, #304]	; (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b10:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <HAL_GPIO_Init+0x2bc>)
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	220f      	movs	r2, #15
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a40      	ldr	r2, [pc, #256]	; (8000c38 <HAL_GPIO_Init+0x2c0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d013      	beq.n	8000b64 <HAL_GPIO_Init+0x1ec>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3f      	ldr	r2, [pc, #252]	; (8000c3c <HAL_GPIO_Init+0x2c4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d00d      	beq.n	8000b60 <HAL_GPIO_Init+0x1e8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3e      	ldr	r2, [pc, #248]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d007      	beq.n	8000b5c <HAL_GPIO_Init+0x1e4>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <HAL_GPIO_Init+0x2cc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d101      	bne.n	8000b58 <HAL_GPIO_Init+0x1e0>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b64:	2300      	movs	r3, #0
 8000b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b76:	492f      	ldr	r1, [pc, #188]	; (8000c34 <HAL_GPIO_Init+0x2bc>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	492c      	ldr	r1, [pc, #176]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	600b      	str	r3, [r1, #0]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4928      	ldr	r1, [pc, #160]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	4922      	ldr	r1, [pc, #136]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	491e      	ldr	r1, [pc, #120]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	4918      	ldr	r1, [pc, #96]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	608b      	str	r3, [r1, #8]
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4914      	ldr	r1, [pc, #80]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d021      	beq.n	8000c4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	490e      	ldr	r1, [pc, #56]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60cb      	str	r3, [r1, #12]
 8000c14:	e021      	b.n	8000c5a <HAL_GPIO_Init+0x2e2>
 8000c16:	bf00      	nop
 8000c18:	10320000 	.word	0x10320000
 8000c1c:	10310000 	.word	0x10310000
 8000c20:	10220000 	.word	0x10220000
 8000c24:	10210000 	.word	0x10210000
 8000c28:	10120000 	.word	0x10120000
 8000c2c:	10110000 	.word	0x10110000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40011400 	.word	0x40011400
 8000c48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_GPIO_Init+0x304>)
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4909      	ldr	r1, [pc, #36]	; (8000c7c <HAL_GPIO_Init+0x304>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f47f ae8e 	bne.w	800098c <HAL_GPIO_Init+0x14>
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	372c      	adds	r7, #44	; 0x2c
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c90:	787b      	ldrb	r3, [r7, #1]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c9c:	e003      	b.n	8000ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	041a      	lsls	r2, r3, #16
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	611a      	str	r2, [r3, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e26c      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8087 	beq.w	8000dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd0:	4b92      	ldr	r3, [pc, #584]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d00c      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cdc:	4b8f      	ldr	r3, [pc, #572]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d112      	bne.n	8000d0e <HAL_RCC_OscConfig+0x5e>
 8000ce8:	4b8c      	ldr	r3, [pc, #560]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf4:	d10b      	bne.n	8000d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf6:	4b89      	ldr	r3, [pc, #548]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d06c      	beq.n	8000ddc <HAL_RCC_OscConfig+0x12c>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d168      	bne.n	8000ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e246      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x76>
 8000d18:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a7f      	ldr	r2, [pc, #508]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e02e      	b.n	8000d84 <HAL_RCC_OscConfig+0xd4>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x98>
 8000d2e:	4b7b      	ldr	r3, [pc, #492]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a7a      	ldr	r2, [pc, #488]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b78      	ldr	r3, [pc, #480]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a77      	ldr	r2, [pc, #476]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e01d      	b.n	8000d84 <HAL_RCC_OscConfig+0xd4>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0xbc>
 8000d52:	4b72      	ldr	r3, [pc, #456]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a71      	ldr	r2, [pc, #452]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b6f      	ldr	r3, [pc, #444]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a6e      	ldr	r2, [pc, #440]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e00b      	b.n	8000d84 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a6a      	ldr	r2, [pc, #424]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b68      	ldr	r3, [pc, #416]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a67      	ldr	r2, [pc, #412]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fce2 	bl	8000754 <HAL_GetTick>
 8000d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fcde 	bl	8000754 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	; 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e1fa      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	4b5d      	ldr	r3, [pc, #372]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f0      	beq.n	8000d94 <HAL_RCC_OscConfig+0xe4>
 8000db2:	e014      	b.n	8000dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fcce 	bl	8000754 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fcca 	bl	8000754 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e1e6      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x10c>
 8000dda:	e000      	b.n	8000dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d063      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dea:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00b      	beq.n	8000e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000df6:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d11c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x18c>
 8000e02:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d116      	bne.n	8000e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0e:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <HAL_RCC_OscConfig+0x176>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d001      	beq.n	8000e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e1ba      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4939      	ldr	r1, [pc, #228]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3a:	e03a      	b.n	8000eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d020      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <HAL_RCC_OscConfig+0x270>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fc83 	bl	8000754 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e52:	f7ff fc7f 	bl	8000754 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e19b      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4927      	ldr	r1, [pc, #156]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
 8000e84:	e015      	b.n	8000eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_RCC_OscConfig+0x270>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fc62 	bl	8000754 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e94:	f7ff fc5e 	bl	8000754 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e17a      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f0      	bne.n	8000e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d03a      	beq.n	8000f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d019      	beq.n	8000efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_RCC_OscConfig+0x274>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fc42 	bl	8000754 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc3e 	bl	8000754 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e15a      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fad8 	bl	80014a8 <RCC_Delay>
 8000ef8:	e01c      	b.n	8000f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_RCC_OscConfig+0x274>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f00:	f7ff fc28 	bl	8000754 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f06:	e00f      	b.n	8000f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fc24 	bl	8000754 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d908      	bls.n	8000f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e140      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	42420000 	.word	0x42420000
 8000f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f28:	4b9e      	ldr	r3, [pc, #632]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e9      	bne.n	8000f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a6 	beq.w	800108e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f46:	4b97      	ldr	r3, [pc, #604]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10d      	bne.n	8000f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b94      	ldr	r3, [pc, #592]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a93      	ldr	r2, [pc, #588]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b91      	ldr	r3, [pc, #580]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6e:	4b8e      	ldr	r3, [pc, #568]	; (80011a8 <HAL_RCC_OscConfig+0x4f8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d118      	bne.n	8000fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7a:	4b8b      	ldr	r3, [pc, #556]	; (80011a8 <HAL_RCC_OscConfig+0x4f8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a8a      	ldr	r2, [pc, #552]	; (80011a8 <HAL_RCC_OscConfig+0x4f8>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fbe5 	bl	8000754 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8e:	f7ff fbe1 	bl	8000754 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	; 0x64
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e0fd      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	4b81      	ldr	r3, [pc, #516]	; (80011a8 <HAL_RCC_OscConfig+0x4f8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f0      	beq.n	8000f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d106      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x312>
 8000fb4:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a7a      	ldr	r2, [pc, #488]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6213      	str	r3, [r2, #32]
 8000fc0:	e02d      	b.n	800101e <HAL_RCC_OscConfig+0x36e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x334>
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a75      	ldr	r2, [pc, #468]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6213      	str	r3, [r2, #32]
 8000fd6:	4b73      	ldr	r3, [pc, #460]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a72      	ldr	r2, [pc, #456]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6213      	str	r3, [r2, #32]
 8000fe2:	e01c      	b.n	800101e <HAL_RCC_OscConfig+0x36e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d10c      	bne.n	8001006 <HAL_RCC_OscConfig+0x356>
 8000fec:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a6c      	ldr	r2, [pc, #432]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4a69      	ldr	r2, [pc, #420]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6213      	str	r3, [r2, #32]
 8001004:	e00b      	b.n	800101e <HAL_RCC_OscConfig+0x36e>
 8001006:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4a66      	ldr	r2, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6213      	str	r3, [r2, #32]
 8001012:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4a63      	ldr	r2, [pc, #396]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d015      	beq.n	8001052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb95 	bl	8000754 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102c:	e00a      	b.n	8001044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102e:	f7ff fb91 	bl	8000754 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f241 3288 	movw	r2, #5000	; 0x1388
 800103c:	4293      	cmp	r3, r2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e0ab      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001044:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0ee      	beq.n	800102e <HAL_RCC_OscConfig+0x37e>
 8001050:	e014      	b.n	800107c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001052:	f7ff fb7f 	bl	8000754 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fb7b 	bl	8000754 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f241 3288 	movw	r2, #5000	; 0x1388
 8001068:	4293      	cmp	r3, r2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e095      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001070:	4b4c      	ldr	r3, [pc, #304]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1ee      	bne.n	800105a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d105      	bne.n	800108e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001082:	4b48      	ldr	r3, [pc, #288]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a47      	ldr	r2, [pc, #284]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800108c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 8081 	beq.w	800119a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001098:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d061      	beq.n	8001168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d146      	bne.n	800113a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ac:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <HAL_RCC_OscConfig+0x4fc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fb4f 	bl	8000754 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fb4b 	bl	8000754 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e067      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d108      	bne.n	80010f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	492d      	ldr	r1, [pc, #180]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a19      	ldr	r1, [r3, #32]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	430b      	orrs	r3, r1
 8001106:	4927      	ldr	r1, [pc, #156]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_RCC_OscConfig+0x4fc>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fb1f 	bl	8000754 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fb1b 	bl	8000754 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e037      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x46a>
 8001138:	e02f      	b.n	800119a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_RCC_OscConfig+0x4fc>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fb08 	bl	8000754 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001148:	f7ff fb04 	bl	8000754 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e020      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x498>
 8001166:	e018      	b.n	800119a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e013      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	429a      	cmp	r2, r3
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001192:	429a      	cmp	r2, r3
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
 80011ac:	42420060 	.word	0x42420060

080011b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0d0      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d910      	bls.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 0207 	bic.w	r2, r3, #7
 80011da:	4965      	ldr	r1, [pc, #404]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e0b8      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a58      	ldr	r2, [pc, #352]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800122e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001230:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	494d      	ldr	r1, [pc, #308]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d040      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d115      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e07f      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e073      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06b      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4936      	ldr	r1, [pc, #216]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fa58 	bl	8000754 <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	e00a      	b.n	80012be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fa54 	bl	8000754 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e053      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 020c 	and.w	r2, r3, #12
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1eb      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d210      	bcs.n	8001300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4922      	ldr	r1, [pc, #136]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e032      	b.n	8001366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133e:	f000 f821 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 8001342:	4602      	mov	r2, r0
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	490a      	ldr	r1, [pc, #40]	; (8001378 <HAL_RCC_ClockConfig+0x1c8>)
 8001350:	5ccb      	ldrb	r3, [r1, r3]
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_RCC_ClockConfig+0x1cc>)
 8001358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_RCC_ClockConfig+0x1d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f9b6 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000
 8001374:	40021000 	.word	0x40021000
 8001378:	080025f8 	.word	0x080025f8
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001384:	b490      	push	{r4, r7}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800138c:	1d3c      	adds	r4, r7, #4
 800138e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001394:	f240 2301 	movw	r3, #513	; 0x201
 8001398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x40>
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x46>
 80013c2:	e02d      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c6:	623b      	str	r3, [r7, #32]
      break;
 80013c8:	e02d      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	0c9b      	lsrs	r3, r3, #18
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013d6:	4413      	add	r3, r2
 80013d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	0c5b      	lsrs	r3, r3, #17
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f6:	4413      	add	r3, r2
 80013f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001402:	fb02 f203 	mul.w	r2, r2, r3
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e004      	b.n	800141a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	623b      	str	r3, [r7, #32]
      break;
 800141e:	e002      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001422:	623b      	str	r3, [r7, #32]
      break;
 8001424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001426:	6a3b      	ldr	r3, [r7, #32]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bc90      	pop	{r4, r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	080025e0 	.word	0x080025e0
 8001438:	40021000 	.word	0x40021000
 800143c:	007a1200 	.word	0x007a1200
 8001440:	003d0900 	.word	0x003d0900

08001444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_RCC_GetHCLKFreq+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff2 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	08002608 	.word	0x08002608

08001480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001484:	f7ff ffde 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0adb      	lsrs	r3, r3, #11
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08002608 	.word	0x08002608

080014a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <RCC_Delay+0x34>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <RCC_Delay+0x38>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0a5b      	lsrs	r3, r3, #9
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c4:	bf00      	nop
  }
  while (Delay --);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	60fa      	str	r2, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f9      	bne.n	80014c4 <RCC_Delay+0x1c>
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000000 	.word	0x20000000
 80014e0:	10624dd3 	.word	0x10624dd3

080014e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e076      	b.n	80015e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001506:	d009      	beq.n	800151c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
 800150e:	e005      	b.n	800151c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe ffca 	bl	80004d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a0:	ea42 0103 	orr.w	r1, r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	0c1a      	lsrs	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f002 0204 	and.w	r2, r2, #4
 80015c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_SPI_TransmitReceive+0x26>
 800160e:	2302      	movs	r3, #2
 8001610:	e18a      	b.n	8001928 <HAL_SPI_TransmitReceive+0x33c>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800161a:	f7ff f89b 	bl	8000754 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001638:	2b01      	cmp	r3, #1
 800163a:	d00f      	beq.n	800165c <HAL_SPI_TransmitReceive+0x70>
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001642:	d107      	bne.n	8001654 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <HAL_SPI_TransmitReceive+0x68>
 800164c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001650:	2b04      	cmp	r3, #4
 8001652:	d003      	beq.n	800165c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001654:	2302      	movs	r3, #2
 8001656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800165a:	e15b      	b.n	8001914 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_SPI_TransmitReceive+0x82>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_SPI_TransmitReceive+0x82>
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001674:	e14e      	b.n	8001914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b04      	cmp	r3, #4
 8001680:	d003      	beq.n	800168a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2205      	movs	r2, #5
 8001686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	887a      	ldrh	r2, [r7, #2]
 80016b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ca:	2b40      	cmp	r3, #64	; 0x40
 80016cc:	d007      	beq.n	80016de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e6:	d178      	bne.n	80017da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_SPI_TransmitReceive+0x10a>
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d166      	bne.n	80017c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	1c9a      	adds	r2, r3, #2
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800171a:	e053      	b.n	80017c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d11b      	bne.n	8001762 <HAL_SPI_TransmitReceive+0x176>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d016      	beq.n	8001762 <HAL_SPI_TransmitReceive+0x176>
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d113      	bne.n	8001762 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	1c9a      	adds	r2, r3, #2
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d119      	bne.n	80017a4 <HAL_SPI_TransmitReceive+0x1b8>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001774:	b29b      	uxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d014      	beq.n	80017a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	b292      	uxth	r2, r2
 8001786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	1c9a      	adds	r2, r3, #2
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80017a4:	f7fe ffd6 	bl	8000754 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d807      	bhi.n	80017c4 <HAL_SPI_TransmitReceive+0x1d8>
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ba:	d003      	beq.n	80017c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80017c2:	e0a7      	b.n	8001914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1a6      	bne.n	800171c <HAL_SPI_TransmitReceive+0x130>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1a1      	bne.n	800171c <HAL_SPI_TransmitReceive+0x130>
 80017d8:	e07c      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_SPI_TransmitReceive+0x1fc>
 80017e2:	8b7b      	ldrh	r3, [r7, #26]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d16b      	bne.n	80018c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	330c      	adds	r3, #12
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800180e:	e057      	b.n	80018c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d11c      	bne.n	8001858 <HAL_SPI_TransmitReceive+0x26c>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d017      	beq.n	8001858 <HAL_SPI_TransmitReceive+0x26c>
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d114      	bne.n	8001858 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	330c      	adds	r3, #12
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d119      	bne.n	800189a <HAL_SPI_TransmitReceive+0x2ae>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800186a:	b29b      	uxth	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d014      	beq.n	800189a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001896:	2301      	movs	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800189a:	f7fe ff5b 	bl	8000754 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d803      	bhi.n	80018b2 <HAL_SPI_TransmitReceive+0x2c6>
 80018aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d102      	bne.n	80018b8 <HAL_SPI_TransmitReceive+0x2cc>
 80018b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d103      	bne.n	80018c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80018be:	e029      	b.n	8001914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1a2      	bne.n	8001810 <HAL_SPI_TransmitReceive+0x224>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d19d      	bne.n	8001810 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f8b1 	bl	8001a40 <SPI_EndRxTxTransaction>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80018f0:	e010      	b.n	8001914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10b      	bne.n	8001912 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	e000      	b.n	8001914 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001940:	f7fe ff08 	bl	8000754 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001950:	f7fe ff00 	bl	8000754 <HAL_GetTick>
 8001954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	0d1b      	lsrs	r3, r3, #20
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001966:	e054      	b.n	8001a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d050      	beq.n	8001a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001970:	f7fe fef0 	bl	8000754 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	d902      	bls.n	8001986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d13d      	bne.n	8001a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800199e:	d111      	bne.n	80019c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a8:	d004      	beq.n	80019b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d107      	bne.n	80019c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019cc:	d10f      	bne.n	80019ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e017      	b.n	8001a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d19b      	bne.n	8001968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ff6a 	bl	8001930 <SPI_WaitFlagStateUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e000      	b.n	8001a74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e03f      	b.n	8001b0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe fd5e 	bl	8000564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2224      	movs	r2, #36	; 0x24
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f829 	bl	8001b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b52:	f023 030c 	bic.w	r3, r3, #12
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2c      	ldr	r2, [pc, #176]	; (8001c2c <UART_SetConfig+0x114>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d103      	bne.n	8001b88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b80:	f7ff fc7e 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	e002      	b.n	8001b8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b88:	f7ff fc66 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 8001b8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	009a      	lsls	r2, r3, #2
 8001b98:	441a      	add	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <UART_SetConfig+0x118>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	0119      	lsls	r1, r3, #4
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009a      	lsls	r2, r3, #2
 8001bb8:	441a      	add	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <UART_SetConfig+0x118>)
 8001bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2064      	movs	r0, #100	; 0x64
 8001bce:	fb00 f303 	mul.w	r3, r0, r3
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	3332      	adds	r3, #50	; 0x32
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <UART_SetConfig+0x118>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be4:	4419      	add	r1, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009a      	lsls	r2, r3, #2
 8001bf0:	441a      	add	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <UART_SetConfig+0x118>)
 8001bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2064      	movs	r0, #100	; 0x64
 8001c06:	fb00 f303 	mul.w	r3, r0, r3
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	3332      	adds	r3, #50	; 0x32
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <UART_SetConfig+0x118>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	f003 020f 	and.w	r2, r3, #15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	440a      	add	r2, r1
 8001c22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	51eb851f 	.word	0x51eb851f

08001c34 <_ZN4RF243csnEb>:


/****************************************************************************/

void RF24::csn(bool mode)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
    digitalWrite(csn_pin, mode);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	885b      	ldrh	r3, [r3, #2]
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fa93 	bl	8000174 <digitalWrite>
    delayMicroseconds(csDelay);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fa7a 	bl	800014c <delayMicroseconds>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
	digitalWrite(ce_pin, level);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fa7d 	bl	8000174 <digitalWrite>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZN4RF2416beginTransactionEv>:

/****************************************************************************/

inline void RF24::beginTransaction()
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
            #endif // ! defined (RF24_RP2)
        #else // !defined(RF24_SPI_PTR)
    _SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE0));
        #endif // !defined(RF24_SPI_PTR)
    #endif // defined (RF24_SPI_TRANSACTIONS)
    csn(LOW);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffd1 	bl	8001c34 <_ZN4RF243csnEb>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_ZN4RF2414endTransactionEv>:

/****************************************************************************/

inline void RF24::endTransaction()
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
    csn(HIGH);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffc5 	bl	8001c34 <_ZN4RF243csnEb>
    _spi->endTransaction();
        #else // !defined(RF24_SPI_PTR)
    _SPI.endTransaction();
        #endif // !defined(RF24_SPI_PTR)
    #endif // defined (RF24_SPI_TRANSACTIONS)
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZN4RF2413read_registerEh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
    result = *++prx;   // result is 2nd byte of receive buffer

    endTransaction();
    #else // !defined(RF24_LINUX) && !defined(RF24_RP2)

    beginTransaction();
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffdf 	bl	8001c82 <_ZN4RF2416beginTransactionEv>
        #if defined (RF24_SPI_PTR)
    status = _spi->transfer(R_REGISTER | reg);
    result = _spi->transfer(0xff);

        #else // !defined(RF24_SPI_PTR)
    status = spiTransfer(R_REGISTER | reg);
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fa72 	bl	80001b0 <spiTransfer>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	721a      	strb	r2, [r3, #8]
    result = spiTransfer(0xff);
 8001cd4:	20ff      	movs	r0, #255	; 0xff
 8001cd6:	f7fe fa6b 	bl	80001b0 <spiTransfer>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]

        #endif // !defined(RF24_SPI_PTR)
    endTransaction();
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffdb 	bl	8001c9a <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX) && !defined(RF24_RP2)

    return result;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

void RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	72fb      	strb	r3, [r7, #11]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	72bb      	strb	r3, [r7, #10]

    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX) && !defined(RF24_RP2)

    beginTransaction();
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ffbd 	bl	8001c82 <_ZN4RF2416beginTransactionEv>
        #if defined (RF24_SPI_PTR)
    status = _spi->transfer(W_REGISTER | reg);
    while (len--) { _spi->transfer(*buf++); }

        #else // !defined(RF24_SPI_PTR)
    status = spiTransfer(W_REGISTER | reg);
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa4d 	bl	80001b0 <spiTransfer>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	721a      	strb	r2, [r3, #8]
    while (len--) { spiTransfer(*buf++); }
 8001d1e:	7abb      	ldrb	r3, [r7, #10]
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	72ba      	strb	r2, [r7, #10]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <_ZN4RF2414write_registerEhPKhh+0x54>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fa38 	bl	80001b0 <spiTransfer>
 8001d40:	e7ed      	b.n	8001d1e <_ZN4RF2414write_registerEhPKhh+0x30>

        #endif // !defined(RF24_SPI_PTR)
    endTransaction();
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff ffa9 	bl	8001c9a <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX) && !defined(RF24_RP2)
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_ZN4RF2414write_registerEhhb>:

/****************************************************************************/

void RF24::write_register(uint8_t reg, uint8_t value, bool is_cmd_only)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	70fb      	strb	r3, [r7, #3]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70bb      	strb	r3, [r7, #2]
 8001d66:	4613      	mov	r3, r2
 8001d68:	707b      	strb	r3, [r7, #1]
    if (is_cmd_only) {
 8001d6a:	787b      	ldrb	r3, [r7, #1]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d011      	beq.n	8001d94 <_ZN4RF2414write_registerEhhb+0x44>
        if (reg != RF24_NOP) { // don't print the get_status() operation
            IF_SERIAL_DEBUG(printf_P(PSTR("write_register(%02x)\r\n"), reg));
        }
        beginTransaction();
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff86 	bl	8001c82 <_ZN4RF2416beginTransactionEv>
        status = spiTransfer(W_REGISTER | reg);
        #else // !defined(RF24_LINUX) || defined (RF24_RP2)
            #if defined (RF24_SPI_PTR)
        status = _spi->transfer(W_REGISTER | reg);
            #else // !defined (RF24_SPI_PTR)
        status = spiTransfer(W_REGISTER | reg);
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f043 0320 	orr.w	r3, r3, #32
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa16 	bl	80001b0 <spiTransfer>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	721a      	strb	r2, [r3, #8]
            #endif // !defined (RF24_SPI_PTR)
        #endif // !defined(RF24_LINUX) || defined(RF24_RP2)
        endTransaction();
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff84 	bl	8001c9a <_ZN4RF2414endTransactionEv>
        spiTransfer(value);
            #endif // !defined(RF24_SPI_PTR)
        endTransaction();
        #endif // !defined(RF24_LINUX) && !defined(RF24_RP2)
    }
}
 8001d92:	e014      	b.n	8001dbe <_ZN4RF2414write_registerEhhb+0x6e>
        beginTransaction();
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff74 	bl	8001c82 <_ZN4RF2416beginTransactionEv>
        status = spiTransfer(W_REGISTER | reg);
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fa04 	bl	80001b0 <spiTransfer>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	721a      	strb	r2, [r3, #8]
        spiTransfer(value);
 8001db0:	78bb      	ldrb	r3, [r7, #2]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe f9fc 	bl	80001b0 <spiTransfer>
        endTransaction();
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff6e 	bl	8001c9a <_ZN4RF2414endTransactionEv>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

void RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71bb      	strb	r3, [r7, #6]
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	617b      	str	r3, [r7, #20]

    uint8_t blank_len = !data_len ? 1 : 0;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <_ZN4RF2413write_payloadEPKvhh+0x24>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <_ZN4RF2413write_payloadEPKvhh+0x26>
 8001dea:	2300      	movs	r3, #0
 8001dec:	74fb      	strb	r3, [r7, #19]
    if (!dynamic_payloads_enabled) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	7d1b      	ldrb	r3, [r3, #20]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00f      	beq.n	8001e1c <_ZN4RF2413write_payloadEPKvhh+0x56>
        data_len = rf24_min(data_len, payload_size);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7a5b      	ldrb	r3, [r3, #9]
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <_ZN4RF2413write_payloadEPKvhh+0x46>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	7a5b      	ldrb	r3, [r3, #9]
 8001e0a:	e000      	b.n	8001e0e <_ZN4RF2413write_payloadEPKvhh+0x48>
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	71fb      	strb	r3, [r7, #7]
        blank_len = static_cast<uint8_t>(payload_size - data_len);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	7a5a      	ldrb	r2, [r3, #9]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	74fb      	strb	r3, [r7, #19]
 8001e1a:	e004      	b.n	8001e26 <_ZN4RF2413write_payloadEPKvhh+0x60>
    }
    else {
        data_len = rf24_min(data_len, static_cast<uint8_t>(32));
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	bf28      	it	cs
 8001e22:	2320      	movcs	r3, #32
 8001e24:	71fb      	strb	r3, [r7, #7]
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();

    #else // !defined(RF24_LINUX) && !defined(RF24_RP2)

    beginTransaction();
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff ff2b 	bl	8001c82 <_ZN4RF2416beginTransactionEv>
    status = _spi->transfer(writeType);
    while (data_len--) { _spi->transfer(*current++); }
    while (blank_len--) { _spi->transfer(0); }

        #else // !defined(RF24_SPI_PTR)
    status = spiTransfer(writeType);
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe f9be 	bl	80001b0 <spiTransfer>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	721a      	strb	r2, [r3, #8]
    while (data_len--) { spiTransfer(*current++); }
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	1e5a      	subs	r2, r3, #1
 8001e40:	71fa      	strb	r2, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <_ZN4RF2413write_payloadEPKvhh+0x9a>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	617a      	str	r2, [r7, #20]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe f9a9 	bl	80001b0 <spiTransfer>
 8001e5e:	e7ed      	b.n	8001e3c <_ZN4RF2413write_payloadEPKvhh+0x76>

    while (blank_len--) { spiTransfer(0); }
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	74fa      	strb	r2, [r7, #19]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf14      	ite	ne
 8001e6a:	2301      	movne	r3, #1
 8001e6c:	2300      	moveq	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <_ZN4RF2413write_payloadEPKvhh+0xb6>
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7fe f99b 	bl	80001b0 <spiTransfer>
 8001e7a:	e7f1      	b.n	8001e60 <_ZN4RF2413write_payloadEPKvhh+0x9a>

        #endif // !defined(RF24_SPI_PTR)
    endTransaction();
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7ff ff0c 	bl	8001c9a <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX) && !defined(RF24_RP2)
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_ZN4RF248flush_rxEv>:
}

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
    write_register(FLUSH_RX, RF24_NOP, true);
 8001e92:	2301      	movs	r3, #1
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	21e2      	movs	r1, #226	; 0xe2
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff59 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    return status;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a1b      	ldrb	r3, [r3, #8]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
    write_register(FLUSH_TX, RF24_NOP, true);
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	22ff      	movs	r2, #255	; 0xff
 8001eb6:	21e1      	movs	r1, #225	; 0xe1
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff49 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    return status;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7a1b      	ldrb	r3, [r3, #8]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
    write_register(RF24_NOP, RF24_NOP, true);
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	21ff      	movs	r1, #255	; 0xff
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff39 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    return status;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7a1b      	ldrb	r3, [r3, #8]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_ZN4RF24C1Ettm>:

#endif // !defined(MINIMAL)

/****************************************************************************/

RF24::RF24(uint16_t _cepin, uint16_t _cspin, uint32_t _spi_speed)
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	817b      	strh	r3, [r7, #10]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	813b      	strh	r3, [r7, #8]
        :ce_pin(_cepin), csn_pin(_cspin), spi_speed(_spi_speed), payload_size(32), _is_p_variant(false), _is_p0_rx(false), addr_width(5), dynamic_payloads_enabled(true),
         csDelay(5)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	897a      	ldrh	r2, [r7, #10]
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	893a      	ldrh	r2, [r7, #8]
 8001f06:	805a      	strh	r2, [r3, #2]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	725a      	strb	r2, [r3, #9]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	741a      	strb	r2, [r3, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	745a      	strb	r2, [r3, #17]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2205      	movs	r2, #5
 8001f24:	74da      	strb	r2, [r3, #19]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	751a      	strb	r2, [r3, #20]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2205      	movs	r2, #5
 8001f30:	61da      	str	r2, [r3, #28]
{
    _init_obj();
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f806 	bl	8001f44 <_ZN4RF249_init_objEv>
}
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <_ZN4RF249_init_objEv>:
}

/****************************************************************************/

void RF24::_init_obj()
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

    #if defined (RF24_SPI_PTR) && !defined (RF24_RP2)
    _spi = &SPI;
    #endif // defined (RF24_SPI_PTR)

    pipe0_reading_address[0] = 0;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	729a      	strb	r2, [r3, #10]
    if(spi_speed <= 35000){ //Handle old BCM2835 speed constants, default to RF24_SPI_SPEED
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d802      	bhi.n	8001f64 <_ZN4RF249_init_objEv+0x20>
        spi_speed = RF24_SPI_SPEED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <_ZN4RF249_init_objEv+0x2c>)
 8001f62:	605a      	str	r2, [r3, #4]
    }
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	00989680 	.word	0x00989680

08001f74 <_ZN4RF2410setChannelEh>:

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
    const uint8_t max_channel = 125;
 8001f80:	237d      	movs	r3, #125	; 0x7d
 8001f82:	73fb      	strb	r3, [r7, #15]
    write_register(RF_CH, rf24_min(channel, max_channel));
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	2b7c      	cmp	r3, #124	; 0x7c
 8001f88:	d802      	bhi.n	8001f90 <_ZN4RF2410setChannelEh+0x1c>
 8001f8a:	1cfb      	adds	r3, r7, #3
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	e000      	b.n	8001f92 <_ZN4RF2410setChannelEh+0x1e>
 8001f90:	227d      	movs	r2, #125	; 0x7d
 8001f92:	2300      	movs	r3, #0
 8001f94:	2105      	movs	r1, #5
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff feda 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN4RF2414setPayloadSizeEh>:
}

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
    // payload size must be in range [1, 32]
    payload_size = static_cast<uint8_t>(rf24_max(1, rf24_min(32, size)));
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <_ZN4RF2414setPayloadSizeEh+0x1e>
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	bf28      	it	cs
 8001fbc:	2320      	movcs	r3, #32
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	e000      	b.n	8001fc4 <_ZN4RF2414setPayloadSizeEh+0x20>
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	725a      	strb	r2, [r3, #9]

    // write static payload size setting for all pipes
    for (uint8_t i = 0; i < 6; ++i)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d80c      	bhi.n	8001fec <_ZN4RF2414setPayloadSizeEh+0x48>
        write_register(static_cast<uint8_t>(RX_PW_P0 + i), payload_size);
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	3311      	adds	r3, #17
 8001fd6:	b2d9      	uxtb	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7a5a      	ldrb	r2, [r3, #9]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff feb6 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    for (uint8_t i = 0; i < 6; ++i)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	e7ef      	b.n	8001fcc <_ZN4RF2414setPayloadSizeEh+0x28>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
//    _SPI.begin();
        #endif // !defined(RF24_SPI_PTR)

    #endif // !defined(XMEGA_D3) && !defined(RF24_LINUX)

    return _init_pins() && _init_radio();
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f810 	bl	8002022 <_ZN4RF2410_init_pinsEv>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <_ZN4RF245beginEv+0x24>
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f826 	bl	800205a <_ZN4RF2411_init_radioEv>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <_ZN4RF245beginEv+0x24>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <_ZN4RF245beginEv+0x26>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZN4RF2410_init_pinsEv>:

/****************************************************************************/

bool RF24::_init_pins()
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    if (!isValid()) {
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f89b 	bl	8002166 <_ZN4RF247isValidEv>
 8002030:	4603      	mov	r3, r0
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <_ZN4RF2410_init_pinsEv+0x1e>
        // didn't specify the CSN & CE pins to c'tor nor begin()
        return false;
 800203c:	2300      	movs	r3, #0
 800203e:	e008      	b.n	8002052 <_ZN4RF2410_init_pinsEv+0x30>
    if (ce_pin != csn_pin) {
//        pinMode(ce_pin, OUTPUT);
//        pinMode(csn_pin, OUTPUT);
    }

    ce(LOW);
 8002040:	2100      	movs	r1, #0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fe0c 	bl	8001c60 <_ZN4RF242ceEb>
    csn(HIGH);
 8002048:	2101      	movs	r1, #1
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fdf2 	bl	8001c34 <_ZN4RF243csnEb>
        #if defined (__ARDUINO_X86__)
    delay(100);
        #endif
    #endif // !defined(XMEGA_D3) && !defined(LITTLEWIRE) && !defined(RF24_LINUX)

    return true; // assuming pins are connected properly
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_ZN4RF2411_init_radioEv>:

/****************************************************************************/

bool RF24::_init_radio()
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
    // This is actually only required following power up but some settling time also appears to
    // be required after resets too. For full coverage, we'll always assume the worst.
    // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
    // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
    // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
    delay(5);
 8002062:	2005      	movs	r0, #5
 8002064:	f7fe fb80 	bl	8000768 <HAL_Delay>

    // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
    // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
    // sizes must never be used. See datasheet for a more complete explanation.
    setRetries(5, 15);
 8002068:	220f      	movs	r2, #15
 800206a:	2105      	movs	r1, #5
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f9f5 	bl	800245c <_ZN4RF2410setRetriesEhh>

    // Then set the data rate to the slowest (and most reliable) speed supported by all
    // hardware. Since this value occupies the same register as the PA level value, set
    // the PA level to MAX
    setRadiation(RF24_PA_MAX, RF24_1MBPS); // LNA enabled by default
 8002072:	2301      	movs	r3, #1
 8002074:	2200      	movs	r2, #0
 8002076:	2103      	movs	r1, #3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa48 	bl	800250e <_ZN4RF2412setRadiationEh15rf24_datarate_eb>

    // detect if is a plus variant & use old toggle features command accordingly
    uint8_t before_toggle = read_register(FEATURE);
 800207e:	211d      	movs	r1, #29
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fe16 	bl	8001cb2 <_ZN4RF2413read_registerEh>
 8002086:	4603      	mov	r3, r0
 8002088:	73fb      	strb	r3, [r7, #15]
    toggle_features();
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9a9 	bl	80023e2 <_ZN4RF2415toggle_featuresEv>
    uint8_t after_toggle = read_register(FEATURE);
 8002090:	211d      	movs	r1, #29
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fe0d 	bl	8001cb2 <_ZN4RF2413read_registerEh>
 8002098:	4603      	mov	r3, r0
 800209a:	73bb      	strb	r3, [r7, #14]
    _is_p_variant = before_toggle == after_toggle;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	7bbb      	ldrb	r3, [r7, #14]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	741a      	strb	r2, [r3, #16]
    if (after_toggle){
 80020ae:	7bbb      	ldrb	r3, [r7, #14]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <_ZN4RF2411_init_radioEv+0x74>
        if (_is_p_variant){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7c1b      	ldrb	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <_ZN4RF2411_init_radioEv+0x68>
            // module did not experience power-on-reset (#401)
            toggle_features();
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f990 	bl	80023e2 <_ZN4RF2415toggle_featuresEv>
        }
        // allow use of multicast parameter and dynamic payloads by default
        write_register(FEATURE, 0);
 80020c2:	2300      	movs	r3, #0
 80020c4:	2200      	movs	r2, #0
 80020c6:	211d      	movs	r1, #29
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe41 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    }
    ack_payloads_enabled = false;     // ack payloads disabled by default
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	749a      	strb	r2, [r3, #18]
    write_register(DYNPD, 0);         // disable dynamic payloads by default (for all pipes)
 80020d4:	2300      	movs	r3, #0
 80020d6:	2200      	movs	r2, #0
 80020d8:	211c      	movs	r1, #28
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fe38 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    dynamic_payloads_enabled = false;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	751a      	strb	r2, [r3, #20]
    write_register(EN_AA, 0x3F);      // enable auto-ack on all pipes
 80020e6:	2300      	movs	r3, #0
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	2101      	movs	r1, #1
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fe2f 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    write_register(EN_RXADDR, 3);     // only open RX pipes 0 & 1
 80020f2:	2300      	movs	r3, #0
 80020f4:	2203      	movs	r2, #3
 80020f6:	2102      	movs	r1, #2
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fe29 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    setPayloadSize(32);               // set static payload size to 32 (max) bytes by default
 80020fe:	2120      	movs	r1, #32
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff4f 	bl	8001fa4 <_ZN4RF2414setPayloadSizeEh>
    setAddressWidth(5);               // set default address length to (max) 5 bytes
 8002106:	2105      	movs	r1, #5
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f93f 	bl	800238c <_ZN4RF2415setAddressWidthEh>

    // Set up default configuration.  Callers can always change it later.
    // This channel should be universally safe and not bleed over into adjacent
    // spectrum.
    setChannel(76);
 800210e:	214c      	movs	r1, #76	; 0x4c
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff2f 	bl	8001f74 <_ZN4RF2410setChannelEh>

    // Reset current status
    // Notice reset and flush is the last thing we do
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 8002116:	2300      	movs	r3, #0
 8002118:	2270      	movs	r2, #112	; 0x70
 800211a:	2107      	movs	r1, #7
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fe17 	bl	8001d50 <_ZN4RF2414write_registerEhhb>


    // Flush buffers
    flush_rx();
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff feb1 	bl	8001e8a <_ZN4RF248flush_rxEv>
    flush_tx();
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff febe 	bl	8001eaa <_ZN4RF248flush_txEv>
    //      Enable PTX
    //      Power Up
    //      16-bit CRC (CRC required by auto-ack)
    // Do not write CE high so radio will remain in standby I mode
    // PTX should use only 22uA of power
    write_register(NRF_CONFIG, (_BV(EN_CRC) | _BV(CRCO)) );
 800212e:	2300      	movs	r3, #0
 8002130:	220c      	movs	r2, #12
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fe0b 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    config_reg = read_register(NRF_CONFIG);
 800213a:	2100      	movs	r1, #0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fdb8 	bl	8001cb2 <_ZN4RF2413read_registerEh>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	73da      	strb	r2, [r3, #15]

    powerUp();
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f860 	bl	8002210 <_ZN4RF247powerUpEv>

    // if config is not set correctly then there was a bad response from module
    return config_reg == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP)) ? true : false;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7bdb      	ldrb	r3, [r3, #15]
 8002154:	2b0e      	cmp	r3, #14
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZN4RF247isValidEv>:
}

/****************************************************************************/

bool RF24::isValid()
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
    return ce_pin != 0xFFFF && csn_pin != 0xFFFF;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <_ZN4RF247isValidEv+0x24>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	885b      	ldrh	r3, [r3, #2]
 800217e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002182:	4293      	cmp	r3, r2
 8002184:	d001      	beq.n	800218a <_ZN4RF247isValidEv+0x24>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <_ZN4RF247isValidEv+0x26>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const PROGMEM uint8_t child_pipe_enable[] = {ERX_P0, ERX_P1, ERX_P2,
                                                    ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    ce(LOW);
 80021a0:	2100      	movs	r1, #0
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fd5c 	bl	8001c60 <_ZN4RF242ceEb>

    //delayMicroseconds(100);
    delayMicroseconds(static_cast<int>(txDelay));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fd ffcd 	bl	800014c <delayMicroseconds>
    if (ack_payloads_enabled){
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7c9b      	ldrb	r3, [r3, #18]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <_ZN4RF2413stopListeningEv+0x28>
        flush_tx();
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe75 	bl	8001eaa <_ZN4RF248flush_txEv>
    }

    config_reg = static_cast<uint8_t>(config_reg & ~_BV(PRIM_RX));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7bdb      	ldrb	r3, [r3, #15]
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	73da      	strb	r2, [r3, #15]
    write_register(NRF_CONFIG, config_reg);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7bda      	ldrb	r2, [r3, #15]
 80021d2:	2300      	movs	r3, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fdba 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, static_cast<uint8_t>(read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0])))); // Enable RX on pipe0
 80021dc:	2102      	movs	r1, #2
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fd67 	bl	8001cb2 <_ZN4RF2413read_registerEh>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b25a      	sxtb	r2, r3
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <_ZN4RF2413stopListeningEv+0x74>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	408b      	lsls	r3, r1
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	2300      	movs	r3, #0
 80021fc:	2102      	movs	r1, #2
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fda6 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	08002610 	.word	0x08002610

08002210 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    // if not powered up then power up and wait for the radio to initialize
    if (!(config_reg & _BV(PWR_UP))) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7bdb      	ldrb	r3, [r3, #15]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <_ZN4RF247powerUpEv+0x38>
        config_reg |= _BV(PWR_UP);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7bdb      	ldrb	r3, [r3, #15]
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	b2da      	uxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	73da      	strb	r2, [r3, #15]
        write_register(NRF_CONFIG, config_reg);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7bda      	ldrb	r2, [r3, #15]
 8002236:	2300      	movs	r3, #0
 8002238:	2100      	movs	r1, #0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fd88 	bl	8001d50 <_ZN4RF2414write_registerEhhb>

        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delayMicroseconds(RF24_POWERUP_DELAY);
 8002240:	f241 3088 	movw	r0, #5000	; 0x1388
 8002244:	f7fd ff82 	bl	800014c <delayMicroseconds>
    }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZN4RF249errNotifyEv>:

/******************************************************************/
#if defined (FAILURE_HANDLING) || defined (RF24_LINUX)

void RF24::errNotify()
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    #if defined (SERIAL_DEBUG) || defined (RF24_LINUX)
    printf_P(PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
    #endif
    #if defined (FAILURE_HANDLING)
    failureDetected = 1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	755a      	strb	r2, [r3, #21]
    #else
    delay(5000);
    #endif
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <_ZN4RF245writeEPKvhb>:
#endif
/******************************************************************/

//Similar to the previous write, clears the interrupt flags
bool RF24::write(const void* buf, uint8_t len, const bool multicast)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	460b      	mov	r3, r1
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	4613      	mov	r3, r2
 800227c:	71bb      	strb	r3, [r7, #6]
    //Start Writing
    startFastWrite(buf, len, multicast);
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	2101      	movs	r1, #1
 8002284:	9100      	str	r1, [sp, #0]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f847 	bl	800231c <_ZN4RF2414startFastWriteEPKvhbb>

    //Wait until complete or failed
    #if defined(FAILURE_HANDLING) || defined(RF24_LINUX)
    uint32_t timer = millis();
 800228e:	f7fe fa61 	bl	8000754 <HAL_GetTick>
 8002292:	6178      	str	r0, [r7, #20]
    #endif // defined(FAILURE_HANDLING) || defined(RF24_LINUX)

    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fe18 	bl	8001eca <_ZN4RF2410get_statusEv>
 800229a:	4603      	mov	r3, r0
 800229c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <_ZN4RF245writeEPKvhb+0x5c>
        #if defined(FAILURE_HANDLING) || defined(RF24_LINUX)
        if (millis() - timer > 95) {
 80022ae:	f7fe fa51 	bl	8000754 <HAL_GetTick>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	425b      	negs	r3, r3
 80022b6:	2b5f      	cmp	r3, #95	; 0x5f
 80022b8:	d9ec      	bls.n	8002294 <_ZN4RF245writeEPKvhb+0x2c>
            errNotify();
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff ffc8 	bl	8002250 <_ZN4RF249errNotifyEv>
            #if defined(FAILURE_HANDLING)
            return 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e015      	b.n	80022f0 <_ZN4RF245writeEPKvhb+0x88>
            #endif
        }
        #endif
    }

    ce(LOW);
 80022c4:	2100      	movs	r1, #0
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fcca 	bl	8001c60 <_ZN4RF242ceEb>

    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 80022cc:	2300      	movs	r3, #0
 80022ce:	2270      	movs	r2, #112	; 0x70
 80022d0:	2107      	movs	r1, #7
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff fd3c 	bl	8001d50 <_ZN4RF2414write_registerEhhb>

    //Max retries exceeded
    if (status & _BV(MAX_RT)) {
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	7a1b      	ldrb	r3, [r3, #8]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <_ZN4RF245writeEPKvhb+0x86>
        flush_tx(); // Only going to be 1 packet in the FIFO at a time using this method, so just flush
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff fde0 	bl	8001eaa <_ZN4RF248flush_txEv>
        return 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <_ZN4RF245writeEPKvhb+0x88>
    }
    //TX OK 1 or 0
    return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZN4RF245writeEPKvh>:

bool RF24::write(const void* buf, uint8_t len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
    return write(buf, len, 0);
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	2300      	movs	r3, #0
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff ffab 	bl	8002268 <_ZN4RF245writeEPKvhb>
 8002312:	4603      	mov	r3, r0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	460b      	mov	r3, r1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	4613      	mov	r3, r2
 8002330:	71bb      	strb	r3, [r7, #6]

    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <_ZN4RF2414startFastWriteEPKvhbb+0x20>
 8002338:	23b0      	movs	r3, #176	; 0xb0
 800233a:	e000      	b.n	800233e <_ZN4RF2414startFastWriteEPKvhbb+0x22>
 800233c:	23a0      	movs	r3, #160	; 0xa0
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff fd3f 	bl	8001dc6 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
 8002348:	7e3b      	ldrb	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <_ZN4RF2414startFastWriteEPKvhbb+0x3a>
        ce(HIGH);
 800234e:	2101      	movs	r1, #1
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fc85 	bl	8001c60 <_ZN4RF242ceEb>
    }
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZN4RF2415openWritingPipeEPKh>:
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
}

/****************************************************************************/
void RF24::openWritingPipe(const uint8_t* address)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.
    write_register(RX_ADDR_P0, address, addr_width);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7cdb      	ldrb	r3, [r3, #19]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	210a      	movs	r1, #10
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fcbc 	bl	8001cee <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, address, addr_width);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7cdb      	ldrb	r3, [r3, #19]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	2110      	movs	r1, #16
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fcb5 	bl	8001cee <_ZN4RF2414write_registerEhPKhh>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZN4RF2415setAddressWidthEh>:
}

/****************************************************************************/

void RF24::setAddressWidth(uint8_t a_width)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
    a_width = static_cast<uint8_t>(a_width - 2);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	3b02      	subs	r3, #2
 800239c:	70fb      	strb	r3, [r7, #3]
    if (a_width) {
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d011      	beq.n	80023c8 <_ZN4RF2415setAddressWidthEh+0x3c>
        write_register(SETUP_AW, static_cast<uint8_t>(a_width % 4));
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	2103      	movs	r1, #3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fccd 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
        addr_width = static_cast<uint8_t>((a_width % 4) + 2);
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3302      	adds	r3, #2
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	74da      	strb	r2, [r3, #19]
    } else {
        write_register(SETUP_AW, static_cast<uint8_t>(0));
        addr_width = static_cast<uint8_t>(2);
    }

}
 80023c6:	e008      	b.n	80023da <_ZN4RF2415setAddressWidthEh+0x4e>
        write_register(SETUP_AW, static_cast<uint8_t>(0));
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	2103      	movs	r1, #3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fcbe 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
        addr_width = static_cast<uint8_t>(2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	74da      	strb	r2, [r3, #19]
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZN4RF2415toggle_featuresEv>:
}

/****************************************************************************/

void RF24::toggle_features(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
    beginTransaction();
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fc49 	bl	8001c82 <_ZN4RF2416beginTransactionEv>
    #if defined (RF24_SPI_PTR)
    status = _spi->transfer(ACTIVATE);
    _spi->transfer(0x73);
    #else
    status = spiTransfer(ACTIVATE);
 80023f0:	2050      	movs	r0, #80	; 0x50
 80023f2:	f7fd fedd 	bl	80001b0 <spiTransfer>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	721a      	strb	r2, [r3, #8]
    spiTransfer(0x73);
 80023fe:	2073      	movs	r0, #115	; 0x73
 8002400:	f7fd fed6 	bl	80001b0 <spiTransfer>
    #endif
    endTransaction();
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fc48 	bl	8001c9a <_ZN4RF2414endTransactionEv>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_ZN4RF2410setPALevelEhb>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level, bool lnaEnable)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	70fb      	strb	r3, [r7, #3]
 800241e:	4613      	mov	r3, r2
 8002420:	70bb      	strb	r3, [r7, #2]
    uint8_t setup = read_register(RF_SETUP) & static_cast<uint8_t>(0xF8);
 8002422:	2106      	movs	r1, #6
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fc44 	bl	8001cb2 <_ZN4RF2413read_registerEh>
 800242a:	4603      	mov	r3, r0
 800242c:	f023 0307 	bic.w	r3, r3, #7
 8002430:	73fb      	strb	r3, [r7, #15]
    setup |= _pa_level_reg_value(level, lnaEnable);
 8002432:	78ba      	ldrb	r2, [r7, #2]
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f851 	bl	80024e0 <_ZN4RF2419_pa_level_reg_valueEhb>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	4313      	orrs	r3, r2
 8002446:	73fb      	strb	r3, [r7, #15]
    write_register(RF_SETUP, setup);
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	2300      	movs	r3, #0
 800244c:	2106      	movs	r1, #6
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fc7e 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, config_reg);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
 8002468:	4613      	mov	r3, r2
 800246a:	70bb      	strb	r3, [r7, #2]
    write_register(SETUP_RETR, static_cast<uint8_t>(rf24_min(15, delay) << ARD | rf24_min(15, count)));
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	bf28      	it	cs
 8002472:	230f      	movcs	r3, #15
 8002474:	b2db      	uxtb	r3, r3
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	b25a      	sxtb	r2, r3
 800247a:	78bb      	ldrb	r3, [r7, #2]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	bf28      	it	cs
 8002480:	230f      	movcs	r3, #15
 8002482:	b2db      	uxtb	r3, r3
 8002484:	b25b      	sxtb	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b25b      	sxtb	r3, r3
 800248a:	b2da      	uxtb	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	2104      	movs	r1, #4
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fc5d 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e>:
}

/****************************************************************************/

uint8_t RF24::_data_rate_reg_value(rf24_datarate_e speed)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70fb      	strb	r3, [r7, #3]
    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 280;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 80024b0:	619a      	str	r2, [r3, #24]
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d105      	bne.n	80024c4 <_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e+0x26>
        #if !defined(F_CPU) || F_CPU > 20000000
        txDelay = 505;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f240 12f9 	movw	r2, #505	; 0x1f9
 80024be:	619a      	str	r2, [r3, #24]
        #else //16Mhz Arduino
        txDelay = 155;
        #endif
        // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
        // Making it '10'.
        return static_cast<uint8_t>(_BV(RF_DR_LOW));
 80024c0:	2320      	movs	r3, #32
 80024c2:	e008      	b.n	80024d6 <_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e+0x38>
    }
    else if (speed == RF24_2MBPS) {
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d104      	bne.n	80024d4 <_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e+0x36>
        #if !defined(F_CPU) || F_CPU > 20000000
        txDelay = 240;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	22f0      	movs	r2, #240	; 0xf0
 80024ce:	619a      	str	r2, [r3, #24]
        #else // 16Mhz Arduino
        txDelay = 65;
        #endif
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        return static_cast<uint8_t>(_BV(RF_DR_HIGH));
 80024d0:	2308      	movs	r3, #8
 80024d2:	e000      	b.n	80024d6 <_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e+0x38>
    }
    // HIGH and LOW '00' is 1Mbs - our default
    return static_cast<uint8_t>(0);
 80024d4:	2300      	movs	r3, #0

}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <_ZN4RF2419_pa_level_reg_valueEhb>:

/****************************************************************************/

uint8_t RF24::_pa_level_reg_value(uint8_t level, bool lnaEnable)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	70bb      	strb	r3, [r7, #2]
    // If invalid level, go to max PA
    // Else set level as requested
    // + lnaEnable (1 or 0) to support the SI24R1 chip extra bit
    return static_cast<uint8_t>(((level > RF24_PA_MAX ? static_cast<uint8_t>(RF24_PA_MAX) : level) << 1) + lnaEnable);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	bf28      	it	cs
 80024f6:	2303      	movcs	r3, #3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	78bb      	ldrb	r3, [r7, #2]
 8002500:	4413      	add	r3, r2
 8002502:	b2db      	uxtb	r3, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <_ZN4RF2412setRadiationEh15rf24_datarate_eb>:

/****************************************************************************/

void RF24::setRadiation(uint8_t level, rf24_datarate_e speed, bool lnaEnable)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	4608      	mov	r0, r1
 8002518:	4611      	mov	r1, r2
 800251a:	461a      	mov	r2, r3
 800251c:	4603      	mov	r3, r0
 800251e:	70fb      	strb	r3, [r7, #3]
 8002520:	460b      	mov	r3, r1
 8002522:	70bb      	strb	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
    uint8_t setup = _data_rate_reg_value(speed);
 8002528:	78bb      	ldrb	r3, [r7, #2]
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffb6 	bl	800249e <_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
    setup |= _pa_level_reg_value(level, lnaEnable);
 8002536:	787a      	ldrb	r2, [r7, #1]
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ffcf 	bl	80024e0 <_ZN4RF2419_pa_level_reg_valueEhb>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4313      	orrs	r3, r2
 800254a:	73fb      	strb	r3, [r7, #15]
    write_register(RF_SETUP, setup);
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	2300      	movs	r3, #0
 8002550:	2106      	movs	r1, #6
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fbfc 	bl	8001d50 <_ZN4RF2414write_registerEhhb>
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <__libc_init_array>:
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	2600      	movs	r6, #0
 8002564:	4d0c      	ldr	r5, [pc, #48]	; (8002598 <__libc_init_array+0x38>)
 8002566:	4c0d      	ldr	r4, [pc, #52]	; (800259c <__libc_init_array+0x3c>)
 8002568:	1b64      	subs	r4, r4, r5
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	42a6      	cmp	r6, r4
 800256e:	d109      	bne.n	8002584 <__libc_init_array+0x24>
 8002570:	f000 f822 	bl	80025b8 <_init>
 8002574:	2600      	movs	r6, #0
 8002576:	4d0a      	ldr	r5, [pc, #40]	; (80025a0 <__libc_init_array+0x40>)
 8002578:	4c0a      	ldr	r4, [pc, #40]	; (80025a4 <__libc_init_array+0x44>)
 800257a:	1b64      	subs	r4, r4, r5
 800257c:	10a4      	asrs	r4, r4, #2
 800257e:	42a6      	cmp	r6, r4
 8002580:	d105      	bne.n	800258e <__libc_init_array+0x2e>
 8002582:	bd70      	pop	{r4, r5, r6, pc}
 8002584:	f855 3b04 	ldr.w	r3, [r5], #4
 8002588:	4798      	blx	r3
 800258a:	3601      	adds	r6, #1
 800258c:	e7ee      	b.n	800256c <__libc_init_array+0xc>
 800258e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002592:	4798      	blx	r3
 8002594:	3601      	adds	r6, #1
 8002596:	e7f2      	b.n	800257e <__libc_init_array+0x1e>
 8002598:	08002618 	.word	0x08002618
 800259c:	08002618 	.word	0x08002618
 80025a0:	08002618 	.word	0x08002618
 80025a4:	08002620 	.word	0x08002620

080025a8 <memset>:
 80025a8:	4603      	mov	r3, r0
 80025aa:	4402      	add	r2, r0
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d100      	bne.n	80025b2 <memset+0xa>
 80025b0:	4770      	bx	lr
 80025b2:	f803 1b01 	strb.w	r1, [r3], #1
 80025b6:	e7f9      	b.n	80025ac <memset+0x4>

080025b8 <_init>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr

080025c4 <_fini>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	bf00      	nop
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr
