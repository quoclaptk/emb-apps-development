
STM32F103C8T6-LedBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800315c  0800315c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800315c  0800315c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08003170  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003170  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1a4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2b  00000000  00000000  0002d1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196b3  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de3c  00000000  00000000  0004a103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c840  00000000  00000000  00057f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e477f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  000e47d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f3c 	.word	0x08002f3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f3c 	.word	0x08002f3c

0800014c <_Z8spiWriteh>:
void ScrollTextFont(uint8_t Line, uint8_t speed, uint8_t fill);
void write_data(uint8_t colum_addr);
void Clear_Display_Ram(uint8_t fill);

void spiWrite(uint8_t data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 8000156:	1df9      	adds	r1, r7, #7
 8000158:	230a      	movs	r3, #10
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <_Z8spiWriteh+0x20>)
 800015e:	f001 fc89 	bl	8001a74 <HAL_SPI_Transmit>
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028

08000170 <_Z8out_datav>:

void out_data()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2110      	movs	r1, #16
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <_Z8out_datav+0x1c>)
 800017a:	f000 ffc5 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	2110      	movs	r1, #16
 8000182:	4802      	ldr	r0, [pc, #8]	; (800018c <_Z8out_datav+0x1c>)
 8000184:	f000 ffc0 	bl	8001108 <HAL_GPIO_WritePin>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40010800 	.word	0x40010800

08000190 <_Z17Coppy_Data_To_Ramhh>:

void Coppy_Data_To_Ram(uint8_t Line, uint8_t fill)
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	460a      	mov	r2, r1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	4613      	mov	r3, r2
 800019e:	71bb      	strb	r3, [r7, #6]
	uint8_t b=0, i=0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	73fb      	strb	r3, [r7, #15]
 80001a4:	2300      	movs	r3, #0
 80001a6:	73bb      	strb	r3, [r7, #14]
	uint8_t cdata=0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	733b      	strb	r3, [r7, #12]
	uint8_t clm=0;
 80001ac:	2300      	movs	r3, #0
 80001ae:	737b      	strb	r3, [r7, #13]
	while (Text[i]!='\0')
 80001b0:	7bbb      	ldrb	r3, [r7, #14]
 80001b2:	4a1f      	ldr	r2, [pc, #124]	; (8000230 <_Z17Coppy_Data_To_Ramhh+0xa0>)
 80001b4:	5cd3      	ldrb	r3, [r2, r3]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d035      	beq.n	8000226 <_Z17Coppy_Data_To_Ramhh+0x96>
	{
		for(b=0; b<5; b++)
 80001ba:	2300      	movs	r3, #0
 80001bc:	73fb      	strb	r3, [r7, #15]
 80001be:	7bfb      	ldrb	r3, [r7, #15]
 80001c0:	2b04      	cmp	r3, #4
 80001c2:	d829      	bhi.n	8000218 <_Z17Coppy_Data_To_Ramhh+0x88>
		{
			cdata=Font_5x7[Text[i]-32][b]<<(1-Line);
 80001c4:	7bbb      	ldrb	r3, [r7, #14]
 80001c6:	4a1a      	ldr	r2, [pc, #104]	; (8000230 <_Z17Coppy_Data_To_Ramhh+0xa0>)
 80001c8:	5cd3      	ldrb	r3, [r2, r3]
 80001ca:	f1a3 0220 	sub.w	r2, r3, #32
 80001ce:	7bf9      	ldrb	r1, [r7, #15]
 80001d0:	4818      	ldr	r0, [pc, #96]	; (8000234 <_Z17Coppy_Data_To_Ramhh+0xa4>)
 80001d2:	4613      	mov	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	4413      	add	r3, r2
 80001d8:	4403      	add	r3, r0
 80001da:	440b      	add	r3, r1
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	461a      	mov	r2, r3
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f1c3 0301 	rsb	r3, r3, #1
 80001e6:	fa02 f303 	lsl.w	r3, r2, r3
 80001ea:	733b      	strb	r3, [r7, #12]
			if(fill)display_ram[clm+b]=~cdata;
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d008      	beq.n	8000204 <_Z17Coppy_Data_To_Ramhh+0x74>
 80001f2:	7b7a      	ldrb	r2, [r7, #13]
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4413      	add	r3, r2
 80001f8:	7b3a      	ldrb	r2, [r7, #12]
 80001fa:	43d2      	mvns	r2, r2
 80001fc:	b2d1      	uxtb	r1, r2
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <_Z17Coppy_Data_To_Ramhh+0xa8>)
 8000200:	54d1      	strb	r1, [r2, r3]
 8000202:	e005      	b.n	8000210 <_Z17Coppy_Data_To_Ramhh+0x80>
			else display_ram[clm+b]=cdata;
 8000204:	7b7a      	ldrb	r2, [r7, #13]
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	4413      	add	r3, r2
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <_Z17Coppy_Data_To_Ramhh+0xa8>)
 800020c:	7b3a      	ldrb	r2, [r7, #12]
 800020e:	54ca      	strb	r2, [r1, r3]
		for(b=0; b<5; b++)
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	3301      	adds	r3, #1
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	e7d2      	b.n	80001be <_Z17Coppy_Data_To_Ramhh+0x2e>
		}
		i++;
 8000218:	7bbb      	ldrb	r3, [r7, #14]
 800021a:	3301      	adds	r3, #1
 800021c:	73bb      	strb	r3, [r7, #14]
		clm=clm+6;
 800021e:	7b7b      	ldrb	r3, [r7, #13]
 8000220:	3306      	adds	r3, #6
 8000222:	737b      	strb	r3, [r7, #13]
	while (Text[i]!='\0')
 8000224:	e7c4      	b.n	80001b0 <_Z17Coppy_Data_To_Ramhh+0x20>
	}
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000110 	.word	0x20000110
 8000234:	08002f64 	.word	0x08002f64
 8000238:	2000011c 	.word	0x2000011c

0800023c <_Z10write_datah>:
		i++;
	}
}

void write_data(uint8_t colum_addr)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0, j=0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	2300      	movs	r3, #0
 800024c:	73bb      	strb	r3, [r7, #14]
	while(i<MATRIX_NUM)
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	2b07      	cmp	r3, #7
 8000252:	d80e      	bhi.n	8000272 <_Z10write_datah+0x36>
	{
		spiWrite(display_ram[j+colum_addr]);
 8000254:	7bba      	ldrb	r2, [r7, #14]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4413      	add	r3, r2
 800025a:	4a08      	ldr	r2, [pc, #32]	; (800027c <_Z10write_datah+0x40>)
 800025c:	5cd3      	ldrb	r3, [r2, r3]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff74 	bl	800014c <_Z8spiWriteh>
		j = j + 8;
 8000264:	7bbb      	ldrb	r3, [r7, #14]
 8000266:	3308      	adds	r3, #8
 8000268:	73bb      	strb	r3, [r7, #14]
		i++;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
 800026c:	3301      	adds	r3, #1
 800026e:	73fb      	strb	r3, [r7, #15]
	while(i<MATRIX_NUM)
 8000270:	e7ed      	b.n	800024e <_Z10write_datah+0x12>
	}
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000011c 	.word	0x2000011c

08000280 <_Z17Clear_Display_Ramh>:

void Clear_Display_Ram(uint8_t fill)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0;i<(MATRIX_NUM*8);i++)
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	2b3f      	cmp	r3, #63	; 0x3f
 8000292:	d80f      	bhi.n	80002b4 <_Z17Clear_Display_Ramh+0x34>
	{
		if(fill==1)display_ram[i]=0xff;
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d104      	bne.n	80002a4 <_Z17Clear_Display_Ramh+0x24>
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <_Z17Clear_Display_Ramh+0x40>)
 800029e:	21ff      	movs	r1, #255	; 0xff
 80002a0:	54d1      	strb	r1, [r2, r3]
 80002a2:	e003      	b.n	80002ac <_Z17Clear_Display_Ramh+0x2c>
		else display_ram[i]=0x00;
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <_Z17Clear_Display_Ramh+0x40>)
 80002a8:	2100      	movs	r1, #0
 80002aa:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<(MATRIX_NUM*8);i++)
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	3301      	adds	r3, #1
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e7ec      	b.n	800028e <_Z17Clear_Display_Ramh+0xe>
	}
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	2000011c 	.word	0x2000011c

080002c4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	switch(int_syc)
 80002cc:	4b40      	ldr	r3, [pc, #256]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b07      	cmp	r3, #7
 80002d2:	d86b      	bhi.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002fd 	.word	0x080002fd
 80002e0:	08000313 	.word	0x08000313
 80002e4:	08000329 	.word	0x08000329
 80002e8:	0800033f 	.word	0x0800033f
 80002ec:	08000355 	.word	0x08000355
 80002f0:	0800036b 	.word	0x0800036b
 80002f4:	08000381 	.word	0x08000381
 80002f8:	08000397 	.word	0x08000397
	{
	  case 0:{spiWrite(0x01);write_data(int_syc);out_data();}break;
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ff25 	bl	800014c <_Z8spiWriteh>
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff98 	bl	800023c <_Z10write_datah>
 800030c:	f7ff ff30 	bl	8000170 <_Z8out_datav>
 8000310:	e04c      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 1:{spiWrite(0x02);write_data(int_syc);out_data();}break;
 8000312:	2002      	movs	r0, #2
 8000314:	f7ff ff1a 	bl	800014c <_Z8spiWriteh>
 8000318:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff8d 	bl	800023c <_Z10write_datah>
 8000322:	f7ff ff25 	bl	8000170 <_Z8out_datav>
 8000326:	e041      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 2:{spiWrite(0x04);write_data(int_syc);out_data();}break;
 8000328:	2004      	movs	r0, #4
 800032a:	f7ff ff0f 	bl	800014c <_Z8spiWriteh>
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff82 	bl	800023c <_Z10write_datah>
 8000338:	f7ff ff1a 	bl	8000170 <_Z8out_datav>
 800033c:	e036      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 3:{spiWrite(0x08);write_data(int_syc);out_data();}break;
 800033e:	2008      	movs	r0, #8
 8000340:	f7ff ff04 	bl	800014c <_Z8spiWriteh>
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff77 	bl	800023c <_Z10write_datah>
 800034e:	f7ff ff0f 	bl	8000170 <_Z8out_datav>
 8000352:	e02b      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 4:{spiWrite(0x10);write_data(int_syc);out_data();}break;
 8000354:	2010      	movs	r0, #16
 8000356:	f7ff fef9 	bl	800014c <_Z8spiWriteh>
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff6c 	bl	800023c <_Z10write_datah>
 8000364:	f7ff ff04 	bl	8000170 <_Z8out_datav>
 8000368:	e020      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 5:{spiWrite(0x20);write_data(int_syc);out_data();}break;
 800036a:	2020      	movs	r0, #32
 800036c:	f7ff feee 	bl	800014c <_Z8spiWriteh>
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff61 	bl	800023c <_Z10write_datah>
 800037a:	f7ff fef9 	bl	8000170 <_Z8out_datav>
 800037e:	e015      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 6:{spiWrite(0x40);write_data(int_syc);out_data();}break;
 8000380:	2040      	movs	r0, #64	; 0x40
 8000382:	f7ff fee3 	bl	800014c <_Z8spiWriteh>
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff56 	bl	800023c <_Z10write_datah>
 8000390:	f7ff feee 	bl	8000170 <_Z8out_datav>
 8000394:	e00a      	b.n	80003ac <HAL_TIM_PeriodElapsedCallback+0xe8>
	  case 7:{spiWrite(0x80);write_data(int_syc);out_data();}break;
 8000396:	2080      	movs	r0, #128	; 0x80
 8000398:	f7ff fed8 	bl	800014c <_Z8spiWriteh>
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff4b 	bl	800023c <_Z10write_datah>
 80003a6:	f7ff fee3 	bl	8000170 <_Z8out_datav>
 80003aa:	bf00      	nop
	}
	int_syc++;if(int_syc>7)int_syc=0;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	3301      	adds	r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b07      	cmp	r3, #7
 80003be:	d902      	bls.n	80003c6 <HAL_TIM_PeriodElapsedCallback+0x102>
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000010c 	.word	0x2000010c

080003d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <HAL_UART_RxCpltCallback+0x4c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d117      	bne.n	8000416 <HAL_UART_RxCpltCallback+0x42>
	{
		if(u8RxData != '\0')Text[rxIndex++] = u8RxData;
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_UART_RxCpltCallback+0x50>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d00b      	beq.n	8000406 <HAL_UART_RxCpltCallback+0x32>
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <HAL_UART_RxCpltCallback+0x54>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	b2d1      	uxtb	r1, r2
 80003f6:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <HAL_UART_RxCpltCallback+0x54>)
 80003f8:	7011      	strb	r1, [r2, #0]
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <HAL_UART_RxCpltCallback+0x50>)
 80003fe:	7819      	ldrb	r1, [r3, #0]
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_UART_RxCpltCallback+0x58>)
 8000402:	5499      	strb	r1, [r3, r2]
 8000404:	e002      	b.n	800040c <HAL_UART_RxCpltCallback+0x38>
		else
		{
			rxIndex = 0;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <HAL_UART_RxCpltCallback+0x54>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart1, Text, 12, 100);
		}
		HAL_UART_Receive_IT(&huart1, &u8RxData, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	4905      	ldr	r1, [pc, #20]	; (8000424 <HAL_UART_RxCpltCallback+0x50>)
 8000410:	4807      	ldr	r0, [pc, #28]	; (8000430 <HAL_UART_RxCpltCallback+0x5c>)
 8000412:	f002 f958 	bl	80026c6 <HAL_UART_Receive_IT>
	}
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40013800 	.word	0x40013800
 8000424:	2000015c 	.word	0x2000015c
 8000428:	2000015d 	.word	0x2000015d
 800042c:	20000110 	.word	0x20000110
 8000430:	200000c8 	.word	0x200000c8

08000434 <main>:


int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	HAL_Init();
 8000438:	f000 fac2 	bl	80009c0 <HAL_Init>
	SystemClock_Config();
 800043c:	f000 f81e 	bl	800047c <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000440:	f000 f928 	bl	8000694 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 8000444:	f000 f860 	bl	8000508 <_ZL12MX_SPI1_Initv>
	MX_USART1_UART_Init();
 8000448:	f000 f8f6 	bl	8000638 <_ZL19MX_USART1_UART_Initv>
	MX_TIM4_Init();
 800044c:	f000 f898 	bl	8000580 <_ZL12MX_TIM4_Initv>
	HAL_TIM_Base_Start_IT(&htim4);
 8000450:	4807      	ldr	r0, [pc, #28]	; (8000470 <main+0x3c>)
 8000452:	f001 fd41 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &u8RxData, 1);
 8000456:	2201      	movs	r2, #1
 8000458:	4906      	ldr	r1, [pc, #24]	; (8000474 <main+0x40>)
 800045a:	4807      	ldr	r0, [pc, #28]	; (8000478 <main+0x44>)
 800045c:	f002 f933 	bl	80026c6 <HAL_UART_Receive_IT>
	Clear_Display_Ram(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff0d 	bl	8000280 <_Z17Clear_Display_Ramh>
	while (1)
	{
//		HAL_SPI_Transmit(&hspi1, &clm, 1, 10);
//		HAL_SPI_Transmit(&hspi1, ledBuff, 8, 10);
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
		Coppy_Data_To_Ram(0, 1);
 8000466:	2101      	movs	r1, #1
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fe91 	bl	8000190 <_Z17Coppy_Data_To_Ramhh>
 800046e:	e7fa      	b.n	8000466 <main+0x32>
 8000470:	20000080 	.word	0x20000080
 8000474:	2000015c 	.word	0x2000015c
 8000478:	200000c8 	.word	0x200000c8

0800047c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b090      	sub	sp, #64	; 0x40
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fd4e 	bl	8002f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	2310      	movs	r3, #16
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	f107 0318 	add.w	r3, r7, #24
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fe40 	bl	8001138 <HAL_RCC_OscConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf14      	ite	ne
 80004be:	2301      	movne	r3, #1
 80004c0:	2300      	moveq	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 80004c8:	f000 f916 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	230f      	movs	r3, #15
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 f8a7 	bl	8001638 <HAL_RCC_ClockConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80004fa:	f000 f8fd 	bl	80006f8 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3740      	adds	r7, #64	; 0x40
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <_ZL12MX_SPI1_Initv+0x74>)
 8000510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 8000554:	220a      	movs	r2, #10
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <_ZL12MX_SPI1_Initv+0x70>)
 800055a:	f001 fa07 	bl	800196c <HAL_SPI_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800056e:	f000 f8c3 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028
 800057c:	40013000 	.word	0x40013000

08000580 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <_ZL12MX_TIM4_Initv+0xb4>)
 80005a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005a4:	2208      	movs	r2, #8
 80005a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005c2:	481b      	ldr	r0, [pc, #108]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005c4:	f001 fc38 	bl	8001e38 <HAL_TIM_Base_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	bf14      	ite	ne
 80005ce:	2301      	movne	r3, #1
 80005d0:	2300      	moveq	r3, #0
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 80005d8:	f000 f88e 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	4619      	mov	r1, r3
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 80005ea:	f001 fdcf 	bl	800218c <HAL_TIM_ConfigClockSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80005fe:	f000 f87b 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <_ZL12MX_TIM4_Initv+0xb0>)
 8000610:	f001 ff9c 	bl	800254c <HAL_TIMEx_MasterConfigSynchronization>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8000624:	f000 f868 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000080 	.word	0x20000080
 8000634:	40000800 	.word	0x40000800

08000638 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000670:	f001 ffdc 	bl	800262c <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2301      	movne	r3, #1
 800067c:	2300      	moveq	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000684:	f000 f838 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000c8 	.word	0x200000c8
 8000690:	40013800 	.word	0x40013800

08000694 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <_ZL12MX_GPIO_Initv+0x5c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <_ZL12MX_GPIO_Initv+0x5c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <_ZL12MX_GPIO_Initv+0x5c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2111      	movs	r1, #17
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <_ZL12MX_GPIO_Initv+0x60>)
 80006c6:	f000 fd1f 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80006ca:	2311      	movs	r3, #17
 80006cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <_ZL12MX_GPIO_Initv+0x60>)
 80006e2:	f000 fb8d 	bl	8000e00 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_MspInit+0x60>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_MspInit+0x60>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d12f      	bne.n	80007e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 800078e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <HAL_SPI_MspInit+0x90>)
 80007cc:	f000 fb18 	bl	8000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_SPI_MspInit+0x90>)
 80007e4:	f000 fb0c 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013000 	.word	0x40013000
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <HAL_TIM_Base_MspInit+0x44>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d113      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_TIM_Base_MspInit+0x48>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <HAL_TIM_Base_MspInit+0x48>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_TIM_Base_MspInit+0x48>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2104      	movs	r1, #4
 800082a:	201e      	movs	r0, #30
 800082c:	f000 fa01 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000830:	201e      	movs	r0, #30
 8000832:	f000 fa1a 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40000800 	.word	0x40000800
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <HAL_UART_MspInit+0x9c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d139      	bne.n	80008dc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <HAL_UART_MspInit+0xa0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <HAL_UART_MspInit+0xa0>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_UART_MspInit+0xa0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_UART_MspInit+0xa0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0xa0>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0xa0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <HAL_UART_MspInit+0xa4>)
 80008ae:	f000 faa7 	bl	8000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <HAL_UART_MspInit+0xa4>)
 80008c8:	f000 fa9a 	bl	8000e00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2025      	movs	r0, #37	; 0x25
 80008d2:	f000 f9ae 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d6:	2025      	movs	r0, #37	; 0x25
 80008d8:	f000 f9c7 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40013800 	.word	0x40013800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010800 	.word	0x40010800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f889 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM4_IRQHandler+0x10>)
 8000946:	f001 fb19 	bl	8001f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
//
  /* USER CODE END TIM4_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000080 	.word	0x20000080

08000954 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <USART1_IRQHandler+0x10>)
 800095a:	f001 fee5 	bl	8002728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000c8 	.word	0x200000c8

08000968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	; (80009ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	; (80009b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800099a:	f7ff ffe5 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f002 faa1 	bl	8002ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a2:	f7ff fd47 	bl	8000434 <main>
  bx lr
 80009a6:	4770      	bx	lr
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b0:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 80009b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b8:	20000164 	.word	0x20000164

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x28>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x28>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f923 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fe92 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f93b 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f903 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x1c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x20>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <HAL_IncTick+0x20>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000160 	.word	0x20000160

08000a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <HAL_GetTick+0x10>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	20000160 	.word	0x20000160

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4906      	ldr	r1, [pc, #24]	; (8000b1c <__NVIC_EnableIRQ+0x34>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff90 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff2d 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff42 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff90 	bl	8000b74 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5f 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff35 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b085      	sub	sp, #20
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d008      	beq.n	8000cc6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e020      	b.n	8000d08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 020e 	bic.w	r2, r2, #14
 8000cd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0201 	bic.w	r2, r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d005      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e051      	b.n	8000dda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020e 	bic.w	r2, r2, #14
 8000d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_DMA_Abort_IT+0xd0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d029      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xa0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_DMA_Abort_IT+0xd4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d022      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x9c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_DMA_Abort_IT+0xd8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d01a      	beq.n	8000daa <HAL_DMA_Abort_IT+0x96>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_DMA_Abort_IT+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d012      	beq.n	8000da4 <HAL_DMA_Abort_IT+0x90>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_DMA_Abort_IT+0xe0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00a      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x8a>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_DMA_Abort_IT+0xe4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d102      	bne.n	8000d98 <HAL_DMA_Abort_IT+0x84>
 8000d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d96:	e00e      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d9c:	e00b      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da2:	e008      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	e005      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e002      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000db0:	2310      	movs	r3, #16
 8000db2:	e000      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000db4:	2301      	movs	r3, #1
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <HAL_DMA_Abort_IT+0xe8>)
 8000db8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	4798      	blx	r3
    } 
  }
  return status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40020008 	.word	0x40020008
 8000de8:	4002001c 	.word	0x4002001c
 8000dec:	40020030 	.word	0x40020030
 8000df0:	40020044 	.word	0x40020044
 8000df4:	40020058 	.word	0x40020058
 8000df8:	4002006c 	.word	0x4002006c
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e169      	b.n	80010e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e14:	2201      	movs	r2, #1
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8158 	bne.w	80010e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a9a      	ldr	r2, [pc, #616]	; (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d05e      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e3c:	4a98      	ldr	r2, [pc, #608]	; (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d875      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e42:	4a98      	ldr	r2, [pc, #608]	; (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d058      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e48:	4a96      	ldr	r2, [pc, #600]	; (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d86f      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e4e:	4a96      	ldr	r2, [pc, #600]	; (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d052      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e54:	4a94      	ldr	r2, [pc, #592]	; (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d869      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e5a:	4a94      	ldr	r2, [pc, #592]	; (80010ac <HAL_GPIO_Init+0x2ac>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d04c      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e60:	4a92      	ldr	r2, [pc, #584]	; (80010ac <HAL_GPIO_Init+0x2ac>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d863      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e66:	4a92      	ldr	r2, [pc, #584]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d046      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e6c:	4a90      	ldr	r2, [pc, #576]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d85d      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d82a      	bhi.n	8000ecc <HAL_GPIO_Init+0xcc>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d859      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e7a:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <HAL_GPIO_Init+0x80>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000efb 	.word	0x08000efb
 8000e84:	08000ed5 	.word	0x08000ed5
 8000e88:	08000ee7 	.word	0x08000ee7
 8000e8c:	08000f29 	.word	0x08000f29
 8000e90:	08000f2f 	.word	0x08000f2f
 8000e94:	08000f2f 	.word	0x08000f2f
 8000e98:	08000f2f 	.word	0x08000f2f
 8000e9c:	08000f2f 	.word	0x08000f2f
 8000ea0:	08000f2f 	.word	0x08000f2f
 8000ea4:	08000f2f 	.word	0x08000f2f
 8000ea8:	08000f2f 	.word	0x08000f2f
 8000eac:	08000f2f 	.word	0x08000f2f
 8000eb0:	08000f2f 	.word	0x08000f2f
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f2f 	.word	0x08000f2f
 8000ebc:	08000f2f 	.word	0x08000f2f
 8000ec0:	08000f2f 	.word	0x08000f2f
 8000ec4:	08000edd 	.word	0x08000edd
 8000ec8:	08000ef1 	.word	0x08000ef1
 8000ecc:	4a79      	ldr	r2, [pc, #484]	; (80010b4 <HAL_GPIO_Init+0x2b4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed2:	e02c      	b.n	8000f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e029      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e024      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	3308      	adds	r3, #8
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e01f      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e01a      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f02:	2304      	movs	r3, #4
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e013      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	611a      	str	r2, [r3, #16]
          break;
 8000f1a:	e009      	b.n	8000f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	615a      	str	r2, [r3, #20]
          break;
 8000f26:	e003      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          break;
 8000f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d801      	bhi.n	8000f3a <HAL_GPIO_Init+0x13a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	e001      	b.n	8000f3e <HAL_GPIO_Init+0x13e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	d802      	bhi.n	8000f4c <HAL_GPIO_Init+0x14c>
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x152>
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	3b08      	subs	r3, #8
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	210f      	movs	r1, #15
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	401a      	ands	r2, r3
 8000f64:	6a39      	ldr	r1, [r7, #32]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80b1 	beq.w	80010e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f80:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2bc>)
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <HAL_GPIO_Init+0x2c0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d013      	beq.n	8000fec <HAL_GPIO_Init+0x1ec>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3f      	ldr	r2, [pc, #252]	; (80010c4 <HAL_GPIO_Init+0x2c4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a3e      	ldr	r2, [pc, #248]	; (80010c8 <HAL_GPIO_Init+0x2c8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <HAL_GPIO_Init+0x2cc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_GPIO_Init+0x1e0>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e004      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fec:	2300      	movs	r3, #0
 8000fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffe:	492f      	ldr	r1, [pc, #188]	; (80010bc <HAL_GPIO_Init+0x2bc>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	492c      	ldr	r1, [pc, #176]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	4928      	ldr	r1, [pc, #160]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	4922      	ldr	r1, [pc, #136]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	491e      	ldr	r1, [pc, #120]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	4918      	ldr	r1, [pc, #96]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	608b      	str	r3, [r1, #8]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	4914      	ldr	r1, [pc, #80]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d021      	beq.n	80010d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	60cb      	str	r3, [r1, #12]
 800109c:	e021      	b.n	80010e2 <HAL_GPIO_Init+0x2e2>
 800109e:	bf00      	nop
 80010a0:	10320000 	.word	0x10320000
 80010a4:	10310000 	.word	0x10310000
 80010a8:	10220000 	.word	0x10220000
 80010ac:	10210000 	.word	0x10210000
 80010b0:	10120000 	.word	0x10120000
 80010b4:	10110000 	.word	0x10110000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40011400 	.word	0x40011400
 80010d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_GPIO_Init+0x304>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	43db      	mvns	r3, r3
 80010dc:	4909      	ldr	r1, [pc, #36]	; (8001104 <HAL_GPIO_Init+0x304>)
 80010de:	4013      	ands	r3, r2
 80010e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	3301      	adds	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	fa22 f303 	lsr.w	r3, r2, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f47f ae8e 	bne.w	8000e14 <HAL_GPIO_Init+0x14>
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	372c      	adds	r7, #44	; 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	611a      	str	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e26c      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8087 	beq.w	8001266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001158:	4b92      	ldr	r3, [pc, #584]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b04      	cmp	r3, #4
 8001162:	d00c      	beq.n	800117e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001164:	4b8f      	ldr	r3, [pc, #572]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d112      	bne.n	8001196 <HAL_RCC_OscConfig+0x5e>
 8001170:	4b8c      	ldr	r3, [pc, #560]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d10b      	bne.n	8001196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d06c      	beq.n	8001264 <HAL_RCC_OscConfig+0x12c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d168      	bne.n	8001264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e246      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x76>
 80011a0:	4b80      	ldr	r3, [pc, #512]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a7f      	ldr	r2, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e02e      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x98>
 80011b6:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a7a      	ldr	r2, [pc, #488]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a77      	ldr	r2, [pc, #476]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e01d      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0xbc>
 80011da:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a71      	ldr	r2, [pc, #452]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6e      	ldr	r2, [pc, #440]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011f4:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a6a      	ldr	r2, [pc, #424]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a67      	ldr	r2, [pc, #412]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d013      	beq.n	800123c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fc2c 	bl	8000a70 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fc28 	bl	8000a70 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1fa      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0xe4>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fc18 	bl	8000a70 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fc14 	bl	8000a70 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1e6      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x10c>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d063      	beq.n	800133a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001272:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127e:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d11c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x18c>
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d116      	bne.n	80012c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e1ba      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4939      	ldr	r1, [pc, #228]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	e03a      	b.n	800133a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fbcd 	bl	8000a70 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff fbc9 	bl	8000a70 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e19b      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4927      	ldr	r1, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fbac 	bl	8000a70 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131c:	f7ff fba8 	bl	8000a70 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e17a      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03a      	beq.n	80013bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d019      	beq.n	8001382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_RCC_OscConfig+0x274>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001354:	f7ff fb8c 	bl	8000a70 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fb88 	bl	8000a70 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e15a      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 fad8 	bl	8001930 <RCC_Delay>
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_RCC_OscConfig+0x274>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fb72 	bl	8000a70 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138e:	e00f      	b.n	80013b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fb6e 	bl	8000a70 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d908      	bls.n	80013b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e140      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	42420000 	.word	0x42420000
 80013ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e9      	bne.n	8001390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a6 	beq.w	8001516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b97      	ldr	r3, [pc, #604]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10d      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b94      	ldr	r3, [pc, #592]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a93      	ldr	r2, [pc, #588]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d118      	bne.n	8001434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a8a      	ldr	r2, [pc, #552]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb2f 	bl	8000a70 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff fb2b 	bl	8000a70 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0fd      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x312>
 800143c:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a7a      	ldr	r2, [pc, #488]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	e02d      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x334>
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	4b73      	ldr	r3, [pc, #460]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a72      	ldr	r2, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	e01c      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x356>
 8001474:	4b6d      	ldr	r3, [pc, #436]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a6c      	ldr	r2, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a69      	ldr	r2, [pc, #420]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a66      	ldr	r2, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d015      	beq.n	80014da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fadf 	bl	8000a70 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fadb 	bl	8000a70 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0ab      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ee      	beq.n	80014b6 <HAL_RCC_OscConfig+0x37e>
 80014d8:	e014      	b.n	8001504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fac9 	bl	8000a70 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fac5 	bl	8000a70 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e095      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ee      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d105      	bne.n	8001516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150a:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a47      	ldr	r2, [pc, #284]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8081 	beq.w	8001622 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d061      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d146      	bne.n	80015c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x4fc>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fa99 	bl	8000a70 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fa95 	bl	8000a70 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e067      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d108      	bne.n	800157c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a19      	ldr	r1, [r3, #32]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	430b      	orrs	r3, r1
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x4fc>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa69 	bl	8000a70 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fa65 	bl	8000a70 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e037      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x46a>
 80015c0:	e02f      	b.n	8001622 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_RCC_OscConfig+0x4fc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fa52 	bl	8000a70 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fa4e 	bl	8000a70 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e020      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x498>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e013      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
 8001634:	42420060 	.word	0x42420060

08001638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4965      	ldr	r1, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800169e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff f9a2 	bl	8000a70 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff f99e 	bl	8000a70 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f900 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08003144 	.word	0x08003144
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b490      	push	{r4, r7}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001814:	1d3c      	adds	r4, r7, #4
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800181c:	f240 2301 	movw	r3, #513	; 0x201
 8001820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d002      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d003      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x46>
 800184a:	e02d      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800184e:	623b      	str	r3, [r7, #32]
      break;
 8001850:	e02d      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	0c9b      	lsrs	r3, r3, #18
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800185e:	4413      	add	r3, r2
 8001860:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001864:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0c5b      	lsrs	r3, r3, #17
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800187e:	4413      	add	r3, r2
 8001880:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001884:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800188a:	fb02 f203 	mul.w	r2, r2, r3
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	e004      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	623b      	str	r3, [r7, #32]
      break;
 80018a6:	e002      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018aa:	623b      	str	r3, [r7, #32]
      break;
 80018ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ae:	6a3b      	ldr	r3, [r7, #32]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc90      	pop	{r4, r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	08002f54 	.word	0x08002f54
 80018c0:	40021000 	.word	0x40021000
 80018c4:	007a1200 	.word	0x007a1200
 80018c8:	003d0900 	.word	0x003d0900

080018cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <HAL_RCC_GetHCLKFreq+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000000 	.word	0x20000000

080018e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018e4:	f7ff fff2 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	4903      	ldr	r1, [pc, #12]	; (8001904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f6:	5ccb      	ldrb	r3, [r1, r3]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	08003154 	.word	0x08003154

08001908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800190c:	f7ff ffde 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0adb      	lsrs	r3, r3, #11
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK2Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	08003154 	.word	0x08003154

08001930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <RCC_Delay+0x34>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <RCC_Delay+0x38>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0a5b      	lsrs	r3, r3, #9
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800194c:	bf00      	nop
  }
  while (Delay --);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f9      	bne.n	800194c <RCC_Delay+0x1c>
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e076      	b.n	8001a6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	2b00      	cmp	r3, #0
 8001984:	d108      	bne.n	8001998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800198e:	d009      	beq.n	80019a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
 8001996:	e005      	b.n	80019a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fed2 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	ea42 0103 	orr.w	r1, r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	0c1a      	lsrs	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f002 0204 	and.w	r2, r2, #4
 8001a4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_SPI_Transmit+0x22>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e126      	b.n	8001ce4 <HAL_SPI_Transmit+0x270>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a9e:	f7fe ffe7 	bl	8000a70 <HAL_GetTick>
 8001aa2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d002      	beq.n	8001aba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ab8:	e10b      	b.n	8001cd2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_SPI_Transmit+0x52>
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001aca:	e102      	b.n	8001cd2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b12:	d10f      	bne.n	8001b34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3e:	2b40      	cmp	r3, #64	; 0x40
 8001b40:	d007      	beq.n	8001b52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b5a:	d14b      	bne.n	8001bf4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_SPI_Transmit+0xf6>
 8001b64:	8afb      	ldrh	r3, [r7, #22]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d13e      	bne.n	8001be8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	881a      	ldrh	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	1c9a      	adds	r2, r3, #2
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b8e:	e02b      	b.n	8001be8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d112      	bne.n	8001bc4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	881a      	ldrh	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bc2:	e011      	b.n	8001be8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bc4:	f7fe ff54 	bl	8000a70 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d803      	bhi.n	8001bdc <HAL_SPI_Transmit+0x168>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bda:	d102      	bne.n	8001be2 <HAL_SPI_Transmit+0x16e>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001be6:	e074      	b.n	8001cd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ce      	bne.n	8001b90 <HAL_SPI_Transmit+0x11c>
 8001bf2:	e04c      	b.n	8001c8e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_SPI_Transmit+0x18e>
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d140      	bne.n	8001c84 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c28:	e02c      	b.n	8001c84 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d113      	bne.n	8001c60 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c5e:	e011      	b.n	8001c84 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c60:	f7fe ff06 	bl	8000a70 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d803      	bhi.n	8001c78 <HAL_SPI_Transmit+0x204>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c76:	d102      	bne.n	8001c7e <HAL_SPI_Transmit+0x20a>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c82:	e026      	b.n	8001cd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1cd      	bne.n	8001c2a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f8b2 	bl	8001dfc <SPI_EndRxTxTransaction>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10a      	bne.n	8001cc2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	77fb      	strb	r3, [r7, #31]
 8001cce:	e000      	b.n	8001cd2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001cd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cfc:	f7fe feb8 	bl	8000a70 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d0c:	f7fe feb0 	bl	8000a70 <HAL_GetTick>
 8001d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	0d1b      	lsrs	r3, r3, #20
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d22:	e054      	b.n	8001dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2a:	d050      	beq.n	8001dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d2c:	f7fe fea0 	bl	8000a70 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d902      	bls.n	8001d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d13d      	bne.n	8001dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d5a:	d111      	bne.n	8001d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d64:	d004      	beq.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d107      	bne.n	8001d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d88:	d10f      	bne.n	8001daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e017      	b.n	8001dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d19b      	bne.n	8001d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000

08001dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff6a 	bl	8001cec <SPI_WaitFlagStateUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e000      	b.n	8001e30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e041      	b.n	8001ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fccc 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f000 fa70 	bl	800235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e03a      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <HAL_TIM_Base_Start_IT+0x98>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x58>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d009      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x58>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x58>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d010      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f52:	e007      	b.n	8001f64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800

08001f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0202 	mvn.w	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f9b1 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9a4 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f9b3 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0204 	mvn.w	r2, #4
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f987 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f97a 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f989 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0208 	mvn.w	r2, #8
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f95d 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f950 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f95f 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b10      	cmp	r3, #16
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0210 	mvn.w	r2, #16
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2208      	movs	r2, #8
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f933 	bl	8002326 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f926 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f935 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0201 	mvn.w	r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe f8e2 	bl	80002c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa77 	bl	800261a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8f9 	bl	800234a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b20      	cmp	r3, #32
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0220 	mvn.w	r2, #32
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa42 	bl	8002608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x18>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0b3      	b.n	800230c <HAL_TIM_ConfigClockSource+0x180>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd0>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	f000 8085 	beq.w	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xa2>
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x116>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xf6>
 8002208:	2b50      	cmp	r3, #80	; 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x136>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f000 f966 	bl	800250e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04e      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f000 f94f 	bl	800250e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f8c6 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f91d 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f8e4 	bl	800247c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	; 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f90d 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f8a6 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f8fd 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 f8f4 	bl	80024da <TIM_ITRx_SetConfig>
        break;
 80022f2:	e002      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022f4:	bf00      	nop
 80022f6:	e000      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a29      	ldr	r2, [pc, #164]	; (8002414 <TIM_Base_SetConfig+0xb8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00b      	beq.n	800238c <TIM_Base_SetConfig+0x30>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d007      	beq.n	800238c <TIM_Base_SetConfig+0x30>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <TIM_Base_SetConfig+0xbc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x30>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a25      	ldr	r2, [pc, #148]	; (800241c <TIM_Base_SetConfig+0xc0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <TIM_Base_SetConfig+0xb8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00b      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d007      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <TIM_Base_SetConfig+0xbc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <TIM_Base_SetConfig+0xc0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <TIM_Base_SetConfig+0xb8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d103      	bne.n	8002404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	615a      	str	r2, [r3, #20]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800

08002420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 030a 	bic.w	r3, r3, #10
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 0210 	bic.w	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	031b      	lsls	r3, r3, #12
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f043 0307 	orr.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250e:	b480      	push	{r7}
 8002510:	b087      	sub	sp, #28
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4313      	orrs	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e046      	b.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d009      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10c      	bne.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800

08002608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e03f      	b.n	80026be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe f8f8 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fba9 	bl	8002dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d11d      	bne.n	800271c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_UART_Receive_IT+0x26>
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e016      	b.n	800271e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Receive_IT+0x38>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e00f      	b.n	800271e <HAL_UART_Receive_IT+0x58>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	461a      	mov	r2, r3
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f9cf 	bl	8002ab6 <UART_Start_Receive_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	e000      	b.n	800271e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_UART_IRQHandler+0x52>
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa7f 	bl	8002c76 <UART_Receive_IT>
      return;
 8002778:	e17b      	b.n	8002a72 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80b1 	beq.w	80028e4 <HAL_UART_IRQHandler+0x1bc>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_UART_IRQHandler+0x70>
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a6 	beq.w	80028e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_UART_IRQHandler+0x90>
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_UART_IRQHandler+0xb0>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f043 0202 	orr.w	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_UART_IRQHandler+0xd0>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00f      	beq.n	8002822 <HAL_UART_IRQHandler+0xfa>
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_UART_IRQHandler+0xee>
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0208 	orr.w	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 811e 	beq.w	8002a68 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_UART_IRQHandler+0x11e>
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fa18 	bl	8002c76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_UART_IRQHandler+0x146>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d031      	beq.n	80028d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f95a 	bl	8002b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d023      	beq.n	80028ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002890:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	2b00      	cmp	r3, #0
 8002898:	d013      	beq.n	80028c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	4a76      	ldr	r2, [pc, #472]	; (8002a78 <HAL_UART_IRQHandler+0x350>)
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fa34 	bl	8000d14 <HAL_DMA_Abort_IT>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028bc:	4610      	mov	r0, r2
 80028be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c0:	e00e      	b.n	80028e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8e3 	bl	8002a8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c8:	e00a      	b.n	80028e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8df 	bl	8002a8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	e006      	b.n	80028e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8db 	bl	8002a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028de:	e0c3      	b.n	8002a68 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	bf00      	nop
    return;
 80028e2:	e0c1      	b.n	8002a68 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 80a1 	bne.w	8002a30 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 809b 	beq.w	8002a30 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8095 	beq.w	8002a30 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d04e      	beq.n	80029c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002934:	8a3b      	ldrh	r3, [r7, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8098 	beq.w	8002a6c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002940:	8a3a      	ldrh	r2, [r7, #16]
 8002942:	429a      	cmp	r2, r3
 8002944:	f080 8092 	bcs.w	8002a6c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8a3a      	ldrh	r2, [r7, #16]
 800294c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b20      	cmp	r3, #32
 8002956:	d02b      	beq.n	80029b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002966:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002986:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0210 	bic.w	r2, r2, #16
 80029a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f977 	bl	8000c9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f86d 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029c6:	e051      	b.n	8002a6c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d047      	beq.n	8002a70 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80029e0:	8a7b      	ldrh	r3, [r7, #18]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d044      	beq.n	8002a70 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0210 	bic.w	r2, r2, #16
 8002a22:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a24:	8a7b      	ldrh	r3, [r7, #18]
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f839 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a2e:	e01f      	b.n	8002a70 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_UART_IRQHandler+0x324>
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f8af 	bl	8002ba8 <UART_Transmit_IT>
    return;
 8002a4a:	e012      	b.n	8002a72 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <HAL_UART_IRQHandler+0x34a>
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8f0 	bl	8002c46 <UART_EndTransmit_IT>
    return;
 8002a66:	e004      	b.n	8002a72 <HAL_UART_IRQHandler+0x34a>
    return;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <HAL_UART_IRQHandler+0x34a>
      return;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_IRQHandler+0x34a>
      return;
 8002a70:	bf00      	nop
  }
}
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	08002b81 	.word	0x08002b81

08002a7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2222      	movs	r2, #34	; 0x22
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0220 	orr.w	r2, r2, #32
 8002b1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0210 	bic.w	r2, r2, #16
 8002b66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff ff77 	bl	8002a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d13e      	bne.n	8002c3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	d114      	bne.n	8002bf0 <UART_Transmit_IT+0x48>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d110      	bne.n	8002bf0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]
 8002bee:	e008      	b.n	8002c02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	1c59      	adds	r1, r3, #1
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6211      	str	r1, [r2, #32]
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff08 	bl	8002a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b22      	cmp	r3, #34	; 0x22
 8002c88:	f040 8099 	bne.w	8002dbe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c94:	d117      	bne.n	8002cc6 <UART_Receive_IT+0x50>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d113      	bne.n	8002cc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	1c9a      	adds	r2, r3, #2
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc4:	e026      	b.n	8002d14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d007      	beq.n	8002cea <UART_Receive_IT+0x74>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <UART_Receive_IT+0x82>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e008      	b.n	8002d0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4619      	mov	r1, r3
 8002d22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d148      	bne.n	8002dba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0220 	bic.w	r2, r2, #32
 8002d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d123      	bne.n	8002db0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0210 	bic.w	r2, r2, #16
 8002d7c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d10a      	bne.n	8002da2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe79 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
 8002dae:	e002      	b.n	8002db6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fd fb0f 	bl	80003d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e002      	b.n	8002dc0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e02:	f023 030c 	bic.w	r3, r3, #12
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <UART_SetConfig+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e30:	f7fe fd6a 	bl	8001908 <HAL_RCC_GetPCLK2Freq>
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	e002      	b.n	8002e3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7fe fd52 	bl	80018e0 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <UART_SetConfig+0x118>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	0119      	lsls	r1, r3, #4
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <UART_SetConfig+0x118>)
 8002e76:	fba3 0302 	umull	r0, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2064      	movs	r0, #100	; 0x64
 8002e7e:	fb00 f303 	mul.w	r3, r0, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <UART_SetConfig+0x118>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e94:	4419      	add	r1, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <UART_SetConfig+0x118>)
 8002eae:	fba3 0302 	umull	r0, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2064      	movs	r0, #100	; 0x64
 8002eb6:	fb00 f303 	mul.w	r3, r0, r3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	; 0x32
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <UART_SetConfig+0x118>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	51eb851f 	.word	0x51eb851f

08002ee4 <__libc_init_array>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	2600      	movs	r6, #0
 8002ee8:	4d0c      	ldr	r5, [pc, #48]	; (8002f1c <__libc_init_array+0x38>)
 8002eea:	4c0d      	ldr	r4, [pc, #52]	; (8002f20 <__libc_init_array+0x3c>)
 8002eec:	1b64      	subs	r4, r4, r5
 8002eee:	10a4      	asrs	r4, r4, #2
 8002ef0:	42a6      	cmp	r6, r4
 8002ef2:	d109      	bne.n	8002f08 <__libc_init_array+0x24>
 8002ef4:	f000 f822 	bl	8002f3c <_init>
 8002ef8:	2600      	movs	r6, #0
 8002efa:	4d0a      	ldr	r5, [pc, #40]	; (8002f24 <__libc_init_array+0x40>)
 8002efc:	4c0a      	ldr	r4, [pc, #40]	; (8002f28 <__libc_init_array+0x44>)
 8002efe:	1b64      	subs	r4, r4, r5
 8002f00:	10a4      	asrs	r4, r4, #2
 8002f02:	42a6      	cmp	r6, r4
 8002f04:	d105      	bne.n	8002f12 <__libc_init_array+0x2e>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0c:	4798      	blx	r3
 8002f0e:	3601      	adds	r6, #1
 8002f10:	e7ee      	b.n	8002ef0 <__libc_init_array+0xc>
 8002f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f16:	4798      	blx	r3
 8002f18:	3601      	adds	r6, #1
 8002f1a:	e7f2      	b.n	8002f02 <__libc_init_array+0x1e>
 8002f1c:	0800315c 	.word	0x0800315c
 8002f20:	0800315c 	.word	0x0800315c
 8002f24:	0800315c 	.word	0x0800315c
 8002f28:	08003160 	.word	0x08003160

08002f2c <memset>:
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4402      	add	r2, r0
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d100      	bne.n	8002f36 <memset+0xa>
 8002f34:	4770      	bx	lr
 8002f36:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3a:	e7f9      	b.n	8002f30 <memset+0x4>

08002f3c <_init>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr

08002f48 <_fini>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr
