
stm32f103_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de0  08000de0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000de0  08000de0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de0  08000de0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de0  08000de0  00010de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000dec  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000dec  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017f4  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a6  00000000  00000000  00021821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00021ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00022040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001077e  00000000  00000000  00022150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002062  00000000  00000000  000328ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057d0d  00000000  00000000  00034930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008c63d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003ac  00000000  00000000  0008c690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000db8 	.word	0x08000db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000db8 	.word	0x08000db8

0800014c <time>:
#include "Clock.h"
#include "GPIO.h"
#include "Timer.h"

void time(uint32_t t)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	while(t--);
 8000154:	bf00      	nop
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	1e5a      	subs	r2, r3, #1
 800015a:	607a      	str	r2, [r7, #4]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d1fa      	bne.n	8000156 <time+0xa>
}
 8000160:	bf00      	nop
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <main>:

int main()
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0

	*(uint32_t*)(0x40021000 + 0x4) = 3<<2; //RCC->CFGR
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <main+0x48>)
 8000172:	220c      	movs	r2, #12
 8000174:	601a      	str	r2, [r3, #0]
	//HSE_PLL_Clock_init(6);
	HSE_72MHz_Init();
 8000176:	f000 fda7 	bl	8000cc8 <HSE_72MHz_Init>
//	rcc_HSE_Configuration();
	SystemCoreClockUpdate();
 800017a:	f000 f84b 	bl	8000214 <SystemCoreClockUpdate>

	GPIO_init(GPIO_A,PIN1,GPIO_OUT);
 800017e:	2201      	movs	r2, #1
 8000180:	2101      	movs	r1, #1
 8000182:	2002      	movs	r0, #2
 8000184:	f000 fcfe 	bl	8000b84 <GPIO_init>

	Timer4_init();
 8000188:	f000 fd12 	bl	8000bb0 <Timer4_init>
	Timer4_PWM(1, 20);
 800018c:	2114      	movs	r1, #20
 800018e:	2001      	movs	r0, #1
 8000190:	f000 fd3c 	bl	8000c0c <Timer4_PWM>
	while(1){
		GPIO_SET(GPIO_A,PIN1);
 8000194:	2101      	movs	r1, #1
 8000196:	2002      	movs	r0, #2
 8000198:	f000 fc36 	bl	8000a08 <GPIO_SET>
		time(0XFF);
 800019c:	20ff      	movs	r0, #255	; 0xff
 800019e:	f7ff ffd5 	bl	800014c <time>
		GPIO_RESET(GPIO_A,PIN1);
 80001a2:	2101      	movs	r1, #1
 80001a4:	2002      	movs	r0, #2
 80001a6:	f000 fc8b 	bl	8000ac0 <GPIO_RESET>
		time(0XFF);
 80001aa:	20ff      	movs	r0, #255	; 0xff
 80001ac:	f7ff ffce 	bl	800014c <time>
		GPIO_SET(GPIO_A,PIN1);
 80001b0:	e7f0      	b.n	8000194 <main+0x28>
 80001b2:	bf00      	nop
 80001b4:	40021004 	.word	0x40021004

080001b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <NMI_Handler+0x4>

080001be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001be:	b480      	push	{r7}
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <HardFault_Handler+0x4>

080001c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <MemManage_Handler+0x4>

080001ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ce:	e7fe      	b.n	80001ce <BusFault_Handler+0x4>

080001d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <UsageFault_Handler+0x4>

080001d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr

080001fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  //HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr

08000206 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000206:	b480      	push	{r7}
 8000208:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
	...

08000214 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000226:	4b2f      	ldr	r3, [pc, #188]	; (80002e4 <SystemCoreClockUpdate+0xd0>)
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	f003 030c 	and.w	r3, r3, #12
 800022e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2b08      	cmp	r3, #8
 8000234:	d011      	beq.n	800025a <SystemCoreClockUpdate+0x46>
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	2b08      	cmp	r3, #8
 800023a:	d83a      	bhi.n	80002b2 <SystemCoreClockUpdate+0x9e>
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d003      	beq.n	800024a <SystemCoreClockUpdate+0x36>
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b04      	cmp	r3, #4
 8000246:	d004      	beq.n	8000252 <SystemCoreClockUpdate+0x3e>
 8000248:	e033      	b.n	80002b2 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800024a:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 800024c:	4a27      	ldr	r2, [pc, #156]	; (80002ec <SystemCoreClockUpdate+0xd8>)
 800024e:	601a      	str	r2, [r3, #0]
      break;
 8000250:	e033      	b.n	80002ba <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 8000254:	4a25      	ldr	r2, [pc, #148]	; (80002ec <SystemCoreClockUpdate+0xd8>)
 8000256:	601a      	str	r2, [r3, #0]
      break;
 8000258:	e02f      	b.n	80002ba <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800025a:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <SystemCoreClockUpdate+0xd0>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000262:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <SystemCoreClockUpdate+0xd0>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800026c:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	0c9b      	lsrs	r3, r3, #18
 8000272:	3302      	adds	r3, #2
 8000274:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d106      	bne.n	800028a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <SystemCoreClockUpdate+0xdc>)
 8000280:	fb02 f303 	mul.w	r3, r2, r3
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 8000286:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000288:	e017      	b.n	80002ba <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800028a:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <SystemCoreClockUpdate+0xd0>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000292:	2b00      	cmp	r3, #0
 8000294:	d006      	beq.n	80002a4 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <SystemCoreClockUpdate+0xdc>)
 800029a:	fb02 f303 	mul.w	r3, r2, r3
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 80002a0:	6013      	str	r3, [r2, #0]
      break;
 80002a2:	e00a      	b.n	80002ba <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4a11      	ldr	r2, [pc, #68]	; (80002ec <SystemCoreClockUpdate+0xd8>)
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 80002ae:	6013      	str	r3, [r2, #0]
      break;
 80002b0:	e003      	b.n	80002ba <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <SystemCoreClockUpdate+0xd8>)
 80002b6:	601a      	str	r2, [r3, #0]
      break;
 80002b8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <SystemCoreClockUpdate+0xd0>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	091b      	lsrs	r3, r3, #4
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 80002c6:	5cd3      	ldrb	r3, [r2, r3]
 80002c8:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80002ca:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	fa22 f303 	lsr.w	r3, r2, r3
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <SystemCoreClockUpdate+0xd4>)
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	20000000 	.word	0x20000000
 80002ec:	007a1200 	.word	0x007a1200
 80002f0:	003d0900 	.word	0x003d0900
 80002f4:	08000dd0 	.word	0x08000dd0

080002f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800031e:	f7ff ff72 	bl	8000206 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 fd25 	bl	8000d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff21 	bl	800016c <main>
  bx lr
 800032a:	4770      	bx	lr
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000334:	08000de8 	.word	0x08000de8
  ldr r2, =_sbss
 8000338:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800033c:	20000020 	.word	0x20000020

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <GPIO_Set_Port>:





void GPIO_Set_Port(uint32_t PORT){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= (uint32_t)(1<<PORT);
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <GPIO_Set_Port+0x28>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	2101      	movs	r1, #1
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a04      	ldr	r2, [pc, #16]	; (800036c <GPIO_Set_Port+0x28>)
 800035c:	430b      	orrs	r3, r1
 800035e:	6193      	str	r3, [r2, #24]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <GPIO_Set_Pin>:

void GPIO_Set_Pin(uint32_t PORT,uint32_t Pin){
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	uint32_t CNFH = (Pin-8)*4;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	3b08      	subs	r3, #8
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	60fb      	str	r3, [r7, #12]
	uint32_t CNFL = Pin*4;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b02      	subs	r3, #2
 800038c:	2b03      	cmp	r3, #3
 800038e:	f200 80e3 	bhi.w	8000558 <GPIO_Set_Pin+0x1e8>
 8000392:	a201      	add	r2, pc, #4	; (adr r2, 8000398 <GPIO_Set_Pin+0x28>)
 8000394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000398:	080003a9 	.word	0x080003a9
 800039c:	08000413 	.word	0x08000413
 80003a0:	0800047b 	.word	0x0800047b
 80003a4:	080004e3 	.word	0x080004e3
	switch(PORT){
	// GPIOA
	case 2:
		if((Pin>7) && (Pin<15)){
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	d917      	bls.n	80003de <GPIO_Set_Pin+0x6e>
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b0e      	cmp	r3, #14
 80003b2:	d814      	bhi.n	80003de <GPIO_Set_Pin+0x6e>
		GPIOA->CRH &= ~(3<<CNFH); /* clear bit Mode */
 80003b4:	4b6b      	ldr	r3, [pc, #428]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	2103      	movs	r1, #3
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a67      	ldr	r2, [pc, #412]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003c6:	400b      	ands	r3, r1
 80003c8:	6053      	str	r3, [r2, #4]
		GPIOA->CRH |= (1<<CNFH); /*  max speed 10MHz */
 80003ca:	4b66      	ldr	r3, [pc, #408]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	2101      	movs	r1, #1
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a62      	ldr	r2, [pc, #392]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	6053      	str	r3, [r2, #4]
		}
		if((Pin<7)){
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	2b06      	cmp	r3, #6
 80003e2:	f200 80b2 	bhi.w	800054a <GPIO_Set_Pin+0x1da>
		GPIOA->CRL &= ~(3<<CNFL); /* clear bit Mode */
 80003e6:	4b5f      	ldr	r3, [pc, #380]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2103      	movs	r1, #3
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	43d2      	mvns	r2, r2
 80003f4:	4611      	mov	r1, r2
 80003f6:	4a5b      	ldr	r2, [pc, #364]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003f8:	400b      	ands	r3, r1
 80003fa:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |= (1<<CNFL); /* max speed 10 MHz */
 80003fc:	4b59      	ldr	r3, [pc, #356]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a56      	ldr	r2, [pc, #344]	; (8000564 <GPIO_Set_Pin+0x1f4>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000410:	e09b      	b.n	800054a <GPIO_Set_Pin+0x1da>
	// GPIOB
	case 3:
		if((Pin>7) && (Pin<15)){
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	2b07      	cmp	r3, #7
 8000416:	d917      	bls.n	8000448 <GPIO_Set_Pin+0xd8>
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b0e      	cmp	r3, #14
 800041c:	d814      	bhi.n	8000448 <GPIO_Set_Pin+0xd8>
		GPIOB->CRH &= ~(3<<CNFH); /* clear bit Mode */
 800041e:	4b52      	ldr	r3, [pc, #328]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	2103      	movs	r1, #3
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	43d2      	mvns	r2, r2
 800042c:	4611      	mov	r1, r2
 800042e:	4a4e      	ldr	r2, [pc, #312]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000430:	400b      	ands	r3, r1
 8000432:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= (1<<CNFH); /*  max speed 10MHz */
 8000434:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	2101      	movs	r1, #1
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a49      	ldr	r2, [pc, #292]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6053      	str	r3, [r2, #4]
		}
		if((Pin<7)){
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	2b06      	cmp	r3, #6
 800044c:	d87f      	bhi.n	800054e <GPIO_Set_Pin+0x1de>
		GPIOB->CRL &= ~(3<<CNFL); /* clear bit Mode */
 800044e:	4b46      	ldr	r3, [pc, #280]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2103      	movs	r1, #3
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	fa01 f202 	lsl.w	r2, r1, r2
 800045a:	43d2      	mvns	r2, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a42      	ldr	r2, [pc, #264]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000460:	400b      	ands	r3, r1
 8000462:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= (1<<CNFL); /* max speed 10 MHz */
 8000464:	4b40      	ldr	r3, [pc, #256]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	4611      	mov	r1, r2
 8000472:	4a3d      	ldr	r2, [pc, #244]	; (8000568 <GPIO_Set_Pin+0x1f8>)
 8000474:	430b      	orrs	r3, r1
 8000476:	6013      	str	r3, [r2, #0]
		}
		break;
 8000478:	e069      	b.n	800054e <GPIO_Set_Pin+0x1de>
	// GPIOC
	case 4:
		if((Pin>7) && (Pin<15)){
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d917      	bls.n	80004b0 <GPIO_Set_Pin+0x140>
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	2b0e      	cmp	r3, #14
 8000484:	d814      	bhi.n	80004b0 <GPIO_Set_Pin+0x140>
		GPIOC->CRH &= ~(3<<CNFH); /* clear bit Mode */
 8000486:	4b39      	ldr	r3, [pc, #228]	; (800056c <GPIO_Set_Pin+0x1fc>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	2103      	movs	r1, #3
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	fa01 f202 	lsl.w	r2, r1, r2
 8000492:	43d2      	mvns	r2, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a35      	ldr	r2, [pc, #212]	; (800056c <GPIO_Set_Pin+0x1fc>)
 8000498:	400b      	ands	r3, r1
 800049a:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= (1<<CNFH); /*  max speed 10MHz */
 800049c:	4b33      	ldr	r3, [pc, #204]	; (800056c <GPIO_Set_Pin+0x1fc>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	2101      	movs	r1, #1
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a30      	ldr	r2, [pc, #192]	; (800056c <GPIO_Set_Pin+0x1fc>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6053      	str	r3, [r2, #4]
		}
		if((Pin<7)){
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2b06      	cmp	r3, #6
 80004b4:	d84d      	bhi.n	8000552 <GPIO_Set_Pin+0x1e2>
		GPIOC->CRL &= ~(3<<CNFL); /* clear bit Mode */
 80004b6:	4b2d      	ldr	r3, [pc, #180]	; (800056c <GPIO_Set_Pin+0x1fc>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2103      	movs	r1, #3
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a29      	ldr	r2, [pc, #164]	; (800056c <GPIO_Set_Pin+0x1fc>)
 80004c8:	400b      	ands	r3, r1
 80004ca:	6013      	str	r3, [r2, #0]
		GPIOC->CRL |= (1<<CNFL); /* max speed 10 MHz */
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <GPIO_Set_Pin+0x1fc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a24      	ldr	r2, [pc, #144]	; (800056c <GPIO_Set_Pin+0x1fc>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6013      	str	r3, [r2, #0]
		}
		break;
 80004e0:	e037      	b.n	8000552 <GPIO_Set_Pin+0x1e2>
	case 5:
		if((Pin>7) && (Pin<15)){
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	2b07      	cmp	r3, #7
 80004e6:	d917      	bls.n	8000518 <GPIO_Set_Pin+0x1a8>
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	2b0e      	cmp	r3, #14
 80004ec:	d814      	bhi.n	8000518 <GPIO_Set_Pin+0x1a8>
		GPIOE->CRH &= ~(3<<CNFH); /* clear bit Mode */
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <GPIO_Set_Pin+0x200>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	2103      	movs	r1, #3
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000500:	400b      	ands	r3, r1
 8000502:	6053      	str	r3, [r2, #4]
		GPIOE->CRH |= (1<<CNFH); /*  max speed 10MHz */
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	2101      	movs	r1, #1
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000514:	430b      	orrs	r3, r1
 8000516:	6053      	str	r3, [r2, #4]
		}
		if((Pin<7)){
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b06      	cmp	r3, #6
 800051c:	d81b      	bhi.n	8000556 <GPIO_Set_Pin+0x1e6>
		GPIOE->CRL &= ~(3<<CNFL); /* clear bit Mode */
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2103      	movs	r1, #3
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	43d2      	mvns	r2, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000530:	400b      	ands	r3, r1
 8000532:	6013      	str	r3, [r2, #0]
		GPIOE->CRL |= (1<<CNFL); /* max speed 10 MHz */
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2101      	movs	r1, #1
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	fa01 f202 	lsl.w	r2, r1, r2
 8000540:	4611      	mov	r1, r2
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <GPIO_Set_Pin+0x200>)
 8000544:	430b      	orrs	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
		}
		break;
 8000548:	e005      	b.n	8000556 <GPIO_Set_Pin+0x1e6>
		break;
 800054a:	bf00      	nop
 800054c:	e004      	b.n	8000558 <GPIO_Set_Pin+0x1e8>
		break;
 800054e:	bf00      	nop
 8000550:	e002      	b.n	8000558 <GPIO_Set_Pin+0x1e8>
		break;
 8000552:	bf00      	nop
 8000554:	e000      	b.n	8000558 <GPIO_Set_Pin+0x1e8>
		break;
 8000556:	bf00      	nop
	}


}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40010800 	.word	0x40010800
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40011000 	.word	0x40011000
 8000570:	40011800 	.word	0x40011800

08000574 <GPIO_Set_Mode>:
void GPIO_Set_Mode(uint32_t GPIO_Mode,uint32_t PORT,uint32_t Pin){
 8000574:	b480      	push	{r7}
 8000576:	b087      	sub	sp, #28
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	uint32_t  Mode_H = (Pin-8)*4;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3b08      	subs	r3, #8
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	617b      	str	r3, [r7, #20]
	uint32_t Mode_L =  Pin*4;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	3b02      	subs	r3, #2
 8000592:	2b04      	cmp	r3, #4
 8000594:	f200 822e 	bhi.w	80009f4 <GPIO_Set_Mode+0x480>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <GPIO_Set_Mode+0x2c>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b5 	.word	0x080005b5
 80005a4:	08000689 	.word	0x08000689
 80005a8:	0800075d 	.word	0x0800075d
 80005ac:	0800083d 	.word	0x0800083d
 80005b0:	08000911 	.word	0x08000911

	switch(PORT){

	case 2:
		if(GPIO_Mode==0){
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d130      	bne.n	800061c <GPIO_Set_Mode+0xa8>
			if((Pin>7) && (Pin<15)){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b07      	cmp	r3, #7
 80005be:	d918      	bls.n	80005f2 <GPIO_Set_Mode+0x7e>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b0e      	cmp	r3, #14
 80005c4:	d815      	bhi.n	80005f2 <GPIO_Set_Mode+0x7e>

				GPIOA->CRH &= ~(3<<Mode_H); /* clear bit */
 80005c6:	4b9a      	ldr	r3, [pc, #616]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	2103      	movs	r1, #3
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	fa01 f202 	lsl.w	r2, r1, r2
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a96      	ldr	r2, [pc, #600]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 80005d8:	400b      	ands	r3, r1
 80005da:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= (2<<Mode_H); /* General purpose Open-drain */
 80005dc:	4b94      	ldr	r3, [pc, #592]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2102      	movs	r1, #2
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a91      	ldr	r2, [pc, #580]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	6053      	str	r3, [r2, #4]
 80005f0:	e014      	b.n	800061c <GPIO_Set_Mode+0xa8>
			}
			else{
				GPIOA->CRL &= ~(3<<Mode_L); /* clear bit */
 80005f2:	4b8f      	ldr	r3, [pc, #572]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2103      	movs	r1, #3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	43d2      	mvns	r2, r2
 8000600:	4611      	mov	r1, r2
 8000602:	4a8b      	ldr	r2, [pc, #556]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000604:	400b      	ands	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= (2<<Mode_L); /* General purpose Open-drain */
 8000608:	4b89      	ldr	r3, [pc, #548]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2102      	movs	r1, #2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a86      	ldr	r2, [pc, #536]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6013      	str	r3, [r2, #0]
			}

		}
		if(GPIO_Mode==1){
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b01      	cmp	r3, #1
 8000620:	f040 81df 	bne.w	80009e2 <GPIO_Set_Mode+0x46e>

			if((Pin>7) && (Pin<15)){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b07      	cmp	r3, #7
 8000628:	d918      	bls.n	800065c <GPIO_Set_Mode+0xe8>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0e      	cmp	r3, #14
 800062e:	d815      	bhi.n	800065c <GPIO_Set_Mode+0xe8>

				GPIOA->CRH &= ~(3<<Mode_H); /* clear bit  */
 8000630:	4b7f      	ldr	r3, [pc, #508]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2103      	movs	r1, #3
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	43d2      	mvns	r2, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a7b      	ldr	r2, [pc, #492]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000642:	400b      	ands	r3, r1
 8000644:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= (1<<Mode_H); /* General purpose output Open-drain */
 8000646:	4b7a      	ldr	r3, [pc, #488]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	2101      	movs	r1, #1
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	fa01 f202 	lsl.w	r2, r1, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a76      	ldr	r2, [pc, #472]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6053      	str	r3, [r2, #4]
				GPIOA->CRL &= ~(3<<Mode_L); /* clear bit  */
				GPIOA->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
			}
		}

		break;
 800065a:	e1c2      	b.n	80009e2 <GPIO_Set_Mode+0x46e>
				GPIOA->CRL &= ~(3<<Mode_L); /* clear bit  */
 800065c:	4b74      	ldr	r3, [pc, #464]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2103      	movs	r1, #3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	43d2      	mvns	r2, r2
 800066a:	4611      	mov	r1, r2
 800066c:	4a70      	ldr	r2, [pc, #448]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 800066e:	400b      	ands	r3, r1
 8000670:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
 8000672:	4b6f      	ldr	r3, [pc, #444]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2101      	movs	r1, #1
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a6b      	ldr	r2, [pc, #428]	; (8000830 <GPIO_Set_Mode+0x2bc>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6013      	str	r3, [r2, #0]
		break;
 8000686:	e1ac      	b.n	80009e2 <GPIO_Set_Mode+0x46e>
	case 3:
		if(GPIO_Mode==0){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d130      	bne.n	80006f0 <GPIO_Set_Mode+0x17c>
			if((Pin>7) && (Pin<15)){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d918      	bls.n	80006c6 <GPIO_Set_Mode+0x152>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b0e      	cmp	r3, #14
 8000698:	d815      	bhi.n	80006c6 <GPIO_Set_Mode+0x152>

				GPIOB->CRH &= ~(3<<Mode_H); /* clear bit */
 800069a:	4b66      	ldr	r3, [pc, #408]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2103      	movs	r1, #3
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a62      	ldr	r2, [pc, #392]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006ac:	400b      	ands	r3, r1
 80006ae:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= (2<<Mode_H); /* General purpose Open-drain */
 80006b0:	4b60      	ldr	r3, [pc, #384]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2102      	movs	r1, #2
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a5d      	ldr	r2, [pc, #372]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006c0:	430b      	orrs	r3, r1
 80006c2:	6053      	str	r3, [r2, #4]
 80006c4:	e014      	b.n	80006f0 <GPIO_Set_Mode+0x17c>
			}
			else{
				GPIOB->CRL &= ~(3<<Mode_L); /* clear bit */
 80006c6:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2103      	movs	r1, #3
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a57      	ldr	r2, [pc, #348]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006d8:	400b      	ands	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= (2<<Mode_L); /* General purpose Open-drain */
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2102      	movs	r1, #2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a52      	ldr	r2, [pc, #328]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
			}

		}
		if(GPIO_Mode==1){
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	f040 8177 	bne.w	80009e6 <GPIO_Set_Mode+0x472>

			if((Pin>7) && (Pin<15)){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	d918      	bls.n	8000730 <GPIO_Set_Mode+0x1bc>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0e      	cmp	r3, #14
 8000702:	d815      	bhi.n	8000730 <GPIO_Set_Mode+0x1bc>

				GPIOB->CRH &= ~(3<<Mode_H); /* clear bit  */
 8000704:	4b4b      	ldr	r3, [pc, #300]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2103      	movs	r1, #3
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	43d2      	mvns	r2, r2
 8000712:	4611      	mov	r1, r2
 8000714:	4a47      	ldr	r2, [pc, #284]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 8000716:	400b      	ands	r3, r1
 8000718:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= (1<<Mode_H); /* General purpose output Open-drain */
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2101      	movs	r1, #1
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a42      	ldr	r2, [pc, #264]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6053      	str	r3, [r2, #4]
				GPIOB->CRL &= ~(3<<Mode_L); /* clear bit  */
				GPIOB->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
			}
		}

		break;
 800072e:	e15a      	b.n	80009e6 <GPIO_Set_Mode+0x472>
				GPIOB->CRL &= ~(3<<Mode_L); /* clear bit  */
 8000730:	4b40      	ldr	r3, [pc, #256]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2103      	movs	r1, #3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	43d2      	mvns	r2, r2
 800073e:	4611      	mov	r1, r2
 8000740:	4a3c      	ldr	r2, [pc, #240]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 8000742:	400b      	ands	r3, r1
 8000744:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2101      	movs	r1, #1
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a37      	ldr	r2, [pc, #220]	; (8000834 <GPIO_Set_Mode+0x2c0>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
		break;
 800075a:	e144      	b.n	80009e6 <GPIO_Set_Mode+0x472>
	case 4:
		if(GPIO_Mode==0){
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d130      	bne.n	80007c4 <GPIO_Set_Mode+0x250>
			if((Pin>7) && (Pin<15)){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b07      	cmp	r3, #7
 8000766:	d918      	bls.n	800079a <GPIO_Set_Mode+0x226>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b0e      	cmp	r3, #14
 800076c:	d815      	bhi.n	800079a <GPIO_Set_Mode+0x226>

				GPIOC->CRH &= ~(3<<Mode_H); /* clear bit */
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2103      	movs	r1, #3
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	43d2      	mvns	r2, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 8000780:	400b      	ands	r3, r1
 8000782:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= (2<<Mode_H); /* General purpose Open-drain */
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2102      	movs	r1, #2
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	4611      	mov	r1, r2
 8000792:	4a29      	ldr	r2, [pc, #164]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 8000794:	430b      	orrs	r3, r1
 8000796:	6053      	str	r3, [r2, #4]
 8000798:	e014      	b.n	80007c4 <GPIO_Set_Mode+0x250>
			}
			else{
				GPIOC->CRL &= ~(3<<Mode_L); /* clear bit */
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2103      	movs	r1, #3
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	43d2      	mvns	r2, r2
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a23      	ldr	r2, [pc, #140]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007ac:	400b      	ands	r3, r1
 80007ae:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |= (2<<Mode_L); /* General purpose Open-drain */
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2102      	movs	r1, #2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
			}

		}
		if(GPIO_Mode==1){
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	f040 810f 	bne.w	80009ea <GPIO_Set_Mode+0x476>

			if((Pin>7) && (Pin<15)){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d918      	bls.n	8000804 <GPIO_Set_Mode+0x290>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0e      	cmp	r3, #14
 80007d6:	d815      	bhi.n	8000804 <GPIO_Set_Mode+0x290>

				GPIOC->CRH &= ~(3<<Mode_H); /* clear bit  */
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2103      	movs	r1, #3
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a13      	ldr	r2, [pc, #76]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007ea:	400b      	ands	r3, r1
 80007ec:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= (1<<Mode_H); /* General purpose output Open-drain */
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2101      	movs	r1, #1
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 80007fe:	430b      	orrs	r3, r1
 8000800:	6053      	str	r3, [r2, #4]
				GPIOC->CRL &= ~(3<<Mode_L); /* clear bit  */
				GPIOC->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
			}
		}

		break;
 8000802:	e0f2      	b.n	80009ea <GPIO_Set_Mode+0x476>
				GPIOC->CRL &= ~(3<<Mode_L); /* clear bit  */
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2103      	movs	r1, #3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	43d2      	mvns	r2, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 8000816:	400b      	ands	r3, r1
 8000818:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2101      	movs	r1, #1
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <GPIO_Set_Mode+0x2c4>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6013      	str	r3, [r2, #0]
		break;
 800082e:	e0dc      	b.n	80009ea <GPIO_Set_Mode+0x476>
 8000830:	40010800 	.word	0x40010800
 8000834:	40010c00 	.word	0x40010c00
 8000838:	40011000 	.word	0x40011000
	case 5:
		if(GPIO_Mode==0){
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d130      	bne.n	80008a4 <GPIO_Set_Mode+0x330>
			if((Pin>7) && (Pin<15)){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b07      	cmp	r3, #7
 8000846:	d918      	bls.n	800087a <GPIO_Set_Mode+0x306>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b0e      	cmp	r3, #14
 800084c:	d815      	bhi.n	800087a <GPIO_Set_Mode+0x306>

				GPIOD->CRH &= ~(3<<Mode_H); /* clear bit */
 800084e:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2103      	movs	r1, #3
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	43d2      	mvns	r2, r2
 800085c:	4611      	mov	r1, r2
 800085e:	4a68      	ldr	r2, [pc, #416]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 8000860:	400b      	ands	r3, r1
 8000862:	6053      	str	r3, [r2, #4]
				GPIOD->CRH |= (2<<Mode_H); /* General purpose Open-drain */
 8000864:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2102      	movs	r1, #2
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a63      	ldr	r2, [pc, #396]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6053      	str	r3, [r2, #4]
 8000878:	e014      	b.n	80008a4 <GPIO_Set_Mode+0x330>
			}
			else{
				GPIOD->CRL &= ~(3<<Mode_L); /* clear bit */
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2103      	movs	r1, #3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a5d      	ldr	r2, [pc, #372]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 800088c:	400b      	ands	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
				GPIOD->CRL |= (2<<Mode_L); /* General purpose Open-drain */
 8000890:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2102      	movs	r1, #2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a58      	ldr	r2, [pc, #352]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
			}

		}
		if(GPIO_Mode==1){
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	f040 80a1 	bne.w	80009ee <GPIO_Set_Mode+0x47a>

			if((Pin>7) && (Pin<15)){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b07      	cmp	r3, #7
 80008b0:	d918      	bls.n	80008e4 <GPIO_Set_Mode+0x370>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0e      	cmp	r3, #14
 80008b6:	d815      	bhi.n	80008e4 <GPIO_Set_Mode+0x370>

				GPIOD->CRH &= ~(3<<Mode_H); /* clear bit  */
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2103      	movs	r1, #3
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008ca:	400b      	ands	r3, r1
 80008cc:	6053      	str	r3, [r2, #4]
				GPIOD->CRH |= (1<<Mode_H); /* General purpose output Open-drain */
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2101      	movs	r1, #1
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	4611      	mov	r1, r2
 80008dc:	4a48      	ldr	r2, [pc, #288]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008de:	430b      	orrs	r3, r1
 80008e0:	6053      	str	r3, [r2, #4]
				GPIOD->CRL &= ~(3<<Mode_L); /* clear bit  */
				GPIOD->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
			}
		}

		break;
 80008e2:	e084      	b.n	80009ee <GPIO_Set_Mode+0x47a>
				GPIOD->CRL &= ~(3<<Mode_L); /* clear bit  */
 80008e4:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2103      	movs	r1, #3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a42      	ldr	r2, [pc, #264]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008f6:	400b      	ands	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
				GPIOD->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2101      	movs	r1, #1
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	fa01 f202 	lsl.w	r2, r1, r2
 8000906:	4611      	mov	r1, r2
 8000908:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <GPIO_Set_Mode+0x48c>)
 800090a:	430b      	orrs	r3, r1
 800090c:	6013      	str	r3, [r2, #0]
		break;
 800090e:	e06e      	b.n	80009ee <GPIO_Set_Mode+0x47a>
	case 6:
		if(GPIO_Mode==0){
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d130      	bne.n	8000978 <GPIO_Set_Mode+0x404>
			if((Pin>7) && (Pin<15)){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b07      	cmp	r3, #7
 800091a:	d918      	bls.n	800094e <GPIO_Set_Mode+0x3da>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b0e      	cmp	r3, #14
 8000920:	d815      	bhi.n	800094e <GPIO_Set_Mode+0x3da>

				GPIOE->CRH &= ~(3<<Mode_H); /* clear bit */
 8000922:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2103      	movs	r1, #3
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	43d2      	mvns	r2, r2
 8000930:	4611      	mov	r1, r2
 8000932:	4a34      	ldr	r2, [pc, #208]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000934:	400b      	ands	r3, r1
 8000936:	6053      	str	r3, [r2, #4]
				GPIOE->CRH |= (2<<Mode_H); /* General purpose Open-drain */
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <GPIO_Set_Mode+0x490>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2102      	movs	r1, #2
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6053      	str	r3, [r2, #4]
 800094c:	e014      	b.n	8000978 <GPIO_Set_Mode+0x404>
			}
			else{
				GPIOE->CRL &= ~(3<<Mode_L); /* clear bit */
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2103      	movs	r1, #3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	43d2      	mvns	r2, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000960:	400b      	ands	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
				GPIOE->CRL |= (2<<Mode_L); /* General purpose Open-drain */
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2102      	movs	r1, #2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	4611      	mov	r1, r2
 8000972:	4a24      	ldr	r2, [pc, #144]	; (8000a04 <GPIO_Set_Mode+0x490>)
 8000974:	430b      	orrs	r3, r1
 8000976:	6013      	str	r3, [r2, #0]
			}

		}
		if(GPIO_Mode==1){
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d139      	bne.n	80009f2 <GPIO_Set_Mode+0x47e>

			if((Pin>7) && (Pin<15)){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d918      	bls.n	80009b6 <GPIO_Set_Mode+0x442>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b0e      	cmp	r3, #14
 8000988:	d815      	bhi.n	80009b6 <GPIO_Set_Mode+0x442>

				GPIOE->CRH &= ~(3<<Mode_H); /* clear bit  */
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <GPIO_Set_Mode+0x490>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2103      	movs	r1, #3
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	43d2      	mvns	r2, r2
 8000998:	4611      	mov	r1, r2
 800099a:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <GPIO_Set_Mode+0x490>)
 800099c:	400b      	ands	r3, r1
 800099e:	6053      	str	r3, [r2, #4]
				GPIOE->CRH |= (1<<Mode_H); /* General purpose output Open-drain */
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <GPIO_Set_Mode+0x490>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	4611      	mov	r1, r2
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <GPIO_Set_Mode+0x490>)
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6053      	str	r3, [r2, #4]
				GPIOE->CRL &= ~(3<<Mode_L); /* clear bit  */
				GPIOE->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
			}
		}

		break;
 80009b4:	e01d      	b.n	80009f2 <GPIO_Set_Mode+0x47e>
				GPIOE->CRL &= ~(3<<Mode_L); /* clear bit  */
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <GPIO_Set_Mode+0x490>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2103      	movs	r1, #3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <GPIO_Set_Mode+0x490>)
 80009c8:	400b      	ands	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
				GPIOE->CRL |= (1<<Mode_L); /* General purpose output Open-drain */
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <GPIO_Set_Mode+0x490>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2101      	movs	r1, #1
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <GPIO_Set_Mode+0x490>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
		break;
 80009e0:	e007      	b.n	80009f2 <GPIO_Set_Mode+0x47e>
		break;
 80009e2:	bf00      	nop
 80009e4:	e006      	b.n	80009f4 <GPIO_Set_Mode+0x480>
		break;
 80009e6:	bf00      	nop
 80009e8:	e004      	b.n	80009f4 <GPIO_Set_Mode+0x480>
		break;
 80009ea:	bf00      	nop
 80009ec:	e002      	b.n	80009f4 <GPIO_Set_Mode+0x480>
		break;
 80009ee:	bf00      	nop
 80009f0:	e000      	b.n	80009f4 <GPIO_Set_Mode+0x480>
		break;
 80009f2:	bf00      	nop

	}

}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40011400 	.word	0x40011400
 8000a04:	40011800 	.word	0x40011800

08000a08 <GPIO_SET>:
void GPIO_SET(uint32_t PORT,uint32_t PIN){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3b02      	subs	r3, #2
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d843      	bhi.n	8000aa2 <GPIO_SET+0x9a>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <GPIO_SET+0x18>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a35 	.word	0x08000a35
 8000a24:	08000a4b 	.word	0x08000a4b
 8000a28:	08000a61 	.word	0x08000a61
 8000a2c:	08000a77 	.word	0x08000a77
 8000a30:	08000a8d 	.word	0x08000a8d
	switch(PORT){
	case 2:
		GPIOA->ODR |=(1<<PIN);
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <GPIO_SET+0xa4>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <GPIO_SET+0xa4>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	60d3      	str	r3, [r2, #12]
		break;
 8000a48:	e02b      	b.n	8000aa2 <GPIO_SET+0x9a>
	case 3:
		GPIOB->ODR |=(1<<PIN);
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <GPIO_SET+0xa8>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <GPIO_SET+0xa8>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	60d3      	str	r3, [r2, #12]
		break;
 8000a5e:	e020      	b.n	8000aa2 <GPIO_SET+0x9a>
	case 4:
		GPIOC->ODR |=(1<<PIN);
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <GPIO_SET+0xac>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	2101      	movs	r1, #1
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <GPIO_SET+0xac>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	60d3      	str	r3, [r2, #12]
		break;
 8000a74:	e015      	b.n	8000aa2 <GPIO_SET+0x9a>
	case 5:
		GPIOD->ODR |=(1<<PIN);
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <GPIO_SET+0xb0>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	4611      	mov	r1, r2
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <GPIO_SET+0xb0>)
 8000a86:	430b      	orrs	r3, r1
 8000a88:	60d3      	str	r3, [r2, #12]
		break;
 8000a8a:	e00a      	b.n	8000aa2 <GPIO_SET+0x9a>
	case 6:
		GPIOE->ODR |=(1<<PIN);
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <GPIO_SET+0xb4>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2101      	movs	r1, #1
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <GPIO_SET+0xb4>)
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	60d3      	str	r3, [r2, #12]
		break;
 8000aa0:	bf00      	nop
	}

}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40011400 	.word	0x40011400
 8000abc:	40011800 	.word	0x40011800

08000ac0 <GPIO_RESET>:
void GPIO_RESET(uint32_t PORT,uint32_t PIN){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3b02      	subs	r3, #2
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d848      	bhi.n	8000b64 <GPIO_RESET+0xa4>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <GPIO_RESET+0x18>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000aed 	.word	0x08000aed
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	08000b1d 	.word	0x08000b1d
 8000ae4:	08000b35 	.word	0x08000b35
 8000ae8:	08000b4d 	.word	0x08000b4d
	switch(PORT){
	case 2:
		GPIOA->ODR &= ~(1<<PIN);
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <GPIO_RESET+0xb0>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2101      	movs	r1, #1
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	43d2      	mvns	r2, r2
 8000afa:	4611      	mov	r1, r2
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <GPIO_RESET+0xb0>)
 8000afe:	400b      	ands	r3, r1
 8000b00:	60d3      	str	r3, [r2, #12]
		break;
 8000b02:	e02f      	b.n	8000b64 <GPIO_RESET+0xa4>
	case 3:
		GPIOB->ODR &= ~(1<<PIN);
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <GPIO_RESET+0xb4>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	4611      	mov	r1, r2
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <GPIO_RESET+0xb4>)
 8000b16:	400b      	ands	r3, r1
 8000b18:	60d3      	str	r3, [r2, #12]
		break;
 8000b1a:	e023      	b.n	8000b64 <GPIO_RESET+0xa4>
	case 4:
		GPIOC->ODR &= ~(1<<PIN);
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <GPIO_RESET+0xb8>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	2101      	movs	r1, #1
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	fa01 f202 	lsl.w	r2, r1, r2
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <GPIO_RESET+0xb8>)
 8000b2e:	400b      	ands	r3, r1
 8000b30:	60d3      	str	r3, [r2, #12]
		break;
 8000b32:	e017      	b.n	8000b64 <GPIO_RESET+0xa4>
	case 5:
		GPIOD->ODR &= ~(1<<PIN);
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <GPIO_RESET+0xbc>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	4611      	mov	r1, r2
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <GPIO_RESET+0xbc>)
 8000b46:	400b      	ands	r3, r1
 8000b48:	60d3      	str	r3, [r2, #12]
		break;
 8000b4a:	e00b      	b.n	8000b64 <GPIO_RESET+0xa4>
	case 6:
		GPIOE->ODR &= ~(1<<PIN);
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <GPIO_RESET+0xc0>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2101      	movs	r1, #1
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	43d2      	mvns	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <GPIO_RESET+0xc0>)
 8000b5e:	400b      	ands	r3, r1
 8000b60:	60d3      	str	r3, [r2, #12]
		break;
 8000b62:	bf00      	nop
	}

}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40011400 	.word	0x40011400
 8000b80:	40011800 	.word	0x40011800

08000b84 <GPIO_init>:
void GPIO_init(uint32_t GPIOx,uint32_t GPIO_Pin,uint32_t Mode){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]

//Set GPIO PORT ************************

	GPIO_Set_Port(GPIOx);
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fbd7 	bl	8000344 <GPIO_Set_Port>
//Set PIN  ************************

	GPIO_Set_Pin(GPIOx,GPIO_Pin);
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fbe9 	bl	8000370 <GPIO_Set_Pin>

//Set Mode ************************
	GPIO_Set_Mode(Mode,GPIOx,GPIO_Pin);
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	68f9      	ldr	r1, [r7, #12]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fce6 	bl	8000574 <GPIO_Set_Mode>
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Timer4_init>:
 *      Author: ADMIN
 */

#include "stm32f1xx.h"

void Timer4_init(){
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |=( 1<<2); /* TIM4 timer clock enable */
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <Timer4_init+0x54>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <Timer4_init+0x54>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	61d3      	str	r3, [r2, #28]
	TIM4->CR1 |= (1<<7) |(1<<1); /* Counter enable,  Auto-reload preload enable */
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <Timer4_init+0x58>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <Timer4_init+0x58>)
 8000bc6:	f043 0382 	orr.w	r3, r3, #130	; 0x82
 8000bca:	6013      	str	r3, [r2, #0]
	TIM4->PSC = 48-1;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <Timer4_init+0x58>)
 8000bce:	222f      	movs	r2, #47	; 0x2f
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR =100-1;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <Timer4_init+0x58>)
 8000bd4:	2263      	movs	r2, #99	; 0x63
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CR1 &= ~(1<<1);//Update register
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <Timer4_init+0x58>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <Timer4_init+0x58>)
 8000bde:	f023 0302 	bic.w	r3, r3, #2
 8000be2:	6013      	str	r3, [r2, #0]
	TIM4->EGR |=(1<<0);//Update generation
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <Timer4_init+0x58>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <Timer4_init+0x58>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= (1<<0);//enable  register 1
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <Timer4_init+0x58>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <Timer4_init+0x58>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40000800 	.word	0x40000800

08000c0c <Timer4_PWM>:
void Timer4_PWM(uint32_t Chanel,uint32_t PWM){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	/* PWM	 */
	TIM4->CCMR1 &= ~(7<<4);
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c20:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (6<<4);
 8000c22:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c2c:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (1<<3);
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6193      	str	r3, [r2, #24]
	TIM4->CCER |= (1<<0);
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6213      	str	r3, [r2, #32]

//	switch(Chanel){
//	/*Chanel 1   */
//	case 1:
		TIM4->CCR1 = PWM;
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <Timer4_PWM+0xac>)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	6353      	str	r3, [r2, #52]	; 0x34
		/* Enable clock for portB /PB6 */
		RCC->APB2ENR |= (1<<3);
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <Timer4_PWM+0xb0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a1a      	ldr	r2, [pc, #104]	; (8000cbc <Timer4_PWM+0xb0>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
		RCC->APB2ENR |= (1<<0);
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <Timer4_PWM+0xb0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <Timer4_PWM+0xb0>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6193      	str	r3, [r2, #24]
		GPIOB->CRL &= ~(3<<24); /* clear bit 24, 25 */
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c6a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c6e:	6013      	str	r3, [r2, #0]
		GPIOB->CRL|= (1<<24); /*SPEEED 10MHZ    */
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c7a:	6013      	str	r3, [r2, #0]
		GPIOB->CRL &= ~(3<<26); /* clear bit 26, 27 */
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c82:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000c86:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= (2<<26);/* Alternate function output Push-pul */
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <Timer4_PWM+0xb4>)
 8000c8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c92:	6013      	str	r3, [r2, #0]
		AFIO->EVCR |= (1<<7);
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <Timer4_PWM+0xb8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <Timer4_PWM+0xb8>)
 8000c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9e:	6013      	str	r3, [r2, #0]
		AFIO->MAPR &= ~(1<<12);/* TIMER 4 No remap */
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <Timer4_PWM+0xb8>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <Timer4_PWM+0xb8>)
 8000ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000caa:	6053      	str	r3, [r2, #4]
//	 default:
//		 break;
//
//	}

}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40000800 	.word	0x40000800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010c00 	.word	0x40010c00
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <HSE_72MHz_Init>:
	while((RCC->CFGR & (uint32_t)(2<<2)) == 0); /*  */
}


void HSE_72MHz_Init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

	RCC->CFGR &= ~(0xF<<18);  /* Clear PLL */
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a25      	ldr	r2, [pc, #148]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cd2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000cd6:	6053      	str	r3, [r2, #4]


	//RCC->CFGR |= 4<<18;  /* clock source x6  = 6x8 = 48MHz */
//	RCC->CFGR |= 5<<18;  /* clock source x6  = 7x8 = 56MHz */
	RCC->CFGR |= 7<<18;  /* clock source x6  = 9x8 =72MHz */
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cde:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000ce2:	6053      	str	r3, [r2, #4]


	RCC->CFGR |= 4<<8; /* select clock for APB1 */
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6053      	str	r3, [r2, #4]

	RCC->CR &= ~(1<<24); /* Disable PLL */
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000cfa:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~(1<<17);/* Select HSE for PLL */
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d06:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 1<<16; /* HSE is clock source for PLL */
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d12:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 2<<0; /* Select PLL clock source */
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	6053      	str	r3, [r2, #4]
	RCC->CR |= (1<<24); /* enable PLL */
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d2a:	6013      	str	r3, [r2, #0]

	FLASH->ACR |= 2<<0;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HSE_72MHz_Init+0xa4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HSE_72MHz_Init+0xa4>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	6013      	str	r3, [r2, #0]

	RCC->CR |= (1<<16); /* HSE disable enable */
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<17)) == 0);/* HSE is stable */
 8000d44:	bf00      	nop
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f9      	beq.n	8000d46 <HSE_72MHz_Init+0x7e>
	RCC->CFGR &= ~(1<< 0);
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HSE_72MHz_Init+0xa0>)
 8000d58:	f023 0301 	bic.w	r3, r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]

}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40022000 	.word	0x40022000

08000d70 <__libc_init_array>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	2600      	movs	r6, #0
 8000d74:	4d0c      	ldr	r5, [pc, #48]	; (8000da8 <__libc_init_array+0x38>)
 8000d76:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <__libc_init_array+0x3c>)
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	10a4      	asrs	r4, r4, #2
 8000d7c:	42a6      	cmp	r6, r4
 8000d7e:	d109      	bne.n	8000d94 <__libc_init_array+0x24>
 8000d80:	f000 f81a 	bl	8000db8 <_init>
 8000d84:	2600      	movs	r6, #0
 8000d86:	4d0a      	ldr	r5, [pc, #40]	; (8000db0 <__libc_init_array+0x40>)
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <__libc_init_array+0x44>)
 8000d8a:	1b64      	subs	r4, r4, r5
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	42a6      	cmp	r6, r4
 8000d90:	d105      	bne.n	8000d9e <__libc_init_array+0x2e>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d98:	4798      	blx	r3
 8000d9a:	3601      	adds	r6, #1
 8000d9c:	e7ee      	b.n	8000d7c <__libc_init_array+0xc>
 8000d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da2:	4798      	blx	r3
 8000da4:	3601      	adds	r6, #1
 8000da6:	e7f2      	b.n	8000d8e <__libc_init_array+0x1e>
 8000da8:	08000de0 	.word	0x08000de0
 8000dac:	08000de0 	.word	0x08000de0
 8000db0:	08000de0 	.word	0x08000de0
 8000db4:	08000de4 	.word	0x08000de4

08000db8 <_init>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr

08000dc4 <_fini>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr
