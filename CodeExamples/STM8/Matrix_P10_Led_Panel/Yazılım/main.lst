CCS PCH C Compiler, Version 4.134, 17767               06-Aðu-13 19:29

               Filename: C:\Users\Ferhat YOL\Desktop\P10 Led Panel\main.lst

               ROM used: 21348 bytes (33%)
                         Largest free fragment is 44184
               RAM used: 260 (7%) at main() level
                         346 (9%) worst case
               Stack:    6 worst case (4 in main + 2 for interrupts)

*
00000:  GOTO   512E
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  FF2.5
00056:  GOTO   0060
0005A:  BTFSC  FF2.2
0005C:  GOTO   1DA4
00060:  MOVFF  0E,00
00064:  MOVFF  0F,01
00068:  MOVFF  10,02
0006C:  MOVFF  11,03
00070:  MOVFF  0C,FE9
00074:  MOVFF  07,FEA
00078:  BSF    07.7
0007A:  MOVFF  08,FE1
0007E:  MOVFF  09,FE2
00082:  MOVFF  0A,FD9
00086:  MOVFF  0B,FDA
0008A:  MOVFF  12,FF3
0008E:  MOVFF  13,FF4
00092:  MOVFF  14,FFA
00096:  MOVFF  15,FF5
0009A:  MOVFF  16,FF6
0009E:  MOVFF  17,FF7
000A2:  MOVF   04,W
000A4:  MOVFF  06,FE0
000A8:  MOVFF  05,FD8
000AC:  RETFIE 0
.................... #include <18F4620.h> 
.................... //////// Standard Header file for the PIC18F4620 device //////////////// 
.................... #device PIC18F4620 
.................... #list 
....................  
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000) 
*
025DE:  MOVLW  01
025E0:  MOVWF  FEA
025E2:  MOVLW  13
025E4:  MOVWF  FE9
025E6:  MOVF   FEF,W
025E8:  BZ    2606
025EA:  MOVLW  0C
025EC:  MOVWF  01
025EE:  CLRF   00
025F0:  DECFSZ 00,F
025F2:  BRA    25F0
025F4:  DECFSZ 01,F
025F6:  BRA    25EE
025F8:  MOVLW  F7
025FA:  MOVWF  00
025FC:  DECFSZ 00,F
025FE:  BRA    25FC
02600:  BRA    2602
02602:  DECFSZ FEF,F
02604:  BRA    25EA
02606:  RETURN 0
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
*
04630:  MOVLB  1
04632:  CLRF   x25
04634:  CLRF   x24
04636:  CLRF   x23
04638:  MOVLW  7F
0463A:  MOVWF  x22
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
0463C:  MOVLW  7E
0463E:  MOVWF  x2C
04640:  MOVLW  80
04642:  MOVWF  x2D
04644:  CLRF   x2E
04646:  CLRF   x2F
04648:  MOVLW  7A
0464A:  MOVWF  x30
0464C:  MOVLW  2A
0464E:  MOVWF  x31
04650:  MOVLW  AA
04652:  MOVWF  x32
04654:  MOVLW  A3
04656:  MOVWF  x33
04658:  MOVLW  75
0465A:  MOVWF  x34
0465C:  MOVLW  B6
0465E:  MOVWF  x35
04660:  MOVLW  09
04662:  MOVWF  x36
04664:  MOVLW  B4
04666:  MOVWF  x37
04668:  MOVLW  6F
0466A:  MOVWF  x38
0466C:  MOVLW  4F
0466E:  MOVWF  x39
04670:  MOVLW  B6
04672:  MOVWF  x3A
04674:  MOVLW  AA
04676:  MOVWF  x3B
04678:  MOVLW  69
0467A:  MOVWF  x3C
0467C:  MOVLW  8B
0467E:  MOVWF  x3D
04680:  MOVLW  F6
04682:  MOVWF  x3E
04684:  MOVLW  E8
04686:  MOVWF  x3F
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
04688:  MOVFF  119,143
0468C:  MOVFF  118,142
04690:  MOVFF  117,141
04694:  MOVFF  116,140
04698:  CLRF   x47
0469A:  CLRF   x46
0469C:  CLRF   x45
0469E:  CLRF   x44
046A0:  MOVLB  0
046A2:  BRA    4578
046A4:  BNC   46AE
046A6:  MOVLB  1
046A8:  MOVF   x17,W
046AA:  XORLW  80
046AC:  MOVWF  x17
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
046AE:  MOVFF  119,147
046B2:  MOVFF  118,146
046B6:  MOVFF  117,145
046BA:  MOVFF  116,144
046BE:  MOVLW  83
046C0:  MOVLB  1
046C2:  MOVWF  x4B
046C4:  MOVLW  F9
046C6:  MOVWF  x4A
046C8:  MOVLW  22
046CA:  MOVWF  x49
046CC:  MOVLW  7E
046CE:  MOVWF  x48
046D0:  MOVLB  0
046D2:  RCALL  40AA
046D4:  MOVFF  03,143
046D8:  MOVFF  02,142
046DC:  MOVFF  01,141
046E0:  MOVFF  00,140
046E4:  RCALL  45F4
046E6:  MOVFF  01,126
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
046EA:  MOVFF  119,147
046EE:  MOVFF  118,146
046F2:  MOVFF  117,145
046F6:  MOVFF  116,144
046FA:  MOVLW  83
046FC:  MOVLB  1
046FE:  MOVWF  x4B
04700:  MOVLW  F9
04702:  MOVWF  x4A
04704:  MOVLW  22
04706:  MOVWF  x49
04708:  MOVLW  7E
0470A:  MOVWF  x48
0470C:  MOVLB  0
0470E:  RCALL  40AA
04710:  MOVFF  00,140
04714:  MOVFF  01,141
04718:  MOVFF  02,142
0471C:  MOVFF  03,143
04720:  MOVLB  1
04722:  CLRF   x45
04724:  MOVFF  126,144
04728:  MOVLB  0
0472A:  RCALL  4074
0472C:  BSF    FD8.1
0472E:  MOVFF  143,147
04732:  MOVFF  142,146
04736:  MOVFF  141,145
0473A:  MOVFF  140,144
0473E:  MOVFF  03,14B
04742:  MOVFF  02,14A
04746:  MOVFF  01,149
0474A:  MOVFF  00,148
0474E:  RCALL  4300
04750:  MOVFF  03,12B
04754:  MOVFF  02,12A
04758:  MOVFF  01,129
0475C:  MOVFF  00,128
....................    quad = quad % 4;                    // quadrant (0 to 3) 
04760:  MOVLW  03
04762:  MOVLB  1
04764:  ANDWF  x26,F
....................  
....................    if (quad == 0 || quad == 2) 
04766:  MOVF   x26,F
04768:  BZ    4770
0476A:  MOVF   x26,W
0476C:  SUBLW  02
0476E:  BNZ   47A8
....................       t = frac * PI_DIV_BY_TWO; 
04770:  MOVFF  12B,147
04774:  MOVFF  12A,146
04778:  MOVFF  129,145
0477C:  MOVFF  128,144
04780:  MOVLW  DB
04782:  MOVWF  x4B
04784:  MOVLW  0F
04786:  MOVWF  x4A
04788:  MOVLW  49
0478A:  MOVWF  x49
0478C:  MOVLW  7F
0478E:  MOVWF  x48
04790:  MOVLB  0
04792:  RCALL  40AA
04794:  MOVFF  03,121
04798:  MOVFF  02,120
0479C:  MOVFF  01,11F
047A0:  MOVFF  00,11E
....................    else if (quad == 1) 
047A4:  BRA    487C
047A6:  MOVLB  1
047A8:  DECFSZ x26,W
047AA:  BRA    4816
....................       t = (1-frac) * PI_DIV_BY_TWO; 
047AC:  BSF    FD8.1
047AE:  CLRF   x47
047B0:  CLRF   x46
047B2:  CLRF   x45
047B4:  MOVLW  7F
047B6:  MOVWF  x44
047B8:  MOVFF  12B,14B
047BC:  MOVFF  12A,14A
047C0:  MOVFF  129,149
047C4:  MOVFF  128,148
047C8:  MOVLB  0
047CA:  RCALL  4300
047CC:  MOVFF  00,140
047D0:  MOVFF  01,141
047D4:  MOVFF  02,142
047D8:  MOVFF  03,143
047DC:  MOVFF  03,147
047E0:  MOVFF  02,146
047E4:  MOVFF  01,145
047E8:  MOVFF  00,144
047EC:  MOVLW  DB
047EE:  MOVLB  1
047F0:  MOVWF  x4B
047F2:  MOVLW  0F
047F4:  MOVWF  x4A
047F6:  MOVLW  49
047F8:  MOVWF  x49
047FA:  MOVLW  7F
047FC:  MOVWF  x48
047FE:  MOVLB  0
04800:  RCALL  40AA
04802:  MOVFF  03,121
04806:  MOVFF  02,120
0480A:  MOVFF  01,11F
0480E:  MOVFF  00,11E
....................    else // should be 3 
04812:  BRA    487C
04814:  MOVLB  1
....................       t = (frac-1) * PI_DIV_BY_TWO; 
04816:  BSF    FD8.1
04818:  MOVFF  12B,147
0481C:  MOVFF  12A,146
04820:  MOVFF  129,145
04824:  MOVFF  128,144
04828:  CLRF   x4B
0482A:  CLRF   x4A
0482C:  CLRF   x49
0482E:  MOVLW  7F
04830:  MOVWF  x48
04832:  MOVLB  0
04834:  RCALL  4300
04836:  MOVFF  00,140
0483A:  MOVFF  01,141
0483E:  MOVFF  02,142
04842:  MOVFF  03,143
04846:  MOVFF  03,147
0484A:  MOVFF  02,146
0484E:  MOVFF  01,145
04852:  MOVFF  00,144
04856:  MOVLW  DB
04858:  MOVLB  1
0485A:  MOVWF  x4B
0485C:  MOVLW  0F
0485E:  MOVWF  x4A
04860:  MOVLW  49
04862:  MOVWF  x49
04864:  MOVLW  7F
04866:  MOVWF  x48
04868:  MOVLB  0
0486A:  RCALL  40AA
0486C:  MOVFF  03,121
04870:  MOVFF  02,120
04874:  MOVFF  01,11F
04878:  MOVFF  00,11E
....................  
....................    y = 1.0; 
0487C:  MOVLB  1
0487E:  CLRF   x1D
04880:  CLRF   x1C
04882:  CLRF   x1B
04884:  MOVLW  7F
04886:  MOVWF  x1A
....................    t = t * t; 
04888:  MOVFF  121,147
0488C:  MOVFF  120,146
04890:  MOVFF  11F,145
04894:  MOVFF  11E,144
04898:  MOVFF  121,14B
0489C:  MOVFF  120,14A
048A0:  MOVFF  11F,149
048A4:  MOVFF  11E,148
048A8:  MOVLB  0
048AA:  CALL   40AA
048AE:  MOVFF  03,121
048B2:  MOVFF  02,120
048B6:  MOVFF  01,11F
048BA:  MOVFF  00,11E
....................    for (i = 0; i <= 4; i++) 
048BE:  MOVLB  1
048C0:  CLRF   x27
048C2:  MOVF   x27,W
048C4:  SUBLW  04
048C6:  BNC   4992
....................    { 
....................       t2 = t2 * t; 
048C8:  MOVFF  125,147
048CC:  MOVFF  124,146
048D0:  MOVFF  123,145
048D4:  MOVFF  122,144
048D8:  MOVFF  121,14B
048DC:  MOVFF  120,14A
048E0:  MOVFF  11F,149
048E4:  MOVFF  11E,148
048E8:  MOVLB  0
048EA:  CALL   40AA
048EE:  MOVFF  03,125
048F2:  MOVFF  02,124
048F6:  MOVFF  01,123
048FA:  MOVFF  00,122
....................       y = y + p[i] * t2; 
048FE:  MOVLB  1
04900:  MOVF   x27,W
04902:  MULLW  04
04904:  MOVF   FF3,W
04906:  CLRF   03
04908:  ADDLW  2C
0490A:  MOVWF  FE9
0490C:  MOVLW  01
0490E:  ADDWFC 03,W
04910:  MOVWF  FEA
04912:  MOVFF  FEF,140
04916:  MOVFF  FEC,141
0491A:  MOVFF  FEC,142
0491E:  MOVFF  FEC,143
04922:  MOVFF  143,147
04926:  MOVFF  142,146
0492A:  MOVFF  141,145
0492E:  MOVFF  140,144
04932:  MOVFF  125,14B
04936:  MOVFF  124,14A
0493A:  MOVFF  123,149
0493E:  MOVFF  122,148
04942:  MOVLB  0
04944:  CALL   40AA
04948:  MOVFF  FEA,141
0494C:  MOVFF  FE9,140
04950:  BCF    FD8.1
04952:  MOVFF  11D,147
04956:  MOVFF  11C,146
0495A:  MOVFF  11B,145
0495E:  MOVFF  11A,144
04962:  MOVFF  03,14B
04966:  MOVFF  02,14A
0496A:  MOVFF  01,149
0496E:  MOVFF  00,148
04972:  RCALL  4300
04974:  MOVFF  141,FEA
04978:  MOVFF  140,FE9
0497C:  MOVFF  03,11D
04980:  MOVFF  02,11C
04984:  MOVFF  01,11B
04988:  MOVFF  00,11A
....................    } 
0498C:  MOVLB  1
0498E:  INCF   x27,F
04990:  BRA    48C2
....................  
....................    if (quad == 2 || quad == 1) 
04992:  MOVF   x26,W
04994:  SUBLW  02
04996:  BZ    499C
04998:  DECFSZ x26,W
0499A:  BRA    49A2
....................       y = -y;  // correct sign 
0499C:  MOVF   x1B,W
0499E:  XORLW  80
049A0:  MOVWF  x1B
....................  
....................    return (y); 
049A2:  MOVFF  11A,00
049A6:  MOVFF  11B,01
049AA:  MOVFF  11C,02
049AE:  MOVFF  11D,03
.................... } 
049B2:  MOVLB  0
049B4:  GOTO   4A02 (RETURN)
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
049B8:  BSF    FD8.1
049BA:  MOVFF  111,147
049BE:  MOVFF  110,146
049C2:  MOVFF  10F,145
049C6:  MOVFF  10E,144
049CA:  MOVLW  DB
049CC:  MOVLB  1
049CE:  MOVWF  x4B
049D0:  MOVLW  0F
049D2:  MOVWF  x4A
049D4:  MOVLW  49
049D6:  MOVWF  x49
049D8:  MOVLW  7F
049DA:  MOVWF  x48
049DC:  MOVLB  0
049DE:  RCALL  4300
049E0:  MOVFF  00,112
049E4:  MOVFF  01,113
049E8:  MOVFF  02,114
049EC:  MOVFF  03,115
049F0:  MOVFF  03,119
049F4:  MOVFF  02,118
049F8:  MOVFF  01,117
049FC:  MOVFF  00,116
04A00:  BRA    4630
.................... } 
04A02:  GOTO   4B88 (RETURN)
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... /*******************************P10 Panel kütüphanesi**************************/ 
.................... #include <P10_Panel_Driver.c> 
.................... /******************************************************************************* 
.................... * File Name          : P10_Panel_Driver.c 
.................... * Author             : Ferhat YOL 
.................... * Version            : V1.0 
.................... * Date               : 13/07/2013 
.................... * Description        : P10 Panel kütüphanesidir. 
.................... *                    : 
.................... *******************************************************************************/                      
....................  
.................... #include <font1.h> 
.................... const unsigned char Font_5x7[96][5] ={  // 
....................     0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  32  
....................     0x00, 0x00, 0x5F, 0x00, 0x00, // !      33 
....................     0x00, 0x03, 0x00, 0x03, 0x00, // "      34 
....................     0x14, 0x3E, 0x14, 0x3E, 0x14, // #      35   
....................     0x24, 0x2A, 0x7F, 0x2A, 0x12, // $      36 
....................     0x43, 0x33, 0x08, 0x66, 0x61, // %      37   
....................     0x36, 0x49, 0x55, 0x22, 0x50, // &      38 
....................     0x00, 0x05, 0x03, 0x00, 0x00, // '      39 
....................     0x00, 0x1C, 0x22, 0x41, 0x00, // (      40 
....................     0x00, 0x41, 0x22, 0x1C, 0x00, // )      41 
....................     0x14, 0x08, 0x3E, 0x08, 0x14, // *      42 
....................     0x08, 0x08, 0x3E, 0x08, 0x08, // +      43 
....................     0x00, 0x50, 0x30, 0x00, 0x00, // ,      44 
....................     0x08, 0x08, 0x08, 0x08, 0x08, // -      45 
....................     0x00, 0x60, 0x60, 0x00, 0x00, // .      46 
....................     0x20, 0x10, 0x08, 0x04, 0x02, // /      47   
....................     0x3E, 0x51, 0x49, 0x45, 0x3E, // 0      48 
....................     0x04, 0x02, 0x7F, 0x00, 0x00, // 1      49 
....................     0x42, 0x61, 0x51, 0x49, 0x46, // 2      50 
....................     0x22, 0x41, 0x49, 0x49, 0x36, // 3      51 
....................     0x18, 0x14, 0x12, 0x7F, 0x10, // 4      52 
....................     0x27, 0x45, 0x45, 0x45, 0x39, // 5      53 
....................     0x3E, 0x49, 0x49, 0x49, 0x32, // 6      54 
....................     0x01, 0x01, 0x71, 0x09, 0x07, // 7      55 
....................     0x36, 0x49, 0x49, 0x49, 0x36, // 8      56 
....................     0x26, 0x49, 0x49, 0x49, 0x3E, // 9      57 
....................     0x00, 0x36, 0x36, 0x00, 0x00, // :      58 
....................     0x00, 0x56, 0x36, 0x00, 0x00, // ;      59 
....................     0x08, 0x14, 0x22, 0x41, 0x00, // <      60 
....................     0x14, 0x14, 0x14, 0x14, 0x14, // =      61 
....................     0x00, 0x41, 0x22, 0x14, 0x08, // >      62 
....................     0x02, 0x01, 0x51, 0x09, 0x06, // ?      63 
....................     0x3E, 0x41, 0x59, 0x55, 0x5E, // @      64 
....................     0x7E, 0x09, 0x09, 0x09, 0x7E, // A      65 
....................     0x7F, 0x49, 0x49, 0x49, 0x36, // B      66 
....................     0x3E, 0x41, 0x41, 0x41, 0x22, // C      67 
....................     0x7F, 0x41, 0x41, 0x41, 0x3E, // D      68 
....................     0x7F, 0x49, 0x49, 0x49, 0x41, // E      69 
....................     0x7F, 0x09, 0x09, 0x09, 0x01, // F      70 
....................     0x3E, 0x41, 0x41, 0x49, 0x3A, // G      71 
....................     0x7F, 0x08, 0x08, 0x08, 0x7F, // H      72 
....................     0x00, 0x41, 0x7F, 0x41, 0x00, // I      73 
....................     0x30, 0x40, 0x40, 0x40, 0x3F, // J      74 
....................     0x7F, 0x08, 0x14, 0x22, 0x41, // K      75 
....................     0x7F, 0x40, 0x40, 0x40, 0x40, // L      76 
....................     0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      77 
....................     0x7F, 0x02, 0x04, 0x08, 0x7F, // N      78 
....................     0x3E, 0x41, 0x41, 0x41, 0x3E, // O      79 
....................     0x7F, 0x09, 0x09, 0x09, 0x06, // P      80 
....................     0x1E, 0x21, 0x21, 0x21, 0x5E, // Q      81 
....................     0x7F, 0x09, 0x09, 0x09, 0x76, // R      82 
....................     0x26, 0x49, 0x49, 0x49, 0x32, // S      83 
....................     0x01, 0x01, 0x7F, 0x01, 0x01, // T      84 
....................     0x3F, 0x40, 0x40, 0x40, 0x3F, // U      85 
....................     0x1F, 0x20, 0x40, 0x20, 0x1F, // V      86 
....................     0x7F, 0x20, 0x10, 0x20, 0x7F, // W      87 
....................     0x41, 0x22, 0x1C, 0x22, 0x41, // X      88 
....................     0x07, 0x08, 0x70, 0x08, 0x07, // Y      89 
....................     0x61, 0x51, 0x49, 0x45, 0x43, // Z      90 
....................     0x00, 0x7F, 0x41, 0x00, 0x00, // [      91 
....................     0x02, 0x04, 0x08, 0x10, 0x20, // \      92 
....................     0x00, 0x00, 0x41, 0x7F, 0x00, // ]      93  
....................     0x04, 0x02, 0x01, 0x02, 0x04, // ^      94 
....................     0x40, 0x40, 0x40, 0x40, 0x40, // _      95 
....................     0x00, 0x01, 0x02, 0x04, 0x00, // `      96    
....................     0x20, 0x54, 0x54, 0x54, 0x78, // a      97 
....................     0x7F, 0x44, 0x44, 0x44, 0x38, // b      98 
....................     0x38, 0x44, 0x44, 0x44, 0x44, // c      99 
....................     0x38, 0x44, 0x44, 0x44, 0x7F, // d      100 
....................     0x38, 0x54, 0x54, 0x54, 0x18, // e      101 
....................     0x04, 0x04, 0x7E, 0x05, 0x05, // f      102 
....................     0x08, 0x54, 0x54, 0x54, 0x3C, // g      103 
....................     0x7F, 0x08, 0x04, 0x04, 0x78, // h      104 
....................     0x00, 0x44, 0x7D, 0x40, 0x00, // i      105 
....................     0x20, 0x40, 0x44, 0x3D, 0x00, // j      106 
....................     0x7F, 0x10, 0x28, 0x44, 0x00, // k      107 
....................     0x00, 0x41, 0x7F, 0x40, 0x00, // l      108 
....................     0x7C, 0x04, 0x78, 0x04, 0x78, // m      109 
....................     0x7C, 0x08, 0x04, 0x04, 0x78, // n      110 
....................     0x38, 0x44, 0x44, 0x44, 0x38, // o      111 
....................     0x7C, 0x14, 0x14, 0x14, 0x08, // p      112 
....................     0x08, 0x14, 0x14, 0x14, 0x7C, // q      113 
....................     0x00, 0x7C, 0x08, 0x04, 0x04, // r      114 
....................     0x48, 0x54, 0x54, 0x54, 0x20, // s      115 
....................     0x04, 0x04, 0x3F, 0x44, 0x44, // t      116 
....................     0x3C, 0x40, 0x40, 0x20, 0x7C, // u      117 
....................     0x1C, 0x20, 0x40, 0x20, 0x1C, // v      118 
....................     0x3C, 0x40, 0x30, 0x40, 0x3C, // w      119 
....................     0x44, 0x28, 0x10, 0x28, 0x44, // x      120 
....................     0x0C, 0x50, 0x50, 0x50, 0x3C, // y      121 
....................     0x44, 0x64, 0x54, 0x4C, 0x44, // z      122 
....................     0x00, 0x08, 0x36, 0x41, 0x41, // {      123 
....................     0x00, 0x00, 0x7F, 0x00, 0x00, // |      124 
....................     0x41, 0x41, 0x36, 0x08, 0x00, // }      125 
....................     0x02, 0x01, 0x02, 0x04, 0x02};// ~      126 
....................      
....................  
....................  
....................      
....................  
.................... #include <font2.h> 
.................... //FontSize : 8 x 12 
....................  
.................... const unsigned char Font_8x12[96][16] = { 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char   
....................         0x00, 0x00, 0x7E, 0x03, 0x7E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ! 
....................         0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char " 
....................         0xC0, 0x00, 0xD8, 0x03, 0xF8, 0x00, 0xDE, 0x00, 0xD8, 0x03, 0xF8, 0x00, 0xDE, 0x00, 0x18, 0x00,  // Code for char # 
....................         0x1C, 0x01, 0x3E, 0x02, 0x22, 0x02, 0xFF, 0x07, 0x22, 0x02, 0xE2, 0x03, 0xC4, 0x01, 0x00, 0x00,  // Code for char $ 
....................         0x0C, 0x06, 0x92, 0x03, 0xCC, 0x00, 0x60, 0x00, 0x30, 0x03, 0x98, 0x04, 0x0E, 0x03, 0x00, 0x00,  // Code for char % 
....................         0xDC, 0x01, 0xFE, 0x03, 0x22, 0x02, 0x22, 0x02, 0x7E, 0x02, 0xDC, 0x01, 0x00, 0x03, 0x80, 0x04,  // Code for char & 
....................         0x00, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ' 
....................         0x00, 0x00, 0xFC, 0x01, 0xFE, 0x03, 0x03, 0x06, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ( 
....................         0x00, 0x00, 0x01, 0x04, 0x03, 0x06, 0xFE, 0x03, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ) 
....................         0x00, 0x00, 0x14, 0x00, 0x08, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x08, 0x00, 0x14, 0x00, 0x00, 0x00,  // Code for char * 
....................         0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xFE, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00,  // Code for char + 
....................         0x00, 0x08, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char , 
....................         0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char - 
....................         0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char . 
....................         0x00, 0x08, 0x00, 0x06, 0x80, 0x01, 0x60, 0x00, 0x18, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char / 
....................         0xFC, 0x01, 0xFE, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x03, 0xFC, 0x01, 0x00, 0x00,  // Code for char 0 
....................         0x00, 0x00, 0x04, 0x02, 0x04, 0x02, 0xFE, 0x03, 0xFE, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00,  // Code for char 1 
....................         0x0C, 0x02, 0x02, 0x03, 0x82, 0x03, 0xC2, 0x02, 0x62, 0x02, 0x3E, 0x02, 0x1C, 0x02, 0x00, 0x00,  // Code for char 2 
....................         0x04, 0x01, 0x02, 0x02, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0xFE, 0x03, 0xDC, 0x01, 0x00, 0x00,  // Code for char 3 
....................         0x60, 0x00, 0x50, 0x00, 0x48, 0x00, 0x44, 0x00, 0xFE, 0x03, 0xFE, 0x03, 0x40, 0x00, 0x00, 0x00,  // Code for char 4 
....................         0x1E, 0x01, 0x1E, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0xF2, 0x03, 0xE2, 0x01, 0x00, 0x00,  // Code for char 5 
....................         0xFC, 0x01, 0xFE, 0x03, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0xF2, 0x03, 0xE4, 0x01, 0x00, 0x00,  // Code for char 6 
....................         0x02, 0x00, 0x02, 0x00, 0x82, 0x03, 0xE2, 0x03, 0x7A, 0x00, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00,  // Code for char 7 
....................         0xDC, 0x01, 0xFE, 0x03, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0xFE, 0x03, 0xDC, 0x01, 0x00, 0x00,  // Code for char 8 
....................         0x3C, 0x00, 0x7E, 0x02, 0x42, 0x02, 0x42, 0x02, 0x42, 0x03, 0xFE, 0x01, 0xFC, 0x00, 0x00, 0x00,  // Code for char 9 
....................         0x00, 0x00, 0x18, 0x03, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char : 
....................         0x00, 0x04, 0x18, 0x07, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ; 
....................         0x60, 0x00, 0x60, 0x00, 0x90, 0x00, 0x90, 0x00, 0x08, 0x01, 0x08, 0x01, 0x04, 0x02, 0x00, 0x00,  // Code for char < 
....................         0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x00, 0x00,  // Code for char = 
....................         0x04, 0x02, 0x04, 0x02, 0x08, 0x01, 0x08, 0x01, 0x90, 0x00, 0x90, 0x00, 0x60, 0x00, 0x00, 0x00,  // Code for char > 
....................         0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x62, 0x03, 0x72, 0x03, 0x1E, 0x00, 0x0C, 0x00, 0x00, 0x00,  // Code for char ? 
....................         0xF8, 0x00, 0x04, 0x01, 0x72, 0x02, 0x8A, 0x02, 0x8A, 0x02, 0xF2, 0x02, 0x86, 0x02, 0x7C, 0x01,  // Code for char @ 
....................         0xF8, 0x03, 0xFC, 0x03, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0xFC, 0x03, 0xF8, 0x03, 0x00, 0x00,  // Code for char A 
....................         0xFE, 0x03, 0xFE, 0x03, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0xFE, 0x03, 0xDC, 0x01, 0x00, 0x00,  // Code for char B 
....................         0xFC, 0x01, 0xFE, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x8C, 0x01, 0x00, 0x00,  // Code for char C 
....................         0xFE, 0x03, 0xFE, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFC, 0x01, 0xF8, 0x00, 0x00, 0x00,  // Code for char D 
....................         0xFE, 0x03, 0xFE, 0x03, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,  // Code for char E 
....................         0xFE, 0x03, 0xFE, 0x03, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char F 
....................         0xFC, 0x01, 0xFE, 0x03, 0x02, 0x02, 0x02, 0x02, 0x22, 0x02, 0xE2, 0x03, 0xEC, 0x03, 0x00, 0x00,  // Code for char G 
....................         0xFE, 0x03, 0xFE, 0x03, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xFE, 0x03, 0xFE, 0x03, 0x00, 0x00,  // Code for char H 
....................         0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0xFE, 0x03, 0xFE, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,  // Code for char I 
....................         0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x03, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char J 
....................         0xFE, 0x03, 0xFE, 0x03, 0x70, 0x00, 0xD8, 0x00, 0x8C, 0x01, 0x06, 0x03, 0x02, 0x02, 0x00, 0x00,  // Code for char K 
....................         0xFE, 0x03, 0xFE, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  // Code for char L 
....................         0xFE, 0x03, 0x1C, 0x00, 0x30, 0x00, 0x40, 0x00, 0x30, 0x00, 0x1C, 0x00, 0xFE, 0x03, 0x00, 0x00,  // Code for char M 
....................         0xFE, 0x03, 0x06, 0x00, 0x1E, 0x00, 0x78, 0x00, 0xE0, 0x01, 0x80, 0x03, 0xFE, 0x03, 0x00, 0x00,  // Code for char N 
....................         0xFC, 0x01, 0xFE, 0x03, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0xFE, 0x03, 0xFC, 0x01, 0x00, 0x00,  // Code for char O 
....................         0xFE, 0x03, 0xFE, 0x03, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x7E, 0x00, 0x3C, 0x00, 0x00, 0x00,  // Code for char P 
....................         0xFC, 0x01, 0xFE, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0xFE, 0x07, 0xFC, 0x05,  // Code for char Q 
....................         0xFE, 0x03, 0xFE, 0x03, 0x22, 0x00, 0x62, 0x00, 0xE2, 0x00, 0xBE, 0x03, 0x1C, 0x02, 0x00, 0x00,  // Code for char R 
....................         0x9C, 0x01, 0x3E, 0x02, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0xE2, 0x03, 0xCC, 0x01, 0x00, 0x00,  // Code for char S 
....................         0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0xFE, 0x03, 0xFE, 0x03, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,  // Code for char T 
....................         0xFE, 0x01, 0xFE, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0xFE, 0x03, 0xFE, 0x01, 0x00, 0x00,  // Code for char U 
....................         0x7E, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x00, 0x03, 0x00, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x7E, 0x00,  // Code for char V 
....................         0xFE, 0x03, 0x00, 0x03, 0x80, 0x01, 0xF0, 0x00, 0xF0, 0x00, 0x80, 0x01, 0x00, 0x03, 0xFE, 0x03,  // Code for char W 
....................         0x06, 0x03, 0x8E, 0x03, 0xD8, 0x00, 0x70, 0x00, 0x70, 0x00, 0xD8, 0x00, 0x8E, 0x03, 0x06, 0x03,  // Code for char X 
....................         0x06, 0x00, 0x1E, 0x00, 0x38, 0x00, 0xE0, 0x03, 0xE0, 0x03, 0x38, 0x00, 0x1E, 0x00, 0x06, 0x00,  // Code for char Y 
....................         0x02, 0x03, 0x82, 0x03, 0xC2, 0x02, 0x62, 0x02, 0x32, 0x02, 0x1A, 0x02, 0x0E, 0x02, 0x00, 0x00,  // Code for char Z 
....................         0x00, 0x00, 0xFE, 0x07, 0xFE, 0x07, 0x02, 0x04, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char [ 
....................         0x06, 0x00, 0x18, 0x00, 0x60, 0x00, 0x80, 0x01, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // Code for char BackSlash 
....................         0x00, 0x00, 0x02, 0x04, 0x02, 0x04, 0xFE, 0x07, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ] 
....................         0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00,  // Code for char ^ 
....................         0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // Code for char _ 
....................         0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ` 
....................         0x00, 0x03, 0xA0, 0x07, 0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0xF0, 0x07, 0xE0, 0x07, 0x00, 0x00,  // Code for char a 
....................         0xFE, 0x07, 0xFE, 0x07, 0x20, 0x04, 0x10, 0x04, 0x10, 0x04, 0xF0, 0x07, 0xE0, 0x03, 0x00, 0x00,  // Code for char b 
....................         0xE0, 0x03, 0xF0, 0x07, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00,  // Code for char c 
....................         0xE0, 0x03, 0xF0, 0x07, 0x10, 0x04, 0x10, 0x04, 0x10, 0x02, 0xFE, 0x07, 0xFE, 0x07, 0x00, 0x00,  // Code for char d 
....................         0xE0, 0x03, 0xF0, 0x07, 0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0xF0, 0x04, 0xE0, 0x02, 0x00, 0x00,  // Code for char e 
....................         0x10, 0x00, 0xFC, 0x07, 0xFE, 0x07, 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char f 
....................         0x7C, 0x02, 0xFE, 0x04, 0x82, 0x04, 0x82, 0x04, 0x42, 0x04, 0xFE, 0x07, 0xFE, 0x03, 0x00, 0x00,  // Code for char g 
....................         0xFE, 0x07, 0xFE, 0x07, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x07, 0xE0, 0x07, 0x00, 0x00,  // Code for char h 
....................         0xF6, 0x07, 0xF6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char i 
....................         0x00, 0x00, 0x10, 0x00, 0xF6, 0x07, 0xF6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char j 
....................         0xFE, 0x07, 0xFE, 0x07, 0xC0, 0x01, 0x60, 0x03, 0x30, 0x06, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00,  // Code for char k 
....................         0xFE, 0x07, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char l 
....................         0xE0, 0x07, 0x10, 0x00, 0x10, 0x00, 0xE0, 0x07, 0xE0, 0x07, 0x10, 0x00, 0x10, 0x00, 0xE0, 0x07,  // Code for char m 
....................         0xF0, 0x07, 0xF0, 0x07, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x07, 0xE0, 0x07, 0x00, 0x00,  // Code for char n 
....................         0xE0, 0x03, 0xF0, 0x07, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0xF0, 0x07, 0xE0, 0x03, 0x00, 0x00,  // Code for char o 
....................         0xFE, 0x07, 0xFE, 0x07, 0x84, 0x00, 0x82, 0x00, 0x82, 0x00, 0xFE, 0x00, 0x7C, 0x00, 0x00, 0x00,  // Code for char p 
....................         0x7C, 0x00, 0xFE, 0x00, 0x82, 0x00, 0x82, 0x00, 0x42, 0x00, 0xFE, 0x07, 0xFE, 0x07, 0x00, 0x00,  // Code for char q 
....................         0xF0, 0x07, 0xF0, 0x07, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char r 
....................         0x60, 0x02, 0xF0, 0x04, 0xD0, 0x04, 0x90, 0x05, 0x90, 0x07, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00,  // Code for char s 
....................         0x10, 0x00, 0xFC, 0x03, 0xFC, 0x07, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char t 
....................         0xF0, 0x03, 0xF0, 0x07, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0xF0, 0x07, 0xF0, 0x07, 0x00, 0x00,  // Code for char u 
....................         0x70, 0x00, 0xF0, 0x01, 0x80, 0x07, 0x00, 0x06, 0x80, 0x07, 0xF0, 0x01, 0x70, 0x00, 0x00, 0x00,  // Code for char v 
....................         0xF0, 0x03, 0x00, 0x06, 0x00, 0x04, 0xE0, 0x03, 0x00, 0x04, 0x00, 0x06, 0xF0, 0x03, 0x00, 0x00,  // Code for char w 
....................         0x30, 0x06, 0x70, 0x07, 0xC0, 0x01, 0xC0, 0x01, 0x70, 0x07, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00,  // Code for char x 
....................         0x18, 0x02, 0x30, 0x04, 0x60, 0x04, 0xC0, 0x07, 0xC0, 0x03, 0x60, 0x00, 0x38, 0x00, 0x00, 0x00,  // Code for char y 
....................         0x10, 0x06, 0x10, 0x07, 0x90, 0x05, 0xD0, 0x04, 0x70, 0x04, 0x30, 0x04, 0x00, 0x00, 0x00, 0x00,  // Code for char z 
....................         0x60, 0x00, 0xFC, 0x03, 0x9E, 0x07, 0x02, 0x04, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char { 
....................         0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char | 
....................         0x02, 0x04, 0x02, 0x04, 0x9E, 0x07, 0xFC, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char } 
....................         0xE0, 0x00, 0x30, 0x00, 0x30, 0x00, 0x70, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x70, 0x00,  // Code for char ~ 
....................         0x00, 0x00, 0xFE, 0x07, 0x02, 0x04, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char  
....................         }; 
....................  
....................  
....................  
.................... #include <font3.h> 
....................  
.................... const unsigned char Font_12x14[96][24] = { 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char   
....................         0x00, 0x00, 0xFE, 0x1B, 0xFE, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ! 
....................         0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char " 
....................         0x00, 0x03, 0x30, 0x1B, 0xB0, 0x07, 0x78, 0x03, 0x36, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x1B, 0xB0, 0x07, 0x78, 0x03, 0x00, 0x00, 0x00, 0x00,  // Code for char # 
....................         0x70, 0x0C, 0xF8, 0x1C, 0x8C, 0x10, 0x84, 0x10, 0xFF, 0x3F, 0x84, 0x10, 0x84, 0x18, 0x9C, 0x0F, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char $ 
....................         0x0E, 0x18, 0x1F, 0x1C, 0x11, 0x0E, 0x1F, 0x07, 0xCE, 0x03, 0xE0, 0x01, 0x70, 0x0E, 0x38, 0x1F, 0x1C, 0x11, 0x0E, 0x1F, 0x07, 0x0E, 0x00, 0x00,  // Code for char % 
....................         0x00, 0x07, 0x9C, 0x0F, 0xFE, 0x18, 0x62, 0x10, 0xC2, 0x10, 0xE2, 0x11, 0x3E, 0x1B, 0x1C, 0x0E, 0xC0, 0x0F, 0xC0, 0x19, 0x00, 0x00, 0x00, 0x00,  // Code for char & 
....................         0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ' 
....................         0x00, 0x00, 0xF0, 0x0F, 0xFC, 0x3F, 0x0E, 0x30, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ( 
....................         0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x0E, 0x30, 0xFC, 0x3F, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ) 
....................         0x00, 0x00, 0x42, 0x00, 0x24, 0x00, 0x18, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x18, 0x00, 0x24, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char * 
....................         0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xF0, 0x07, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char + 
....................         0x00, 0x00, 0x00, 0x2C, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char , 
....................         0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char - 
....................         0x00, 0x00, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char . 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0E, 0x80, 0x01, 0x70, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char / 
....................         0xF8, 0x07, 0xFC, 0x0F, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0xFC, 0x0F, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 0 
....................         0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 1 
....................         0x08, 0x10, 0x0C, 0x18, 0x06, 0x1C, 0x02, 0x16, 0x02, 0x13, 0x82, 0x11, 0xC6, 0x10, 0x7C, 0x10, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 2 
....................         0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0xE6, 0x18, 0xBC, 0x0F, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 3 
....................         0x80, 0x01, 0x40, 0x01, 0x20, 0x01, 0x10, 0x01, 0x08, 0x01, 0x04, 0x01, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // Code for char 4 
....................         0x00, 0x0C, 0x3E, 0x1C, 0x3E, 0x10, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x62, 0x18, 0xC2, 0x0F, 0x82, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 5 
....................         0xF0, 0x07, 0xF8, 0x0F, 0x2C, 0x18, 0x26, 0x10, 0x22, 0x10, 0x22, 0x10, 0x62, 0x18, 0xC2, 0x0F, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 6 
....................         0x02, 0x00, 0x02, 0x00, 0x02, 0x18, 0x02, 0x1E, 0x82, 0x07, 0xE2, 0x01, 0x7A, 0x00, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 7 
....................         0x18, 0x07, 0xBC, 0x0F, 0xE6, 0x18, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0xE6, 0x18, 0xBC, 0x0F, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 8 
....................         0x78, 0x08, 0xFC, 0x18, 0xC6, 0x11, 0x82, 0x11, 0x82, 0x11, 0x82, 0x11, 0xC6, 0x18, 0xFC, 0x0F, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 9 
....................         0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0x70, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char : 
....................         0x00, 0x00, 0x00, 0x10, 0x70, 0x1C, 0x70, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ; 
....................         0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x40, 0x02, 0x40, 0x02, 0x20, 0x04, 0x20, 0x04, 0x10, 0x08, 0x10, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00,  // Code for char < 
....................         0x00, 0x00, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00,  // Code for char = 
....................         0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x10, 0x08, 0x10, 0x08, 0x20, 0x04, 0x20, 0x04, 0x40, 0x02, 0x40, 0x02, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,  // Code for char > 
....................         0x0C, 0x00, 0x0E, 0x00, 0x02, 0x00, 0x02, 0x1B, 0x82, 0x1B, 0xC6, 0x00, 0x7C, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ? 
....................         0xFC, 0x07, 0x06, 0x0C, 0xF3, 0x19, 0x19, 0x13, 0x0D, 0x16, 0x0D, 0x16, 0x0D, 0x16, 0xFD, 0x17, 0xF9, 0x17, 0x02, 0x14, 0xFC, 0x13, 0x00, 0x00,  // Code for char @ 
....................         0xF8, 0x1F, 0xFC, 0x1F, 0x8E, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x8E, 0x01, 0xFC, 0x1F, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00,  // Code for char A 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x66, 0x10, 0xFC, 0x18, 0x98, 0x0F, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // Code for char B 
....................         0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0x0E, 0x1C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // Code for char C 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0x04, 0x08, 0x1C, 0x0E, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00,  // Code for char D 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char E 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char F 
....................         0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x8E, 0x1F, 0x00, 0x00, 0x00, 0x00,  // Code for char G 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00,  // Code for char H 
....................         0x02, 0x10, 0x02, 0x10, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char I 
....................         0x00, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x18, 0xFE, 0x0F, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char J 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x40, 0x00, 0xE0, 0x00, 0xB0, 0x01, 0x18, 0x03, 0x0C, 0x06, 0x06, 0x0C, 0x02, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // Code for char K 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char L 
....................         0xFE, 0x1F, 0x0E, 0x00, 0x3C, 0x00, 0xF0, 0x00, 0x80, 0x03, 0x00, 0x06, 0x80, 0x03, 0xF0, 0x00, 0x3C, 0x00, 0x0E, 0x00, 0xFE, 0x1F, 0x00, 0x00,  // Code for char M 
....................         0xFE, 0x1F, 0xFC, 0x1F, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x00, 0x03, 0x00, 0x06, 0xFE, 0x0F, 0xFE, 0x1F, 0x00, 0x00,  // Code for char N 
....................         0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0x0C, 0x0C, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00,  // Code for char O 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x86, 0x01, 0xFC, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char P 
....................         0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x02, 0x10, 0x02, 0x30, 0x02, 0x32, 0x06, 0x1E, 0x0C, 0x0C, 0xFC, 0x1F, 0xF0, 0x33, 0x00, 0x00,  // Code for char Q 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x86, 0x03, 0xFC, 0x06, 0x78, 0x0C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,  // Code for char R 
....................         0x38, 0x0C, 0x7C, 0x1C, 0xE6, 0x10, 0xC2, 0x10, 0xC2, 0x10, 0xC2, 0x10, 0xC2, 0x19, 0x8E, 0x0F, 0x0C, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char S 
....................         0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char T 
....................         0xFE, 0x07, 0xFE, 0x0F, 0x00, 0x18, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x18, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00,  // Code for char U 
....................         0x0E, 0x00, 0x7E, 0x00, 0xF0, 0x03, 0x80, 0x1F, 0x00, 0x1C, 0x00, 0x1C, 0x80, 0x1F, 0xF0, 0x03, 0x7E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char V 
....................         0x7E, 0x00, 0xE0, 0x03, 0x00, 0x0F, 0x00, 0x1C, 0x00, 0x06, 0xE0, 0x03, 0x00, 0x06, 0x00, 0x1C, 0x00, 0x0F, 0xE0, 0x03, 0x7E, 0x00, 0x00, 0x00,  // Code for char W 
....................         0x06, 0x18, 0x0E, 0x1C, 0x18, 0x06, 0x30, 0x03, 0xE0, 0x01, 0xE0, 0x01, 0x30, 0x03, 0x18, 0x06, 0x0E, 0x1C, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00,  // Code for char X 
....................         0x06, 0x00, 0x1E, 0x00, 0x38, 0x00, 0xE0, 0x00, 0xC0, 0x1F, 0xC0, 0x1F, 0xE0, 0x00, 0x38, 0x00, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char Y 
....................         0x02, 0x18, 0x02, 0x1C, 0x02, 0x17, 0x82, 0x13, 0xC2, 0x10, 0x72, 0x10, 0x3A, 0x10, 0x0E, 0x10, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char Z 
....................         0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char [ 
....................         0x00, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x70, 0x00, 0x80, 0x01, 0x00, 0x0E, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char BackSlash 
....................         0x00, 0x00, 0x01, 0x10, 0x01, 0x10, 0x01, 0x10, 0xFF, 0x1F, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ] 
....................         0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x18, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x18, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00,  // Code for char ^ 
....................         0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char _ 
....................         0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ` 
....................         0x00, 0x0E, 0x20, 0x1F, 0x30, 0x11, 0x90, 0x10, 0x90, 0x10, 0x90, 0x10, 0xB0, 0x08, 0xE0, 0x1F, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char a 
....................         0xFF, 0x1F, 0xFF, 0x1F, 0x20, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0xE0, 0x0F, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char b 
....................         0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char c 
....................         0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x08, 0xFF, 0x1F, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char d 
....................         0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x19, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x30, 0x11, 0xE0, 0x19, 0xC0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char e 
....................         0x10, 0x00, 0xFE, 0x1F, 0xFF, 0x1F, 0x11, 0x00, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char f 
....................         0xF8, 0x00, 0xFC, 0x01, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x01, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char g 
....................         0xFF, 0x1F, 0xFF, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x30, 0x00, 0xE0, 0x1F, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char h 
....................         0x00, 0x00, 0xF6, 0x1F, 0xF6, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char i 
....................         0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF6, 0x1F, 0xF6, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char j 
....................         0xFF, 0x1F, 0xFF, 0x1F, 0x00, 0x01, 0x80, 0x01, 0xC0, 0x03, 0x60, 0x06, 0x30, 0x0C, 0x10, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char k 
....................         0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char l 
....................         0xF0, 0x1F, 0xF0, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x1F, 0xE0, 0x1F, 0x20, 0x00, 0x20, 0x00, 0x10, 0x00, 0xE0, 0x1F, 0x00, 0x00,  // Code for char m 
....................         0xF0, 0x1F, 0xF0, 0x1F, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x30, 0x00, 0xE0, 0x1F, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char n 
....................         0xC0, 0x07, 0xE0, 0x0F, 0x30, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0xE0, 0x0F, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char o 
....................         0xFE, 0x1F, 0xFE, 0x1F, 0x04, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x03, 0xFC, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char p 
....................         0xF8, 0x00, 0xFC, 0x01, 0x06, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x01, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char q 
....................         0xF0, 0x1F, 0xF0, 0x1F, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char r 
....................         0xE0, 0x08, 0xF0, 0x11, 0x90, 0x11, 0x90, 0x13, 0x10, 0x13, 0x10, 0x1F, 0x20, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char s 
....................         0x10, 0x00, 0xFE, 0x0F, 0xFE, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char t 
....................         0xF0, 0x07, 0xF0, 0x0F, 0x00, 0x18, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0xF0, 0x1F, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char u 
....................         0x70, 0x00, 0xF0, 0x03, 0x80, 0x0F, 0x00, 0x1C, 0x00, 0x1C, 0x80, 0x0F, 0xF0, 0x03, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char v 
....................         0xF0, 0x03, 0xF0, 0x1F, 0x00, 0x1C, 0x80, 0x0F, 0xE0, 0x03, 0xF0, 0x00, 0xE0, 0x03, 0x00, 0x0F, 0x00, 0x0C, 0xF0, 0x1F, 0xF0, 0x1F, 0x00, 0x00,  // Code for char w 
....................         0x10, 0x10, 0x30, 0x18, 0x60, 0x0C, 0xC0, 0x07, 0x80, 0x03, 0xC0, 0x07, 0x60, 0x0C, 0x30, 0x18, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char x 
....................         0x0E, 0x00, 0x7E, 0x10, 0xF0, 0x19, 0x80, 0x1F, 0x80, 0x0F, 0xF0, 0x01, 0x7E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char y 
....................         0x10, 0x18, 0x10, 0x1C, 0x10, 0x16, 0x10, 0x13, 0x90, 0x11, 0xD0, 0x10, 0x70, 0x10, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char z 
....................         0x00, 0x00, 0xC0, 0x00, 0xF8, 0x07, 0x3C, 0x0F, 0x06, 0x18, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char { 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char | 
....................         0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x06, 0x18, 0x3C, 0x0F, 0xF8, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char } 
....................         0x80, 0x03, 0xC0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x00, 0x03, 0x00, 0x03, 0x80, 0x03, 0xE0, 0x00, 0x00, 0x00,  // Code for char ~ 
....................         0xFE, 0x0F, 0xFE, 0x0F, 0x02, 0x08, 0xFE, 0x0F, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char  
....................         }; 
....................  
....................  
....................  
.................... #include <font4.h> 
.................... //GLCD FontName : Arial12x16 
.................... //GLCD FontSize : 12 x 16 
....................  
.................... const unsigned char Font_12x16[99][24] = { 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char   
....................         0x00, 0x00, 0x00, 0x00, 0xFE, 0x6F, 0xFE, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ! 
....................         0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char " 
....................         0x30, 0x06, 0x30, 0x66, 0x30, 0x7F, 0xF8, 0x1F, 0xFE, 0x06, 0x36, 0x66, 0x30, 0x7F, 0xF8, 0x1F, 0xFE, 0x06, 0x36, 0x06, 0x30, 0x06, 0x00, 0x00,  // Code for char # 
....................         0x00, 0x00, 0x30, 0x08, 0x78, 0x18, 0xCC, 0x30, 0x84, 0x20, 0xFE, 0x7F, 0x84, 0x21, 0x0C, 0x33, 0x18, 0x1E, 0x10, 0x0C, 0x00, 0x00, 0x00, 0x00,  // Code for char $ 
....................         0x1C, 0x40, 0x3E, 0x70, 0x22, 0x38, 0x3E, 0x0E, 0x1C, 0x07, 0xC0, 0x01, 0xE0, 0x38, 0x38, 0x7C, 0x1E, 0x44, 0x06, 0x7C, 0x00, 0x38, 0x00, 0x00,  // Code for char % 
....................         0x00, 0x1E, 0x38, 0x3F, 0xFC, 0x73, 0xE6, 0x61, 0xC6, 0x61, 0xC6, 0x63, 0x7E, 0x36, 0x3C, 0x3C, 0x00, 0x18, 0x00, 0x3E, 0x00, 0x66, 0x00, 0x00,  // Code for char & 
....................         0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ' 
....................         0x00, 0x00, 0xF0, 0x07, 0xFE, 0x3F, 0x07, 0x70, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ( 
....................         0x00, 0x00, 0x01, 0x40, 0x07, 0x70, 0xFE, 0x3F, 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ) 
....................         0x00, 0x00, 0x48, 0x00, 0x68, 0x00, 0x1E, 0x00, 0x68, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char * 
....................         0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xF8, 0x1F, 0xF8, 0x1F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00,  // Code for char + 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xE0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char , 
....................         0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00,  // Code for char - 
....................         0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char . 
....................         0x00, 0x60, 0x00, 0x7C, 0xC0, 0x1F, 0xF8, 0x03, 0x3E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char / 
....................         0x00, 0x00, 0xF8, 0x1F, 0xFC, 0x3F, 0x0E, 0x70, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x0E, 0x70, 0xFC, 0x3F, 0xF8, 0x1F, 0x00, 0x00,  // Code for char 0 
....................         0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 1 
....................         0x00, 0x00, 0x18, 0x60, 0x1C, 0x70, 0x0E, 0x78, 0x06, 0x6C, 0x06, 0x66, 0x06, 0x66, 0x06, 0x63, 0x8E, 0x61, 0xFC, 0x60, 0x78, 0x60, 0x00, 0x00,  // Code for char 2 
....................         0x00, 0x00, 0x08, 0x18, 0x0C, 0x38, 0x06, 0x70, 0x06, 0x60, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xCE, 0x73, 0xFC, 0x3F, 0x78, 0x1E, 0x00, 0x00,  // Code for char 3 
....................         0x00, 0x00, 0x00, 0x0F, 0x80, 0x0F, 0xC0, 0x0C, 0x60, 0x0C, 0x30, 0x0C, 0x18, 0x0C, 0xFC, 0x7F, 0xFE, 0x7F, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x00,  // Code for char 4 
....................         0x00, 0x00, 0xFE, 0x19, 0xFE, 0x39, 0xC6, 0x70, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0xE6, 0x70, 0xC6, 0x3F, 0x86, 0x1F, 0x00, 0x00,  // Code for char 5 
....................         0x00, 0x00, 0xF8, 0x1F, 0xFC, 0x3F, 0x8E, 0x71, 0xC6, 0x60, 0xC6, 0x60, 0xC6, 0x60, 0xC6, 0x60, 0xC6, 0x71, 0x8C, 0x3F, 0x18, 0x1F, 0x00, 0x00,  // Code for char 6 
....................         0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x70, 0x06, 0x7C, 0x06, 0x0F, 0xC6, 0x03, 0xF6, 0x00, 0x3E, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x00, 0x00,  // Code for char 7 
....................         0x00, 0x00, 0x78, 0x1E, 0xFC, 0x3F, 0xCE, 0x73, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xCE, 0x73, 0xFC, 0x3F, 0x78, 0x1E, 0x00, 0x00,  // Code for char 8 
....................         0x00, 0x00, 0x78, 0x18, 0xFC, 0x38, 0xCE, 0x71, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xCE, 0x71, 0xFC, 0x3F, 0xF8, 0x1F, 0x00, 0x00,  // Code for char 9 
....................         0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char : 
....................         0x00, 0x00, 0x00, 0x00, 0x30, 0x58, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ; 
....................         0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0x80, 0x02, 0xC0, 0x06, 0xC0, 0x06, 0x40, 0x04, 0x60, 0x0C, 0x60, 0x0C, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00,  // Code for char < 
....................         0x00, 0x00, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00,  // Code for char = 
....................         0x00, 0x00, 0x30, 0x18, 0x60, 0x0C, 0x60, 0x0C, 0x40, 0x04, 0xC0, 0x06, 0xC0, 0x06, 0x80, 0x02, 0x80, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // Code for char > 
....................         0x00, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x0E, 0x00, 0x06, 0x6E, 0x06, 0x6F, 0x86, 0x03, 0xCE, 0x01, 0xFC, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ? 
....................         0xF0, 0x0F, 0x18, 0x18, 0xCC, 0x33, 0x64, 0x26, 0x36, 0x2C, 0x16, 0x2C, 0x16, 0x2E, 0xF6, 0x2B, 0xE6, 0x28, 0x0C, 0x24, 0xF8, 0x13, 0x00, 0x00,  // Code for char @ 
....................         0x00, 0x00, 0xE0, 0x7F, 0xF8, 0x7F, 0x3C, 0x03, 0x0E, 0x03, 0x06, 0x03, 0x06, 0x03, 0x0E, 0x03, 0x3C, 0x03, 0xF8, 0x7F, 0xE0, 0x7F, 0x00, 0x00,  // Code for char A 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0xCE, 0x61, 0xFC, 0x73, 0x78, 0x3E, 0x00, 0x1C, 0x00, 0x00,  // Code for char B 
....................         0x00, 0x00, 0xF0, 0x07, 0xF8, 0x1F, 0x1C, 0x38, 0x0E, 0x70, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x0E, 0x70, 0x1C, 0x38, 0x18, 0x18, 0x00, 0x00,  // Code for char C 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x0E, 0x70, 0x1C, 0x38, 0xF8, 0x1F, 0xE0, 0x0F, 0x00, 0x00,  // Code for char D 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x06, 0x60, 0x00, 0x00,  // Code for char E 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x06, 0x00, 0x00, 0x00,  // Code for char F 
....................         0x00, 0x00, 0xF0, 0x0F, 0xF8, 0x3F, 0x3C, 0x78, 0x0E, 0x70, 0x06, 0x70, 0x06, 0x63, 0x06, 0x63, 0x0E, 0x73, 0x1C, 0x77, 0x18, 0x3F, 0x00, 0x00,  // Code for char G 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00,  // Code for char H 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char I 
....................         0x00, 0x00, 0x00, 0x38, 0x00, 0x78, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0xFE, 0x3F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char J 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x80, 0x01, 0xE0, 0x01, 0xF0, 0x03, 0x38, 0x07, 0x1C, 0x1E, 0x0E, 0x38, 0x06, 0x70, 0x02, 0x60, 0x00, 0x00,  // Code for char K 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00,  // Code for char L 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0xF8, 0x01, 0xC0, 0x07, 0x00, 0x18, 0x00, 0x18, 0xC0, 0x07, 0xF8, 0x01, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00,  // Code for char M 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x3C, 0x00, 0x70, 0x00, 0xE0, 0x01, 0x80, 0x07, 0x00, 0x0E, 0x00, 0x38, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00,  // Code for char N 
....................         0xF0, 0x0F, 0xFC, 0x3F, 0x1C, 0x38, 0x0E, 0x70, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x0E, 0x70, 0x1C, 0x38, 0xFC, 0x3F, 0xF0, 0x0F, 0x00, 0x00,  // Code for char O 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x8E, 0x03, 0xFC, 0x01, 0xF8, 0x00, 0x00, 0x00,  // Code for char P 
....................         0x00, 0x00, 0xF8, 0x0F, 0xFC, 0x1F, 0x0E, 0x38, 0x06, 0x30, 0x06, 0x30, 0x06, 0x30, 0x06, 0x34, 0x0E, 0x38, 0xFC, 0x1F, 0xF8, 0x2F, 0x00, 0x00,  // Code for char Q 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x86, 0x01, 0x86, 0x01, 0x86, 0x01, 0x86, 0x03, 0x86, 0x0F, 0xCE, 0x1D, 0xFC, 0x78, 0x78, 0x70, 0x00, 0x00,  // Code for char R 
....................         0x00, 0x00, 0x78, 0x1C, 0xFC, 0x3C, 0xCE, 0x70, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x8E, 0x73, 0x1C, 0x3F, 0x18, 0x1E, 0x00, 0x00,  // Code for char S 
....................         0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00,  // Code for char T 
....................         0x00, 0x00, 0xFE, 0x0F, 0xFE, 0x3F, 0x00, 0x30, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x30, 0xFE, 0x3F, 0xFE, 0x0F, 0x00, 0x00,  // Code for char U 
....................         0x00, 0x00, 0x7E, 0x00, 0xFE, 0x01, 0xC0, 0x07, 0x00, 0x1F, 0x00, 0x60, 0x00, 0x60, 0x00, 0x1F, 0xC0, 0x07, 0xFE, 0x01, 0x7E, 0x00, 0x00, 0x00,  // Code for char V 
....................         0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x38, 0x00, 0x0F, 0xC0, 0x01, 0x30, 0x00, 0xC0, 0x01, 0x00, 0x0F, 0x00, 0x38, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00,  // Code for char W 
....................         0x00, 0x00, 0x02, 0x40, 0x0E, 0x70, 0x3C, 0x3C, 0x70, 0x0E, 0xC0, 0x03, 0xC0, 0x03, 0x70, 0x0E, 0x3C, 0x3C, 0x0E, 0x70, 0x02, 0x40, 0x00, 0x00,  // Code for char X 
....................         0x00, 0x00, 0x06, 0x00, 0x1E, 0x00, 0x38, 0x00, 0xE0, 0x00, 0xC0, 0x7F, 0xC0, 0x7F, 0x60, 0x00, 0x38, 0x00, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00,  // Code for char Y 
....................         0x00, 0x00, 0x06, 0x70, 0x06, 0x78, 0x06, 0x6E, 0x06, 0x67, 0x86, 0x61, 0xE6, 0x60, 0x76, 0x60, 0x1E, 0x60, 0x0E, 0x60, 0x06, 0x60, 0x00, 0x00,  // Code for char Z 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x06, 0x60, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char [ 
....................         0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x1C, 0x00, 0x78, 0x00, 0xE0, 0x01, 0x80, 0x07, 0x00, 0x1E, 0x00, 0x38, 0x00, 0x60, 0x00, 0x40, 0x00, 0x00,  // Code for char BackSlash 
....................         0x00, 0x00, 0x06, 0x60, 0x06, 0x60, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ] 
....................         0x00, 0x00, 0x80, 0x00, 0xF0, 0x00, 0x3C, 0x00, 0x06, 0x00, 0x3C, 0x00, 0xF0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ^ 
....................         0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char _ 
....................         0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ` 
....................         0x00, 0x00, 0xC0, 0x3C, 0xC0, 0x7E, 0x60, 0x66, 0x60, 0x66, 0x60, 0x63, 0x60, 0x33, 0xE0, 0x3F, 0xC0, 0x7F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,  // Code for char a 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0xC0, 0x30, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0x70, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00,  // Code for char b 
....................         0x00, 0x00, 0x80, 0x1F, 0xC0, 0x3F, 0xE0, 0x70, 0x60, 0x60, 0x60, 0x60, 0xE0, 0x70, 0xC0, 0x30, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char c 
....................         0x00, 0x00, 0x80, 0x1F, 0xC0, 0x3F, 0xE0, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xC0, 0x30, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00,  // Code for char d 
....................         0x00, 0x00, 0x80, 0x1F, 0xC0, 0x3F, 0xE0, 0x76, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0xE0, 0x66, 0xC0, 0x37, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,  // Code for char e 
....................         0x00, 0x00, 0x60, 0x00, 0xFC, 0x7F, 0xFE, 0x7F, 0x66, 0x00, 0x66, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char f 
....................         0x00, 0x00, 0xF8, 0x38, 0xFC, 0x71, 0x8E, 0x63, 0x06, 0x63, 0x06, 0x63, 0x06, 0x63, 0x06, 0x63, 0x0E, 0x73, 0xFC, 0x3F, 0xF8, 0x1F, 0x00, 0x00,  // Code for char g 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0xC0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xE0, 0x7F, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char h 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xF6, 0x7F, 0xF6, 0x7F, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char i 
....................         0x00, 0x00, 0x00, 0x20, 0x00, 0x60, 0x20, 0x60, 0xE6, 0x7F, 0xE6, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char j 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x03, 0x80, 0x07, 0xC0, 0x1F, 0xE0, 0x7C, 0x60, 0x70, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char k 
....................         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char l 
....................         0x00, 0x00, 0xC0, 0x7F, 0xE0, 0x7F, 0xE0, 0x00, 0xC0, 0x01, 0x80, 0x3F, 0x80, 0x3F, 0xC0, 0x01, 0xE0, 0x00, 0xE0, 0x7F, 0xC0, 0x7F, 0x00, 0x00,  // Code for char m 
....................         0x00, 0x00, 0xE0, 0x7F, 0xE0, 0x7F, 0xC0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xE0, 0x7F, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char n 
....................         0x00, 0x00, 0x80, 0x1F, 0xC0, 0x3F, 0xE0, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0x70, 0xC0, 0x3F, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00,  // Code for char o 
....................         0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x8C, 0x01, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x8E, 0x03, 0xFC, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char p 
....................         0x00, 0x00, 0xF8, 0x00, 0xFC, 0x01, 0x8E, 0x03, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x8C, 0x01, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00,  // Code for char q 
....................         0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x40, 0xC0, 0x7F, 0xC0, 0x7F, 0x60, 0x40, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x00, 0x00,  // Code for char r 
....................         0x00, 0x00, 0xC0, 0x11, 0xE0, 0x33, 0x60, 0x63, 0x60, 0x66, 0x60, 0x66, 0x60, 0x6C, 0xC0, 0x7C, 0x80, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char s 
....................         0x00, 0x00, 0x60, 0x00, 0xFC, 0x3F, 0xFC, 0x7F, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char t 
....................         0x00, 0x00, 0xE0, 0x3F, 0xE0, 0x7F, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x30, 0xE0, 0x7F, 0xE0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char u 
....................         0x00, 0x00, 0x60, 0x00, 0xE0, 0x03, 0x80, 0x0F, 0x00, 0x3C, 0x00, 0x70, 0x00, 0x3C, 0x80, 0x0F, 0xE0, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char v 
....................         0x00, 0x00, 0xE0, 0x3F, 0x00, 0x60, 0x00, 0x70, 0x80, 0x3F, 0xE0, 0x00, 0xE0, 0x00, 0x80, 0x1F, 0x00, 0x70, 0x00, 0x60, 0xE0, 0x3F, 0x00, 0x00,  // Code for char w 
....................         0x00, 0x00, 0x20, 0x40, 0x60, 0x60, 0xC0, 0x39, 0x80, 0x1F, 0x00, 0x06, 0x80, 0x1F, 0xC0, 0x39, 0x60, 0x60, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00,  // Code for char x 
....................         0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x3C, 0x00, 0xF0, 0x40, 0xC0, 0x63, 0x00, 0x7F, 0x80, 0x1F, 0xF0, 0x03, 0x7C, 0x00, 0x0C, 0x00, 0x00, 0x00,  // Code for char y 
....................         0x00, 0x00, 0x00, 0x70, 0x60, 0x78, 0x60, 0x7C, 0x60, 0x6E, 0x60, 0x66, 0x60, 0x63, 0xE0, 0x63, 0xE0, 0x61, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00,  // Code for char z 
....................         0x00, 0x00, 0x80, 0x01, 0xC0, 0x03, 0xFC, 0x3F, 0x7E, 0x7E, 0x06, 0x60, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char { 
....................         0x00, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char | 
....................         0x00, 0x00, 0x06, 0x60, 0x06, 0x60, 0x7E, 0x7E, 0xFC, 0x3F, 0xC0, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char } 
....................         0x00, 0x00, 0x00, 0x03, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x03, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,  // Code for char ~ 
....................         0x00, 0x00, 0xFC, 0x3F, 0x04, 0x20, 0x04, 0x20, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ' 
....................         0xF0, 0x3F, 0xF0, 0x7F, 0x06, 0x60, 0x06, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x06, 0x60, 0x06, 0x60, 0xF0, 0x7F, 0xF0, 0x3F, 0x00, 0x00,  // Code for char Ü 
....................         0xC0, 0x1F, 0xE0, 0x3F, 0x76, 0x70, 0x36, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x36, 0x60, 0x76, 0x70, 0xE0, 0x3F, 0xC0, 0x1F, 0x00, 0x00,  // Code for char Ö 
....................         0x00, 0x00, 0x38, 0x0C, 0x7C, 0x18, 0xEE, 0x18, 0xC6, 0x58, 0xC6, 0x78, 0xC6, 0x78, 0xC6, 0x18, 0xC6, 0x1D, 0x8C, 0x0F, 0x08, 0x07, 0x00, 0x00   // Code for char Þ 
....................        }; 
....................  
....................  
....................  
....................  
.................... #define PinA     pin_c0 
.................... #define PinB     pin_c1 
.................... #define PinOE    pin_c4                    //OE=0 Display OFF, OE=1 Display ON  
.................... #define LATCH    pin_c6                    //  
.................... //      PinSCK   pin_c3                    //Spi Clock Hattý 
.................... //      PinData  pin_c5                    //Spi Data Hattý 
.................... //      PWM_Pin  pin_c2                    // 
....................  
.................... //       _____ 
.................... // PWM__|     \ 
.................... // OE___| AND  }---- Disp_Enable  
.................... //      |_____/       
.................... // 
.................... //  P10 Led Board 
.................... //      1     2 
.................... // OE  --|oo|-- A 
.................... // GND --|oo|-- B 
.................... // GND --|oo|--  
.................... // GND --|oo|-- SCK 
.................... // GND --|oo|-- LATCH 
.................... // GND --|oo|-- DATA 
.................... // GND --|oo|-- 
.................... // GND --|oo|-- 
.................... //     15    16  
.................... // 
.................... #define Font1H   8 
.................... #define Font2H   12 
.................... #define Font3H   14 
.................... #define Font4H   16 
.................... #define Panel     1                        //P10 Panel Sayýsý 
.................... #define RIGHT     0                        // 
.................... #define LEFT      1                        // 
.................... #define WIDTH     31 
.................... #define HEIGHT    15 
....................  
.................... unsigned int8 display_ram[16][4];          //Bu Bölge Display Ram Alanýný belirtir 
.................... unsigned char Text[100]=""; 
.................... unsigned int8 imageBuffer[64]; 
....................  
.................... int1 LineScroll       (unsigned int Line, int1 Zerobit); 
.................... void clear_display    (int1 fill); 
.................... void invert_screen    (void); 
.................... void Set_Brightness   (int8 value); 
.................... void SetTextFont      (unsigned int Font); 
.................... void PutPixel         (unsigned int Xpos, unsigned int Ypos, int1 fill); 
.................... int1 GetPixel         (unsigned int Xpos, unsigned int Ypos); 
.................... void Line             (unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int1 fill); 
.................... void Rectangle        (unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int1 fill); 
.................... void Circle           (unsigned int x, unsigned int y, unsigned int size, int1 fill); 
.................... void Bargraph         (unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int1 hor, unsigned int value); 
.................... void ShowString       (unsigned int x, unsigned int y, unsigned int size, int1 fill); 
.................... void TextToLeftScroll (unsigned int Line, unsigned int Size, unsigned int speed, int1 fill); 
.................... void Writeimage       (void); 
....................  
.................... /***********************Türkçe KArakterler burada ayrýlýr**********************/ 
.................... int CharAdres(char c){ 
*
023CA:  MOVLB  1
023CC:  CLRF   x1A
....................   int adr=0; 
....................   switch(c) 
....................   { 
023CE:  MOVF   x19,W
023D0:  XORLW  DC
023D2:  MOVLB  0
023D4:  BZ    23E0
023D6:  XORLW  0A
023D8:  BZ    23E8
023DA:  XORLW  08
023DC:  BZ    23F0
023DE:  BRA    23F8
....................   case 'Ü':adr=96;break; 
023E0:  MOVLW  60
023E2:  MOVLB  1
023E4:  MOVWF  x1A
023E6:  BRA    2402
....................   case 'Ö':adr=97;break; 
023E8:  MOVLW  61
023EA:  MOVLB  1
023EC:  MOVWF  x1A
023EE:  BRA    2402
....................   case 'Þ':adr=98;break; 
023F0:  MOVLW  62
023F2:  MOVLB  1
023F4:  MOVWF  x1A
023F6:  BRA    2402
....................   default: 
....................     adr=c-32; 
023F8:  MOVLW  20
023FA:  MOVLB  1
023FC:  SUBWF  x19,W
023FE:  MOVWF  x1A
....................   break; 
02400:  BRA    2402
....................   } 
....................   return adr; 
02402:  MOVFF  11A,01
.................... } 
02406:  MOVLB  0
02408:  RETURN 0
....................  
.................... /******************************************************************************* 
.................... *   Satýr Kaydýrma Fonksiyonu                                                  * 
.................... *   Parameter:    Line, ZeroBit                                                * 
.................... *   Return:    OwerFlow                                                        * 
.................... *******************************************************************************/ 
.................... int1 LineScroll(unsigned int Line, int1 ZeroBit){ 
*
02608:  MOVLB  1
0260A:  CLRF   x1A
0260C:  CLRF   x19
0260E:  CLRF   x18
02610:  CLRF   x17
02612:  MOVF   x15,W
02614:  ANDLW  03
02616:  MOVWF  x1B
02618:  RRCF   x15,W
0261A:  MOVWF  x1C
0261C:  RRCF   x1C,F
0261E:  MOVLW  3F
02620:  ANDWF  x1C,F
....................   unsigned int32 Tam=0; 
....................   unsigned int y1=Line%4; 
....................   unsigned int y2=Line/4; 
....................   int1 OwerFlow; 
....................   ZeroBit=1-Zerobit; 
02622:  MOVLW  01
02624:  BSF    FD8.0
02626:  SUBFWB x16,F
....................    
....................   OwerFlow=(display_ram[(y2*4)][y1]/128)&0x01; 
02628:  MOVF   x1C,W
0262A:  MULLW  04
0262C:  MOVF   FF3,W
0262E:  MULLW  04
02630:  MOVF   FF3,W
02632:  CLRF   x1F
02634:  MOVWF  x1E
02636:  CLRF   03
02638:  MOVF   x1B,W
0263A:  ADDWF  x1E,W
0263C:  MOVWF  01
0263E:  MOVF   x1F,W
02640:  ADDWFC 03,F
02642:  MOVF   01,W
02644:  ADDLW  19
02646:  MOVWF  FE9
02648:  MOVLW  00
0264A:  ADDWFC 03,W
0264C:  MOVWF  FEA
0264E:  CLRF   00
02650:  BTFSC  FEF.7
02652:  BSF    00.0
02654:  MOVF   00,W
02656:  ANDLW  01
02658:  BCF    x1D.0
0265A:  BTFSC  FE8.0
0265C:  BSF    x1D.0
....................   Tam=display_ram[(y2*4)][y1]; 
0265E:  MOVF   x1C,W
02660:  MULLW  04
02662:  MOVF   FF3,W
02664:  MULLW  04
02666:  MOVF   FF3,W
02668:  CLRF   x1F
0266A:  MOVWF  x1E
0266C:  CLRF   03
0266E:  MOVF   x1B,W
02670:  ADDWF  x1E,W
02672:  MOVWF  01
02674:  MOVF   x1F,W
02676:  ADDWFC 03,F
02678:  MOVF   01,W
0267A:  ADDLW  19
0267C:  MOVWF  FE9
0267E:  MOVLW  00
02680:  ADDWFC 03,W
02682:  MOVWF  FEA
02684:  MOVFF  FEF,00
02688:  CLRF   01
0268A:  CLRF   02
0268C:  CLRF   03
0268E:  MOVFF  03,11A
02692:  MOVFF  02,119
02696:  MOVFF  01,118
0269A:  MOVFF  00,117
....................   Tam=Tam<<8; 
0269E:  MOVFF  119,11A
026A2:  MOVFF  118,119
026A6:  MOVFF  117,118
026AA:  CLRF   x17
....................   Tam=Tam+display_ram[(y2*4)+1][y1]; 
026AC:  MOVF   x1C,W
026AE:  MULLW  04
026B0:  MOVF   FF3,W
026B2:  ADDLW  01
026B4:  MULLW  04
026B6:  MOVF   FF3,W
026B8:  CLRF   x1F
026BA:  MOVWF  x1E
026BC:  CLRF   03
026BE:  MOVF   x1B,W
026C0:  ADDWF  x1E,W
026C2:  MOVWF  01
026C4:  MOVF   x1F,W
026C6:  ADDWFC 03,F
026C8:  MOVF   01,W
026CA:  ADDLW  19
026CC:  MOVWF  FE9
026CE:  MOVLW  00
026D0:  ADDWFC 03,W
026D2:  MOVWF  FEA
026D4:  MOVF   FEF,W
026D6:  ADDWF  x17,F
026D8:  MOVLW  00
026DA:  ADDWFC x18,F
026DC:  ADDWFC x19,F
026DE:  ADDWFC x1A,F
....................   Tam=Tam<<8; 
026E0:  MOVFF  119,11A
026E4:  MOVFF  118,119
026E8:  MOVFF  117,118
026EC:  CLRF   x17
....................   Tam=Tam+display_ram[(y2*4)+2][y1]; 
026EE:  MOVF   x1C,W
026F0:  MULLW  04
026F2:  MOVF   FF3,W
026F4:  ADDLW  02
026F6:  MULLW  04
026F8:  MOVF   FF3,W
026FA:  CLRF   x1F
026FC:  MOVWF  x1E
026FE:  CLRF   03
02700:  MOVF   x1B,W
02702:  ADDWF  x1E,W
02704:  MOVWF  01
02706:  MOVF   x1F,W
02708:  ADDWFC 03,F
0270A:  MOVF   01,W
0270C:  ADDLW  19
0270E:  MOVWF  FE9
02710:  MOVLW  00
02712:  ADDWFC 03,W
02714:  MOVWF  FEA
02716:  MOVF   FEF,W
02718:  ADDWF  x17,F
0271A:  MOVLW  00
0271C:  ADDWFC x18,F
0271E:  ADDWFC x19,F
02720:  ADDWFC x1A,F
....................   Tam=Tam<<8; 
02722:  MOVFF  119,11A
02726:  MOVFF  118,119
0272A:  MOVFF  117,118
0272E:  CLRF   x17
....................   Tam=Tam+display_ram[(y2*4)+3][y1]; 
02730:  MOVF   x1C,W
02732:  MULLW  04
02734:  MOVF   FF3,W
02736:  ADDLW  03
02738:  MULLW  04
0273A:  MOVF   FF3,W
0273C:  CLRF   x1F
0273E:  MOVWF  x1E
02740:  CLRF   03
02742:  MOVF   x1B,W
02744:  ADDWF  x1E,W
02746:  MOVWF  01
02748:  MOVF   x1F,W
0274A:  ADDWFC 03,F
0274C:  MOVF   01,W
0274E:  ADDLW  19
02750:  MOVWF  FE9
02752:  MOVLW  00
02754:  ADDWFC 03,W
02756:  MOVWF  FEA
02758:  MOVF   FEF,W
0275A:  ADDWF  x17,F
0275C:  MOVLW  00
0275E:  ADDWFC x18,F
02760:  ADDWFC x19,F
02762:  ADDWFC x1A,F
....................    
....................   Tam=Tam<<1; 
02764:  BCF    FD8.0
02766:  RLCF   x17,F
02768:  RLCF   x18,F
0276A:  RLCF   x19,F
0276C:  RLCF   x1A,F
....................   Tam=Tam+ZeroBit; 
0276E:  MOVF   x16,W
02770:  ADDWF  x17,F
02772:  MOVLW  00
02774:  ADDWFC x18,F
02776:  ADDWFC x19,F
02778:  ADDWFC x1A,F
....................    
....................   display_ram[(y2*4)  ][y1]=(int32)(Tam>>24)&0xFF; 
0277A:  MOVF   x1C,W
0277C:  MULLW  04
0277E:  MOVF   FF3,W
02780:  MULLW  04
02782:  MOVF   FF3,W
02784:  CLRF   x1F
02786:  MOVWF  x1E
02788:  CLRF   03
0278A:  MOVF   x1B,W
0278C:  ADDWF  x1E,W
0278E:  MOVWF  01
02790:  MOVF   x1F,W
02792:  ADDWFC 03,F
02794:  MOVF   01,W
02796:  ADDLW  19
02798:  MOVWF  FE9
0279A:  MOVLW  00
0279C:  ADDWFC 03,W
0279E:  MOVWF  FEA
027A0:  CLRF   01
027A2:  CLRF   02
027A4:  CLRF   03
027A6:  MOVFF  03,124
027AA:  MOVFF  02,123
027AE:  MOVFF  01,122
027B2:  MOVFF  11A,FEF
....................   display_ram[(y2*4)+1][y1]=(int32)(Tam>>16)&0xFF; 
027B6:  MOVF   x1C,W
027B8:  MULLW  04
027BA:  MOVF   FF3,W
027BC:  ADDLW  01
027BE:  MULLW  04
027C0:  MOVF   FF3,W
027C2:  CLRF   x1F
027C4:  MOVWF  x1E
027C6:  CLRF   03
027C8:  MOVF   x1B,W
027CA:  ADDWF  x1E,W
027CC:  MOVWF  01
027CE:  MOVF   x1F,W
027D0:  ADDWFC 03,F
027D2:  MOVF   01,W
027D4:  ADDLW  19
027D6:  MOVWF  FE9
027D8:  MOVLW  00
027DA:  ADDWFC 03,W
027DC:  MOVWF  FEA
027DE:  MOVFF  11A,01
027E2:  CLRF   02
027E4:  CLRF   03
027E6:  MOVFF  03,124
027EA:  MOVFF  02,123
027EE:  MOVFF  119,FEF
....................   display_ram[(y2*4)+2][y1]=(int32)(Tam>>8)&0xFF; 
027F2:  MOVF   x1C,W
027F4:  MULLW  04
027F6:  MOVF   FF3,W
027F8:  ADDLW  02
027FA:  MULLW  04
027FC:  MOVF   FF3,W
027FE:  CLRF   x1F
02800:  MOVWF  x1E
02802:  CLRF   03
02804:  MOVF   x1B,W
02806:  ADDWF  x1E,W
02808:  MOVWF  01
0280A:  MOVF   x1F,W
0280C:  ADDWFC 03,F
0280E:  MOVF   01,W
02810:  ADDLW  19
02812:  MOVWF  FE9
02814:  MOVLW  00
02816:  ADDWFC 03,W
02818:  MOVWF  FEA
0281A:  MOVFF  119,01
0281E:  MOVFF  11A,02
02822:  CLRF   03
02824:  MOVFF  03,124
02828:  MOVFF  118,FEF
....................   display_ram[(y2*4)+3][y1]=(int32)(Tam&0xFF); 
0282C:  MOVF   x1C,W
0282E:  MULLW  04
02830:  MOVF   FF3,W
02832:  ADDLW  03
02834:  MULLW  04
02836:  MOVF   FF3,W
02838:  CLRF   x1F
0283A:  MOVWF  x1E
0283C:  CLRF   03
0283E:  MOVF   x1B,W
02840:  ADDWF  x1E,W
02842:  MOVWF  01
02844:  MOVF   x1F,W
02846:  ADDWFC 03,F
02848:  MOVF   01,W
0284A:  ADDLW  19
0284C:  MOVWF  FE9
0284E:  MOVLW  00
02850:  ADDWFC 03,W
02852:  MOVWF  FEA
02854:  MOVFF  117,FEF
....................    
....................   Return OwerFlow; 
02858:  MOVLW  00
0285A:  BTFSC  x1D.0
0285C:  MOVLW  01
0285E:  MOVWF  01
.................... } 
02860:  MOVLB  0
02862:  RETURN 0
.................... /******************************************************************************* 
.................... *   Text Basma Fonksiyonu  Font1                                               * 
.................... *   Parameter:    x, y, Fill                                                   * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void DrawCharFont1(unsigned x, unsigned y, int1 fill){ 
*
01FF6:  MOVLB  1
01FF8:  CLRF   x11
01FFA:  CLRF   x12
01FFC:  CLRF   x13
01FFE:  CLRF   x14
02000:  MOVFF  10E,115
02004:  MOVFF  10F,116
.................... unsigned int a=0,b=0,i=0; 
.................... unsigned int cdata=0; 
.................... unsigned int clm=x,row=y; 
....................       
....................      While (Text[i]!='\0') 
....................      { 
02008:  CLRF   03
0200A:  MOVF   x13,W
0200C:  ADDLW  59
0200E:  MOVWF  FE9
02010:  MOVLW  00
02012:  ADDWFC 03,W
02014:  MOVWF  FEA
02016:  MOVF   FEF,F
02018:  BZ    20D0
....................       if(clm+5>WIDTH)  //Satýr sonuna gelindimi Bir Alt Satýra Geç 
0201A:  MOVLW  05
0201C:  ADDWF  x15,W
0201E:  SUBLW  1F
02020:  BC    2030
....................       {  
....................         clm=0;          
02022:  CLRF   x15
....................         row=row+8; 
02024:  MOVLW  08
02026:  ADDWF  x16,F
....................         if(row+8>HEIGHT+1) break; 
02028:  ADDWF  x16,W
0202A:  SUBLW  10
0202C:  BC    2030
0202E:  BRA    20D0
....................       } 
....................       
....................       for(b=0;b<5;b++) 
02030:  CLRF   x12
02032:  MOVF   x12,W
02034:  SUBLW  04
02036:  BNC   20C8
....................       { 
....................        cdata=Font_5x7[Text[i]-32][b]; 
02038:  CLRF   03
0203A:  MOVF   x13,W
0203C:  ADDLW  59
0203E:  MOVWF  FE9
02040:  MOVLW  00
02042:  ADDWFC 03,W
02044:  MOVWF  FEA
02046:  MOVLW  20
02048:  SUBWF  FEF,W
0204A:  MOVWF  x18
0204C:  CLRF   x1A
0204E:  MOVWF  x19
02050:  CLRF   x1C
02052:  MOVLW  05
02054:  MOVWF  x1B
02056:  MOVLB  0
02058:  RCALL  1E28
0205A:  MOVFF  02,118
0205E:  MOVFF  01,117
02062:  MOVLB  1
02064:  MOVF   x12,W
02066:  ADDWF  01,W
02068:  MOVWF  01
0206A:  MOVLW  00
0206C:  ADDWFC 02,W
0206E:  MOVWF  03
02070:  MOVF   01,W
02072:  MOVFF  03,FF7
02076:  MOVLB  0
02078:  CALL   00AE
0207C:  MOVFF  FE8,114
....................        for(a=0;a<8;a++) 
02080:  MOVLB  1
02082:  CLRF   x11
02084:  MOVF   x11,W
02086:  SUBLW  07
02088:  BNC   20C4
....................        { 
....................           PutPixel(clm+b,row+a,(fill-(cdata>>a) & 0x01)); 
0208A:  MOVF   x12,W
0208C:  ADDWF  x15,W
0208E:  MOVWF  x17
02090:  MOVF   x11,W
02092:  ADDWF  x16,W
02094:  MOVWF  x18
02096:  MOVFF  114,00
0209A:  MOVF   x11,W
0209C:  MOVWF  01
0209E:  BZ    20A8
020A0:  BCF    FD8.0
020A2:  RRCF   00,F
020A4:  DECFSZ 01,F
020A6:  BRA    20A0
020A8:  MOVF   00,W
020AA:  SUBWF  x10,W
020AC:  ANDLW  01
020AE:  MOVWF  x19
020B0:  MOVFF  117,124
020B4:  MOVFF  118,125
020B8:  MOVWF  x26
020BA:  MOVLB  0
020BC:  RCALL  1EE4
....................        } 
020BE:  MOVLB  1
020C0:  INCF   x11,F
020C2:  BRA    2084
....................       } 
020C4:  INCF   x12,F
020C6:  BRA    2032
....................        
....................       i++; 
020C8:  INCF   x13,F
....................       clm=clm+6; 
020CA:  MOVLW  06
020CC:  ADDWF  x15,F
....................      }   
020CE:  BRA    2008
.................... } 
020D0:  MOVLB  0
020D2:  GOTO   25DC (RETURN)
.................... /******************************************************************************* 
.................... *   Text Basma Fonksiyonu  Font2                                               * 
.................... *   Parameter:    x, y, Fill                                                   * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void DrawCharFont2(unsigned int x, unsigned int y, int1 fill){ 
020D6:  MOVLB  1
020D8:  CLRF   x11
020DA:  CLRF   x12
020DC:  CLRF   x13
020DE:  CLRF   x14
020E0:  MOVFF  10E,115
020E4:  MOVFF  10F,116
.................... unsigned int a=0,b=0,i=0; 
.................... unsigned int cdata=0; 
.................... unsigned int clm=x,row=y; 
....................  
....................   while(Text[i]!='\0') 
....................   {   
020E8:  CLRF   03
020EA:  MOVF   x13,W
020EC:  ADDLW  59
020EE:  MOVWF  FE9
020F0:  MOVLW  00
020F2:  ADDWFC 03,W
020F4:  MOVWF  FEA
020F6:  MOVF   FEF,F
020F8:  BTFSC  FD8.2
020FA:  BRA    224A
....................       if(clm+8>WIDTH)  //Satýr sonuna gelindimi Bir Alt Satýra Geç 
020FC:  MOVLW  08
020FE:  ADDWF  x15,W
02100:  SUBLW  1F
02102:  BC    2112
....................       {  
....................         clm=0;          
02104:  CLRF   x15
....................         row=row+12; 
02106:  MOVLW  0C
02108:  ADDWF  x16,F
....................         if(row+12>HEIGHT+1) break; 
0210A:  ADDWF  x16,W
0210C:  SUBLW  10
0210E:  BC    2112
02110:  BRA    224A
....................       } 
....................        
....................        for(b=0;b<16;b=b+2) 
02112:  CLRF   x12
02114:  MOVF   x12,W
02116:  SUBLW  0F
02118:  BTFSS  FD8.0
0211A:  BRA    2242
....................        { 
....................          cdata=Font_8x12[Text[i]-32][b]; 
0211C:  CLRF   03
0211E:  MOVF   x13,W
02120:  ADDLW  59
02122:  MOVWF  FE9
02124:  MOVLW  00
02126:  ADDWFC 03,W
02128:  MOVWF  FEA
0212A:  MOVLW  20
0212C:  SUBWF  FEF,W
0212E:  MOVWF  x18
02130:  CLRF   x1A
02132:  MOVWF  x19
02134:  CLRF   x1C
02136:  MOVLW  10
02138:  MOVWF  x1B
0213A:  MOVLB  0
0213C:  RCALL  1E28
0213E:  MOVFF  02,118
02142:  MOVFF  01,117
02146:  MOVLB  1
02148:  MOVF   x12,W
0214A:  ADDWF  01,W
0214C:  MOVWF  01
0214E:  MOVLW  00
02150:  ADDWFC 02,W
02152:  MOVWF  03
02154:  MOVF   01,W
02156:  MOVFF  03,FF7
0215A:  MOVLB  0
0215C:  CALL   029C
02160:  MOVFF  FE8,114
....................          for(a=0;a<8;a++) 
02164:  MOVLB  1
02166:  CLRF   x11
02168:  MOVF   x11,W
0216A:  SUBLW  07
0216C:  BNC   21AA
....................          { 
....................            PutPixel(clm+(b/2),row+a,(fill-(cdata>>a) & 0x01)); 
0216E:  BCF    FD8.0
02170:  RRCF   x12,W
02172:  ADDWF  x15,W
02174:  MOVWF  x17
02176:  MOVF   x11,W
02178:  ADDWF  x16,W
0217A:  MOVWF  x18
0217C:  MOVFF  114,00
02180:  MOVF   x11,W
02182:  MOVWF  01
02184:  BZ    218E
02186:  BCF    FD8.0
02188:  RRCF   00,F
0218A:  DECFSZ 01,F
0218C:  BRA    2186
0218E:  MOVF   00,W
02190:  SUBWF  x10,W
02192:  ANDLW  01
02194:  MOVWF  x19
02196:  MOVFF  117,124
0219A:  MOVFF  118,125
0219E:  MOVWF  x26
021A0:  MOVLB  0
021A2:  RCALL  1EE4
....................          } 
021A4:  MOVLB  1
021A6:  INCF   x11,F
021A8:  BRA    2168
....................          cdata=Font_8x12[Text[i]-32][b+1]; 
021AA:  CLRF   03
021AC:  MOVF   x13,W
021AE:  ADDLW  59
021B0:  MOVWF  FE9
021B2:  MOVLW  00
021B4:  ADDWFC 03,W
021B6:  MOVWF  FEA
021B8:  MOVLW  20
021BA:  SUBWF  FEF,W
021BC:  MOVWF  x18
021BE:  CLRF   x1A
021C0:  MOVWF  x19
021C2:  CLRF   x1C
021C4:  MOVLW  10
021C6:  MOVWF  x1B
021C8:  MOVLB  0
021CA:  RCALL  1E28
021CC:  MOVFF  02,118
021D0:  MOVFF  01,117
021D4:  MOVLW  01
021D6:  MOVLB  1
021D8:  ADDWF  x12,W
021DA:  ADDWF  01,W
021DC:  MOVWF  01
021DE:  MOVLW  00
021E0:  ADDWFC 02,W
021E2:  MOVWF  03
021E4:  MOVF   01,W
021E6:  MOVFF  03,FF7
021EA:  MOVLB  0
021EC:  CALL   029C
021F0:  MOVFF  FE8,114
....................          for(a=0;a<4;a++) 
021F4:  MOVLB  1
021F6:  CLRF   x11
021F8:  MOVF   x11,W
021FA:  SUBLW  03
021FC:  BNC   223C
....................          { 
....................            PutPixel(clm+(b/2),row+8+a,(fill-(cdata>>a) & 0x01)); 
021FE:  BCF    FD8.0
02200:  RRCF   x12,W
02202:  ADDWF  x15,W
02204:  MOVWF  x17
02206:  MOVLW  08
02208:  ADDWF  x16,W
0220A:  ADDWF  x11,W
0220C:  MOVWF  x18
0220E:  MOVFF  114,00
02212:  MOVF   x11,W
02214:  MOVWF  01
02216:  BZ    2220
02218:  BCF    FD8.0
0221A:  RRCF   00,F
0221C:  DECFSZ 01,F
0221E:  BRA    2218
02220:  MOVF   00,W
02222:  SUBWF  x10,W
02224:  ANDLW  01
02226:  MOVWF  x19
02228:  MOVFF  117,124
0222C:  MOVFF  118,125
02230:  MOVWF  x26
02232:  MOVLB  0
02234:  RCALL  1EE4
....................          } 
02236:  MOVLB  1
02238:  INCF   x11,F
0223A:  BRA    21F8
....................        } 
0223C:  MOVLW  02
0223E:  ADDWF  x12,F
02240:  BRA    2114
....................      clm=clm+8; 
02242:  MOVLW  08
02244:  ADDWF  x15,F
....................      i++; 
02246:  INCF   x13,F
....................   } 
02248:  BRA    20E8
.................... } 
0224A:  MOVLB  0
0224C:  GOTO   25DC (RETURN)
.................... /******************************************************************************* 
.................... *   Text Basma Fonksiyonu  Font3                                               * 
.................... *   Parameter:    x, y, Fill                                                   * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void DrawCharFont3(unsigned int x, unsigned int y, int1 fill){ 
02250:  MOVLB  1
02252:  CLRF   x11
02254:  CLRF   x12
02256:  CLRF   x13
02258:  CLRF   x14
0225A:  MOVFF  10E,115
0225E:  MOVFF  10F,116
.................... unsigned int a=0,b=0,i=0; 
.................... unsigned int cdata=0; 
.................... unsigned int clm=x,row=y; 
....................  
....................   while(Text[i]!='\0') 
....................   {   
02262:  CLRF   03
02264:  MOVF   x13,W
02266:  ADDLW  59
02268:  MOVWF  FE9
0226A:  MOVLW  00
0226C:  ADDWFC 03,W
0226E:  MOVWF  FEA
02270:  MOVF   FEF,F
02272:  BTFSC  FD8.2
02274:  BRA    23C4
....................       if(clm+12>WIDTH)  //Satýr sonuna gelindimi Bir Alt Satýra Geç 
02276:  MOVLW  0C
02278:  ADDWF  x15,W
0227A:  SUBLW  1F
0227C:  BC    228C
....................       {  
....................         clm=0;          
0227E:  CLRF   x15
....................         row=row+14; 
02280:  MOVLW  0E
02282:  ADDWF  x16,F
....................         if(row+14>HEIGHT+1) break; 
02284:  ADDWF  x16,W
02286:  SUBLW  10
02288:  BC    228C
0228A:  BRA    23C4
....................       } 
....................        
....................        for(b=0;b<24;b=b+2) 
0228C:  CLRF   x12
0228E:  MOVF   x12,W
02290:  SUBLW  17
02292:  BTFSS  FD8.0
02294:  BRA    23BC
....................        { 
....................          cdata=Font_12x14[Text[i]-32][b]; 
02296:  CLRF   03
02298:  MOVF   x13,W
0229A:  ADDLW  59
0229C:  MOVWF  FE9
0229E:  MOVLW  00
022A0:  ADDWFC 03,W
022A2:  MOVWF  FEA
022A4:  MOVLW  20
022A6:  SUBWF  FEF,W
022A8:  MOVWF  x18
022AA:  CLRF   x1A
022AC:  MOVWF  x19
022AE:  CLRF   x1C
022B0:  MOVLW  18
022B2:  MOVWF  x1B
022B4:  MOVLB  0
022B6:  RCALL  1E28
022B8:  MOVFF  02,118
022BC:  MOVFF  01,117
022C0:  MOVLB  1
022C2:  MOVF   x12,W
022C4:  ADDWF  01,W
022C6:  MOVWF  01
022C8:  MOVLW  00
022CA:  ADDWFC 02,W
022CC:  MOVWF  03
022CE:  MOVF   01,W
022D0:  MOVFF  03,FF7
022D4:  MOVLB  0
022D6:  CALL   08AA
022DA:  MOVFF  FE8,114
....................          for(a=0;a<8;a++) 
022DE:  MOVLB  1
022E0:  CLRF   x11
022E2:  MOVF   x11,W
022E4:  SUBLW  07
022E6:  BNC   2324
....................          { 
....................            PutPixel(clm+(b/2),row+a,(fill-(cdata>>a) & 0x01)); 
022E8:  BCF    FD8.0
022EA:  RRCF   x12,W
022EC:  ADDWF  x15,W
022EE:  MOVWF  x17
022F0:  MOVF   x11,W
022F2:  ADDWF  x16,W
022F4:  MOVWF  x18
022F6:  MOVFF  114,00
022FA:  MOVF   x11,W
022FC:  MOVWF  01
022FE:  BZ    2308
02300:  BCF    FD8.0
02302:  RRCF   00,F
02304:  DECFSZ 01,F
02306:  BRA    2300
02308:  MOVF   00,W
0230A:  SUBWF  x10,W
0230C:  ANDLW  01
0230E:  MOVWF  x19
02310:  MOVFF  117,124
02314:  MOVFF  118,125
02318:  MOVWF  x26
0231A:  MOVLB  0
0231C:  RCALL  1EE4
....................          } 
0231E:  MOVLB  1
02320:  INCF   x11,F
02322:  BRA    22E2
....................          cdata=Font_12x14[Text[i]-32][b+1]; 
02324:  CLRF   03
02326:  MOVF   x13,W
02328:  ADDLW  59
0232A:  MOVWF  FE9
0232C:  MOVLW  00
0232E:  ADDWFC 03,W
02330:  MOVWF  FEA
02332:  MOVLW  20
02334:  SUBWF  FEF,W
02336:  MOVWF  x18
02338:  CLRF   x1A
0233A:  MOVWF  x19
0233C:  CLRF   x1C
0233E:  MOVLW  18
02340:  MOVWF  x1B
02342:  MOVLB  0
02344:  RCALL  1E28
02346:  MOVFF  02,118
0234A:  MOVFF  01,117
0234E:  MOVLW  01
02350:  MOVLB  1
02352:  ADDWF  x12,W
02354:  ADDWF  01,W
02356:  MOVWF  01
02358:  MOVLW  00
0235A:  ADDWFC 02,W
0235C:  MOVWF  03
0235E:  MOVF   01,W
02360:  MOVFF  03,FF7
02364:  MOVLB  0
02366:  CALL   08AA
0236A:  MOVFF  FE8,114
....................          for(a=0;a<6;a++) 
0236E:  MOVLB  1
02370:  CLRF   x11
02372:  MOVF   x11,W
02374:  SUBLW  05
02376:  BNC   23B6
....................          { 
....................            PutPixel(clm+(b/2),row+8+a,(fill-(cdata>>a) & 0x01)); 
02378:  BCF    FD8.0
0237A:  RRCF   x12,W
0237C:  ADDWF  x15,W
0237E:  MOVWF  x17
02380:  MOVLW  08
02382:  ADDWF  x16,W
02384:  ADDWF  x11,W
02386:  MOVWF  x18
02388:  MOVFF  114,00
0238C:  MOVF   x11,W
0238E:  MOVWF  01
02390:  BZ    239A
02392:  BCF    FD8.0
02394:  RRCF   00,F
02396:  DECFSZ 01,F
02398:  BRA    2392
0239A:  MOVF   00,W
0239C:  SUBWF  x10,W
0239E:  ANDLW  01
023A0:  MOVWF  x19
023A2:  MOVFF  117,124
023A6:  MOVFF  118,125
023AA:  MOVWF  x26
023AC:  MOVLB  0
023AE:  RCALL  1EE4
....................          } 
023B0:  MOVLB  1
023B2:  INCF   x11,F
023B4:  BRA    2372
....................        } 
023B6:  MOVLW  02
023B8:  ADDWF  x12,F
023BA:  BRA    228E
....................      clm=clm+12; 
023BC:  MOVLW  0C
023BE:  ADDWF  x15,F
....................      i++; 
023C0:  INCF   x13,F
....................   } 
023C2:  BRA    2262
.................... } 
023C4:  MOVLB  0
023C6:  GOTO   25DC (RETURN)
.................... /******************************************************************************* 
.................... *   Text Basma Fonksiyonu  Font4                                               * 
.................... *   Parameter:    x, y, Fill                                                   * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void DrawCharFont4(unsigned int x, unsigned int y, int1 fill){ 
*
0240A:  MOVLB  1
0240C:  CLRF   x11
0240E:  CLRF   x12
02410:  CLRF   x13
02412:  CLRF   x14
02414:  CLRF   x15
02416:  MOVFF  10E,116
0241A:  MOVFF  10F,117
.................... unsigned int a=0,b=0,i=0; 
.................... unsigned int cdata=0; 
.................... unsigned int cadr=0; 
.................... unsigned int clm=x,row=y; 
....................  
....................   while(Text[i]!='\0') 
....................   {   
0241E:  CLRF   03
02420:  MOVF   x13,W
02422:  ADDLW  59
02424:  MOVWF  FE9
02426:  MOVLW  00
02428:  ADDWFC 03,W
0242A:  MOVWF  FEA
0242C:  MOVF   FEF,F
0242E:  BTFSC  FD8.2
02430:  BRA    257C
....................        if(clm+12>WIDTH)  //Satýr sonuna gelindimi Bir Alt Satýra Geç 
02432:  MOVLW  0C
02434:  ADDWF  x16,W
02436:  SUBLW  1F
02438:  BC    2448
....................        {  
....................          clm=0;          
0243A:  CLRF   x16
....................          row=row+16; 
0243C:  MOVLW  10
0243E:  ADDWF  x17,F
....................          if(row+16>HEIGHT+1) break; 
02440:  ADDWF  x17,W
02442:  SUBLW  10
02444:  BC    2448
02446:  BRA    257C
....................        } 
....................         
....................        cadr=CharAdres(Text[i]); 
02448:  CLRF   03
0244A:  MOVF   x13,W
0244C:  ADDLW  59
0244E:  MOVWF  FE9
02450:  MOVLW  00
02452:  ADDWFC 03,W
02454:  MOVWF  FEA
02456:  MOVFF  FEF,118
0245A:  MOVFF  118,119
0245E:  MOVLB  0
02460:  RCALL  23CA
02462:  MOVFF  01,115
....................        
....................        for(b=0;b<24;b=b+2) 
02466:  MOVLB  1
02468:  CLRF   x12
0246A:  MOVF   x12,W
0246C:  SUBLW  17
0246E:  BTFSS  FD8.0
02470:  BRA    2574
....................        { 
....................          cdata=Font_12x16[cadr][b]; 
02472:  CLRF   x1A
02474:  MOVFF  115,119
02478:  CLRF   x1C
0247A:  MOVLW  18
0247C:  MOVWF  x1B
0247E:  MOVLB  0
02480:  RCALL  1E28
02482:  MOVFF  02,119
02486:  MOVFF  01,118
0248A:  MOVLB  1
0248C:  MOVF   x12,W
0248E:  ADDWF  01,W
02490:  MOVWF  01
02492:  MOVLW  00
02494:  ADDWFC 02,W
02496:  MOVWF  03
02498:  MOVF   01,W
0249A:  MOVFF  03,FF7
0249E:  MOVLB  0
024A0:  CALL   11B8
024A4:  MOVFF  FE8,114
....................          for(a=0;a<8;a++) 
024A8:  MOVLB  1
024AA:  CLRF   x11
024AC:  MOVF   x11,W
024AE:  SUBLW  07
024B0:  BNC   24EE
....................          { 
....................            PutPixel(clm+(b/2),row+a,(fill-(cdata>>a) & 0x01)); 
024B2:  BCF    FD8.0
024B4:  RRCF   x12,W
024B6:  ADDWF  x16,W
024B8:  MOVWF  x18
024BA:  MOVF   x11,W
024BC:  ADDWF  x17,W
024BE:  MOVWF  x19
024C0:  MOVFF  114,00
024C4:  MOVF   x11,W
024C6:  MOVWF  01
024C8:  BZ    24D2
024CA:  BCF    FD8.0
024CC:  RRCF   00,F
024CE:  DECFSZ 01,F
024D0:  BRA    24CA
024D2:  MOVF   00,W
024D4:  SUBWF  x10,W
024D6:  ANDLW  01
024D8:  MOVWF  x1A
024DA:  MOVFF  118,124
024DE:  MOVFF  119,125
024E2:  MOVWF  x26
024E4:  MOVLB  0
024E6:  RCALL  1EE4
....................          } 
024E8:  MOVLB  1
024EA:  INCF   x11,F
024EC:  BRA    24AC
....................          cdata=Font_12x16[cadr][b+1]; 
024EE:  CLRF   x1A
024F0:  MOVFF  115,119
024F4:  CLRF   x1C
024F6:  MOVLW  18
024F8:  MOVWF  x1B
024FA:  MOVLB  0
024FC:  RCALL  1E28
024FE:  MOVFF  02,119
02502:  MOVFF  01,118
02506:  MOVLW  01
02508:  MOVLB  1
0250A:  ADDWF  x12,W
0250C:  ADDWF  01,W
0250E:  MOVWF  01
02510:  MOVLW  00
02512:  ADDWFC 02,W
02514:  MOVWF  03
02516:  MOVF   01,W
02518:  MOVFF  03,FF7
0251C:  MOVLB  0
0251E:  CALL   11B8
02522:  MOVFF  FE8,114
....................          for(a=0;a<8;a++) 
02526:  MOVLB  1
02528:  CLRF   x11
0252A:  MOVF   x11,W
0252C:  SUBLW  07
0252E:  BNC   256E
....................          { 
....................            PutPixel(clm+(b/2),row+8+a,(fill-(cdata>>a) & 0x01)); 
02530:  BCF    FD8.0
02532:  RRCF   x12,W
02534:  ADDWF  x16,W
02536:  MOVWF  x18
02538:  MOVLW  08
0253A:  ADDWF  x17,W
0253C:  ADDWF  x11,W
0253E:  MOVWF  x19
02540:  MOVFF  114,00
02544:  MOVF   x11,W
02546:  MOVWF  01
02548:  BZ    2552
0254A:  BCF    FD8.0
0254C:  RRCF   00,F
0254E:  DECFSZ 01,F
02550:  BRA    254A
02552:  MOVF   00,W
02554:  SUBWF  x10,W
02556:  ANDLW  01
02558:  MOVWF  x1A
0255A:  MOVFF  118,124
0255E:  MOVFF  119,125
02562:  MOVWF  x26
02564:  MOVLB  0
02566:  RCALL  1EE4
....................          } 
02568:  MOVLB  1
0256A:  INCF   x11,F
0256C:  BRA    252A
....................        } 
0256E:  MOVLW  02
02570:  ADDWF  x12,F
02572:  BRA    246A
....................      clm=clm+12; 
02574:  MOVLW  0C
02576:  ADDWF  x16,F
....................      i++; 
02578:  INCF   x13,F
....................   } 
0257A:  BRA    241E
.................... } 
0257C:  MOVLB  0
0257E:  GOTO   25DC (RETURN)
.................... /******************************************************************************* 
.................... *   Text Kaydýrma Fonksiyonu  Font1                                            * 
.................... *   Parameter:    Line, Speed, Fill                                            * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void ScrollTextFont1 (unsigned int Line, unsigned int speed,int1 fill){ 
*
02D96:  MOVLB  1
02D98:  CLRF   x09
02D9A:  CLRF   x0A
02D9C:  CLRF   x0B
02D9E:  CLRF   x0C
02DA0:  MOVF   x07,W
02DA2:  MULLW  14
02DA4:  MOVF   FF3,W
02DA6:  CLRF   x0E
02DA8:  MOVWF  x0D
02DAA:  BCF    x0F.0
....................   unsigned int a=0,b=0,i=0; 
....................   unsigned int cdata=0; 
....................   unsigned int16 delay=speed*20; 
....................   int1 ZeroBit=0;  
....................    
....................   While(Text[i]!='\0') 
....................   { 
02DAC:  CLRF   03
02DAE:  MOVF   x0B,W
02DB0:  ADDLW  59
02DB2:  MOVWF  FE9
02DB4:  MOVLW  00
02DB6:  ADDWFC 03,W
02DB8:  MOVWF  FEA
02DBA:  MOVF   FEF,F
02DBC:  BTFSC  FD8.2
02DBE:  BRA    2EEC
....................     if(Line+Font1H-1>HEIGHT)Break; 
02DC0:  MOVLW  08
02DC2:  ADDWF  x06,W
02DC4:  ADDLW  FF
02DC6:  SUBLW  0F
02DC8:  BC    2DCC
02DCA:  BRA    2EEC
....................     for(b=0;b<5;b++) 
02DCC:  CLRF   x0A
02DCE:  MOVF   x0A,W
02DD0:  SUBLW  04
02DD2:  BNC   2E9A
....................     { 
....................       cdata=Font_5x7[Text[i]-32][b]; 
02DD4:  CLRF   03
02DD6:  MOVF   x0B,W
02DD8:  ADDLW  59
02DDA:  MOVWF  FE9
02DDC:  MOVLW  00
02DDE:  ADDWFC 03,W
02DE0:  MOVWF  FEA
02DE2:  MOVLW  20
02DE4:  SUBWF  FEF,W
02DE6:  MOVWF  x11
02DE8:  CLRF   x1A
02DEA:  MOVWF  x19
02DEC:  CLRF   x1C
02DEE:  MOVLW  05
02DF0:  MOVWF  x1B
02DF2:  MOVLB  0
02DF4:  CALL   1E28
02DF8:  MOVFF  02,111
02DFC:  MOVFF  01,110
02E00:  MOVLB  1
02E02:  MOVF   x0A,W
02E04:  ADDWF  01,W
02E06:  MOVWF  01
02E08:  MOVLW  00
02E0A:  ADDWFC 02,W
02E0C:  MOVWF  03
02E0E:  MOVF   01,W
02E10:  MOVFF  03,FF7
02E14:  MOVLB  0
02E16:  CALL   00AE
02E1A:  MOVFF  FE8,10C
....................       for (a=0;a<8;a++) 
02E1E:  MOVLB  1
02E20:  CLRF   x09
02E22:  MOVF   x09,W
02E24:  SUBLW  07
02E26:  BNC   2E66
....................       { 
....................         ZeroBit=fill-(cdata>>a) & 0x01; 
02E28:  MOVFF  10C,00
02E2C:  MOVF   x09,W
02E2E:  MOVWF  01
02E30:  BZ    2E3A
02E32:  BCF    FD8.0
02E34:  RRCF   00,F
02E36:  DECFSZ 01,F
02E38:  BRA    2E32
02E3A:  MOVF   00,W
02E3C:  SUBWF  x08,W
02E3E:  ANDLW  01
02E40:  BCF    x0F.0
02E42:  BTFSC  FE8.0
02E44:  BSF    x0F.0
....................         LineScroll(Line+a,ZeroBit); 
02E46:  MOVF   x09,W
02E48:  ADDWF  x06,W
02E4A:  MOVWF  x10
02E4C:  MOVLW  00
02E4E:  BTFSC  x0F.0
02E50:  MOVLW  01
02E52:  MOVWF  x11
02E54:  MOVFF  110,115
02E58:  MOVWF  x16
02E5A:  MOVLB  0
02E5C:  CALL   2608
....................       } 
02E60:  MOVLB  1
02E62:  INCF   x09,F
02E64:  BRA    2E22
....................       delay_Ms(210-delay); 
02E66:  MOVLW  D2
02E68:  BSF    FD8.0
02E6A:  SUBFWB x0D,W
02E6C:  MOVWF  x10
02E6E:  MOVLW  00
02E70:  SUBFWB x0E,W
02E72:  MOVWF  x11
02E74:  MOVWF  x12
02E76:  INCF   x12,F
02E78:  DECF   x12,F
02E7A:  BTFSC  FD8.2
02E7C:  BRA    2E8A
02E7E:  SETF   x13
02E80:  MOVLB  0
02E82:  CALL   25DE
02E86:  MOVLB  1
02E88:  BRA    2E78
02E8A:  MOVFF  110,113
02E8E:  MOVLB  0
02E90:  CALL   25DE
....................     } 
02E94:  MOVLB  1
02E96:  INCF   x0A,F
02E98:  BRA    2DCE
....................     for (a=0;a<8;a++) 
02E9A:  CLRF   x09
02E9C:  MOVF   x09,W
02E9E:  SUBLW  07
02EA0:  BNC   2EB8
....................     { 
....................       LineScroll(Line+a,0); 
02EA2:  MOVF   x09,W
02EA4:  ADDWF  x06,W
02EA6:  MOVWF  x10
02EA8:  MOVWF  x15
02EAA:  CLRF   x16
02EAC:  MOVLB  0
02EAE:  CALL   2608
....................     } 
02EB2:  MOVLB  1
02EB4:  INCF   x09,F
02EB6:  BRA    2E9C
....................     delay_Ms(210-delay); 
02EB8:  MOVLW  D2
02EBA:  BSF    FD8.0
02EBC:  SUBFWB x0D,W
02EBE:  MOVWF  x10
02EC0:  MOVLW  00
02EC2:  SUBFWB x0E,W
02EC4:  MOVWF  x11
02EC6:  MOVWF  x12
02EC8:  INCF   x12,F
02ECA:  DECF   x12,F
02ECC:  BTFSC  FD8.2
02ECE:  BRA    2EDC
02ED0:  SETF   x13
02ED2:  MOVLB  0
02ED4:  CALL   25DE
02ED8:  MOVLB  1
02EDA:  BRA    2ECA
02EDC:  MOVFF  110,113
02EE0:  MOVLB  0
02EE2:  CALL   25DE
....................     i++; 
02EE6:  MOVLB  1
02EE8:  INCF   x0B,F
....................   } 
02EEA:  BRA    2DAC
.................... } 
02EEC:  MOVLB  0
02EEE:  GOTO   3460 (RETURN)
.................... /******************************************************************************* 
.................... *   Text Kaydýrma Fonksiyonu  Font2                                            * 
.................... *   Parameter:    Line, Speed, Fill                                            * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void ScrollTextFont2(unsigned int Line, unsigned int Speed,int1 fill){ 
02EF2:  MOVLB  1
02EF4:  CLRF   x09
02EF6:  CLRF   x0A
02EF8:  CLRF   x0B
02EFA:  CLRF   x0C
02EFC:  MOVF   x07,W
02EFE:  MULLW  14
02F00:  MOVF   FF3,W
02F02:  CLRF   x0E
02F04:  MOVWF  x0D
02F06:  CLRF   x10
02F08:  CLRF   x0F
02F0A:  BCF    x11.0
....................   unsigned int a=0,b=0,i=0; 
....................   unsigned int cdata=0; 
....................   unsigned int16 delay=speed*20; 
....................   unsigned int16 sayac=0; 
....................   int1 ZeroBit=0;  
....................    
....................   while(Text[i]!='\0') 
....................   {  
02F0C:  CLRF   03
02F0E:  MOVF   x0B,W
02F10:  ADDLW  59
02F12:  MOVWF  FE9
02F14:  MOVLW  00
02F16:  ADDWFC 03,W
02F18:  MOVWF  FEA
02F1A:  MOVF   FEF,F
02F1C:  BTFSC  FD8.2
02F1E:  BRA    30A0
....................     if(Line+Font2H-1>HEIGHT)Break; 
02F20:  MOVLW  0C
02F22:  ADDWF  x06,W
02F24:  ADDLW  FF
02F26:  SUBLW  0F
02F28:  BC    2F2C
02F2A:  BRA    30A0
....................     for(b=0;b<16;b=b+2) 
02F2C:  CLRF   x0A
02F2E:  MOVF   x0A,W
02F30:  SUBLW  0F
02F32:  BTFSS  FD8.0
02F34:  BRA    309C
....................     { 
....................        cdata=Font_8x12[Text[i]-32][b]; 
02F36:  CLRF   03
02F38:  MOVF   x0B,W
02F3A:  ADDLW  59
02F3C:  MOVWF  FE9
02F3E:  MOVLW  00
02F40:  ADDWFC 03,W
02F42:  MOVWF  FEA
02F44:  MOVLW  20
02F46:  SUBWF  FEF,W
02F48:  MOVWF  x13
02F4A:  CLRF   x1A
02F4C:  MOVWF  x19
02F4E:  CLRF   x1C
02F50:  MOVLW  10
02F52:  MOVWF  x1B
02F54:  MOVLB  0
02F56:  CALL   1E28
02F5A:  MOVFF  02,113
02F5E:  MOVFF  01,112
02F62:  MOVLB  1
02F64:  MOVF   x0A,W
02F66:  ADDWF  01,W
02F68:  MOVWF  01
02F6A:  MOVLW  00
02F6C:  ADDWFC 02,W
02F6E:  MOVWF  03
02F70:  MOVF   01,W
02F72:  MOVFF  03,FF7
02F76:  MOVLB  0
02F78:  CALL   029C
02F7C:  MOVFF  FE8,10C
....................        for(a=0;a<8;a++) 
02F80:  MOVLB  1
02F82:  CLRF   x09
02F84:  MOVF   x09,W
02F86:  SUBLW  07
02F88:  BNC   2FC8
....................        { 
....................          ZeroBit=fill-(cdata>>a) & 0x01; 
02F8A:  MOVFF  10C,00
02F8E:  MOVF   x09,W
02F90:  MOVWF  01
02F92:  BZ    2F9C
02F94:  BCF    FD8.0
02F96:  RRCF   00,F
02F98:  DECFSZ 01,F
02F9A:  BRA    2F94
02F9C:  MOVF   00,W
02F9E:  SUBWF  x08,W
02FA0:  ANDLW  01
02FA2:  BCF    x11.0
02FA4:  BTFSC  FE8.0
02FA6:  BSF    x11.0
....................          LineScroll(Line+a,ZeroBit); 
02FA8:  MOVF   x09,W
02FAA:  ADDWF  x06,W
02FAC:  MOVWF  x12
02FAE:  MOVLW  00
02FB0:  BTFSC  x11.0
02FB2:  MOVLW  01
02FB4:  MOVWF  x13
02FB6:  MOVFF  112,115
02FBA:  MOVWF  x16
02FBC:  MOVLB  0
02FBE:  CALL   2608
....................        }   
02FC2:  MOVLB  1
02FC4:  INCF   x09,F
02FC6:  BRA    2F84
....................        cdata=Font_8x12[Text[i]-32][b+1]; 
02FC8:  CLRF   03
02FCA:  MOVF   x0B,W
02FCC:  ADDLW  59
02FCE:  MOVWF  FE9
02FD0:  MOVLW  00
02FD2:  ADDWFC 03,W
02FD4:  MOVWF  FEA
02FD6:  MOVLW  20
02FD8:  SUBWF  FEF,W
02FDA:  MOVWF  x13
02FDC:  CLRF   x1A
02FDE:  MOVWF  x19
02FE0:  CLRF   x1C
02FE2:  MOVLW  10
02FE4:  MOVWF  x1B
02FE6:  MOVLB  0
02FE8:  CALL   1E28
02FEC:  MOVFF  02,113
02FF0:  MOVFF  01,112
02FF4:  MOVLW  01
02FF6:  MOVLB  1
02FF8:  ADDWF  x0A,W
02FFA:  ADDWF  01,W
02FFC:  MOVWF  01
02FFE:  MOVLW  00
03000:  ADDWFC 02,W
03002:  MOVWF  03
03004:  MOVF   01,W
03006:  MOVFF  03,FF7
0300A:  MOVLB  0
0300C:  CALL   029C
03010:  MOVFF  FE8,10C
....................        for(a=0;a<4;a++) 
03014:  MOVLB  1
03016:  CLRF   x09
03018:  MOVF   x09,W
0301A:  SUBLW  03
0301C:  BNC   305E
....................        { 
....................          ZeroBit=fill-(cdata>>a) & 0x01; 
0301E:  MOVFF  10C,00
03022:  MOVF   x09,W
03024:  MOVWF  01
03026:  BZ    3030
03028:  BCF    FD8.0
0302A:  RRCF   00,F
0302C:  DECFSZ 01,F
0302E:  BRA    3028
03030:  MOVF   00,W
03032:  SUBWF  x08,W
03034:  ANDLW  01
03036:  BCF    x11.0
03038:  BTFSC  FE8.0
0303A:  BSF    x11.0
....................          LineScroll(Line+8+a,ZeroBit); 
0303C:  MOVLW  08
0303E:  ADDWF  x06,W
03040:  ADDWF  x09,W
03042:  MOVWF  x12
03044:  MOVLW  00
03046:  BTFSC  x11.0
03048:  MOVLW  01
0304A:  MOVWF  x13
0304C:  MOVFF  112,115
03050:  MOVWF  x16
03052:  MOVLB  0
03054:  CALL   2608
....................        }  
03058:  MOVLB  1
0305A:  INCF   x09,F
0305C:  BRA    3018
....................        for(sayac=0;sayac<210-delay;sayac++) 
0305E:  CLRF   x10
03060:  CLRF   x0F
03062:  MOVLW  D2
03064:  BSF    FD8.0
03066:  SUBFWB x0D,W
03068:  MOVWF  00
0306A:  MOVLW  00
0306C:  SUBFWB x0E,W
0306E:  MOVWF  03
03070:  MOVFF  00,01
03074:  MOVF   x10,W
03076:  SUBWF  03,W
03078:  BNC   3096
0307A:  BNZ   3082
0307C:  MOVF   01,W
0307E:  SUBWF  x0F,W
03080:  BC    3096
....................        { 
....................          delay_ms(1); 
03082:  MOVLW  01
03084:  MOVWF  x13
03086:  MOVLB  0
03088:  CALL   25DE
....................        }  
0308C:  MOVLB  1
0308E:  INCF   x0F,F
03090:  BTFSC  FD8.2
03092:  INCF   x10,F
03094:  BRA    3062
....................     } 
03096:  MOVLW  02
03098:  ADDWF  x0A,F
0309A:  BRA    2F2E
....................     i++; 
0309C:  INCF   x0B,F
....................   } 
0309E:  BRA    2F0C
.................... } 
030A0:  MOVLB  0
030A2:  GOTO   3460 (RETURN)
.................... /******************************************************************************* 
.................... *   Text Kaydýrma Fonksiyonu  Font3                                            * 
.................... *   Parameter:    Line, Speed, Fill                                            * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void ScrollTextFont3(unsigned int Line, unsigned int Speed,int1 fill){ 
030A6:  MOVLB  1
030A8:  CLRF   x09
030AA:  CLRF   x0A
030AC:  CLRF   x0B
030AE:  CLRF   x0C
030B0:  MOVF   x07,W
030B2:  MULLW  14
030B4:  MOVF   FF3,W
030B6:  CLRF   x0E
030B8:  MOVWF  x0D
030BA:  CLRF   x10
030BC:  CLRF   x0F
030BE:  BCF    x11.0
....................   unsigned int a=0,b=0,i=0; 
....................   unsigned int cdata=0; 
....................   unsigned int16 delay=speed*20; 
....................   unsigned int16 sayac=0; 
....................  
....................    
....................   int1 ZeroBit=0;  
....................    
....................   while(Text[i]!='\0') 
....................   { 
030C0:  CLRF   03
030C2:  MOVF   x0B,W
030C4:  ADDLW  59
030C6:  MOVWF  FE9
030C8:  MOVLW  00
030CA:  ADDWFC 03,W
030CC:  MOVWF  FEA
030CE:  MOVF   FEF,F
030D0:  BTFSC  FD8.2
030D2:  BRA    3254
....................     if(Line+Font3H-1>HEIGHT)Break; 
030D4:  MOVLW  0E
030D6:  ADDWF  x06,W
030D8:  ADDLW  FF
030DA:  SUBLW  0F
030DC:  BC    30E0
030DE:  BRA    3254
....................     for(b=0;b<24;b=b+2) 
030E0:  CLRF   x0A
030E2:  MOVF   x0A,W
030E4:  SUBLW  17
030E6:  BTFSS  FD8.0
030E8:  BRA    3250
....................     { 
....................        cdata=Font_12x14[Text[i]-32][b]; 
030EA:  CLRF   03
030EC:  MOVF   x0B,W
030EE:  ADDLW  59
030F0:  MOVWF  FE9
030F2:  MOVLW  00
030F4:  ADDWFC 03,W
030F6:  MOVWF  FEA
030F8:  MOVLW  20
030FA:  SUBWF  FEF,W
030FC:  MOVWF  x13
030FE:  CLRF   x1A
03100:  MOVWF  x19
03102:  CLRF   x1C
03104:  MOVLW  18
03106:  MOVWF  x1B
03108:  MOVLB  0
0310A:  CALL   1E28
0310E:  MOVFF  02,113
03112:  MOVFF  01,112
03116:  MOVLB  1
03118:  MOVF   x0A,W
0311A:  ADDWF  01,W
0311C:  MOVWF  01
0311E:  MOVLW  00
03120:  ADDWFC 02,W
03122:  MOVWF  03
03124:  MOVF   01,W
03126:  MOVFF  03,FF7
0312A:  MOVLB  0
0312C:  CALL   08AA
03130:  MOVFF  FE8,10C
....................        for(a=0;a<8;a++) 
03134:  MOVLB  1
03136:  CLRF   x09
03138:  MOVF   x09,W
0313A:  SUBLW  07
0313C:  BNC   317C
....................        { 
....................          ZeroBit=fill-(cdata>>a) & 0x01; 
0313E:  MOVFF  10C,00
03142:  MOVF   x09,W
03144:  MOVWF  01
03146:  BZ    3150
03148:  BCF    FD8.0
0314A:  RRCF   00,F
0314C:  DECFSZ 01,F
0314E:  BRA    3148
03150:  MOVF   00,W
03152:  SUBWF  x08,W
03154:  ANDLW  01
03156:  BCF    x11.0
03158:  BTFSC  FE8.0
0315A:  BSF    x11.0
....................          LineScroll(Line+a,ZeroBit); 
0315C:  MOVF   x09,W
0315E:  ADDWF  x06,W
03160:  MOVWF  x12
03162:  MOVLW  00
03164:  BTFSC  x11.0
03166:  MOVLW  01
03168:  MOVWF  x13
0316A:  MOVFF  112,115
0316E:  MOVWF  x16
03170:  MOVLB  0
03172:  CALL   2608
....................        }   
03176:  MOVLB  1
03178:  INCF   x09,F
0317A:  BRA    3138
....................        cdata=Font_12x14[Text[i]-32][b+1]; 
0317C:  CLRF   03
0317E:  MOVF   x0B,W
03180:  ADDLW  59
03182:  MOVWF  FE9
03184:  MOVLW  00
03186:  ADDWFC 03,W
03188:  MOVWF  FEA
0318A:  MOVLW  20
0318C:  SUBWF  FEF,W
0318E:  MOVWF  x13
03190:  CLRF   x1A
03192:  MOVWF  x19
03194:  CLRF   x1C
03196:  MOVLW  18
03198:  MOVWF  x1B
0319A:  MOVLB  0
0319C:  CALL   1E28
031A0:  MOVFF  02,113
031A4:  MOVFF  01,112
031A8:  MOVLW  01
031AA:  MOVLB  1
031AC:  ADDWF  x0A,W
031AE:  ADDWF  01,W
031B0:  MOVWF  01
031B2:  MOVLW  00
031B4:  ADDWFC 02,W
031B6:  MOVWF  03
031B8:  MOVF   01,W
031BA:  MOVFF  03,FF7
031BE:  MOVLB  0
031C0:  CALL   08AA
031C4:  MOVFF  FE8,10C
....................        for(a=0;a<6;a++) 
031C8:  MOVLB  1
031CA:  CLRF   x09
031CC:  MOVF   x09,W
031CE:  SUBLW  05
031D0:  BNC   3212
....................        { 
....................          ZeroBit=fill-(cdata>>a) & 0x01; 
031D2:  MOVFF  10C,00
031D6:  MOVF   x09,W
031D8:  MOVWF  01
031DA:  BZ    31E4
031DC:  BCF    FD8.0
031DE:  RRCF   00,F
031E0:  DECFSZ 01,F
031E2:  BRA    31DC
031E4:  MOVF   00,W
031E6:  SUBWF  x08,W
031E8:  ANDLW  01
031EA:  BCF    x11.0
031EC:  BTFSC  FE8.0
031EE:  BSF    x11.0
....................          LineScroll(Line+8+a,ZeroBit); 
031F0:  MOVLW  08
031F2:  ADDWF  x06,W
031F4:  ADDWF  x09,W
031F6:  MOVWF  x12
031F8:  MOVLW  00
031FA:  BTFSC  x11.0
031FC:  MOVLW  01
031FE:  MOVWF  x13
03200:  MOVFF  112,115
03204:  MOVWF  x16
03206:  MOVLB  0
03208:  CALL   2608
....................        }  
0320C:  MOVLB  1
0320E:  INCF   x09,F
03210:  BRA    31CC
....................        for(sayac=0;sayac<210-delay;sayac++) 
03212:  CLRF   x10
03214:  CLRF   x0F
03216:  MOVLW  D2
03218:  BSF    FD8.0
0321A:  SUBFWB x0D,W
0321C:  MOVWF  00
0321E:  MOVLW  00
03220:  SUBFWB x0E,W
03222:  MOVWF  03
03224:  MOVFF  00,01
03228:  MOVF   x10,W
0322A:  SUBWF  03,W
0322C:  BNC   324A
0322E:  BNZ   3236
03230:  MOVF   01,W
03232:  SUBWF  x0F,W
03234:  BC    324A
....................        { 
....................          delay_ms(1); 
03236:  MOVLW  01
03238:  MOVWF  x13
0323A:  MOVLB  0
0323C:  CALL   25DE
....................        } 
03240:  MOVLB  1
03242:  INCF   x0F,F
03244:  BTFSC  FD8.2
03246:  INCF   x10,F
03248:  BRA    3216
....................     } 
0324A:  MOVLW  02
0324C:  ADDWF  x0A,F
0324E:  BRA    30E2
....................     i++; 
03250:  INCF   x0B,F
....................   } 
03252:  BRA    30C0
.................... } 
03254:  MOVLB  0
03256:  GOTO   3460 (RETURN)
.................... /******************************************************************************* 
.................... *   Text Kaydýrma Fonksiyonu  Font4                                            * 
.................... *   Parameter:    Line, Speed, Fill                                            * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void ScrollTextFont4(unsigned int Line, unsigned int Speed,int1 fill){ 
0325A:  MOVLB  1
0325C:  CLRF   x09
0325E:  CLRF   x0A
03260:  CLRF   x0B
03262:  CLRF   x0C
03264:  CLRF   x0D
....................   unsigned int a=0,b=0,i=0; 
....................   unsigned int cdata=0,cadr=0;; 
....................   unsigned int16 delay=speed*20; 
....................   unsigned int16 sayac=0; 
....................   int1 ZeroBit=0;  
03266:  MOVF   x07,W
03268:  MULLW  14
0326A:  MOVF   FF3,W
0326C:  CLRF   x0F
0326E:  MOVWF  x0E
03270:  CLRF   x11
03272:  CLRF   x10
03274:  BCF    x12.0
....................    
....................   while(Text[i]!='\0') 
....................   { 
03276:  CLRF   03
03278:  MOVF   x0B,W
0327A:  ADDLW  59
0327C:  MOVWF  FE9
0327E:  MOVLW  00
03280:  ADDWFC 03,W
03282:  MOVWF  FEA
03284:  MOVF   FEF,F
03286:  BTFSC  FD8.2
03288:  BRA    3400
....................     if(Line+Font4H-1>HEIGHT)Break; 
0328A:  MOVLW  10
0328C:  ADDWF  x06,W
0328E:  ADDLW  FF
03290:  SUBLW  0F
03292:  BC    3296
03294:  BRA    3400
....................      
....................     cadr=CharAdres(Text[i]); 
03296:  CLRF   03
03298:  MOVF   x0B,W
0329A:  ADDLW  59
0329C:  MOVWF  FE9
0329E:  MOVLW  00
032A0:  ADDWFC 03,W
032A2:  MOVWF  FEA
032A4:  MOVFF  FEF,113
032A8:  MOVFF  113,119
032AC:  MOVLB  0
032AE:  CALL   23CA
032B2:  MOVFF  01,10D
....................      
....................     for(b=0;b<24;b=b+2) 
032B6:  MOVLB  1
032B8:  CLRF   x0A
032BA:  MOVF   x0A,W
032BC:  SUBLW  17
032BE:  BTFSS  FD8.0
032C0:  BRA    33FC
....................     { 
....................        cdata=Font_12x16[cadr][b]; 
032C2:  CLRF   x1A
032C4:  MOVFF  10D,119
032C8:  CLRF   x1C
032CA:  MOVLW  18
032CC:  MOVWF  x1B
032CE:  MOVLB  0
032D0:  CALL   1E28
032D4:  MOVFF  02,114
032D8:  MOVFF  01,113
032DC:  MOVLB  1
032DE:  MOVF   x0A,W
032E0:  ADDWF  01,W
032E2:  MOVWF  01
032E4:  MOVLW  00
032E6:  ADDWFC 02,W
032E8:  MOVWF  03
032EA:  MOVF   01,W
032EC:  MOVFF  03,FF7
032F0:  MOVLB  0
032F2:  CALL   11B8
032F6:  MOVFF  FE8,10C
....................        for(a=0;a<8;a++) 
032FA:  MOVLB  1
032FC:  CLRF   x09
032FE:  MOVF   x09,W
03300:  SUBLW  07
03302:  BNC   333C
....................        { 
....................          ZeroBit=fill-(cdata>>a) & 0x01; 
03304:  MOVFF  10C,00
03308:  MOVF   x09,W
0330A:  MOVWF  01
0330C:  BZ    3316
0330E:  BCF    FD8.0
03310:  RRCF   00,F
03312:  DECFSZ 01,F
03314:  BRA    330E
03316:  MOVF   00,W
03318:  SUBWF  x08,W
0331A:  ANDLW  01
0331C:  BCF    x12.0
0331E:  BTFSC  FE8.0
03320:  BSF    x12.0
....................          LineScroll(a,ZeroBit); 
03322:  MOVLW  00
03324:  BTFSC  x12.0
03326:  MOVLW  01
03328:  MOVWF  x13
0332A:  MOVFF  109,115
0332E:  MOVWF  x16
03330:  MOVLB  0
03332:  CALL   2608
....................        }     
03336:  MOVLB  1
03338:  INCF   x09,F
0333A:  BRA    32FE
....................        cdata=Font_12x16[cadr][b+1]; 
0333C:  CLRF   x1A
0333E:  MOVFF  10D,119
03342:  CLRF   x1C
03344:  MOVLW  18
03346:  MOVWF  x1B
03348:  MOVLB  0
0334A:  CALL   1E28
0334E:  MOVFF  02,114
03352:  MOVFF  01,113
03356:  MOVLW  01
03358:  MOVLB  1
0335A:  ADDWF  x0A,W
0335C:  ADDWF  01,W
0335E:  MOVWF  01
03360:  MOVLW  00
03362:  ADDWFC 02,W
03364:  MOVWF  03
03366:  MOVF   01,W
03368:  MOVFF  03,FF7
0336C:  MOVLB  0
0336E:  CALL   11B8
03372:  MOVFF  FE8,10C
....................        for(a=0;a<8;a++) 
03376:  MOVLB  1
03378:  CLRF   x09
0337A:  MOVF   x09,W
0337C:  SUBLW  07
0337E:  BNC   33BE
....................        { 
....................          ZeroBit=fill-(cdata>>a) & 0x01; 
03380:  MOVFF  10C,00
03384:  MOVF   x09,W
03386:  MOVWF  01
03388:  BZ    3392
0338A:  BCF    FD8.0
0338C:  RRCF   00,F
0338E:  DECFSZ 01,F
03390:  BRA    338A
03392:  MOVF   00,W
03394:  SUBWF  x08,W
03396:  ANDLW  01
03398:  BCF    x12.0
0339A:  BTFSC  FE8.0
0339C:  BSF    x12.0
....................          LineScroll(8+a,ZeroBit); 
0339E:  MOVLW  08
033A0:  ADDWF  x09,W
033A2:  MOVWF  x13
033A4:  MOVLW  00
033A6:  BTFSC  x12.0
033A8:  MOVLW  01
033AA:  MOVWF  x14
033AC:  MOVFF  113,115
033B0:  MOVWF  x16
033B2:  MOVLB  0
033B4:  CALL   2608
....................        }  
033B8:  MOVLB  1
033BA:  INCF   x09,F
033BC:  BRA    337A
....................         
....................        for(sayac=0;sayac<210-delay;sayac++) 
033BE:  CLRF   x11
033C0:  CLRF   x10
033C2:  MOVLW  D2
033C4:  BSF    FD8.0
033C6:  SUBFWB x0E,W
033C8:  MOVWF  00
033CA:  MOVLW  00
033CC:  SUBFWB x0F,W
033CE:  MOVWF  03
033D0:  MOVFF  00,01
033D4:  MOVF   x11,W
033D6:  SUBWF  03,W
033D8:  BNC   33F6
033DA:  BNZ   33E2
033DC:  MOVF   01,W
033DE:  SUBWF  x10,W
033E0:  BC    33F6
....................        { 
....................          delay_ms(1); 
033E2:  MOVLW  01
033E4:  MOVWF  x13
033E6:  MOVLB  0
033E8:  CALL   25DE
....................        } 
033EC:  MOVLB  1
033EE:  INCF   x10,F
033F0:  BTFSC  FD8.2
033F2:  INCF   x11,F
033F4:  BRA    33C2
....................     } 
033F6:  MOVLW  02
033F8:  ADDWF  x0A,F
033FA:  BRA    32BA
....................     i++; 
033FC:  INCF   x0B,F
....................   } 
033FE:  BRA    3276
.................... } 
03400:  MOVLB  0
03402:  GOTO   3460 (RETURN)
.................... /******************************************************************************* 
.................... *   Ekran Temizleme Fonksiyonu                                                 * 
.................... *   Parameter:    fill                                                         * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void clear_display(int1 fill){ 
*
01E90:  MOVLB  1
01E92:  CLRF   x0B
01E94:  CLRF   x0C
01E96:  CLRF   x0D
.................... int8 i=0,j=0,fdata=0; 
.................... if (fill){ 
01E98:  MOVF   x0A,F
01E9A:  BZ    1EA0
....................   fdata=0x00; 
01E9C:  CLRF   x0D
.................... }else{ 
01E9E:  BRA    1EA2
....................   fdata=0xFF; 
01EA0:  SETF   x0D
.................... } 
....................   for (i=0;i<4;i++) 
01EA2:  CLRF   x0B
01EA4:  MOVF   x0B,W
01EA6:  SUBLW  03
01EA8:  BNC   1EE0
....................   { 
....................     for (j=0;j<16;j++) 
01EAA:  CLRF   x0C
01EAC:  MOVF   x0C,W
01EAE:  SUBLW  0F
01EB0:  BNC   1EDC
....................     { 
....................       display_ram[j][i]=fdata; 
01EB2:  MOVF   x0C,W
01EB4:  MULLW  04
01EB6:  MOVF   FF3,W
01EB8:  CLRF   x0F
01EBA:  MOVWF  x0E
01EBC:  CLRF   03
01EBE:  MOVF   x0B,W
01EC0:  ADDWF  x0E,W
01EC2:  MOVWF  01
01EC4:  MOVF   x0F,W
01EC6:  ADDWFC 03,F
01EC8:  MOVF   01,W
01ECA:  ADDLW  19
01ECC:  MOVWF  FE9
01ECE:  MOVLW  00
01ED0:  ADDWFC 03,W
01ED2:  MOVWF  FEA
01ED4:  MOVFF  10D,FEF
....................     } 
01ED8:  INCF   x0C,F
01EDA:  BRA    1EAC
....................   } 
01EDC:  INCF   x0B,F
01EDE:  BRA    1EA4
.................... } 
01EE0:  MOVLB  0
01EE2:  RETURN 0
.................... /******************************************************************************* 
.................... *   Ekran Tersleme Fonksiyonu                                                  * 
.................... *   Parameter:                                                                 * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void invert_screen(void){ 
....................  int8 i=0,j=0; 
....................   
....................  for(i=0;i<4;i++) 
....................  { 
....................    for(j=0;j<16;j++) 
....................    { 
....................      display_ram[j][i] =~ display_ram[j][i];  //Önbellekteki deðer deðillenip geri yazýlýyor       
....................    } 
....................  } 
.................... } 
.................... /******************************************************************************* 
.................... *   Parlaklýk Ayar Fonksiyonu                                                  * 
.................... *   Parameter:    value (0-100)                                                * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void Set_Brightness(int8 value){ 
....................    set_pwm1_duty((int16)value*10); 
*
01E4A:  MOVLB  1
01E4C:  CLRF   x04
01E4E:  MOVFF  102,103
01E52:  MOVFF  104,11A
01E56:  MOVFF  102,119
01E5A:  CLRF   x1C
01E5C:  MOVLW  0A
01E5E:  MOVWF  x1B
01E60:  MOVLB  0
01E62:  RCALL  1E28
01E64:  MOVFF  02,104
01E68:  MOVFF  01,103
01E6C:  MOVLB  1
01E6E:  RRCF   x04,F
01E70:  RRCF   x03,F
01E72:  RRCF   x04,F
01E74:  RRCF   x03,F
01E76:  RRCF   x04,F
01E78:  MOVFF  103,FBE
01E7C:  RRCF   x04,F
01E7E:  RRCF   x04,W
01E80:  ANDLW  30
01E82:  MOVWF  00
01E84:  MOVF   FBD,W
01E86:  ANDLW  CF
01E88:  IORWF  00,W
01E8A:  MOVWF  FBD
.................... } 
01E8C:  MOVLB  0
01E8E:  RETURN 0
.................... /******************************************************************************* 
.................... *   Pixel Fonksiyonu                                                           * 
.................... *   Parameter:    Xpos, Ypos, fill                                             * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void PutPixel(unsigned int Xpos,unsigned int Ypos, int1 fill) 
.................... { 
*
01EE4:  MOVLB  1
01EE6:  CLRF   x27
01EE8:  CLRF   x28
01EEA:  CLRF   x29
01EEC:  CLRF   x2A
01EEE:  CLRF   x2B
....................   int8 y1=0,x1=0; 
....................   int8 y2=0,x2=0; 
....................   int8 temp=0; 
....................             
....................   y1 = Ypos%4; 
01EF0:  MOVF   x25,W
01EF2:  ANDLW  03
01EF4:  MOVWF  x27
....................   y2 = Ypos/4; 
01EF6:  RRCF   x25,W
01EF8:  MOVWF  x29
01EFA:  RRCF   x29,F
01EFC:  MOVLW  3F
01EFE:  ANDWF  x29,F
....................   x1 = Xpos%8;     
01F00:  MOVF   x24,W
01F02:  ANDLW  07
01F04:  MOVWF  x28
....................   x2 = Xpos/8; 
01F06:  RRCF   x24,W
01F08:  MOVWF  x2A
01F0A:  RRCF   x2A,F
01F0C:  RRCF   x2A,F
01F0E:  MOVLW  1F
01F10:  ANDWF  x2A,F
....................    
....................   if(fill)  //Nokta Koy 
01F12:  MOVF   x26,F
01F14:  BZ    1F86
....................   { 
....................     temp=display_ram[(y2*4)+x2][y1]; //Ram'deki deðer ön belleðe alýnýyor. 
01F16:  MOVF   x29,W
01F18:  MULLW  04
01F1A:  MOVF   FF3,W
01F1C:  ADDWF  x2A,W
01F1E:  MULLW  04
01F20:  MOVF   FF3,W
01F22:  CLRF   x2D
01F24:  MOVWF  x2C
01F26:  CLRF   03
01F28:  MOVF   x27,W
01F2A:  ADDWF  x2C,W
01F2C:  MOVWF  01
01F2E:  MOVF   x2D,W
01F30:  ADDWFC 03,F
01F32:  MOVF   01,W
01F34:  ADDLW  19
01F36:  MOVWF  FE9
01F38:  MOVLW  00
01F3A:  ADDWFC 03,W
01F3C:  MOVWF  FEA
01F3E:  MOVFF  FEF,12B
....................     display_ram[(y2*4)+x2][y1] = (temp & (255-(128>>x1))); //x'inci bit 0 yapýlýr 
01F42:  MOVF   x29,W
01F44:  MULLW  04
01F46:  MOVF   FF3,W
01F48:  ADDWF  x2A,W
01F4A:  MULLW  04
01F4C:  MOVF   FF3,W
01F4E:  CLRF   x2D
01F50:  MOVWF  x2C
01F52:  CLRF   03
01F54:  MOVF   x27,W
01F56:  ADDWF  x2C,W
01F58:  MOVWF  01
01F5A:  MOVF   x2D,W
01F5C:  ADDWFC 03,F
01F5E:  MOVF   01,W
01F60:  ADDLW  19
01F62:  MOVWF  FE9
01F64:  MOVLW  00
01F66:  ADDWFC 03,W
01F68:  MOVWF  FEA
01F6A:  MOVLW  80
01F6C:  MOVWF  00
01F6E:  MOVF   x28,W
01F70:  MOVWF  01
01F72:  BZ    1F7C
01F74:  BCF    FD8.0
01F76:  RRCF   00,F
01F78:  DECFSZ 01,F
01F7A:  BRA    1F74
01F7C:  MOVF   00,W
01F7E:  SUBLW  FF
01F80:  ANDWF  x2B,W
01F82:  MOVWF  FEF
....................   } 
....................   else     //Noktayý Sil 
01F84:  BRA    1FF2
....................   { 
....................     temp=display_ram[(y2*4)+x2][y1]; //Ram'deki deðer ön belleðe alýnýyor. 
01F86:  MOVF   x29,W
01F88:  MULLW  04
01F8A:  MOVF   FF3,W
01F8C:  ADDWF  x2A,W
01F8E:  MULLW  04
01F90:  MOVF   FF3,W
01F92:  CLRF   x2D
01F94:  MOVWF  x2C
01F96:  CLRF   03
01F98:  MOVF   x27,W
01F9A:  ADDWF  x2C,W
01F9C:  MOVWF  01
01F9E:  MOVF   x2D,W
01FA0:  ADDWFC 03,F
01FA2:  MOVF   01,W
01FA4:  ADDLW  19
01FA6:  MOVWF  FE9
01FA8:  MOVLW  00
01FAA:  ADDWFC 03,W
01FAC:  MOVWF  FEA
01FAE:  MOVFF  FEF,12B
....................     display_ram[(y2*4)+x2][y1] = (temp | (128>>x1)); //x'inci Bit 1 yapýlýr     
01FB2:  MOVF   x29,W
01FB4:  MULLW  04
01FB6:  MOVF   FF3,W
01FB8:  ADDWF  x2A,W
01FBA:  MULLW  04
01FBC:  MOVF   FF3,W
01FBE:  CLRF   x2D
01FC0:  MOVWF  x2C
01FC2:  CLRF   03
01FC4:  MOVF   x27,W
01FC6:  ADDWF  x2C,W
01FC8:  MOVWF  01
01FCA:  MOVF   x2D,W
01FCC:  ADDWFC 03,F
01FCE:  MOVF   01,W
01FD0:  ADDLW  19
01FD2:  MOVWF  FE9
01FD4:  MOVLW  00
01FD6:  ADDWFC 03,W
01FD8:  MOVWF  FEA
01FDA:  MOVLW  80
01FDC:  MOVWF  00
01FDE:  MOVF   x28,W
01FE0:  MOVWF  01
01FE2:  BZ    1FEC
01FE4:  BCF    FD8.0
01FE6:  RRCF   00,F
01FE8:  DECFSZ 01,F
01FEA:  BRA    1FE4
01FEC:  MOVF   00,W
01FEE:  IORWF  x2B,W
01FF0:  MOVWF  FEF
....................   } 
....................   
.................... } 
01FF2:  MOVLB  0
01FF4:  RETURN 0
.................... /******************************************************************************* 
.................... *   Pixel Okuma Fonksiyonu                                                     * 
.................... *   Parameter:    Xpos, Ypos                                                   * 
.................... *   Return: value                                                              * 
.................... *******************************************************************************/ 
.................... int1 GetPixel(unsigned int Xpos,unsigned int Ypos){ 
....................   int8 y1=0,x1=0; 
....................   int8 y2=0,x2=0; 
....................   int8 temp=0; 
....................   int1 value=0; 
....................    
....................   y1 = Ypos%4; 
....................   y2 = Ypos/4; 
....................   x1 = Xpos%8;     
....................   x2 = Xpos/8; 
....................    
....................   temp=display_ram[(y2*4)+x2][y1]; //Ram'deki deðer ön belleðe alýnýyor. 
....................   value=1-(0x80 & temp<<x1)/128;   //Ram adresindeki bit geri gönderiliyor 
....................   return value; 
.................... } 
.................... /******************************************************************************* 
.................... *   Çizgi Çizme Fonksiyonu                                                     * 
.................... *   Parameter:    x1, x2, y1, y2, fill                                         * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void Line(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int1 fill) 
.................... { 
*
0378E:  MOVLB  1
03790:  CLRF   x17
03792:  MOVLW  01
03794:  MOVWF  x16
03796:  CLRF   x19
03798:  MOVWF  x18
....................   signed int16 addx=1, addy=1, P; 
....................   signed int16 i, dy, dx, diff; 
....................    
....................    if(x2>x1)  
0379A:  MOVF   x13,W
0379C:  SUBWF  x11,W
0379E:  BC    37AE
....................    { 
....................       dx = x2 - x1; 
037A0:  MOVF   x11,W
037A2:  SUBWF  x13,W
037A4:  CLRF   03
037A6:  MOVWF  x20
037A8:  MOVFF  03,121
....................    }else{ 
037AC:  BRA    37BE
....................       dx = x1 - x2; 
037AE:  MOVF   x13,W
037B0:  SUBWF  x11,W
037B2:  CLRF   03
037B4:  MOVWF  x20
037B6:  MOVFF  03,121
....................       addx = -1; 
037BA:  SETF   x17
037BC:  SETF   x16
....................    } 
....................    if(y2>y1) 
037BE:  MOVF   x14,W
037C0:  SUBWF  x12,W
037C2:  BC    37D2
....................    { 
....................       dy = y2 - y1; 
037C4:  MOVF   x12,W
037C6:  SUBWF  x14,W
037C8:  CLRF   03
037CA:  MOVWF  x1E
037CC:  MOVFF  03,11F
....................    }else{ 
037D0:  BRA    37E2
....................       dy = y1 - y2; 
037D2:  MOVF   x14,W
037D4:  SUBWF  x12,W
037D6:  CLRF   03
037D8:  MOVWF  x1E
037DA:  MOVFF  03,11F
....................       addy = -1; 
037DE:  SETF   x19
037E0:  SETF   x18
....................    } 
....................  
....................    if(dx >= dy) 
037E2:  BTFSS  x1F.7
037E4:  BRA    37EC
037E6:  BTFSS  x21.7
037E8:  BRA    37FE
037EA:  BRA    37F0
037EC:  BTFSC  x21.7
037EE:  BRA    38B2
037F0:  MOVF   x1F,W
037F2:  SUBWF  x21,W
037F4:  BNC   38B2
037F6:  BNZ   37FE
037F8:  MOVF   x1E,W
037FA:  SUBWF  x20,W
037FC:  BNC   38B2
....................    { 
....................       dy *= 2; 
037FE:  MOVFF  11F,125
03802:  MOVFF  11E,124
03806:  CLRF   x27
03808:  MOVLW  02
0380A:  MOVWF  x26
0380C:  MOVLB  0
0380E:  RCALL  373A
03810:  MOVFF  02,11F
03814:  MOVFF  01,11E
....................       P = dy - dx; 
03818:  MOVLB  1
0381A:  MOVF   x20,W
0381C:  SUBWF  x1E,W
0381E:  MOVWF  x1A
03820:  MOVF   x21,W
03822:  SUBWFB x1F,W
03824:  MOVWF  x1B
....................       diff = P - dx; 
03826:  MOVF   x20,W
03828:  SUBWF  x1A,W
0382A:  MOVWF  x22
0382C:  MOVF   x21,W
0382E:  SUBWFB x1B,W
03830:  MOVWF  x23
....................  
....................       for(i=0; i<=dx; i++) 
03832:  CLRF   x1D
03834:  CLRF   x1C
03836:  BTFSS  x1D.7
03838:  BRA    3840
0383A:  BTFSS  x21.7
0383C:  BRA    3852
0383E:  BRA    3844
03840:  BTFSC  x21.7
03842:  BRA    38B0
03844:  MOVF   x1D,W
03846:  SUBWF  x21,W
03848:  BNC   38B0
0384A:  BNZ   3852
0384C:  MOVF   x1C,W
0384E:  SUBWF  x20,W
03850:  BNC   38B0
....................       { 
....................          PutPixel(x1, y1, fill); 
03852:  MOVFF  111,124
03856:  MOVFF  112,125
0385A:  MOVFF  115,126
0385E:  MOVLB  0
03860:  CALL   1EE4
....................  
....................          if(P < 0) 
03864:  MOVLB  1
03866:  BTFSC  x1B.7
03868:  BRA    386C
0386A:  BRA    3884
....................          { 
....................             P  += dy; 
0386C:  MOVF   x1E,W
0386E:  ADDWF  x1A,F
03870:  MOVF   x1F,W
03872:  ADDWFC x1B,F
....................             x1 += addx; 
03874:  MOVF   x11,W
03876:  ADDWF  x16,W
03878:  MOVWF  01
0387A:  MOVLW  00
0387C:  ADDWFC x17,W
0387E:  MOVFF  01,111
....................          } 
....................          else 
03882:  BRA    38A8
....................          { 
....................             P  += diff; 
03884:  MOVF   x22,W
03886:  ADDWF  x1A,F
03888:  MOVF   x23,W
0388A:  ADDWFC x1B,F
....................             x1 += addx; 
0388C:  MOVF   x11,W
0388E:  ADDWF  x16,W
03890:  MOVWF  01
03892:  MOVLW  00
03894:  ADDWFC x17,W
03896:  MOVFF  01,111
....................             y1 += addy; 
0389A:  MOVF   x12,W
0389C:  ADDWF  x18,W
0389E:  MOVWF  01
038A0:  MOVLW  00
038A2:  ADDWFC x19,W
038A4:  MOVFF  01,112
....................          } 
....................       } 
038A8:  INCF   x1C,F
038AA:  BTFSC  FD8.2
038AC:  INCF   x1D,F
038AE:  BRA    3836
....................    } 
....................    else 
038B0:  BRA    3964
....................    { 
....................       dx *= 2; 
038B2:  MOVFF  121,125
038B6:  MOVFF  120,124
038BA:  CLRF   x27
038BC:  MOVLW  02
038BE:  MOVWF  x26
038C0:  MOVLB  0
038C2:  RCALL  373A
038C4:  MOVFF  02,121
038C8:  MOVFF  01,120
....................       P = dx - dy; 
038CC:  MOVLB  1
038CE:  MOVF   x1E,W
038D0:  SUBWF  x20,W
038D2:  MOVWF  x1A
038D4:  MOVF   x1F,W
038D6:  SUBWFB x21,W
038D8:  MOVWF  x1B
....................       diff = P - dy; 
038DA:  MOVF   x1E,W
038DC:  SUBWF  x1A,W
038DE:  MOVWF  x22
038E0:  MOVF   x1F,W
038E2:  SUBWFB x1B,W
038E4:  MOVWF  x23
....................  
....................       for(i=0; i<=dy; ++i) 
038E6:  CLRF   x1D
038E8:  CLRF   x1C
038EA:  BTFSS  x1D.7
038EC:  BRA    38F4
038EE:  BTFSS  x1F.7
038F0:  BRA    3906
038F2:  BRA    38F8
038F4:  BTFSC  x1F.7
038F6:  BRA    3964
038F8:  MOVF   x1D,W
038FA:  SUBWF  x1F,W
038FC:  BNC   3964
038FE:  BNZ   3906
03900:  MOVF   x1C,W
03902:  SUBWF  x1E,W
03904:  BNC   3964
....................       { 
....................          PutPixel(x1, y1, fill); 
03906:  MOVFF  111,124
0390A:  MOVFF  112,125
0390E:  MOVFF  115,126
03912:  MOVLB  0
03914:  CALL   1EE4
....................  
....................          if(P < 0) 
03918:  MOVLB  1
0391A:  BTFSC  x1B.7
0391C:  BRA    3920
0391E:  BRA    3938
....................          { 
....................             P  += dx; 
03920:  MOVF   x20,W
03922:  ADDWF  x1A,F
03924:  MOVF   x21,W
03926:  ADDWFC x1B,F
....................             y1 += addy; 
03928:  MOVF   x12,W
0392A:  ADDWF  x18,W
0392C:  MOVWF  01
0392E:  MOVLW  00
03930:  ADDWFC x19,W
03932:  MOVFF  01,112
....................          } 
....................          else 
03936:  BRA    395C
....................          { 
....................             P  += diff; 
03938:  MOVF   x22,W
0393A:  ADDWF  x1A,F
0393C:  MOVF   x23,W
0393E:  ADDWFC x1B,F
....................             x1 += addx; 
03940:  MOVF   x11,W
03942:  ADDWF  x16,W
03944:  MOVWF  01
03946:  MOVLW  00
03948:  ADDWFC x17,W
0394A:  MOVFF  01,111
....................             y1 += addy; 
0394E:  MOVF   x12,W
03950:  ADDWF  x18,W
03952:  MOVWF  01
03954:  MOVLW  00
03956:  ADDWFC x19,W
03958:  MOVFF  01,112
....................          } 
....................       } 
0395C:  INCF   x1C,F
0395E:  BTFSC  FD8.2
03960:  INCF   x1D,F
03962:  BRA    38EA
....................    }    
.................... } 
03964:  MOVLB  0
03966:  RETURN 0
.................... /******************************************************************************* 
.................... *   Dikdörtgen Çizme Fonksiyonu                                                * 
.................... *   Parameter:    x1, x2, y1, y2, fill                                         * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void Rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int1 fill) 
.................... { 
....................    unsigned int16  i, xmin, xmax, ymin, ymax; 
....................  
....................   if(fill) 
03968:  MOVLB  1
0396A:  MOVF   x06,F
0396C:  BZ    39F8
....................    { 
....................       if(x1 < x2) 
0396E:  MOVF   x04,W
03970:  SUBWF  x02,W
03972:  BC    3982
....................       { 
....................          xmin = x1; 
03974:  CLRF   x0A
03976:  MOVFF  102,109
....................          xmax = x2; 
0397A:  CLRF   x0C
0397C:  MOVFF  104,10B
....................       } 
....................       else 
03980:  BRA    398E
....................       { 
....................          xmin = x2; 
03982:  CLRF   x0A
03984:  MOVFF  104,109
....................          xmax = x1; 
03988:  CLRF   x0C
0398A:  MOVFF  102,10B
....................       } 
....................  
....................       if(y1 < y2) 
0398E:  MOVF   x05,W
03990:  SUBWF  x03,W
03992:  BC    39A2
....................       { 
....................          ymin = y1; 
03994:  CLRF   x0E
03996:  MOVFF  103,10D
....................          ymax = y2; 
0399A:  CLRF   x10
0399C:  MOVFF  105,10F
....................       } 
....................       else 
039A0:  BRA    39AE
....................       { 
....................          ymin = y2; 
039A2:  CLRF   x0E
039A4:  MOVFF  105,10D
....................          ymax = y1; 
039A8:  CLRF   x10
039AA:  MOVFF  103,10F
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
039AE:  MOVF   x0A,W
039B0:  SUBWF  x0C,W
039B2:  BNC   39F6
039B4:  BNZ   39BC
039B6:  MOVF   x09,W
039B8:  SUBWF  x0B,W
039BA:  BNC   39F6
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
039BC:  MOVFF  10E,108
039C0:  MOVFF  10D,107
039C4:  MOVF   x08,W
039C6:  SUBWF  x10,W
039C8:  BNC   39EE
039CA:  BNZ   39D2
039CC:  MOVF   x07,W
039CE:  SUBWF  x0F,W
039D0:  BNC   39EE
....................          { 
....................             PutPixel(xmin, i, 1); 
039D2:  MOVFF  109,124
039D6:  MOVFF  107,125
039DA:  MOVLW  01
039DC:  MOVWF  x26
039DE:  MOVLB  0
039E0:  CALL   1EE4
....................          } 
039E4:  MOVLB  1
039E6:  INCF   x07,F
039E8:  BTFSC  FD8.2
039EA:  INCF   x08,F
039EC:  BRA    39C4
....................       } 
039EE:  INCF   x09,F
039F0:  BTFSC  FD8.2
039F2:  INCF   x0A,F
039F4:  BRA    39AE
....................    } 
....................    else 
039F6:  BRA    3A60
....................    { 
....................       Line(x1, y1, x2, y1, 1); 
039F8:  MOVFF  102,111
039FC:  MOVFF  103,112
03A00:  MOVFF  104,113
03A04:  MOVFF  103,114
03A08:  MOVLW  01
03A0A:  MOVWF  x15
03A0C:  MOVLB  0
03A0E:  RCALL  378E
....................       Line(x2, y1, x2, y2, 1); 
03A10:  MOVFF  104,111
03A14:  MOVFF  103,112
03A18:  MOVFF  104,113
03A1C:  MOVFF  105,114
03A20:  MOVLW  01
03A22:  MOVLB  1
03A24:  MOVWF  x15
03A26:  MOVLB  0
03A28:  RCALL  378E
....................       Line(x2, y2, x1, y2, 1); 
03A2A:  MOVFF  104,111
03A2E:  MOVFF  105,112
03A32:  MOVFF  102,113
03A36:  MOVFF  105,114
03A3A:  MOVLW  01
03A3C:  MOVLB  1
03A3E:  MOVWF  x15
03A40:  MOVLB  0
03A42:  RCALL  378E
....................       Line(x1, y2, x1, y1, 1); 
03A44:  MOVFF  102,111
03A48:  MOVFF  105,112
03A4C:  MOVFF  102,113
03A50:  MOVFF  103,114
03A54:  MOVLW  01
03A56:  MOVLB  1
03A58:  MOVWF  x15
03A5A:  MOVLB  0
03A5C:  RCALL  378E
03A5E:  MOVLB  1
....................    }       
.................... } 
03A60:  MOVLB  0
03A62:  RETURN 0
.................... /******************************************************************************* 
.................... *   Çember Cizme Fonksiyonu                                                    * 
.................... *   Parameter:    x, y, Size, fill                                             * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void Circle(unsigned int x, unsigned int y, unsigned int size, int1 fill) 
.................... { 
....................    signed int a,b,P; 
....................    a=0; 
*
03AB2:  MOVLB  1
03AB4:  CLRF   x06
....................    b=size; 
03AB6:  MOVFF  104,107
....................    P=1-size; 
03ABA:  MOVLW  01
03ABC:  BSF    FD8.0
03ABE:  SUBFWB x04,W
03AC0:  MOVWF  x08
....................     
....................    do 
....................    { 
....................       if(fill) 
03AC2:  MOVF   x05,F
03AC4:  BZ    3B88
....................       { 
....................          Line(x-a, y+b, x+a, y+b,1); 
03AC6:  MOVF   x06,W
03AC8:  SUBWF  x02,W
03ACA:  MOVWF  x09
03ACC:  MOVF   x07,W
03ACE:  ADDWF  x03,W
03AD0:  MOVWF  x0A
03AD2:  MOVF   x06,W
03AD4:  ADDWF  x02,W
03AD6:  MOVWF  x0B
03AD8:  MOVF   x07,W
03ADA:  ADDWF  x03,W
03ADC:  MOVWF  x0C
03ADE:  MOVFF  109,111
03AE2:  MOVFF  10A,112
03AE6:  MOVFF  10B,113
03AEA:  MOVWF  x14
03AEC:  MOVLW  01
03AEE:  MOVWF  x15
03AF0:  MOVLB  0
03AF2:  RCALL  378E
....................          Line(x-a, y-b, x+a, y-b,1); 
03AF4:  MOVLB  1
03AF6:  MOVF   x06,W
03AF8:  SUBWF  x02,W
03AFA:  MOVWF  x09
03AFC:  MOVF   x07,W
03AFE:  SUBWF  x03,W
03B00:  MOVWF  x0A
03B02:  MOVF   x06,W
03B04:  ADDWF  x02,W
03B06:  MOVWF  x0B
03B08:  MOVF   x07,W
03B0A:  SUBWF  x03,W
03B0C:  MOVWF  x0C
03B0E:  MOVFF  109,111
03B12:  MOVFF  10A,112
03B16:  MOVFF  10B,113
03B1A:  MOVWF  x14
03B1C:  MOVLW  01
03B1E:  MOVWF  x15
03B20:  MOVLB  0
03B22:  RCALL  378E
....................          Line(x-b, y+a, x+b, y+a,1); 
03B24:  MOVLB  1
03B26:  MOVF   x07,W
03B28:  SUBWF  x02,W
03B2A:  MOVWF  x09
03B2C:  MOVF   x06,W
03B2E:  ADDWF  x03,W
03B30:  MOVWF  x0A
03B32:  MOVF   x07,W
03B34:  ADDWF  x02,W
03B36:  MOVWF  x0B
03B38:  MOVF   x06,W
03B3A:  ADDWF  x03,W
03B3C:  MOVWF  x0C
03B3E:  MOVFF  109,111
03B42:  MOVFF  10A,112
03B46:  MOVFF  10B,113
03B4A:  MOVWF  x14
03B4C:  MOVLW  01
03B4E:  MOVWF  x15
03B50:  MOVLB  0
03B52:  RCALL  378E
....................          Line(x-b, y-a, x+b, y-a,1); 
03B54:  MOVLB  1
03B56:  MOVF   x07,W
03B58:  SUBWF  x02,W
03B5A:  MOVWF  x09
03B5C:  MOVF   x06,W
03B5E:  SUBWF  x03,W
03B60:  MOVWF  x0A
03B62:  MOVF   x07,W
03B64:  ADDWF  x02,W
03B66:  MOVWF  x0B
03B68:  MOVF   x06,W
03B6A:  SUBWF  x03,W
03B6C:  MOVWF  x0C
03B6E:  MOVFF  109,111
03B72:  MOVFF  10A,112
03B76:  MOVFF  10B,113
03B7A:  MOVWF  x14
03B7C:  MOVLW  01
03B7E:  MOVWF  x15
03B80:  MOVLB  0
03B82:  RCALL  378E
....................       } 
....................       else 
03B84:  BRA    3C76
03B86:  MOVLB  1
....................       { 
....................          PutPixel(a+x, b+y,1); 
03B88:  MOVF   x02,W
03B8A:  ADDWF  x06,W
03B8C:  MOVWF  x09
03B8E:  MOVF   x03,W
03B90:  ADDWF  x07,W
03B92:  MOVWF  x0A
03B94:  MOVFF  109,124
03B98:  MOVWF  x25
03B9A:  MOVLW  01
03B9C:  MOVWF  x26
03B9E:  MOVLB  0
03BA0:  CALL   1EE4
....................          PutPixel(b+x, a+y,1); 
03BA4:  MOVLB  1
03BA6:  MOVF   x02,W
03BA8:  ADDWF  x07,W
03BAA:  MOVWF  x09
03BAC:  MOVF   x03,W
03BAE:  ADDWF  x06,W
03BB0:  MOVWF  x0A
03BB2:  MOVFF  109,124
03BB6:  MOVWF  x25
03BB8:  MOVLW  01
03BBA:  MOVWF  x26
03BBC:  MOVLB  0
03BBE:  CALL   1EE4
....................          PutPixel(x-a, b+y,1); 
03BC2:  MOVLB  1
03BC4:  MOVF   x06,W
03BC6:  SUBWF  x02,W
03BC8:  MOVWF  x09
03BCA:  MOVF   x03,W
03BCC:  ADDWF  x07,W
03BCE:  MOVWF  x0A
03BD0:  MOVFF  109,124
03BD4:  MOVWF  x25
03BD6:  MOVLW  01
03BD8:  MOVWF  x26
03BDA:  MOVLB  0
03BDC:  CALL   1EE4
....................          PutPixel(x-b, a+y,1); 
03BE0:  MOVLB  1
03BE2:  MOVF   x07,W
03BE4:  SUBWF  x02,W
03BE6:  MOVWF  x09
03BE8:  MOVF   x03,W
03BEA:  ADDWF  x06,W
03BEC:  MOVWF  x0A
03BEE:  MOVFF  109,124
03BF2:  MOVWF  x25
03BF4:  MOVLW  01
03BF6:  MOVWF  x26
03BF8:  MOVLB  0
03BFA:  CALL   1EE4
....................          PutPixel(b+x, y-a,1); 
03BFE:  MOVLB  1
03C00:  MOVF   x02,W
03C02:  ADDWF  x07,W
03C04:  MOVWF  x09
03C06:  MOVF   x06,W
03C08:  SUBWF  x03,W
03C0A:  MOVWF  x0A
03C0C:  MOVFF  109,124
03C10:  MOVWF  x25
03C12:  MOVLW  01
03C14:  MOVWF  x26
03C16:  MOVLB  0
03C18:  CALL   1EE4
....................          PutPixel(a+x, y-b,1); 
03C1C:  MOVLB  1
03C1E:  MOVF   x02,W
03C20:  ADDWF  x06,W
03C22:  MOVWF  x09
03C24:  MOVF   x07,W
03C26:  SUBWF  x03,W
03C28:  MOVWF  x0A
03C2A:  MOVFF  109,124
03C2E:  MOVWF  x25
03C30:  MOVLW  01
03C32:  MOVWF  x26
03C34:  MOVLB  0
03C36:  CALL   1EE4
....................          PutPixel(x-a, y-b,1); 
03C3A:  MOVLB  1
03C3C:  MOVF   x06,W
03C3E:  SUBWF  x02,W
03C40:  MOVWF  x09
03C42:  MOVF   x07,W
03C44:  SUBWF  x03,W
03C46:  MOVWF  x0A
03C48:  MOVFF  109,124
03C4C:  MOVWF  x25
03C4E:  MOVLW  01
03C50:  MOVWF  x26
03C52:  MOVLB  0
03C54:  CALL   1EE4
....................          PutPixel(x-b, y-a,1); 
03C58:  MOVLB  1
03C5A:  MOVF   x07,W
03C5C:  SUBWF  x02,W
03C5E:  MOVWF  x09
03C60:  MOVF   x06,W
03C62:  SUBWF  x03,W
03C64:  MOVWF  x0A
03C66:  MOVFF  109,124
03C6A:  MOVWF  x25
03C6C:  MOVLW  01
03C6E:  MOVWF  x26
03C70:  MOVLB  0
03C72:  CALL   1EE4
....................       } 
....................        
....................       if(P < 0) 
03C76:  MOVLB  1
03C78:  BTFSC  x08.7
03C7A:  BRA    3C7E
03C7C:  BRA    3C9A
....................       P+= 3 + 2*a++; 
03C7E:  MOVF   x06,W
03C80:  INCF   x06,F
03C82:  MOVWF  x09
03C84:  MOVLW  02
03C86:  MOVWF  x0A
03C88:  MOVFF  109,10B
03C8C:  MOVLB  0
03C8E:  RCALL  3A64
03C90:  MOVF   01,W
03C92:  ADDLW  03
03C94:  MOVLB  1
03C96:  ADDWF  x08,F
....................     else 
03C98:  BRA    3CBC
....................       P+= 5 + 2*(a++ - b--); 
03C9A:  MOVF   x06,W
03C9C:  INCF   x06,F
03C9E:  MOVWF  x09
03CA0:  MOVF   x07,W
03CA2:  DECF   x07,F
03CA4:  SUBWF  x09,W
03CA6:  MOVWF  x09
03CA8:  MOVLW  02
03CAA:  MOVWF  x0A
03CAC:  MOVFF  109,10B
03CB0:  MOVLB  0
03CB2:  RCALL  3A64
03CB4:  MOVF   01,W
03CB6:  ADDLW  05
03CB8:  MOVLB  1
03CBA:  ADDWF  x08,F
....................       
....................   }while(a<=b); 
03CBC:  MOVF   x06,W
03CBE:  XORLW  80
03CC0:  MOVWF  00
03CC2:  MOVF   x07,W
03CC4:  XORLW  80
03CC6:  SUBWF  00,W
03CC8:  BTFSC  FD8.2
03CCA:  BRA    3AC2
03CCC:  BTFSS  FD8.0
03CCE:  BRA    3AC2
....................  
.................... } 
03CD0:  MOVLB  0
03CD2:  RETURN 0
.................... /******************************************************************************* 
.................... *   Bargraph Çizme Fonksiyonu                                                  * 
.................... *   Parameter:    x1, y1, x2, y2, Mode, Value                                  * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void Bargraph (unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int1 hor, unsigned int value,) 
.................... { 
*
04C7E:  MOVLB  1
04C80:  CLRF   x0C
04C82:  CLRF   x0D
04C84:  CLRF   x0E
04C86:  CLRF   x0F
04C88:  CLRF   x11
04C8A:  CLRF   x10
....................   unsigned int w=0;     
....................   unsigned int h=0; 
....................   unsigned int a=0,b=0; 
....................   unsigned int16 barval=0; 
....................    
....................   if(x1>x2) w=x1-x2; 
04C8C:  MOVF   x06,W
04C8E:  SUBWF  x08,W
04C90:  BC    4C98
04C92:  MOVF   x08,W
04C94:  SUBWF  x06,W
04C96:  MOVWF  x0C
....................   if(x1<x2) w=x2-x1;   
04C98:  MOVF   x08,W
04C9A:  SUBWF  x06,W
04C9C:  BC    4CA4
04C9E:  MOVF   x06,W
04CA0:  SUBWF  x08,W
04CA2:  MOVWF  x0C
....................   if(y1>y2) h=y1-y2;  
04CA4:  MOVF   x07,W
04CA6:  SUBWF  x09,W
04CA8:  BC    4CB0
04CAA:  MOVF   x09,W
04CAC:  SUBWF  x07,W
04CAE:  MOVWF  x0D
....................   if(y1<y2) h=y2-y1; 
04CB0:  MOVF   x09,W
04CB2:  SUBWF  x07,W
04CB4:  BC    4CBC
04CB6:  MOVF   x07,W
04CB8:  SUBWF  x09,W
04CBA:  MOVWF  x0D
....................    
....................   if(value>100)value=100; 
04CBC:  MOVF   x0B,W
04CBE:  SUBLW  64
04CC0:  BC    4CC6
04CC2:  MOVLW  64
04CC4:  MOVWF  x0B
....................    
....................   if(hor) //Bar Dikey Olarak Oluþturulacak 
04CC6:  MOVF   x0A,F
04CC8:  BZ    4D76
....................   { 
....................     barval=((int16)value*h)/100; 
04CCA:  CLRF   x13
04CCC:  MOVFF  10B,112
04CD0:  MOVFF  113,11A
04CD4:  MOVFF  10B,119
04CD8:  CLRF   x1C
04CDA:  MOVFF  10D,11B
04CDE:  MOVLB  0
04CE0:  CALL   1E28
04CE4:  MOVFF  02,113
04CE8:  MOVFF  01,112
04CEC:  MOVFF  02,115
04CF0:  MOVFF  01,114
04CF4:  MOVLB  1
04CF6:  CLRF   x17
04CF8:  MOVLW  64
04CFA:  MOVWF  x16
04CFC:  MOVLB  0
04CFE:  RCALL  4C38
04D00:  MOVFF  02,111
04D04:  MOVFF  01,110
....................    
....................     for (a=0;a<h+1;a++) 
04D08:  MOVLB  1
04D0A:  CLRF   x0E
04D0C:  MOVLW  01
04D0E:  ADDWF  x0D,W
04D10:  SUBWF  x0E,W
04D12:  BC    4D74
....................     { 
....................       for(b=0;b<w+1;b++) 
04D14:  CLRF   x0F
04D16:  MOVLW  01
04D18:  ADDWF  x0C,W
04D1A:  SUBWF  x0F,W
04D1C:  BC    4D70
....................       { 
....................         if(barval>=a){ 
04D1E:  MOVF   x11,F
04D20:  BNZ   4D28
04D22:  MOVF   x0E,W
04D24:  SUBWF  x10,W
04D26:  BNC   4D4C
....................            PutPixel(x1+b,15-a+y1,1); 
04D28:  MOVF   x0F,W
04D2A:  ADDWF  x06,W
04D2C:  MOVWF  x12
04D2E:  MOVLW  0F
04D30:  BSF    FD8.0
04D32:  SUBFWB x0E,W
04D34:  ADDWF  x07,W
04D36:  MOVWF  x13
04D38:  MOVFF  112,124
04D3C:  MOVWF  x25
04D3E:  MOVLW  01
04D40:  MOVWF  x26
04D42:  MOVLB  0
04D44:  CALL   1EE4
....................         }else{ 
04D48:  BRA    4D6A
04D4A:  MOVLB  1
....................            PutPixel(x1+b,15-a+y1,0); 
04D4C:  MOVF   x0F,W
04D4E:  ADDWF  x06,W
04D50:  MOVWF  x12
04D52:  MOVLW  0F
04D54:  BSF    FD8.0
04D56:  SUBFWB x0E,W
04D58:  ADDWF  x07,W
04D5A:  MOVWF  x13
04D5C:  MOVFF  112,124
04D60:  MOVWF  x25
04D62:  CLRF   x26
04D64:  MOVLB  0
04D66:  CALL   1EE4
....................         } 
....................       } 
04D6A:  MOVLB  1
04D6C:  INCF   x0F,F
04D6E:  BRA    4D16
....................     } 
04D70:  INCF   x0E,F
04D72:  BRA    4D0C
....................      
....................   }else{  //Bar Yatay olarak Oluþturulacak 
04D74:  BRA    4E18
....................    
....................     barval=((int16)value*w)/100; 
04D76:  CLRF   x13
04D78:  MOVFF  10B,112
04D7C:  MOVFF  113,11A
04D80:  MOVFF  10B,119
04D84:  CLRF   x1C
04D86:  MOVFF  10C,11B
04D8A:  MOVLB  0
04D8C:  CALL   1E28
04D90:  MOVFF  02,113
04D94:  MOVFF  01,112
04D98:  MOVFF  02,115
04D9C:  MOVFF  01,114
04DA0:  MOVLB  1
04DA2:  CLRF   x17
04DA4:  MOVLW  64
04DA6:  MOVWF  x16
04DA8:  MOVLB  0
04DAA:  RCALL  4C38
04DAC:  MOVFF  02,111
04DB0:  MOVFF  01,110
....................      
....................     for (a=0;a<w+1;a++) 
04DB4:  MOVLB  1
04DB6:  CLRF   x0E
04DB8:  MOVLW  01
04DBA:  ADDWF  x0C,W
04DBC:  SUBWF  x0E,W
04DBE:  BC    4E18
....................     { 
....................       for(b=0;b<h+1;b++) 
04DC0:  CLRF   x0F
04DC2:  MOVLW  01
04DC4:  ADDWF  x0D,W
04DC6:  SUBWF  x0F,W
04DC8:  BC    4E14
....................       { 
....................         if(barval>=a) 
04DCA:  MOVF   x11,F
04DCC:  BNZ   4DD4
04DCE:  MOVF   x0E,W
04DD0:  SUBWF  x10,W
04DD2:  BNC   4DF4
....................         { 
....................           PutPixel(x1+a,y1+b,1); 
04DD4:  MOVF   x0E,W
04DD6:  ADDWF  x06,W
04DD8:  MOVWF  x12
04DDA:  MOVF   x0F,W
04DDC:  ADDWF  x07,W
04DDE:  MOVWF  x13
04DE0:  MOVFF  112,124
04DE4:  MOVWF  x25
04DE6:  MOVLW  01
04DE8:  MOVWF  x26
04DEA:  MOVLB  0
04DEC:  CALL   1EE4
....................         }else{ 
04DF0:  BRA    4E0E
04DF2:  MOVLB  1
....................           PutPixel(x1+a,y1+b,0); 
04DF4:  MOVF   x0E,W
04DF6:  ADDWF  x06,W
04DF8:  MOVWF  x12
04DFA:  MOVF   x0F,W
04DFC:  ADDWF  x07,W
04DFE:  MOVWF  x13
04E00:  MOVFF  112,124
04E04:  MOVWF  x25
04E06:  CLRF   x26
04E08:  MOVLB  0
04E0A:  CALL   1EE4
....................         } 
....................       } 
04E0E:  MOVLB  1
04E10:  INCF   x0F,F
04E12:  BRA    4DC2
....................     } 
04E14:  INCF   x0E,F
04E16:  BRA    4DB8
....................   } 
.................... } 
04E18:  MOVLB  0
04E1A:  RETURN 0
.................... /******************************************************************************* 
.................... *   Text Basma Fonksiyonu                                                      * 
.................... *   Parameter:    x, y, size, fill                                             * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void ShowString(unsigned int x, unsigned int y, unsigned int size, int1 fill){ 
....................   switch(size) 
....................   { 
*
02582:  MOVLB  1
02584:  MOVF   x0C,W
02586:  XORLW  01
02588:  MOVLB  0
0258A:  BZ    259A
0258C:  XORLW  03
0258E:  BZ    25AA
02590:  XORLW  01
02592:  BZ    25BA
02594:  XORLW  07
02596:  BZ    25CA
02598:  BRA    25DA
....................     case 1:  DrawCharFont1(x,y,fill);break; 
0259A:  MOVFF  10A,10E
0259E:  MOVFF  10B,10F
025A2:  MOVFF  10D,110
025A6:  BRA    1FF6
025A8:  BRA    25DC
....................     case 2:  DrawCharFont2(x,y,fill);break; 
025AA:  MOVFF  10A,10E
025AE:  MOVFF  10B,10F
025B2:  MOVFF  10D,110
025B6:  BRA    20D6
025B8:  BRA    25DC
....................     case 3:  DrawCharFont3(x,y,fill);break; 
025BA:  MOVFF  10A,10E
025BE:  MOVFF  10B,10F
025C2:  MOVFF  10D,110
025C6:  BRA    2250
025C8:  BRA    25DC
....................     case 4:  DrawCharFont4(x,y,fill);break; 
025CA:  MOVFF  10A,10E
025CE:  MOVFF  10B,10F
025D2:  MOVFF  10D,110
025D6:  BRA    240A
025D8:  BRA    25DC
....................     default: break; 
025DA:  BRA    25DC
....................   } 
.................... } 
025DC:  RETURN 0
.................... /******************************************************************************* 
.................... *   Text Kaydýrma Fonksiyonu                                                   * 
.................... *   Parameter:    Line, Size, Speed, Fill                                      * 
.................... *   Return:                                                                    * 
.................... *******************************************************************************/ 
.................... void TextToLeftScroll(unsigned int Line, unsigned int Size, unsigned int Speed,int1 fill){ 
....................    switch (size) 
....................    { 
*
03406:  MOVLB  1
03408:  MOVF   x03,W
0340A:  XORLW  01
0340C:  MOVLB  0
0340E:  BZ    341E
03410:  XORLW  03
03412:  BZ    342E
03414:  XORLW  01
03416:  BZ    343E
03418:  XORLW  07
0341A:  BZ    344E
0341C:  BRA    345E
....................      case 1:  ScrollTextFont1(Line,Speed,fill);Break; 
0341E:  MOVFF  102,106
03422:  MOVFF  104,107
03426:  MOVFF  105,108
0342A:  BRA    2D96
0342C:  BRA    3460
....................      case 2:  ScrollTextFont2(Line,Speed,fill);Break; 
0342E:  MOVFF  102,106
03432:  MOVFF  104,107
03436:  MOVFF  105,108
0343A:  BRA    2EF2
0343C:  BRA    3460
....................      case 3:  ScrollTextFont3(Line,Speed,fill);Break; 
0343E:  MOVFF  102,106
03442:  MOVFF  104,107
03446:  MOVFF  105,108
0344A:  BRA    30A6
0344C:  BRA    3460
....................      case 4:  ScrollTextFont4(Line,Speed,fill);Break; 
0344E:  MOVFF  102,106
03452:  MOVFF  104,107
03456:  MOVFF  105,108
0345A:  BRA    325A
0345C:  BRA    3460
....................      default: Break; 
0345E:  BRA    3460
....................    } 
.................... } 
03460:  RETURN 0
....................  
.................... void Writeimage(){ 
.................... int8 a=0,b=0,i=0; 
.................... int8 cdata=0; 
....................    
....................    for (a=0;a<32;a++) 
....................    { 
....................      cdata=imageBuffer[i]; 
....................      for(b=0;b<8;b++) 
....................      { 
....................         PutPixel(a,b,(cdata>>b)&0x01);  
....................      } 
....................      i++; 
....................      cdata=imageBuffer[i]; 
....................      for(b=0;b<8;b++) 
....................      { 
....................         PutPixel(a,8+b,(cdata>>b)&0x01); 
....................      } 
....................      i++; 
....................    } 
....................  
.................... } 
....................  
....................  
....................  
.................... /********************************Global Deðiþkenler****************************/ 
.................... unsigned int8 int_syc=0; 
.................... int i=0,w=0; 
.................... /**********************************Fonksiyonlar********************************/ 
.................... void write_data    (unsigned int8 row_adr); 
....................  
.................... void FontTest      (void); 
.................... void NumberTest    (void); 
.................... void ScrollTest    (void); 
.................... void BrightTest    (void); 
.................... void GeoShapes     (void); 
.................... void SineWawe      (void); 
.................... void BarTest       (void); 
.................... /********************************Kesme Alt Programý****************************/ 
.................... #int_timer0                      //Timer0 Kesmesi 
.................... void Timer0_int(){ 
.................... set_timer0(133);                 //800us Gecikme için Timer kuruluyor.. 
*
01DA4:  CLRF   FD7
01DA6:  MOVLW  85
01DA8:  MOVWF  FD6
.................... switch (int_syc)   //Her 800us de Bir bir sonraki satýra Geç 
.................... { 
01DAA:  MOVF   xFD,W
01DAC:  ADDLW  FC
01DAE:  BC    1DF6
01DB0:  ADDLW  04
01DB2:  GOTO   1E06
.................... case 0: 
....................      output_low(PinOE);write_data(int_syc); 
01DB6:  BCF    F8B.4
01DB8:  MOVFF  FD,154
01DBC:  RCALL  1D3E
....................      output_low(PinA);output_low(PinB);output_high(PinOE); 
01DBE:  BCF    F8B.0
01DC0:  BCF    F8B.1
01DC2:  BSF    F8B.4
....................      break; 
01DC4:  BRA    1DF6
.................... case 1: 
....................      output_low(PinOE);write_data(int_syc); 
01DC6:  BCF    F8B.4
01DC8:  MOVFF  FD,154
01DCC:  RCALL  1D3E
....................      output_high(PinA);output_low(PinB);output_high(PinOE); 
01DCE:  BSF    F8B.0
01DD0:  BCF    F8B.1
01DD2:  BSF    F8B.4
....................      break; 
01DD4:  BRA    1DF6
.................... case 2: 
....................      output_low(PinOE);write_data(int_syc); 
01DD6:  BCF    F8B.4
01DD8:  MOVFF  FD,154
01DDC:  RCALL  1D3E
....................      output_low(PinA);output_high(PinB);output_high(PinOE); 
01DDE:  BCF    F8B.0
01DE0:  BSF    F8B.1
01DE2:  BSF    F8B.4
....................      break; 
01DE4:  BRA    1DF6
.................... case 3: 
....................      output_low(PinOE);write_data(int_syc); 
01DE6:  BCF    F8B.4
01DE8:  MOVFF  FD,154
01DEC:  RCALL  1D3E
....................      output_high(PinA);output_high(PinB);output_high(PinOE); 
01DEE:  BSF    F8B.0
01DF0:  BSF    F8B.1
01DF2:  BSF    F8B.4
....................      break; 
01DF4:  BRA    1DF6
.................... } 
.................... int_syc++;if(int_syc>3)int_syc=0; 
01DF6:  INCF   xFD,F
01DF8:  MOVF   xFD,W
01DFA:  SUBLW  03
01DFC:  BTFSS  FD8.0
01DFE:  CLRF   xFD
.................... } 
....................  
.................... /**********************************Ana Program*********************************/ 
01E00:  BCF    FF2.2
01E02:  GOTO   0060
.................... void main() 
.................... { 
*
0512E:  CLRF   FF8
05130:  BCF    FD0.7
05132:  BSF    07.7
05134:  CLRF   FEA
05136:  CLRF   FE9
05138:  CLRF   xFD
0513A:  CLRF   xFE
0513C:  CLRF   xFF
0513E:  MOVLB  1
05140:  CLRF   x01
05142:  CLRF   x00
05144:  MOVF   FC1,W
05146:  ANDLW  C0
05148:  IORLW  0F
0514A:  MOVWF  FC1
0514C:  MOVLW  07
0514E:  MOVWF  FB4
05150:  CLRF   59
....................    set_tris_a(0x03); 
05152:  MOVLW  03
05154:  MOVWF  F92
....................    set_tris_b(0x00); 
05156:  MOVLW  00
05158:  MOVWF  F93
....................    set_tris_c(0x00); 
0515A:  MOVWF  F94
....................    set_tris_d(0x00); 
0515C:  MOVWF  F95
....................    set_tris_e(0x00); 
0515E:  BCF    F96.0
05160:  BCF    F96.1
05162:  BCF    F96.2
05164:  BCF    F96.3
....................     
....................    setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_SS_DISABLED); 
05166:  BCF    FC6.5
05168:  MOVLW  21
0516A:  MOVWF  FC6
0516C:  MOVLW  00
0516E:  MOVWF  FC7
....................    setup_adc(ADC_OFF); 
05170:  BCF    FC2.0
....................    setup_ccp1(CCP_PWM); 
05172:  BCF    F8B.2
05174:  MOVLW  0C
05176:  MOVWF  FBD
05178:  CLRF   FB7
0517A:  CLRF   FB6
....................    setup_ccp2(CCP_OFF); 
0517C:  MOVLW  F0
0517E:  ANDWF  FBA,F
....................    setup_timer_0(T0_INTERNAl | T0_8_BIT | T0_DIV_64); 
05180:  MOVLW  C5
05182:  MOVWF  FD5
....................    setup_timer_2(T2_DIV_BY_4,249,1); 
05184:  MOVLW  00
05186:  IORLW  05
05188:  MOVWF  FCA
0518A:  MOVLW  F9
0518C:  MOVWF  FCB
....................    enable_interrupts(INT_timer0); 
0518E:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); 
05190:  MOVLW  C0
05192:  IORWF  FF2,F
....................    set_timer0(133); 
05194:  CLRF   FD7
05196:  MOVLW  85
05198:  MOVWF  FD6
....................     
....................    output_a(0x00); 
0519A:  CLRF   F89
....................    output_b(0x00); 
0519C:  CLRF   F8A
....................    output_c(0x00); 
0519E:  CLRF   F8B
....................    output_d(0x00); 
051A0:  CLRF   F8C
....................    output_e(0x00); 
051A2:  CLRF   F8D
....................     
....................    Set_Brightness(10);   //Parlaklýk veriliyor. 
051A4:  MOVLW  0A
051A6:  MOVWF  x02
051A8:  MOVLB  0
051AA:  CALL   1E4A
....................    clear_display(0);     //Ekraný Temizle 
051AE:  MOVLB  1
051B0:  CLRF   x0A
051B2:  MOVLB  0
051B4:  CALL   1E90
....................     
....................       Text="P10"; 
051B8:  CLRF   FEA
051BA:  MOVLW  59
051BC:  MOVWF  FE9
051BE:  MOVLW  00
051C0:  CALL   1B0E
051C4:  TBLRD*-
051C6:  TBLRD*+
051C8:  MOVF   FF5,W
051CA:  MOVWF  FEE
051CC:  IORLW  00
051CE:  BNZ   51C6
....................       ShowString(7,0,1,0); 
051D0:  MOVLW  07
051D2:  MOVLB  1
051D4:  MOVWF  x0A
051D6:  CLRF   x0B
051D8:  MOVLW  01
051DA:  MOVWF  x0C
051DC:  CLRF   x0D
051DE:  MOVLB  0
051E0:  CALL   2582
....................       Text="Test"; 
051E4:  CLRF   FEA
051E6:  MOVLW  59
051E8:  MOVWF  FE9
051EA:  MOVLW  00
051EC:  CALL   1B22
051F0:  TBLRD*-
051F2:  TBLRD*+
051F4:  MOVF   FF5,W
051F6:  MOVWF  FEE
051F8:  IORLW  00
051FA:  BNZ   51F2
....................       ShowString(4,8,1,0); 
051FC:  MOVLW  04
051FE:  MOVLB  1
05200:  MOVWF  x0A
05202:  MOVLW  08
05204:  MOVWF  x0B
05206:  MOVLW  01
05208:  MOVWF  x0C
0520A:  CLRF   x0D
0520C:  MOVLB  0
0520E:  CALL   2582
....................       delay_ms(1500); 
05212:  MOVLW  06
05214:  MOVLB  1
05216:  MOVWF  x02
05218:  MOVLW  FA
0521A:  MOVWF  x13
0521C:  MOVLB  0
0521E:  CALL   25DE
05222:  MOVLB  1
05224:  DECFSZ x02,F
05226:  BRA    5218
....................       for (i=0;i<32;i++) 
05228:  MOVLB  0
0522A:  CLRF   xFE
0522C:  MOVF   xFE,W
0522E:  SUBLW  1F
05230:  BNC   525C
....................       { 
....................         for (w=0;w<16;w++) 
05232:  CLRF   xFF
05234:  MOVF   xFF,W
05236:  SUBLW  0F
05238:  BNC   524C
....................         { 
....................            LineScroll(w,0); 
0523A:  MOVFF  FF,115
0523E:  MOVLB  1
05240:  CLRF   x16
05242:  MOVLB  0
05244:  CALL   2608
....................         } 
05248:  INCF   xFF,F
0524A:  BRA    5234
....................         delay_ms(30); 
0524C:  MOVLW  1E
0524E:  MOVLB  1
05250:  MOVWF  x13
05252:  MOVLB  0
05254:  CALL   25DE
....................       } 
05258:  INCF   xFE,F
0525A:  BRA    522C
....................    
....................    while(TRUE) 
....................    { 
....................       FontTest(); 
0525C:  GOTO   2864
....................       delay_ms(1000); 
05260:  MOVLW  04
05262:  MOVLB  1
05264:  MOVWF  x02
05266:  MOVLW  FA
05268:  MOVWF  x13
0526A:  MOVLB  0
0526C:  CALL   25DE
05270:  MOVLB  1
05272:  DECFSZ x02,F
05274:  BRA    5266
....................       NumberTest(); 
05276:  MOVLB  0
05278:  GOTO   2B34
....................       delay_ms(1000); 
0527C:  MOVLW  04
0527E:  MOVLB  1
05280:  MOVWF  x02
05282:  MOVLW  FA
05284:  MOVWF  x13
05286:  MOVLB  0
05288:  CALL   25DE
0528C:  MOVLB  1
0528E:  DECFSZ x02,F
05290:  BRA    5282
....................       ScrollTest(); 
05292:  MOVLB  0
05294:  GOTO   3462
....................       delay_ms(1000); 
05298:  MOVLW  04
0529A:  MOVLB  1
0529C:  MOVWF  x02
0529E:  MOVLW  FA
052A0:  MOVWF  x13
052A2:  MOVLB  0
052A4:  CALL   25DE
052A8:  MOVLB  1
052AA:  DECFSZ x02,F
052AC:  BRA    529E
....................       BrightTest(); 
052AE:  MOVLB  0
052B0:  GOTO   362C
....................       delay_ms(1000); 
052B4:  MOVLW  04
052B6:  MOVLB  1
052B8:  MOVWF  x02
052BA:  MOVLW  FA
052BC:  MOVWF  x13
052BE:  MOVLB  0
052C0:  CALL   25DE
052C4:  MOVLB  1
052C6:  DECFSZ x02,F
052C8:  BRA    52BA
....................       GeoShapes(); 
052CA:  MOVLB  0
052CC:  GOTO   3CD4
....................       delay_ms(1000); 
052D0:  MOVLW  04
052D2:  MOVLB  1
052D4:  MOVWF  x02
052D6:  MOVLW  FA
052D8:  MOVWF  x13
052DA:  MOVLB  0
052DC:  CALL   25DE
052E0:  MOVLB  1
052E2:  DECFSZ x02,F
052E4:  BRA    52D6
....................       SineWawe(); 
052E6:  MOVLB  0
052E8:  GOTO   4A06
....................       delay_ms(1000); 
052EC:  MOVLW  04
052EE:  MOVLB  1
052F0:  MOVWF  x02
052F2:  MOVLW  FA
052F4:  MOVWF  x13
052F6:  MOVLB  0
052F8:  CALL   25DE
052FC:  MOVLB  1
052FE:  DECFSZ x02,F
05300:  BRA    52F2
....................       BarTest(); 
05302:  MOVLB  0
05304:  BRA    4E1C
....................       delay_ms(2000); 
05306:  MOVLW  08
05308:  MOVLB  1
0530A:  MOVWF  x02
0530C:  MOVLW  FA
0530E:  MOVWF  x13
05310:  MOVLB  0
05312:  CALL   25DE
05316:  MOVLB  1
05318:  DECFSZ x02,F
0531A:  BRA    530C
....................        
....................       Text="www.arectron.com      "; 
0531C:  CLRF   FEA
0531E:  MOVLW  59
05320:  MOVWF  FE9
05322:  MOVLW  00
05324:  MOVLB  0
05326:  CALL   1B38
0532A:  TBLRD*-
0532C:  TBLRD*+
0532E:  MOVF   FF5,W
05330:  MOVWF  FEE
05332:  IORLW  00
05334:  BNZ   532C
....................       TextToLeftScroll(4,1,9,0); 
05336:  MOVLW  04
05338:  MOVLB  1
0533A:  MOVWF  x02
0533C:  MOVLW  01
0533E:  MOVWF  x03
05340:  MOVLW  09
05342:  MOVWF  x04
05344:  CLRF   x05
05346:  MOVLB  0
05348:  CALL   3406
....................        
....................       delay_ms(2000); 
0534C:  MOVLW  08
0534E:  MOVLB  1
05350:  MOVWF  x02
05352:  MOVLW  FA
05354:  MOVWF  x13
05356:  MOVLB  0
05358:  CALL   25DE
0535C:  MOVLB  1
0535E:  DECFSZ x02,F
05360:  BRA    5352
....................    } 
05362:  MOVLB  0
05364:  BRA    525C
.................... } 
....................  
.................... void write_data(unsigned int8 row_adr) 
.................... { 
*
01D3E:  MOVLB  1
01D40:  CLRF   x55
01D42:  CLRF   x56
01D44:  MOVLW  03
01D46:  MOVWF  x57
*
05366:  SLEEP 
....................    int8 i=0,j=0; 
....................    int8 k=3; 
....................    while(k!=255)                                   // Bu Döngü ileriye doðru sayarsa panel saðdan  
....................    {j=15-k;                                        // Sola Doðru yüklenir.  
*
01D48:  INCFSZ x57,W
01D4A:  BRA    1D4E
01D4C:  BRA    1D9A
01D4E:  MOVLW  0F
01D50:  BSF    FD8.0
01D52:  SUBFWB x57,W
01D54:  MOVWF  x56
....................      for (i=0;i<4;i++)                             // Satýrlar dolduruluyor.. 
01D56:  CLRF   x55
01D58:  MOVF   x55,W
01D5A:  SUBLW  03
01D5C:  BNC   1D96
....................      { 
....................        spi_write(display_ram[j][row_adr]); 
01D5E:  MOVF   x56,W
01D60:  MULLW  04
01D62:  MOVF   FF3,W
01D64:  CLRF   x59
01D66:  MOVWF  x58
01D68:  CLRF   03
01D6A:  MOVF   x54,W
01D6C:  ADDWF  x58,W
01D6E:  MOVWF  01
01D70:  MOVF   x59,W
01D72:  ADDWFC 03,F
01D74:  MOVF   01,W
01D76:  ADDLW  19
01D78:  MOVWF  FE9
01D7A:  MOVLW  00
01D7C:  ADDWFC 03,W
01D7E:  MOVWF  FEA
01D80:  MOVFF  FEF,158
01D84:  MOVF   FC9,W
01D86:  MOVFF  158,FC9
01D8A:  RRCF   FC7,W
01D8C:  BNC   1D8A
....................        j-=4; 
01D8E:  MOVLW  04
01D90:  SUBWF  x56,F
....................      } 
01D92:  INCF   x55,F
01D94:  BRA    1D58
....................      k--; 
01D96:  DECF   x57,F
....................    } 
01D98:  BRA    1D48
....................    output_high(LATCH); 
01D9A:  BSF    F8B.6
....................    delay_cycles(2); 
01D9C:  BRA    1D9E
....................    output_low(LATCH); 
01D9E:  BCF    F8B.6
.................... } 
01DA0:  MOVLB  0
01DA2:  RETURN 0
....................  
.................... void FontTest(void){ 
....................    Text="Font"; 
*
02864:  CLRF   FEA
02866:  MOVLW  59
02868:  MOVWF  FE9
0286A:  MOVLW  00
0286C:  CALL   1B60
02870:  TBLRD*-
02872:  TBLRD*+
02874:  MOVF   FF5,W
02876:  MOVWF  FEE
02878:  IORLW  00
0287A:  BNZ   2872
....................    ShowString(3,0,1,0); 
0287C:  MOVLW  03
0287E:  MOVLB  1
02880:  MOVWF  x0A
02882:  CLRF   x0B
02884:  MOVLW  01
02886:  MOVWF  x0C
02888:  CLRF   x0D
0288A:  MOVLB  0
0288C:  RCALL  2582
....................    Text="Test"; 
0288E:  CLRF   FEA
02890:  MOVLW  59
02892:  MOVWF  FE9
02894:  MOVLW  00
02896:  CALL   1B22
0289A:  TBLRD*-
0289C:  TBLRD*+
0289E:  MOVF   FF5,W
028A0:  MOVWF  FEE
028A2:  IORLW  00
028A4:  BNZ   289C
....................    ShowString(3,8,1,0); 
028A6:  MOVLW  03
028A8:  MOVLB  1
028AA:  MOVWF  x0A
028AC:  MOVLW  08
028AE:  MOVWF  x0B
028B0:  MOVLW  01
028B2:  MOVWF  x0C
028B4:  CLRF   x0D
028B6:  MOVLB  0
028B8:  RCALL  2582
....................    delay_ms(1500); 
028BA:  MOVLW  06
028BC:  MOVLB  1
028BE:  MOVWF  x02
028C0:  MOVLW  FA
028C2:  MOVWF  x13
028C4:  MOVLB  0
028C6:  RCALL  25DE
028C8:  MOVLB  1
028CA:  DECFSZ x02,F
028CC:  BRA    28C0
....................    clear_display(0); 
028CE:  CLRF   x0A
028D0:  MOVLB  0
028D2:  CALL   1E90
....................    delay_ms(100); 
028D6:  MOVLW  64
028D8:  MOVLB  1
028DA:  MOVWF  x13
028DC:  MOVLB  0
028DE:  RCALL  25DE
....................     
....................     
....................    Text="A"; 
028E0:  CLRF   FEA
028E2:  MOVLW  59
028E4:  MOVWF  FE9
028E6:  MOVLW  00
028E8:  CALL   1B76
028EC:  TBLRD*-
028EE:  TBLRD*+
028F0:  MOVF   FF5,W
028F2:  MOVWF  FEE
028F4:  IORLW  00
028F6:  BNZ   28EE
....................    for (i=1;i<5;i++) 
028F8:  MOVLW  01
028FA:  MOVWF  xFE
028FC:  MOVF   xFE,W
028FE:  SUBLW  04
02900:  BNC   2932
....................    { 
....................      ShowString(0,0,i,0); 
02902:  MOVLB  1
02904:  CLRF   x0A
02906:  CLRF   x0B
02908:  MOVFF  FE,10C
0290C:  CLRF   x0D
0290E:  MOVLB  0
02910:  RCALL  2582
....................      delay_ms(400); 
02912:  MOVLW  02
02914:  MOVLB  1
02916:  MOVWF  x02
02918:  MOVLW  C8
0291A:  MOVWF  x13
0291C:  MOVLB  0
0291E:  RCALL  25DE
02920:  MOVLB  1
02922:  DECFSZ x02,F
02924:  BRA    2918
....................      clear_display(0); 
02926:  CLRF   x0A
02928:  MOVLB  0
0292A:  CALL   1E90
....................    } 
0292E:  INCF   xFE,F
02930:  BRA    28FC
....................    Text="B"; 
02932:  CLRF   FEA
02934:  MOVLW  59
02936:  MOVWF  FE9
02938:  MOVLW  00
0293A:  CALL   1B88
0293E:  TBLRD*-
02940:  TBLRD*+
02942:  MOVF   FF5,W
02944:  MOVWF  FEE
02946:  IORLW  00
02948:  BNZ   2940
....................    for (i=1;i<5;i++) 
0294A:  MOVLW  01
0294C:  MOVWF  xFE
0294E:  MOVF   xFE,W
02950:  SUBLW  04
02952:  BNC   2984
....................    { 
....................      ShowString(0,0,i,0); 
02954:  MOVLB  1
02956:  CLRF   x0A
02958:  CLRF   x0B
0295A:  MOVFF  FE,10C
0295E:  CLRF   x0D
02960:  MOVLB  0
02962:  RCALL  2582
....................      delay_ms(400); 
02964:  MOVLW  02
02966:  MOVLB  1
02968:  MOVWF  x02
0296A:  MOVLW  C8
0296C:  MOVWF  x13
0296E:  MOVLB  0
02970:  RCALL  25DE
02972:  MOVLB  1
02974:  DECFSZ x02,F
02976:  BRA    296A
....................      clear_display(0); 
02978:  CLRF   x0A
0297A:  MOVLB  0
0297C:  CALL   1E90
....................    } 
02980:  INCF   xFE,F
02982:  BRA    294E
....................    Text="C"; 
02984:  CLRF   FEA
02986:  MOVLW  59
02988:  MOVWF  FE9
0298A:  MOVLW  00
0298C:  CALL   1B9A
02990:  TBLRD*-
02992:  TBLRD*+
02994:  MOVF   FF5,W
02996:  MOVWF  FEE
02998:  IORLW  00
0299A:  BNZ   2992
....................    for (i=1;i<5;i++) 
0299C:  MOVLW  01
0299E:  MOVWF  xFE
029A0:  MOVF   xFE,W
029A2:  SUBLW  04
029A4:  BNC   29D6
....................    { 
....................      ShowString(0,0,i,0); 
029A6:  MOVLB  1
029A8:  CLRF   x0A
029AA:  CLRF   x0B
029AC:  MOVFF  FE,10C
029B0:  CLRF   x0D
029B2:  MOVLB  0
029B4:  RCALL  2582
....................      delay_ms(400); 
029B6:  MOVLW  02
029B8:  MOVLB  1
029BA:  MOVWF  x02
029BC:  MOVLW  C8
029BE:  MOVWF  x13
029C0:  MOVLB  0
029C2:  RCALL  25DE
029C4:  MOVLB  1
029C6:  DECFSZ x02,F
029C8:  BRA    29BC
....................      clear_display(0); 
029CA:  CLRF   x0A
029CC:  MOVLB  0
029CE:  CALL   1E90
....................    } 
029D2:  INCF   xFE,F
029D4:  BRA    29A0
....................    Text="D"; 
029D6:  CLRF   FEA
029D8:  MOVLW  59
029DA:  MOVWF  FE9
029DC:  MOVLW  00
029DE:  CALL   1BAC
029E2:  TBLRD*-
029E4:  TBLRD*+
029E6:  MOVF   FF5,W
029E8:  MOVWF  FEE
029EA:  IORLW  00
029EC:  BNZ   29E4
....................    for (i=1;i<5;i++) 
029EE:  MOVLW  01
029F0:  MOVWF  xFE
029F2:  MOVF   xFE,W
029F4:  SUBLW  04
029F6:  BNC   2A28
....................    { 
....................      ShowString(0,0,i,0); 
029F8:  MOVLB  1
029FA:  CLRF   x0A
029FC:  CLRF   x0B
029FE:  MOVFF  FE,10C
02A02:  CLRF   x0D
02A04:  MOVLB  0
02A06:  RCALL  2582
....................      delay_ms(400); 
02A08:  MOVLW  02
02A0A:  MOVLB  1
02A0C:  MOVWF  x02
02A0E:  MOVLW  C8
02A10:  MOVWF  x13
02A12:  MOVLB  0
02A14:  RCALL  25DE
02A16:  MOVLB  1
02A18:  DECFSZ x02,F
02A1A:  BRA    2A0E
....................      clear_display(0); 
02A1C:  CLRF   x0A
02A1E:  MOVLB  0
02A20:  CALL   1E90
....................    } 
02A24:  INCF   xFE,F
02A26:  BRA    29F2
.................... } 
02A28:  GOTO   5260 (RETURN)
....................  
.................... void NumberTest(void){ 
....................    Text="Numbr"; 
*
02B34:  CLRF   FEA
02B36:  MOVLW  59
02B38:  MOVWF  FE9
02B3A:  MOVLW  00
02B3C:  CALL   1BBE
02B40:  TBLRD*-
02B42:  TBLRD*+
02B44:  MOVF   FF5,W
02B46:  MOVWF  FEE
02B48:  IORLW  00
02B4A:  BNZ   2B42
....................    ShowString(0,0,1,0); 
02B4C:  MOVLB  1
02B4E:  CLRF   x0A
02B50:  CLRF   x0B
02B52:  MOVLW  01
02B54:  MOVWF  x0C
02B56:  CLRF   x0D
02B58:  MOVLB  0
02B5A:  RCALL  2582
....................    Text="Test"; 
02B5C:  CLRF   FEA
02B5E:  MOVLW  59
02B60:  MOVWF  FE9
02B62:  MOVLW  00
02B64:  CALL   1B22
02B68:  TBLRD*-
02B6A:  TBLRD*+
02B6C:  MOVF   FF5,W
02B6E:  MOVWF  FEE
02B70:  IORLW  00
02B72:  BNZ   2B6A
....................    ShowString(0,8,1,0); 
02B74:  MOVLB  1
02B76:  CLRF   x0A
02B78:  MOVLW  08
02B7A:  MOVWF  x0B
02B7C:  MOVLW  01
02B7E:  MOVWF  x0C
02B80:  CLRF   x0D
02B82:  MOVLB  0
02B84:  RCALL  2582
....................    delay_ms(1000); 
02B86:  MOVLW  04
02B88:  MOVLB  1
02B8A:  MOVWF  x02
02B8C:  MOVLW  FA
02B8E:  MOVWF  x13
02B90:  MOVLB  0
02B92:  RCALL  25DE
02B94:  MOVLB  1
02B96:  DECFSZ x02,F
02B98:  BRA    2B8C
....................    clear_display(0); 
02B9A:  CLRF   x0A
02B9C:  MOVLB  0
02B9E:  CALL   1E90
....................    delay_ms(100); 
02BA2:  MOVLW  64
02BA4:  MOVLB  1
02BA6:  MOVWF  x13
02BA8:  MOVLB  0
02BAA:  RCALL  25DE
....................    for (i=0;i<100;i++) 
02BAC:  CLRF   xFE
02BAE:  MOVF   xFE,W
02BB0:  SUBLW  63
02BB2:  BNC   2BE6
....................    { 
....................       sprintf(Text,"%02d",i); 
02BB4:  MOVLB  1
02BB6:  CLRF   x01
02BB8:  MOVLW  59
02BBA:  MOVWF  x00
02BBC:  MOVFF  FE,102
02BC0:  MOVLW  01
02BC2:  MOVWF  x03
02BC4:  MOVLB  0
02BC6:  RCALL  2A78
....................       ShowString(4,0,4,0); 
02BC8:  MOVLW  04
02BCA:  MOVLB  1
02BCC:  MOVWF  x0A
02BCE:  CLRF   x0B
02BD0:  MOVWF  x0C
02BD2:  CLRF   x0D
02BD4:  MOVLB  0
02BD6:  RCALL  2582
....................       delay_ms(100); 
02BD8:  MOVLW  64
02BDA:  MOVLB  1
02BDC:  MOVWF  x13
02BDE:  MOVLB  0
02BE0:  RCALL  25DE
....................    } 
02BE2:  INCF   xFE,F
02BE4:  BRA    2BAE
....................    for (i=0;i<3;i++) 
02BE6:  CLRF   xFE
02BE8:  MOVF   xFE,W
02BEA:  SUBLW  02
02BEC:  BNC   2C4C
....................    { 
....................      Text="--";// 
02BEE:  CLRF   FEA
02BF0:  MOVLW  59
02BF2:  MOVWF  FE9
02BF4:  MOVLW  00
02BF6:  CALL   1BD4
02BFA:  TBLRD*-
02BFC:  TBLRD*+
02BFE:  MOVF   FF5,W
02C00:  MOVWF  FEE
02C02:  IORLW  00
02C04:  BNZ   2BFC
....................      ShowString(4,0,4,0); 
02C06:  MOVLW  04
02C08:  MOVLB  1
02C0A:  MOVWF  x0A
02C0C:  CLRF   x0B
02C0E:  MOVWF  x0C
02C10:  CLRF   x0D
02C12:  MOVLB  0
02C14:  RCALL  2582
....................      delay_ms(700); 
02C16:  MOVLW  04
02C18:  MOVLB  1
02C1A:  MOVWF  x02
02C1C:  MOVLW  AF
02C1E:  MOVWF  x13
02C20:  MOVLB  0
02C22:  RCALL  25DE
02C24:  MOVLB  1
02C26:  DECFSZ x02,F
02C28:  BRA    2C1C
....................      clear_display(0); 
02C2A:  CLRF   x0A
02C2C:  MOVLB  0
02C2E:  CALL   1E90
....................      delay_ms(500); 
02C32:  MOVLW  02
02C34:  MOVLB  1
02C36:  MOVWF  x02
02C38:  MOVLW  FA
02C3A:  MOVWF  x13
02C3C:  MOVLB  0
02C3E:  RCALL  25DE
02C40:  MOVLB  1
02C42:  DECFSZ x02,F
02C44:  BRA    2C38
....................    }  
02C46:  MOVLB  0
02C48:  INCF   xFE,F
02C4A:  BRA    2BE8
....................    clear_display(0); 
02C4C:  MOVLB  1
02C4E:  CLRF   x0A
02C50:  MOVLB  0
02C52:  CALL   1E90
....................    Text="iNVRT"; 
02C56:  CLRF   FEA
02C58:  MOVLW  59
02C5A:  MOVWF  FE9
02C5C:  MOVLW  00
02C5E:  CALL   1BE8
02C62:  TBLRD*-
02C64:  TBLRD*+
02C66:  MOVF   FF5,W
02C68:  MOVWF  FEE
02C6A:  IORLW  00
02C6C:  BNZ   2C64
....................    ShowString(0,4,1,0); 
02C6E:  MOVLB  1
02C70:  CLRF   x0A
02C72:  MOVLW  04
02C74:  MOVWF  x0B
02C76:  MOVLW  01
02C78:  MOVWF  x0C
02C7A:  CLRF   x0D
02C7C:  MOVLB  0
02C7E:  RCALL  2582
....................    delay_ms(1000); 
02C80:  MOVLW  04
02C82:  MOVLB  1
02C84:  MOVWF  x02
02C86:  MOVLW  FA
02C88:  MOVWF  x13
02C8A:  MOVLB  0
02C8C:  RCALL  25DE
02C8E:  MOVLB  1
02C90:  DECFSZ x02,F
02C92:  BRA    2C86
....................    clear_display(1); 
02C94:  MOVLW  01
02C96:  MOVWF  x0A
02C98:  MOVLB  0
02C9A:  CALL   1E90
....................    delay_ms(100); 
02C9E:  MOVLW  64
02CA0:  MOVLB  1
02CA2:  MOVWF  x13
02CA4:  MOVLB  0
02CA6:  RCALL  25DE
....................    for (i=0;i<100;i++) 
02CA8:  CLRF   xFE
02CAA:  MOVF   xFE,W
02CAC:  SUBLW  63
02CAE:  BNC   2CE4
....................    { 
....................       sprintf(Text,"%02d",i); 
02CB0:  MOVLB  1
02CB2:  CLRF   x01
02CB4:  MOVLW  59
02CB6:  MOVWF  x00
02CB8:  MOVFF  FE,102
02CBC:  MOVLW  01
02CBE:  MOVWF  x03
02CC0:  MOVLB  0
02CC2:  RCALL  2A78
....................       ShowString(4,0,4,1); 
02CC4:  MOVLW  04
02CC6:  MOVLB  1
02CC8:  MOVWF  x0A
02CCA:  CLRF   x0B
02CCC:  MOVWF  x0C
02CCE:  MOVLW  01
02CD0:  MOVWF  x0D
02CD2:  MOVLB  0
02CD4:  RCALL  2582
....................       delay_ms(100); 
02CD6:  MOVLW  64
02CD8:  MOVLB  1
02CDA:  MOVWF  x13
02CDC:  MOVLB  0
02CDE:  RCALL  25DE
....................    } 
02CE0:  INCF   xFE,F
02CE2:  BRA    2CAA
....................    for (i=0;i<3;i++) 
02CE4:  CLRF   xFE
02CE6:  MOVF   xFE,W
02CE8:  SUBLW  02
02CEA:  BNC   2D4E
....................    { 
....................      Text="--";// 
02CEC:  CLRF   FEA
02CEE:  MOVLW  59
02CF0:  MOVWF  FE9
02CF2:  MOVLW  00
02CF4:  CALL   1BD4
02CF8:  TBLRD*-
02CFA:  TBLRD*+
02CFC:  MOVF   FF5,W
02CFE:  MOVWF  FEE
02D00:  IORLW  00
02D02:  BNZ   2CFA
....................      ShowString(4,0,4,1); 
02D04:  MOVLW  04
02D06:  MOVLB  1
02D08:  MOVWF  x0A
02D0A:  CLRF   x0B
02D0C:  MOVWF  x0C
02D0E:  MOVLW  01
02D10:  MOVWF  x0D
02D12:  MOVLB  0
02D14:  RCALL  2582
....................      delay_ms(700); 
02D16:  MOVLW  04
02D18:  MOVLB  1
02D1A:  MOVWF  x02
02D1C:  MOVLW  AF
02D1E:  MOVWF  x13
02D20:  MOVLB  0
02D22:  RCALL  25DE
02D24:  MOVLB  1
02D26:  DECFSZ x02,F
02D28:  BRA    2D1C
....................      clear_display(1); 
02D2A:  MOVLW  01
02D2C:  MOVWF  x0A
02D2E:  MOVLB  0
02D30:  CALL   1E90
....................      delay_ms(500); 
02D34:  MOVLW  02
02D36:  MOVLB  1
02D38:  MOVWF  x02
02D3A:  MOVLW  FA
02D3C:  MOVWF  x13
02D3E:  MOVLB  0
02D40:  RCALL  25DE
02D42:  MOVLB  1
02D44:  DECFSZ x02,F
02D46:  BRA    2D3A
....................    }  
02D48:  MOVLB  0
02D4A:  INCF   xFE,F
02D4C:  BRA    2CE6
....................    delay_ms(500); 
02D4E:  MOVLW  02
02D50:  MOVLB  1
02D52:  MOVWF  x02
02D54:  MOVLW  FA
02D56:  MOVWF  x13
02D58:  MOVLB  0
02D5A:  RCALL  25DE
02D5C:  MOVLB  1
02D5E:  DECFSZ x02,F
02D60:  BRA    2D54
....................       for (i=0;i<32;i++) 
02D62:  MOVLB  0
02D64:  CLRF   xFE
02D66:  MOVF   xFE,W
02D68:  SUBLW  1F
02D6A:  BNC   2D92
....................       { 
....................         for (w=0;w<16;w++) 
02D6C:  CLRF   xFF
02D6E:  MOVF   xFF,W
02D70:  SUBLW  0F
02D72:  BNC   2D84
....................         { 
....................            LineScroll(w,0); 
02D74:  MOVFF  FF,115
02D78:  MOVLB  1
02D7A:  CLRF   x16
02D7C:  MOVLB  0
02D7E:  RCALL  2608
....................         } 
02D80:  INCF   xFF,F
02D82:  BRA    2D6E
....................         delay_ms(15); 
02D84:  MOVLW  0F
02D86:  MOVLB  1
02D88:  MOVWF  x13
02D8A:  MOVLB  0
02D8C:  RCALL  25DE
....................       }    
02D8E:  INCF   xFE,F
02D90:  BRA    2D66
....................     
.................... } 
02D92:  GOTO   527C (RETURN)
....................  
.................... void ScrollTest(void){ 
....................    Text="Scrol"; 
*
03462:  CLRF   FEA
03464:  MOVLW  59
03466:  MOVWF  FE9
03468:  MOVLW  00
0346A:  CALL   1BFE
0346E:  TBLRD*-
03470:  TBLRD*+
03472:  MOVF   FF5,W
03474:  MOVWF  FEE
03476:  IORLW  00
03478:  BNZ   3470
....................    ShowString(0,0,1,0); 
0347A:  MOVLB  1
0347C:  CLRF   x0A
0347E:  CLRF   x0B
03480:  MOVLW  01
03482:  MOVWF  x0C
03484:  CLRF   x0D
03486:  MOVLB  0
03488:  CALL   2582
....................    Text="Test"; 
0348C:  CLRF   FEA
0348E:  MOVLW  59
03490:  MOVWF  FE9
03492:  MOVLW  00
03494:  CALL   1B22
03498:  TBLRD*-
0349A:  TBLRD*+
0349C:  MOVF   FF5,W
0349E:  MOVWF  FEE
034A0:  IORLW  00
034A2:  BNZ   349A
....................    ShowString(0,8,1,0); 
034A4:  MOVLB  1
034A6:  CLRF   x0A
034A8:  MOVLW  08
034AA:  MOVWF  x0B
034AC:  MOVLW  01
034AE:  MOVWF  x0C
034B0:  CLRF   x0D
034B2:  MOVLB  0
034B4:  CALL   2582
....................    delay_ms(1000); 
034B8:  MOVLW  04
034BA:  MOVLB  1
034BC:  MOVWF  x02
034BE:  MOVLW  FA
034C0:  MOVWF  x13
034C2:  MOVLB  0
034C4:  CALL   25DE
034C8:  MOVLB  1
034CA:  DECFSZ x02,F
034CC:  BRA    34BE
....................    clear_display(0); 
034CE:  CLRF   x0A
034D0:  MOVLB  0
034D2:  CALL   1E90
....................    delay_ms(100); 
034D6:  MOVLW  64
034D8:  MOVLB  1
034DA:  MOVWF  x13
034DC:  MOVLB  0
034DE:  CALL   25DE
....................     
....................      Text="FONT 1     "; 
034E2:  CLRF   FEA
034E4:  MOVLW  59
034E6:  MOVWF  FE9
034E8:  MOVLW  00
034EA:  CALL   1C14
034EE:  TBLRD*-
034F0:  TBLRD*+
034F2:  MOVF   FF5,W
034F4:  MOVWF  FEE
034F6:  IORLW  00
034F8:  BNZ   34F0
....................      TextToLeftScroll(0,1,9,0); 
034FA:  MOVLB  1
034FC:  CLRF   x02
034FE:  MOVLW  01
03500:  MOVWF  x03
03502:  MOVLW  09
03504:  MOVWF  x04
03506:  CLRF   x05
03508:  MOVLB  0
0350A:  RCALL  3406
....................      delay_ms(800); 
0350C:  MOVLW  04
0350E:  MOVLB  1
03510:  MOVWF  x02
03512:  MOVLW  C8
03514:  MOVWF  x13
03516:  MOVLB  0
03518:  CALL   25DE
0351C:  MOVLB  1
0351E:  DECFSZ x02,F
03520:  BRA    3512
....................      Text="FONT 2     "; 
03522:  CLRF   FEA
03524:  MOVLW  59
03526:  MOVWF  FE9
03528:  MOVLW  00
0352A:  MOVLB  0
0352C:  CALL   1C30
03530:  TBLRD*-
03532:  TBLRD*+
03534:  MOVF   FF5,W
03536:  MOVWF  FEE
03538:  IORLW  00
0353A:  BNZ   3532
....................      TextToLeftScroll(0,2,9,0); 
0353C:  MOVLB  1
0353E:  CLRF   x02
03540:  MOVLW  02
03542:  MOVWF  x03
03544:  MOVLW  09
03546:  MOVWF  x04
03548:  CLRF   x05
0354A:  MOVLB  0
0354C:  RCALL  3406
....................      delay_ms(700); 
0354E:  MOVLW  04
03550:  MOVLB  1
03552:  MOVWF  x02
03554:  MOVLW  AF
03556:  MOVWF  x13
03558:  MOVLB  0
0355A:  CALL   25DE
0355E:  MOVLB  1
03560:  DECFSZ x02,F
03562:  BRA    3554
....................      Text="FONT 3     "; 
03564:  CLRF   FEA
03566:  MOVLW  59
03568:  MOVWF  FE9
0356A:  MOVLW  00
0356C:  MOVLB  0
0356E:  CALL   1C4C
03572:  TBLRD*-
03574:  TBLRD*+
03576:  MOVF   FF5,W
03578:  MOVWF  FEE
0357A:  IORLW  00
0357C:  BNZ   3574
....................      TextToLeftScroll(0,3,9,0); 
0357E:  MOVLB  1
03580:  CLRF   x02
03582:  MOVLW  03
03584:  MOVWF  x03
03586:  MOVLW  09
03588:  MOVWF  x04
0358A:  CLRF   x05
0358C:  MOVLB  0
0358E:  RCALL  3406
....................      delay_ms(600); 
03590:  MOVLW  03
03592:  MOVLB  1
03594:  MOVWF  x02
03596:  MOVLW  C8
03598:  MOVWF  x13
0359A:  MOVLB  0
0359C:  CALL   25DE
035A0:  MOVLB  1
035A2:  DECFSZ x02,F
035A4:  BRA    3596
....................      Text="FONT 4     "; 
035A6:  CLRF   FEA
035A8:  MOVLW  59
035AA:  MOVWF  FE9
035AC:  MOVLW  00
035AE:  MOVLB  0
035B0:  CALL   1C68
035B4:  TBLRD*-
035B6:  TBLRD*+
035B8:  MOVF   FF5,W
035BA:  MOVWF  FEE
035BC:  IORLW  00
035BE:  BNZ   35B6
....................      TextToLeftScroll(0,4,9,0); 
035C0:  MOVLB  1
035C2:  CLRF   x02
035C4:  MOVLW  04
035C6:  MOVWF  x03
035C8:  MOVLW  09
035CA:  MOVWF  x04
035CC:  CLRF   x05
035CE:  MOVLB  0
035D0:  RCALL  3406
....................      delay_ms(500); 
035D2:  MOVLW  02
035D4:  MOVLB  1
035D6:  MOVWF  x02
035D8:  MOVLW  FA
035DA:  MOVWF  x13
035DC:  MOVLB  0
035DE:  CALL   25DE
035E2:  MOVLB  1
035E4:  DECFSZ x02,F
035E6:  BRA    35D8
....................      clear_display(1); 
035E8:  MOVLW  01
035EA:  MOVWF  x0A
035EC:  MOVLB  0
035EE:  CALL   1E90
....................      Text="Hardware  Pic18F4620 & 40Mhz, 64Kb Flash, 3968Byte Ram vs..    "; 
035F2:  CLRF   FEA
035F4:  MOVLW  59
035F6:  MOVWF  FE9
035F8:  MOVLW  00
035FA:  CALL   1C84
035FE:  TBLRD*-
03600:  TBLRD*+
03602:  MOVF   FF5,W
03604:  MOVWF  FEE
03606:  IORLW  00
03608:  BNZ   3600
....................      TextToLeftScroll(0,4,9,1);     
0360A:  MOVLB  1
0360C:  CLRF   x02
0360E:  MOVLW  04
03610:  MOVWF  x03
03612:  MOVLW  09
03614:  MOVWF  x04
03616:  MOVLW  01
03618:  MOVWF  x05
0361A:  MOVLB  0
0361C:  RCALL  3406
....................      clear_display(0); 
0361E:  MOVLB  1
03620:  CLRF   x0A
03622:  MOVLB  0
03624:  CALL   1E90
.................... } 
03628:  GOTO   5298 (RETURN)
....................  
.................... void BrightTest(void) 
.................... { 
....................    for(i=1;i<100;i++) 
0362C:  MOVLW  01
0362E:  MOVWF  xFE
03630:  MOVF   xFE,W
03632:  SUBLW  63
03634:  BNC   36A4
....................    {   
....................        Text="Brigt"; 
03636:  CLRF   FEA
03638:  MOVLW  59
0363A:  MOVWF  FE9
0363C:  MOVLW  00
0363E:  CALL   1CD4
03642:  TBLRD*-
03644:  TBLRD*+
03646:  MOVF   FF5,W
03648:  MOVWF  FEE
0364A:  IORLW  00
0364C:  BNZ   3644
....................        ShowString(0,0,1,0); 
0364E:  MOVLB  1
03650:  CLRF   x0A
03652:  CLRF   x0B
03654:  MOVLW  01
03656:  MOVWF  x0C
03658:  CLRF   x0D
0365A:  MOVLB  0
0365C:  CALL   2582
....................        sprintf(Text,"%02d",i); 
03660:  MOVLB  1
03662:  CLRF   x01
03664:  MOVLW  59
03666:  MOVWF  x00
03668:  MOVFF  FE,102
0366C:  MOVLW  01
0366E:  MOVWF  x03
03670:  MOVLB  0
03672:  CALL   2A78
....................        ShowString(10,8,1,0); 
03676:  MOVLW  0A
03678:  MOVLB  1
0367A:  MOVWF  x0A
0367C:  MOVLW  08
0367E:  MOVWF  x0B
03680:  MOVLW  01
03682:  MOVWF  x0C
03684:  CLRF   x0D
03686:  MOVLB  0
03688:  CALL   2582
....................        Set_Brightness(i); 
0368C:  MOVFF  FE,102
03690:  CALL   1E4A
....................        delay_ms(150); 
03694:  MOVLW  96
03696:  MOVLB  1
03698:  MOVWF  x13
0369A:  MOVLB  0
0369C:  CALL   25DE
....................    } 
036A0:  INCF   xFE,F
036A2:  BRA    3630
....................   Set_Brightness(100); 
036A4:  MOVLW  64
036A6:  MOVLB  1
036A8:  MOVWF  x02
036AA:  MOVLB  0
036AC:  CALL   1E4A
....................   clear_display(0); 
036B0:  MOVLB  1
036B2:  CLRF   x0A
036B4:  MOVLB  0
036B6:  CALL   1E90
....................   Text="MAX"; 
036BA:  CLRF   FEA
036BC:  MOVLW  59
036BE:  MOVWF  FE9
036C0:  MOVLW  00
036C2:  CALL   1CEA
036C6:  TBLRD*-
036C8:  TBLRD*+
036CA:  MOVF   FF5,W
036CC:  MOVWF  FEE
036CE:  IORLW  00
036D0:  BNZ   36C8
....................   for(i=0;i<4;i++) 
036D2:  CLRF   xFE
036D4:  MOVF   xFE,W
036D6:  SUBLW  03
036D8:  BNC   372A
....................   { 
....................     ShowString(4,3,2,0); 
036DA:  MOVLW  04
036DC:  MOVLB  1
036DE:  MOVWF  x0A
036E0:  MOVLW  03
036E2:  MOVWF  x0B
036E4:  MOVLW  02
036E6:  MOVWF  x0C
036E8:  CLRF   x0D
036EA:  MOVLB  0
036EC:  CALL   2582
....................     delay_ms(800); 
036F0:  MOVLW  04
036F2:  MOVLB  1
036F4:  MOVWF  x02
036F6:  MOVLW  C8
036F8:  MOVWF  x13
036FA:  MOVLB  0
036FC:  CALL   25DE
03700:  MOVLB  1
03702:  DECFSZ x02,F
03704:  BRA    36F6
....................     clear_display(0); 
03706:  CLRF   x0A
03708:  MOVLB  0
0370A:  CALL   1E90
....................     delay_ms(500); 
0370E:  MOVLW  02
03710:  MOVLB  1
03712:  MOVWF  x02
03714:  MOVLW  FA
03716:  MOVWF  x13
03718:  MOVLB  0
0371A:  CALL   25DE
0371E:  MOVLB  1
03720:  DECFSZ x02,F
03722:  BRA    3714
....................   } 
03724:  MOVLB  0
03726:  INCF   xFE,F
03728:  BRA    36D4
....................   Set_Brightness(10); 
0372A:  MOVLW  0A
0372C:  MOVLB  1
0372E:  MOVWF  x02
03730:  MOVLB  0
03732:  CALL   1E4A
....................  
.................... } 
03736:  GOTO   52B4 (RETURN)
....................  
.................... void GeoShapes(void){ 
....................   Rectangle(14,6,17,9,0); 
*
03CD4:  MOVLW  0E
03CD6:  MOVLB  1
03CD8:  MOVWF  x02
03CDA:  MOVLW  06
03CDC:  MOVWF  x03
03CDE:  MOVLW  11
03CE0:  MOVWF  x04
03CE2:  MOVLW  09
03CE4:  MOVWF  x05
03CE6:  CLRF   x06
03CE8:  MOVLB  0
03CEA:  RCALL  3968
....................   delay_ms(600); 
03CEC:  MOVLW  03
03CEE:  MOVLB  1
03CF0:  MOVWF  x02
03CF2:  MOVLW  C8
03CF4:  MOVWF  x13
03CF6:  MOVLB  0
03CF8:  CALL   25DE
03CFC:  MOVLB  1
03CFE:  DECFSZ x02,F
03D00:  BRA    3CF2
....................   clear_display(0); 
03D02:  CLRF   x0A
03D04:  MOVLB  0
03D06:  CALL   1E90
....................   Rectangle(11,3,20,12,0); 
03D0A:  MOVLW  0B
03D0C:  MOVLB  1
03D0E:  MOVWF  x02
03D10:  MOVLW  03
03D12:  MOVWF  x03
03D14:  MOVLW  14
03D16:  MOVWF  x04
03D18:  MOVLW  0C
03D1A:  MOVWF  x05
03D1C:  CLRF   x06
03D1E:  MOVLB  0
03D20:  RCALL  3968
....................   delay_ms(600); 
03D22:  MOVLW  03
03D24:  MOVLB  1
03D26:  MOVWF  x02
03D28:  MOVLW  C8
03D2A:  MOVWF  x13
03D2C:  MOVLB  0
03D2E:  CALL   25DE
03D32:  MOVLB  1
03D34:  DECFSZ x02,F
03D36:  BRA    3D28
....................   clear_display(0); 
03D38:  CLRF   x0A
03D3A:  MOVLB  0
03D3C:  CALL   1E90
....................   Rectangle(8,0,23,15,0); 
03D40:  MOVLW  08
03D42:  MOVLB  1
03D44:  MOVWF  x02
03D46:  CLRF   x03
03D48:  MOVLW  17
03D4A:  MOVWF  x04
03D4C:  MOVLW  0F
03D4E:  MOVWF  x05
03D50:  CLRF   x06
03D52:  MOVLB  0
03D54:  RCALL  3968
....................   delay_ms(600); 
03D56:  MOVLW  03
03D58:  MOVLB  1
03D5A:  MOVWF  x02
03D5C:  MOVLW  C8
03D5E:  MOVWF  x13
03D60:  MOVLB  0
03D62:  CALL   25DE
03D66:  MOVLB  1
03D68:  DECFSZ x02,F
03D6A:  BRA    3D5C
....................   clear_display(0); 
03D6C:  CLRF   x0A
03D6E:  MOVLB  0
03D70:  CALL   1E90
....................   Rectangle(14,6,17,9,1); 
03D74:  MOVLW  0E
03D76:  MOVLB  1
03D78:  MOVWF  x02
03D7A:  MOVLW  06
03D7C:  MOVWF  x03
03D7E:  MOVLW  11
03D80:  MOVWF  x04
03D82:  MOVLW  09
03D84:  MOVWF  x05
03D86:  MOVLW  01
03D88:  MOVWF  x06
03D8A:  MOVLB  0
03D8C:  RCALL  3968
....................   delay_ms(600); 
03D8E:  MOVLW  03
03D90:  MOVLB  1
03D92:  MOVWF  x02
03D94:  MOVLW  C8
03D96:  MOVWF  x13
03D98:  MOVLB  0
03D9A:  CALL   25DE
03D9E:  MOVLB  1
03DA0:  DECFSZ x02,F
03DA2:  BRA    3D94
....................   clear_display(0); 
03DA4:  CLRF   x0A
03DA6:  MOVLB  0
03DA8:  CALL   1E90
....................   Rectangle(11,3,20,12,1); 
03DAC:  MOVLW  0B
03DAE:  MOVLB  1
03DB0:  MOVWF  x02
03DB2:  MOVLW  03
03DB4:  MOVWF  x03
03DB6:  MOVLW  14
03DB8:  MOVWF  x04
03DBA:  MOVLW  0C
03DBC:  MOVWF  x05
03DBE:  MOVLW  01
03DC0:  MOVWF  x06
03DC2:  MOVLB  0
03DC4:  RCALL  3968
....................   delay_ms(600); 
03DC6:  MOVLW  03
03DC8:  MOVLB  1
03DCA:  MOVWF  x02
03DCC:  MOVLW  C8
03DCE:  MOVWF  x13
03DD0:  MOVLB  0
03DD2:  CALL   25DE
03DD6:  MOVLB  1
03DD8:  DECFSZ x02,F
03DDA:  BRA    3DCC
....................   clear_display(0); 
03DDC:  CLRF   x0A
03DDE:  MOVLB  0
03DE0:  CALL   1E90
....................   Rectangle(8,0,23,15,1); 
03DE4:  MOVLW  08
03DE6:  MOVLB  1
03DE8:  MOVWF  x02
03DEA:  CLRF   x03
03DEC:  MOVLW  17
03DEE:  MOVWF  x04
03DF0:  MOVLW  0F
03DF2:  MOVWF  x05
03DF4:  MOVLW  01
03DF6:  MOVWF  x06
03DF8:  MOVLB  0
03DFA:  RCALL  3968
....................   delay_ms(1000); 
03DFC:  MOVLW  04
03DFE:  MOVLB  1
03E00:  MOVWF  x02
03E02:  MOVLW  FA
03E04:  MOVWF  x13
03E06:  MOVLB  0
03E08:  CALL   25DE
03E0C:  MOVLB  1
03E0E:  DECFSZ x02,F
03E10:  BRA    3E02
....................   clear_display(0); 
03E12:  CLRF   x0A
03E14:  MOVLB  0
03E16:  CALL   1E90
....................   Circle(16,8,2,0); 
03E1A:  MOVLW  10
03E1C:  MOVLB  1
03E1E:  MOVWF  x02
03E20:  MOVLW  08
03E22:  MOVWF  x03
03E24:  MOVLW  02
03E26:  MOVWF  x04
03E28:  CLRF   x05
03E2A:  MOVLB  0
03E2C:  RCALL  3AB2
....................   delay_ms(600); 
03E2E:  MOVLW  03
03E30:  MOVLB  1
03E32:  MOVWF  x02
03E34:  MOVLW  C8
03E36:  MOVWF  x13
03E38:  MOVLB  0
03E3A:  CALL   25DE
03E3E:  MOVLB  1
03E40:  DECFSZ x02,F
03E42:  BRA    3E34
....................   clear_display(0); 
03E44:  CLRF   x0A
03E46:  MOVLB  0
03E48:  CALL   1E90
....................   Circle(16,8,4,0); 
03E4C:  MOVLW  10
03E4E:  MOVLB  1
03E50:  MOVWF  x02
03E52:  MOVLW  08
03E54:  MOVWF  x03
03E56:  MOVLW  04
03E58:  MOVWF  x04
03E5A:  CLRF   x05
03E5C:  MOVLB  0
03E5E:  RCALL  3AB2
....................   delay_ms(600); 
03E60:  MOVLW  03
03E62:  MOVLB  1
03E64:  MOVWF  x02
03E66:  MOVLW  C8
03E68:  MOVWF  x13
03E6A:  MOVLB  0
03E6C:  CALL   25DE
03E70:  MOVLB  1
03E72:  DECFSZ x02,F
03E74:  BRA    3E66
....................   clear_display(0); 
03E76:  CLRF   x0A
03E78:  MOVLB  0
03E7A:  CALL   1E90
....................   Circle(16,8,7,0); 
03E7E:  MOVLW  10
03E80:  MOVLB  1
03E82:  MOVWF  x02
03E84:  MOVLW  08
03E86:  MOVWF  x03
03E88:  MOVLW  07
03E8A:  MOVWF  x04
03E8C:  CLRF   x05
03E8E:  MOVLB  0
03E90:  RCALL  3AB2
....................   delay_ms(600); 
03E92:  MOVLW  03
03E94:  MOVLB  1
03E96:  MOVWF  x02
03E98:  MOVLW  C8
03E9A:  MOVWF  x13
03E9C:  MOVLB  0
03E9E:  CALL   25DE
03EA2:  MOVLB  1
03EA4:  DECFSZ x02,F
03EA6:  BRA    3E98
....................   clear_display(0); 
03EA8:  CLRF   x0A
03EAA:  MOVLB  0
03EAC:  CALL   1E90
....................   Circle(16,8,2,1); 
03EB0:  MOVLW  10
03EB2:  MOVLB  1
03EB4:  MOVWF  x02
03EB6:  MOVLW  08
03EB8:  MOVWF  x03
03EBA:  MOVLW  02
03EBC:  MOVWF  x04
03EBE:  MOVLW  01
03EC0:  MOVWF  x05
03EC2:  MOVLB  0
03EC4:  RCALL  3AB2
....................   delay_ms(600); 
03EC6:  MOVLW  03
03EC8:  MOVLB  1
03ECA:  MOVWF  x02
03ECC:  MOVLW  C8
03ECE:  MOVWF  x13
03ED0:  MOVLB  0
03ED2:  CALL   25DE
03ED6:  MOVLB  1
03ED8:  DECFSZ x02,F
03EDA:  BRA    3ECC
....................   clear_display(0); 
03EDC:  CLRF   x0A
03EDE:  MOVLB  0
03EE0:  CALL   1E90
....................   Circle(16,8,4,1); 
03EE4:  MOVLW  10
03EE6:  MOVLB  1
03EE8:  MOVWF  x02
03EEA:  MOVLW  08
03EEC:  MOVWF  x03
03EEE:  MOVLW  04
03EF0:  MOVWF  x04
03EF2:  MOVLW  01
03EF4:  MOVWF  x05
03EF6:  MOVLB  0
03EF8:  RCALL  3AB2
....................   delay_ms(600); 
03EFA:  MOVLW  03
03EFC:  MOVLB  1
03EFE:  MOVWF  x02
03F00:  MOVLW  C8
03F02:  MOVWF  x13
03F04:  MOVLB  0
03F06:  CALL   25DE
03F0A:  MOVLB  1
03F0C:  DECFSZ x02,F
03F0E:  BRA    3F00
....................   clear_display(0); 
03F10:  CLRF   x0A
03F12:  MOVLB  0
03F14:  CALL   1E90
....................   Circle(16,8,7,1); 
03F18:  MOVLW  10
03F1A:  MOVLB  1
03F1C:  MOVWF  x02
03F1E:  MOVLW  08
03F20:  MOVWF  x03
03F22:  MOVLW  07
03F24:  MOVWF  x04
03F26:  MOVLW  01
03F28:  MOVWF  x05
03F2A:  MOVLB  0
03F2C:  RCALL  3AB2
....................   delay_ms(1000); 
03F2E:  MOVLW  04
03F30:  MOVLB  1
03F32:  MOVWF  x02
03F34:  MOVLW  FA
03F36:  MOVWF  x13
03F38:  MOVLB  0
03F3A:  CALL   25DE
03F3E:  MOVLB  1
03F40:  DECFSZ x02,F
03F42:  BRA    3F34
....................   clear_display(0); 
03F44:  CLRF   x0A
03F46:  MOVLB  0
03F48:  CALL   1E90
....................   delay_ms(100); 
03F4C:  MOVLW  64
03F4E:  MOVLB  1
03F50:  MOVWF  x13
03F52:  MOVLB  0
03F54:  CALL   25DE
....................   Line(0,0,31,15,1); 
03F58:  MOVLB  1
03F5A:  CLRF   x11
03F5C:  CLRF   x12
03F5E:  MOVLW  1F
03F60:  MOVWF  x13
03F62:  MOVLW  0F
03F64:  MOVWF  x14
03F66:  MOVLW  01
03F68:  MOVWF  x15
03F6A:  MOVLB  0
03F6C:  RCALL  378E
....................   delay_ms(600); 
03F6E:  MOVLW  03
03F70:  MOVLB  1
03F72:  MOVWF  x02
03F74:  MOVLW  C8
03F76:  MOVWF  x13
03F78:  MOVLB  0
03F7A:  CALL   25DE
03F7E:  MOVLB  1
03F80:  DECFSZ x02,F
03F82:  BRA    3F74
....................   Line(0,15,31,0,1); 
03F84:  CLRF   x11
03F86:  MOVLW  0F
03F88:  MOVWF  x12
03F8A:  MOVLW  1F
03F8C:  MOVWF  x13
03F8E:  CLRF   x14
03F90:  MOVLW  01
03F92:  MOVWF  x15
03F94:  MOVLB  0
03F96:  CALL   378E
....................   delay_ms(600); 
03F9A:  MOVLW  03
03F9C:  MOVLB  1
03F9E:  MOVWF  x02
03FA0:  MOVLW  C8
03FA2:  MOVWF  x13
03FA4:  MOVLB  0
03FA6:  CALL   25DE
03FAA:  MOVLB  1
03FAC:  DECFSZ x02,F
03FAE:  BRA    3FA0
....................   Line(5,0,8,15,1);   
03FB0:  MOVLW  05
03FB2:  MOVWF  x11
03FB4:  CLRF   x12
03FB6:  MOVLW  08
03FB8:  MOVWF  x13
03FBA:  MOVLW  0F
03FBC:  MOVWF  x14
03FBE:  MOVLW  01
03FC0:  MOVWF  x15
03FC2:  MOVLB  0
03FC4:  CALL   378E
....................   delay_ms(600); 
03FC8:  MOVLW  03
03FCA:  MOVLB  1
03FCC:  MOVWF  x02
03FCE:  MOVLW  C8
03FD0:  MOVWF  x13
03FD2:  MOVLB  0
03FD4:  CALL   25DE
03FD8:  MOVLB  1
03FDA:  DECFSZ x02,F
03FDC:  BRA    3FCE
....................   Line(31,8,0,4,1); 
03FDE:  MOVLW  1F
03FE0:  MOVWF  x11
03FE2:  MOVLW  08
03FE4:  MOVWF  x12
03FE6:  CLRF   x13
03FE8:  MOVLW  04
03FEA:  MOVWF  x14
03FEC:  MOVLW  01
03FEE:  MOVWF  x15
03FF0:  MOVLB  0
03FF2:  CALL   378E
....................   delay_ms(600); 
03FF6:  MOVLW  03
03FF8:  MOVLB  1
03FFA:  MOVWF  x02
03FFC:  MOVLW  C8
03FFE:  MOVWF  x13
04000:  MOVLB  0
04002:  CALL   25DE
04006:  MOVLB  1
04008:  DECFSZ x02,F
0400A:  BRA    3FFC
....................   Line(29,0,10,15,1); 
0400C:  MOVLW  1D
0400E:  MOVWF  x11
04010:  CLRF   x12
04012:  MOVLW  0A
04014:  MOVWF  x13
04016:  MOVLW  0F
04018:  MOVWF  x14
0401A:  MOVLW  01
0401C:  MOVWF  x15
0401E:  MOVLB  0
04020:  CALL   378E
....................   delay_ms(600); 
04024:  MOVLW  03
04026:  MOVLB  1
04028:  MOVWF  x02
0402A:  MOVLW  C8
0402C:  MOVWF  x13
0402E:  MOVLB  0
04030:  CALL   25DE
04034:  MOVLB  1
04036:  DECFSZ x02,F
04038:  BRA    402A
....................   Line(31,13,0,8,1); 
0403A:  MOVLW  1F
0403C:  MOVWF  x11
0403E:  MOVLW  0D
04040:  MOVWF  x12
04042:  CLRF   x13
04044:  MOVLW  08
04046:  MOVWF  x14
04048:  MOVLW  01
0404A:  MOVWF  x15
0404C:  MOVLB  0
0404E:  CALL   378E
....................   delay_ms(1000); 
04052:  MOVLW  04
04054:  MOVLB  1
04056:  MOVWF  x02
04058:  MOVLW  FA
0405A:  MOVWF  x13
0405C:  MOVLB  0
0405E:  CALL   25DE
04062:  MOVLB  1
04064:  DECFSZ x02,F
04066:  BRA    4058
....................    
....................   clear_display(0);   
04068:  CLRF   x0A
0406A:  MOVLB  0
0406C:  CALL   1E90
.................... } 
04070:  GOTO   52D0 (RETURN)
....................  
.................... void SineWawe(void){ 
*
04A06:  MOVLB  1
04A08:  CLRF   x05
04A0A:  CLRF   x04
04A0C:  CLRF   x03
04A0E:  CLRF   x02
04A10:  CLRF   x07
04A12:  CLRF   x06
04A14:  CLRF   x08
04A16:  CLRF   x09
....................   float ax=0; 
....................   int16 xpos=0; 
....................   int8  ypos=0,sayac=0; 
....................   Text="Sine"; 
04A18:  CLRF   FEA
04A1A:  MOVLW  59
04A1C:  MOVWF  FE9
04A1E:  MOVLW  00
04A20:  MOVLB  0
04A22:  CALL   1CFE
04A26:  TBLRD*-
04A28:  TBLRD*+
04A2A:  MOVF   FF5,W
04A2C:  MOVWF  FEE
04A2E:  IORLW  00
04A30:  BNZ   4A28
....................   ShowString(0,0,1,0); 
04A32:  MOVLB  1
04A34:  CLRF   x0A
04A36:  CLRF   x0B
04A38:  MOVLW  01
04A3A:  MOVWF  x0C
04A3C:  CLRF   x0D
04A3E:  MOVLB  0
04A40:  CALL   2582
....................   Text="Wave"; 
04A44:  CLRF   FEA
04A46:  MOVLW  59
04A48:  MOVWF  FE9
04A4A:  MOVLW  00
04A4C:  CALL   1D14
04A50:  TBLRD*-
04A52:  TBLRD*+
04A54:  MOVF   FF5,W
04A56:  MOVWF  FEE
04A58:  IORLW  00
04A5A:  BNZ   4A52
....................   ShowString(0,8,1,0); 
04A5C:  MOVLB  1
04A5E:  CLRF   x0A
04A60:  MOVLW  08
04A62:  MOVWF  x0B
04A64:  MOVLW  01
04A66:  MOVWF  x0C
04A68:  CLRF   x0D
04A6A:  MOVLB  0
04A6C:  CALL   2582
....................   delay_ms(1000); 
04A70:  MOVLW  04
04A72:  MOVLB  1
04A74:  MOVWF  x0A
04A76:  MOVLW  FA
04A78:  MOVWF  x13
04A7A:  MOVLB  0
04A7C:  CALL   25DE
04A80:  MOVLB  1
04A82:  DECFSZ x0A,F
04A84:  BRA    4A76
....................   clear_display(0); 
04A86:  CLRF   x0A
04A88:  MOVLB  0
04A8A:  CALL   1E90
....................   delay_ms(100); 
04A8E:  MOVLW  64
04A90:  MOVLB  1
04A92:  MOVWF  x13
04A94:  MOVLB  0
04A96:  CALL   25DE
....................   while(True) 
....................   { 
....................   for(xpos=0;xpos<19;xpos++) 
04A9A:  MOVLB  1
04A9C:  CLRF   x07
04A9E:  CLRF   x06
04AA0:  MOVF   x07,F
04AA2:  BTFSS  FD8.2
04AA4:  BRA    4C20
04AA6:  MOVF   x06,W
04AA8:  SUBLW  12
04AAA:  BTFSS  FD8.0
04AAC:  BRA    4C20
....................   { 
....................     for (i=0;i<16;i++){  
04AAE:  MOVLB  0
04AB0:  CLRF   xFE
04AB2:  MOVF   xFE,W
04AB4:  SUBLW  0F
04AB6:  BNC   4ACA
....................       LineScroll(i,0); 
04AB8:  MOVFF  FE,115
04ABC:  MOVLB  1
04ABE:  CLRF   x16
04AC0:  MOVLB  0
04AC2:  CALL   2608
....................     } 
04AC6:  INCF   xFE,F
04AC8:  BRA    4AB2
....................     ax=(pi*xpos)/180; 
04ACA:  MOVFF  107,145
04ACE:  MOVFF  106,144
04AD2:  CALL   4074
04AD6:  MOVLW  DB
04AD8:  MOVLB  1
04ADA:  MOVWF  x47
04ADC:  MOVLW  0F
04ADE:  MOVWF  x46
04AE0:  MOVLW  49
04AE2:  MOVWF  x45
04AE4:  MOVLW  80
04AE6:  MOVWF  x44
04AE8:  MOVFF  03,14B
04AEC:  MOVFF  02,14A
04AF0:  MOVFF  01,149
04AF4:  MOVFF  00,148
04AF8:  MOVLB  0
04AFA:  CALL   40AA
04AFE:  MOVFF  00,10A
04B02:  MOVFF  01,10B
04B06:  MOVFF  02,10C
04B0A:  MOVFF  03,10D
04B0E:  MOVFF  03,111
04B12:  MOVFF  02,110
04B16:  MOVFF  01,10F
04B1A:  MOVFF  00,10E
04B1E:  MOVLB  1
04B20:  CLRF   x15
04B22:  CLRF   x14
04B24:  MOVLW  34
04B26:  MOVWF  x13
04B28:  MOVLW  86
04B2A:  MOVWF  x12
04B2C:  MOVLB  0
04B2E:  GOTO   41A0
04B32:  MOVFF  03,105
04B36:  MOVFF  02,104
04B3A:  MOVFF  01,103
04B3E:  MOVFF  00,102
....................     ypos=8+(7*sin(19*ax));   
04B42:  MOVLB  1
04B44:  CLRF   x47
04B46:  CLRF   x46
04B48:  MOVLW  18
04B4A:  MOVWF  x45
04B4C:  MOVLW  83
04B4E:  MOVWF  x44
04B50:  MOVFF  105,14B
04B54:  MOVFF  104,14A
04B58:  MOVFF  103,149
04B5C:  MOVFF  102,148
04B60:  MOVLB  0
04B62:  CALL   40AA
04B66:  MOVFF  00,10A
04B6A:  MOVFF  01,10B
04B6E:  MOVFF  02,10C
04B72:  MOVFF  03,10D
04B76:  MOVFF  03,111
04B7A:  MOVFF  02,110
04B7E:  MOVFF  01,10F
04B82:  MOVFF  00,10E
04B86:  BRA    49B8
04B88:  MOVLB  1
04B8A:  CLRF   x47
04B8C:  CLRF   x46
04B8E:  MOVLW  60
04B90:  MOVWF  x45
04B92:  MOVLW  81
04B94:  MOVWF  x44
04B96:  MOVFF  03,14B
04B9A:  MOVFF  02,14A
04B9E:  MOVFF  01,149
04BA2:  MOVFF  00,148
04BA6:  MOVLB  0
04BA8:  CALL   40AA
04BAC:  MOVFF  FEA,10B
04BB0:  MOVFF  FE9,10A
04BB4:  BCF    FD8.1
04BB6:  MOVLB  1
04BB8:  CLRF   x47
04BBA:  CLRF   x46
04BBC:  CLRF   x45
04BBE:  MOVLW  82
04BC0:  MOVWF  x44
04BC2:  MOVFF  03,14B
04BC6:  MOVFF  02,14A
04BCA:  MOVFF  01,149
04BCE:  MOVFF  00,148
04BD2:  MOVLB  0
04BD4:  CALL   4300
04BD8:  MOVFF  10B,FEA
04BDC:  MOVFF  10A,FE9
04BE0:  MOVFF  03,143
04BE4:  MOVFF  02,142
04BE8:  MOVFF  01,141
04BEC:  MOVFF  00,140
04BF0:  RCALL  45F4
04BF2:  MOVFF  01,108
....................     PutPixel(31,ypos,1); 
04BF6:  MOVLW  1F
04BF8:  MOVLB  1
04BFA:  MOVWF  x24
04BFC:  MOVFF  108,125
04C00:  MOVLW  01
04C02:  MOVWF  x26
04C04:  MOVLB  0
04C06:  CALL   1EE4
....................     delay_ms(30); 
04C0A:  MOVLW  1E
04C0C:  MOVLB  1
04C0E:  MOVWF  x13
04C10:  MOVLB  0
04C12:  CALL   25DE
....................   } 
04C16:  MOVLB  1
04C18:  INCF   x06,F
04C1A:  BTFSC  FD8.2
04C1C:  INCF   x07,F
04C1E:  BRA    4AA0
....................   sayac++;if(sayac==10)break; 
04C20:  INCF   x09,F
04C22:  MOVF   x09,W
04C24:  SUBLW  0A
04C26:  BNZ   4C2A
04C28:  BRA    4C2C
....................  }   
04C2A:  BRA    4A9C
....................  clear_display(0); 
04C2C:  CLRF   x0A
04C2E:  MOVLB  0
04C30:  CALL   1E90
.................... } 
04C34:  GOTO   52EC (RETURN)
....................  
.................... void BarTest(void){ 
*
04E1C:  MOVLB  1
04E1E:  CLRF   x02
04E20:  MOVLW  03
04E22:  MOVWF  x03
.................... int xstart=0,xend=3; 
....................  
.................... Text="Bar"; 
04E24:  CLRF   FEA
04E26:  MOVLW  59
04E28:  MOVWF  FE9
04E2A:  MOVLW  00
04E2C:  MOVLB  0
04E2E:  CALL   1D2A
04E32:  TBLRD*-
04E34:  TBLRD*+
04E36:  MOVF   FF5,W
04E38:  MOVWF  FEE
04E3A:  IORLW  00
04E3C:  BNZ   4E34
.................... ShowString(0,0,1,0); 
04E3E:  MOVLB  1
04E40:  CLRF   x0A
04E42:  CLRF   x0B
04E44:  MOVLW  01
04E46:  MOVWF  x0C
04E48:  CLRF   x0D
04E4A:  MOVLB  0
04E4C:  CALL   2582
.................... Text="Test"; 
04E50:  CLRF   FEA
04E52:  MOVLW  59
04E54:  MOVWF  FE9
04E56:  MOVLW  00
04E58:  CALL   1B22
04E5C:  TBLRD*-
04E5E:  TBLRD*+
04E60:  MOVF   FF5,W
04E62:  MOVWF  FEE
04E64:  IORLW  00
04E66:  BNZ   4E5E
.................... ShowString(0,8,1,0); 
04E68:  MOVLB  1
04E6A:  CLRF   x0A
04E6C:  MOVLW  08
04E6E:  MOVWF  x0B
04E70:  MOVLW  01
04E72:  MOVWF  x0C
04E74:  CLRF   x0D
04E76:  MOVLB  0
04E78:  CALL   2582
.................... delay_ms(1000); 
04E7C:  MOVLW  04
04E7E:  MOVLB  1
04E80:  MOVWF  x04
04E82:  MOVLW  FA
04E84:  MOVWF  x13
04E86:  MOVLB  0
04E88:  CALL   25DE
04E8C:  MOVLB  1
04E8E:  DECFSZ x04,F
04E90:  BRA    4E82
.................... clear_display(0); 
04E92:  CLRF   x0A
04E94:  MOVLB  0
04E96:  CALL   1E90
.................... delay_ms(100); 
04E9A:  MOVLW  64
04E9C:  MOVLB  1
04E9E:  MOVWF  x13
04EA0:  MOVLB  0
04EA2:  CALL   25DE
....................  
.................... for(w=0;w<8;w++) 
04EA6:  CLRF   xFF
04EA8:  MOVF   xFF,W
04EAA:  SUBLW  07
04EAC:  BNC   4EF4
.................... { 
....................   for(i=0;i<101;i++) 
04EAE:  CLRF   xFE
04EB0:  MOVF   xFE,W
04EB2:  SUBLW  64
04EB4:  BNC   4EE6
....................   { 
....................     Bargraph(xstart,0,xend-1,15,1,i); 
04EB6:  MOVLW  01
04EB8:  MOVLB  1
04EBA:  SUBWF  x03,W
04EBC:  MOVWF  x04
04EBE:  MOVFF  102,106
04EC2:  CLRF   x07
04EC4:  MOVWF  x08
04EC6:  MOVLW  0F
04EC8:  MOVWF  x09
04ECA:  MOVLW  01
04ECC:  MOVWF  x0A
04ECE:  MOVFF  FE,10B
04ED2:  MOVLB  0
04ED4:  RCALL  4C7E
....................     delay_ms(2); 
04ED6:  MOVLW  02
04ED8:  MOVLB  1
04EDA:  MOVWF  x13
04EDC:  MOVLB  0
04EDE:  CALL   25DE
....................   } 
04EE2:  INCF   xFE,F
04EE4:  BRA    4EB0
....................   xstart=xstart+4;xend=xend+4; 
04EE6:  MOVLW  04
04EE8:  MOVLB  1
04EEA:  ADDWF  x02,F
04EEC:  ADDWF  x03,F
.................... } 
04EEE:  MOVLB  0
04EF0:  INCF   xFF,F
04EF2:  BRA    4EA8
.................... xstart=0;xend=3; 
04EF4:  MOVLB  1
04EF6:  CLRF   x02
04EF8:  MOVLW  03
04EFA:  MOVWF  x03
.................... for(w=0;w<8;w++) 
04EFC:  MOVLB  0
04EFE:  CLRF   xFF
04F00:  MOVF   xFF,W
04F02:  SUBLW  07
04F04:  BNC   4F5A
.................... { 
....................   for(i=0;i<101;i++) 
04F06:  CLRF   xFE
04F08:  MOVF   xFE,W
04F0A:  SUBLW  64
04F0C:  BNC   4F4C
....................   { 
....................     Bargraph(xstart,0,xend-1,15,1,100-i); 
04F0E:  MOVLW  01
04F10:  MOVLB  1
04F12:  SUBWF  x03,W
04F14:  MOVWF  x04
04F16:  MOVLW  64
04F18:  BSF    FD8.0
04F1A:  MOVLB  0
04F1C:  SUBFWB xFE,W
04F1E:  MOVLB  1
04F20:  MOVWF  x05
04F22:  MOVFF  102,106
04F26:  CLRF   x07
04F28:  MOVFF  104,108
04F2C:  MOVLW  0F
04F2E:  MOVWF  x09
04F30:  MOVLW  01
04F32:  MOVWF  x0A
04F34:  MOVFF  105,10B
04F38:  MOVLB  0
04F3A:  RCALL  4C7E
....................     delay_ms(2); 
04F3C:  MOVLW  02
04F3E:  MOVLB  1
04F40:  MOVWF  x13
04F42:  MOVLB  0
04F44:  CALL   25DE
....................   } 
04F48:  INCF   xFE,F
04F4A:  BRA    4F08
....................   xstart=xstart+4;xend=xend+4; 
04F4C:  MOVLW  04
04F4E:  MOVLB  1
04F50:  ADDWF  x02,F
04F52:  ADDWF  x03,F
.................... } 
04F54:  MOVLB  0
04F56:  INCF   xFF,F
04F58:  BRA    4F00
.................... clear_display(0); 
04F5A:  MOVLB  1
04F5C:  CLRF   x0A
04F5E:  MOVLB  0
04F60:  CALL   1E90
.................... xstart=0;xend=3; 
04F64:  MOVLB  1
04F66:  CLRF   x02
04F68:  MOVLW  03
04F6A:  MOVWF  x03
.................... for (w=0;w<4;w++) 
04F6C:  MOVLB  0
04F6E:  CLRF   xFF
04F70:  MOVF   xFF,W
04F72:  SUBLW  03
04F74:  BNC   4FBC
.................... { 
....................   for (i=0;i<101;i++) 
04F76:  CLRF   xFE
04F78:  MOVF   xFE,W
04F7A:  SUBLW  64
04F7C:  BNC   4FAE
....................   { 
....................     Bargraph(0,xstart,31,xend-1,0,i); 
04F7E:  MOVLW  01
04F80:  MOVLB  1
04F82:  SUBWF  x03,W
04F84:  MOVWF  x04
04F86:  CLRF   x06
04F88:  MOVFF  102,107
04F8C:  MOVLW  1F
04F8E:  MOVWF  x08
04F90:  MOVFF  104,109
04F94:  CLRF   x0A
04F96:  MOVFF  FE,10B
04F9A:  MOVLB  0
04F9C:  RCALL  4C7E
....................     delay_ms(2); 
04F9E:  MOVLW  02
04FA0:  MOVLB  1
04FA2:  MOVWF  x13
04FA4:  MOVLB  0
04FA6:  CALL   25DE
....................   } 
04FAA:  INCF   xFE,F
04FAC:  BRA    4F78
....................   xstart=xstart+4;xend=xend+4; 
04FAE:  MOVLW  04
04FB0:  MOVLB  1
04FB2:  ADDWF  x02,F
04FB4:  ADDWF  x03,F
.................... } 
04FB6:  MOVLB  0
04FB8:  INCF   xFF,F
04FBA:  BRA    4F70
.................... xstart=0;xend=3; 
04FBC:  MOVLB  1
04FBE:  CLRF   x02
04FC0:  MOVLW  03
04FC2:  MOVWF  x03
.................... for (w=0;w<4;w++) 
04FC4:  MOVLB  0
04FC6:  CLRF   xFF
04FC8:  MOVF   xFF,W
04FCA:  SUBLW  03
04FCC:  BNC   5020
.................... { 
....................   for (i=0;i<101;i++) 
04FCE:  CLRF   xFE
04FD0:  MOVF   xFE,W
04FD2:  SUBLW  64
04FD4:  BNC   5012
....................   { 
....................     Bargraph(0,xstart,31,xend-1,0,100-i); 
04FD6:  MOVLW  01
04FD8:  MOVLB  1
04FDA:  SUBWF  x03,W
04FDC:  MOVWF  x04
04FDE:  MOVLW  64
04FE0:  BSF    FD8.0
04FE2:  MOVLB  0
04FE4:  SUBFWB xFE,W
04FE6:  MOVLB  1
04FE8:  MOVWF  x05
04FEA:  CLRF   x06
04FEC:  MOVFF  102,107
04FF0:  MOVLW  1F
04FF2:  MOVWF  x08
04FF4:  MOVFF  104,109
04FF8:  CLRF   x0A
04FFA:  MOVFF  105,10B
04FFE:  MOVLB  0
05000:  RCALL  4C7E
....................     delay_ms(2); 
05002:  MOVLW  02
05004:  MOVLB  1
05006:  MOVWF  x13
05008:  MOVLB  0
0500A:  CALL   25DE
....................   } 
0500E:  INCF   xFE,F
05010:  BRA    4FD0
....................   xstart=xstart+4;xend=xend+4; 
05012:  MOVLW  04
05014:  MOVLB  1
05016:  ADDWF  x02,F
05018:  ADDWF  x03,F
.................... } 
0501A:  MOVLB  0
0501C:  INCF   xFF,F
0501E:  BRA    4FC8
.................... clear_display(0); 
05020:  MOVLB  1
05022:  CLRF   x0A
05024:  MOVLB  0
05026:  CALL   1E90
.................... for(w=0;w<2;w++) 
0502A:  CLRF   xFF
0502C:  MOVF   xFF,W
0502E:  SUBLW  01
05030:  BNC   50A2
.................... { 
....................   for(i=0;i<101;i++) 
05032:  CLRF   xFE
05034:  MOVF   xFE,W
05036:  SUBLW  64
05038:  BNC   5064
....................   { 
....................     Bargraph(0,0,31,15,1,i); 
0503A:  MOVLB  1
0503C:  CLRF   x06
0503E:  CLRF   x07
05040:  MOVLW  1F
05042:  MOVWF  x08
05044:  MOVLW  0F
05046:  MOVWF  x09
05048:  MOVLW  01
0504A:  MOVWF  x0A
0504C:  MOVFF  FE,10B
05050:  MOVLB  0
05052:  RCALL  4C7E
....................     delay_ms(1); 
05054:  MOVLW  01
05056:  MOVLB  1
05058:  MOVWF  x13
0505A:  MOVLB  0
0505C:  CALL   25DE
....................   } 
05060:  INCF   xFE,F
05062:  BRA    5034
....................   for(i=0;i<101;i++) 
05064:  CLRF   xFE
05066:  MOVF   xFE,W
05068:  SUBLW  64
0506A:  BNC   509E
....................   { 
....................     Bargraph(0,0,31,15,1,100-i); 
0506C:  MOVLW  64
0506E:  BSF    FD8.0
05070:  SUBFWB xFE,W
05072:  MOVLB  1
05074:  MOVWF  x04
05076:  CLRF   x06
05078:  CLRF   x07
0507A:  MOVLW  1F
0507C:  MOVWF  x08
0507E:  MOVLW  0F
05080:  MOVWF  x09
05082:  MOVLW  01
05084:  MOVWF  x0A
05086:  MOVFF  104,10B
0508A:  MOVLB  0
0508C:  RCALL  4C7E
....................     delay_ms(1); 
0508E:  MOVLW  01
05090:  MOVLB  1
05092:  MOVWF  x13
05094:  MOVLB  0
05096:  CALL   25DE
....................   } 
0509A:  INCF   xFE,F
0509C:  BRA    5066
.................... } 
0509E:  INCF   xFF,F
050A0:  BRA    502C
.................... clear_display(0); 
050A2:  MOVLB  1
050A4:  CLRF   x0A
050A6:  MOVLB  0
050A8:  CALL   1E90
.................... for(w=0;w<2;w++) 
050AC:  CLRF   xFF
050AE:  MOVF   xFF,W
050B0:  SUBLW  01
050B2:  BNC   512A
.................... { 
....................   for(i=0;i<101;i++) 
050B4:  CLRF   xFE
050B6:  MOVF   xFE,W
050B8:  SUBLW  64
050BA:  BNC   50E4
....................   { 
....................     Bargraph(0,0,31,15,0,i); 
050BC:  MOVLB  1
050BE:  CLRF   x06
050C0:  CLRF   x07
050C2:  MOVLW  1F
050C4:  MOVWF  x08
050C6:  MOVLW  0F
050C8:  MOVWF  x09
050CA:  CLRF   x0A
050CC:  MOVFF  FE,10B
050D0:  MOVLB  0
050D2:  RCALL  4C7E
....................     delay_ms(1); 
050D4:  MOVLW  01
050D6:  MOVLB  1
050D8:  MOVWF  x13
050DA:  MOVLB  0
050DC:  CALL   25DE
....................   } 
050E0:  INCF   xFE,F
050E2:  BRA    50B6
....................   for(i=0;i<101;i++) 
050E4:  CLRF   xFE
050E6:  MOVF   xFE,W
050E8:  SUBLW  64
050EA:  BNC   511C
....................   { 
....................     Bargraph(0,0,31,15,0,100-i); 
050EC:  MOVLW  64
050EE:  BSF    FD8.0
050F0:  SUBFWB xFE,W
050F2:  MOVLB  1
050F4:  MOVWF  x04
050F6:  CLRF   x06
050F8:  CLRF   x07
050FA:  MOVLW  1F
050FC:  MOVWF  x08
050FE:  MOVLW  0F
05100:  MOVWF  x09
05102:  CLRF   x0A
05104:  MOVFF  104,10B
05108:  MOVLB  0
0510A:  RCALL  4C7E
....................     delay_ms(1); 
0510C:  MOVLW  01
0510E:  MOVLB  1
05110:  MOVWF  x13
05112:  MOVLB  0
05114:  CALL   25DE
....................   } 
05118:  INCF   xFE,F
0511A:  BRA    50E6
....................  clear_display(0); 
0511C:  MOVLB  1
0511E:  CLRF   x0A
05120:  MOVLB  0
05122:  CALL   1E90
.................... } 
05126:  INCF   xFF,F
05128:  BRA    50AE
....................  
.................... } 
0512A:  GOTO   5306 (RETURN)

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 0E18   PUT NOBROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
